//# 1 "app.bc.runtime.js"
// Generated by js_of_ocaml 3.6.0
(function(joo_global_object)
   {"use strict";
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    var caml_global_data=[0];
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return caml_utf16_of_utf8(this.c)
        }};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_expm1_float(x)
     {var y=Math.exp(x),z=y - 1;
      return Math.abs(x) > 1?z:z == 0?x:x * z / Math.log(y)}
    function caml_jsstring_of_string(s){return s.toString()}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_bytes_of_string(s){return s}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_ml_bytes_length(s){return s.l}
    function caml_convert_bytes_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))
       this.content[name] = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       this.content[name] = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         this.content[name] = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           this.content[name] = new MlFakeFile(bytes)}
         else
          caml_raise_sys_error
           (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var
       a=new (joo_global_object.Uint8Array)(1),
       buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try
       {return this.fs.existsSync(this.nm(name))?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.readdir
    =
    function(name)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.rename
    =
    function(o,n)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_sys_is_directory(name)
     {var root=resolve_fs_device(name),a=root.device.is_dir(root.rest);
      return a?1:0}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=caml_jsstring_of_string(name);
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_string_of_jsstring(g.process.env[n]);
      if
       (joo_global_object.jsoo_static_env
        &&
        joo_global_object.jsoo_static_env[n])
       return caml_string_of_jsstring(joo_global_object.jsoo_static_env[n]);
      caml_raise_not_found()}
    function shift_right_nat(nat1,ofs1,len1,nat2,ofs2,nbits)
     {if(nbits == 0){nat2.data[ofs2] = 0;return 0}
      var wrap=0;
      for(var i=len1 - 1;i >= 0;i--)
       {var a=nat1.data[ofs1 + i] >>> 0;
        nat1.data[ofs1 + i] = a >>> nbits | wrap;
        wrap = a << 32 - nbits}
      nat2.data[ofs2] = wrap;
      return 0}
    var caml_named_values={};
    function caml_named_value(nm){return caml_named_values[nm]}
    var caml_gr_state;
    function caml_gr_state_get()
     {if(caml_gr_state)return caml_gr_state;
      throw [0,
             caml_named_value("Graphics.Graphic_failure"),
             caml_string_of_jsbytes("Not initialized")]}
    function caml_gr_point_color(x,y)
     {var
       s=caml_gr_state_get(),
       im=s.context.getImageData(x,s.height - y,1,1),
       d=im.data;
      return (d[0] << 16) + (d[1] << 8) + d[2]}
    var MlObjectTable;
    if(typeof joo_global_object.WeakMap === "undefined")
     MlObjectTable
     =
     function()
       {function NaiveLookup(objs){this.objs = objs}
        NaiveLookup.prototype.get
        =
        function(v)
         {for(var i=0;i < this.objs.length;i++)if(this.objs[i] === v)return i};
        NaiveLookup.prototype.set = function(){};
        return function()
         {this.objs = [];this.lookup = new NaiveLookup(this.objs)}}
      ();
    else
     MlObjectTable
     =
     function()
      {this.objs = [];this.lookup = new (joo_global_object.WeakMap)()};
    MlObjectTable.prototype.store
    =
    function(v){this.lookup.set(v,this.objs.length);this.objs.push(v)};
    MlObjectTable.prototype.recall
    =
    function(v)
     {var i=this.lookup.get(v);
      return i === undefined?undefined:this.objs.length - i};
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_sys_rename(o,n)
     {var o_root=resolve_fs_device(o),n_root=resolve_fs_device(n);
      if(o_root.device != n_root.device)
       caml_failwith
        ("caml_sys_rename: cannot move file between two filesystem");
      if(! o_root.device.rename)
       caml_failwith("caml_sys_rename: no implemented");
      o_root.device.rename(o_root.rest,n_root.rest)}
    function caml_log10_float(x){return Math.LOG10E * Math.log(x)}
    var caml_runtime_warnings=0;
    function caml_ml_enable_runtime_warnings(bool)
     {caml_runtime_warnings = bool;return 0}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_string_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    var caml_ml_channels=new Array();
    function caml_ml_may_refill_input(chanid)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill == null)return;
      if(chan.file.length() != chan.offset)return;
      caml_ml_refill_input(chan)}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_ml_input_scan_line(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_may_refill_input(chanid);
      var p=chan.offset,len=chan.file.length();
      if(p >= len)return 0;
      while(true)
       {if(p >= len)return - (p - chan.offset);
        if(chan.file.read_one(p) == 10)return p - chan.offset + 1;
        p++}}
    function caml_gc_minor(){return 0}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_ba_uint8_get64(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 7 >= ba.data.length)caml_array_bound_error();
      var
       b1=ba.get(ofs + 0),
       b2=ba.get(ofs + 1),
       b3=ba.get(ofs + 2),
       b4=ba.get(ofs + 3),
       b5=ba.get(ofs + 4),
       b6=ba.get(ofs + 5),
       b7=ba.get(ofs + 6),
       b8=ba.get(ofs + 7);
      return caml_int64_of_bytes([b8,b7,b6,b5,b4,b3,b2,b1])}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_ba_num_dims(ba){return ba.dims.length}
    function caml_return_exn_constant(tag){return tag}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    function caml_set_parser_trace(){return 0}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function unix_gettimeofday(){return new Date().getTime() / 1000}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function num_digits_nat(nat,ofs,len)
     {for(var i=len - 1;i >= 0;i--)if(nat.data[ofs + i] != 0)return i + 1;
      return 1}
    function caml_hash_nat(x)
     {var len=num_digits_nat(x,0,x.data.length),h=0;
      for(var i=0;i < len;i++)h = caml_hash_mix_int(h,x.data[i]);
      return h}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_js_wrap_callback_arguments(f)
     {return function()
       {var len=arguments.length,args=new Array(len);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_call_gen(f,[args])}}
    function caml_sys_chdir(dir)
     {var root=resolve_fs_device(dir);
      if(root.device.exists(root.rest))
       {if(root.rest)
         caml_current_dir = root.path + root.rest + "/";
        else
         caml_current_dir = root.path;
        return 0}
      else
       caml_raise_no_such_file(dir)}
    function caml_gc_counters(){return [254,0,0,0]}
    function caml_gr_synchronize()
     {caml_failwith("caml_gr_synchronize not Implemented")}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = "_bigarray";
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_ba_deserialize(reader,sz)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:caml_ba_deserialize,
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_greaterthan(x,y){return + (caml_compare_val(x,y,false) > 0)}
    function div_helper(a,b,c)
     {var
       x=a * 65536 + (b >>> 16),
       y=Math.floor(x / c) * 65536,
       z=x % c * 65536,
       w=z + (b & 0x0000FFFF);
      return [y + Math.floor(w / c),w % c]}
    function div_digit_nat(natq,ofsq,natr,ofsr,nat1,ofs1,len,nat2,ofs2)
     {var rem=nat1.data[ofs1 + len - 1] >>> 0;
      for(var i=len - 2;i >= 0;i--)
       {var x=div_helper(rem,nat1.data[ofs1 + i] >>> 0,nat2.data[ofs2] >>> 0);
        natq.data[ofsq + i] = x[0];
        rem = x[1]}
      natr.data[ofsr] = rem;
      return 0}
    function num_leading_zero_bits_in_digit(nat,ofs)
     {var a=nat.data[ofs],b=0;
      if(a & 0xFFFF0000){b += 16;a >>>= 16}
      if(a & 0xFF00){b += 8;a >>>= 8}
      if(a & 0xF0){b += 4;a >>>= 4}
      if(a & 12){b += 2;a >>>= 2}
      if(a & 2){b += 1;a >>>= 1}
      if(a & 1)b += 1;
      return 32 - b}
    function shift_left_nat(nat1,ofs1,len1,nat2,ofs2,nbits)
     {if(nbits == 0){nat2.data[ofs2] = 0;return 0}
      var wrap=0;
      for(var i=0;i < len1;i++)
       {var a=nat1.data[ofs1 + i] >>> 0;
        nat1.data[ofs1 + i] = a << nbits | wrap;
        wrap = a >>> 32 - nbits}
      nat2.data[ofs2] = wrap;
      return 0}
    function MlNat(x)
     {this.data = new (joo_global_object.Int32Array)(x);
      this.length = this.data.length + 2}
    MlNat.prototype.caml_custom = "_nat";
    function create_nat(size)
     {var arr=new MlNat(size);
      for(var i=0;i < size;i++)arr.data[i] = - 1;
      return arr}
    function set_to_zero_nat(nat,ofs,len)
     {for(var i=0;i < len;i++)nat.data[ofs + i] = 0;return 0}
    function incr_nat(nat,ofs,len,carry_in)
     {var carry=carry_in;
      for(var i=0;i < len;i++)
       {var x=(nat.data[ofs + i] >>> 0) + carry;
        nat.data[ofs + i] = x | 0;
        if(x == x >>> 0){carry = 0;break}else carry = 1}
      return carry}
    function add_nat(nat1,ofs1,len1,nat2,ofs2,len2,carry_in)
     {var carry=carry_in;
      for(var i=0;i < len2;i++)
       {var
         x=
          (nat1.data[ofs1 + i] >>> 0) + (nat2.data[ofs2 + i] >>> 0) + carry;
        nat1.data[ofs1 + i] = x;
        if(x == x >>> 0)carry = 0;else carry = 1}
      return incr_nat(nat1,ofs1 + len2,len1 - len2,carry)}
    function nat_of_array(l){return new MlNat(l)}
    function mult_digit_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat3,ofs3)
     {var carry=0,a=nat3.data[ofs3] >>> 0;
      for(var i=0;i < len2;i++)
       {var
         x1=
          (nat1.data[ofs1 + i] >>> 0)
          +
          (nat2.data[ofs2 + i] >>> 0)
          *
          (a & 0x0000FFFF)
          +
          carry,
         x2=(nat2.data[ofs2 + i] >>> 0) * (a >>> 16);
        carry = Math.floor(x2 / 65536);
        var x3=x1 + x2 % 65536 * 65536;
        nat1.data[ofs1 + i] = x3;
        carry += Math.floor(x3 / 4294967296)}
      return len2 < len1 && carry
              ?add_nat
                (nat1,ofs1 + len2,len1 - len2,nat_of_array([carry]),0,1,0)
              :carry}
    function decr_nat(nat,ofs,len,carry_in)
     {var borrow=carry_in == 1?0:1;
      for(var i=0;i < len;i++)
       {var x=(nat.data[ofs + i] >>> 0) - borrow;
        nat.data[ofs + i] = x;
        if(x >= 0){borrow = 0;break}else borrow = 1}
      return borrow == 1?0:1}
    function sub_nat(nat1,ofs1,len1,nat2,ofs2,len2,carry_in)
     {var borrow=carry_in == 1?0:1;
      for(var i=0;i < len2;i++)
       {var
         x=
          (nat1.data[ofs1 + i] >>> 0) - (nat2.data[ofs2 + i] >>> 0) - borrow;
        nat1.data[ofs1 + i] = x;
        if(x >= 0)borrow = 0;else borrow = 1}
      return decr_nat(nat1,ofs1 + len2,len1 - len2,borrow == 1?0:1)}
    function compare_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {var a=num_digits_nat(nat1,ofs1,len1),b=num_digits_nat(nat2,ofs2,len2);
      if(a > b)return 1;
      if(a < b)return - 1;
      for(var i=len1 - 1;i >= 0;i--)
       {if(nat1.data[ofs1 + i] >>> 0 > nat2.data[ofs2 + i] >>> 0)return 1;
        if(nat1.data[ofs1 + i] >>> 0 < nat2.data[ofs2 + i] >>> 0)return - 1}
      return 0}
    function div_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {if(len2 == 1)
       {div_digit_nat(nat1,ofs1 + 1,nat1,ofs1,nat1,ofs1,len1,nat2,ofs2);
        return 0}
      var s=num_leading_zero_bits_in_digit(nat2,ofs2 + len2 - 1);
      shift_left_nat(nat2,ofs2,len2,nat_of_array([0]),0,s);
      shift_left_nat(nat1,ofs1,len1,nat_of_array([0]),0,s);
      var d=(nat2.data[ofs2 + len2 - 1] >>> 0) + 1,a=create_nat(len2 + 1);
      for(var i=len1 - 1;i >= len2;i--)
       {var
         quo=
          d == 4294967296
           ?nat1.data[ofs1 + i] >>> 0
           :div_helper
              (nat1.data[ofs1 + i] >>> 0,nat1.data[ofs1 + i - 1] >>> 0,d)
             [0];
        set_to_zero_nat(a,0,len2 + 1);
        mult_digit_nat(a,0,len2 + 1,nat2,ofs2,len2,nat_of_array([quo]),0);
        sub_nat(nat1,ofs1 + i - len2,len2 + 1,a,0,len2 + 1,1);
        while
         (nat1.data[ofs1 + i]
          !=
          0
          ||
          compare_nat(nat1,ofs1 + i - len2,len2,nat2,ofs2,len2)
          >=
          0)
         {quo = quo + 1;
          sub_nat(nat1,ofs1 + i - len2,len2 + 1,nat2,ofs2,len2,1)}
        nat1.data[ofs1 + i] = quo}
      shift_right_nat(nat1,ofs1,len2,nat_of_array([0]),0,s);
      shift_right_nat(nat2,ofs2,len2,nat_of_array([0]),0,s);
      return 0}
    function caml_ba_blit(src,dst)
     {if(dst.dims.length != src.dims.length)
       caml_invalid_argument("Bigarray.blit: dimension mismatch");
      for(var i=0;i < dst.dims.length;i++)
       if(dst.dims[i] != src.dims[i])
        caml_invalid_argument("Bigarray.blit: dimension mismatch");
      dst.data.set(src.data);
      return 0}
    function is_digit_int(nat,ofs){if(nat.data[ofs] >= 0)return 1;return 0}
    function caml_int64_div(x,y){return x.div(y)}
    function caml_js_html_entities(s)
     {var entity=/^&#?[0-9a-zA-Z]+;$/;
      if(s.match(entity))
       {var str,temp=document.createElement("p");
        temp.innerHTML = s;
        str = temp.textContent || temp.innerText;
        temp = null;
        return str}
      else
       caml_failwith("Invalid entity " + s)}
    function caml_string_unsafe_set(s,i,c)
     {return caml_bytes_unsafe_set(s,i,c)}
    function caml_int64_of_float(x)
     {if(x < 0)x = Math.ceil(x);
      return new
              MlInt64
              (x & 0xffffff,
               Math.floor(x * caml_int64_offset) & 0xffffff,
               Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff)}
    function caml_ml_channel_size_64(chanid)
     {var chan=caml_ml_channels[chanid];
      return caml_int64_of_float(chan.file.length())}
    function caml_ba_set_2(ba,i0,i1,v){ba.set(ba.offset([i0,i1]),v);return 0}
    var
     caml_argv=
      function()
        {var g=joo_global_object,main="a.out",args=[];
         if(g.process && g.process.argv && g.process.argv.length > 1)
          {var argv=g.process.argv;main = argv[1];args = argv.slice(2)}
         var p=caml_string_of_jsstring(main),args2=[0,p];
         for(var i=0;i < args.length;i++)
          args2.push(caml_string_of_jsstring(args[i]));
         return args2}
       (),
     caml_executable_name=caml_argv[1];
    function caml_js_eval_string(s){return eval(caml_jsstring_of_string(s))}
    function caml_CamlinternalMod_init_mod(loc,shape)
     {function undef_module(_x)
       {caml_raise_with_arg(caml_global_data.Undefined_recursive_module,loc)}
      function loop(shape,struct,idx)
       {if(typeof shape === "number")
         switch(shape)
          {case 0:struct[idx] = {fun:undef_module};break;
           case 1:struct[idx] = [246,undef_module];break;
           default:struct[idx] = []}
        else
         switch(shape[0])
          {case 0:
            struct[idx] = [0];
            for(var i=1;i < shape[1].length;i++)
             loop(shape[1][i],struct[idx],i);
            break;
           default:struct[idx] = shape[1]}}
      var res=[];
      loop(shape,res,0);
      return res[0]}
    function serialize_nat(writer,nat,sz)
     {var len=nat.data.length;
      writer.write(32,len);
      for(var i=0;i < len;i++)writer.write(32,nat.data[i]);
      sz[0] = len * 4;
      sz[1] = len * 8}
    function caml_memprof_set(_control){return 0}
    function caml_sys_exit(code)
     {var g=joo_global_object;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_js_from_array(a){return a.slice(1)}
    function caml_ba_reshape(ba,vind)
     {vind = caml_js_from_array(vind);
      var new_dim=[],num_dims=vind.length;
      if(num_dims < 0 || num_dims > 16)
       caml_invalid_argument("Bigarray.reshape: bad number of dimensions");
      var num_elts=1;
      for(var i=0;i < num_dims;i++)
       {new_dim[i] = vind[i];
        if(new_dim[i] < 0)
         caml_invalid_argument("Bigarray.reshape: negative dimension");
        num_elts = num_elts * new_dim[i]}
      var size=caml_ba_get_size(ba.dims);
      if(num_elts != size)
       caml_invalid_argument("Bigarray.reshape: size mismatch");
      return caml_ba_create_unsafe(ba.kind,ba.layout,new_dim,ba.data)}
    var caml_oo_last_id=0;
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_gr_fill_rect(x,y,w,h)
     {var s=caml_gr_state_get();
      s.context.fillRect(x,s.height - y,w,- h);
      return 0}
    function caml_bigstring_blit_string_to_ba(str1,pos1,ba2,pos2,len)
     {if(12 != ba2.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs2=ba2.offset(pos2);
      if(pos1 + len > caml_ml_string_length(str1))caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=caml_array_of_string(str1).slice(pos1,pos1 + len);
      ba2.data.set(slice,ofs2);
      return 0}
    function caml_gr_set_window_title(name)
     {var s=caml_gr_state_get();
      s.title = name;
      var jsname=caml_jsstring_of_string(name);
      if(s.set_title)s.set_title(jsname);
      return 0}
    function caml_get_global_data(){return caml_global_data}
    function caml_int64_shift_right_unsigned(x,s)
     {return x.shift_right_unsigned(s)}
    function caml_ba_uint8_get16(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 1 >= ba.data.length)caml_array_bound_error();
      var b1=ba.get(ofs),b2=ba.get(ofs + 1);
      return b1 | b2 << 8}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_int64_to_float(x){return x.toFloat()}
    function caml_ba_get_1(ba,i0){return ba.get(ba.offset(i0))}
    function caml_bigstring_memcmp(s1,pos1,s2,pos2,len)
     {for(var i=0;i < len;i++)
       {var a=caml_ba_get_1(s1,pos1 + i),b=caml_ba_get_1(s2,pos2 + i);
        if(a < b)return - 1;
        if(a > b)return 1}
      return 0}
    function caml_new_string(s){return caml_string_of_jsbytes(s)}
    function caml_ba_uint8_get32(ba,i0)
     {var ofs=ba.offset(i0);
      if(ofs + 3 >= ba.data.length)caml_array_bound_error();
      var
       b1=ba.get(ofs + 0),
       b2=ba.get(ofs + 1),
       b3=ba.get(ofs + 2),
       b4=ba.get(ofs + 3);
      return b1 << 0 | b2 << 8 | b3 << 16 | b4 << 24}
    function caml_raw_backtrace_length(){return 0}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_gr_clear_graph()
     {var s=caml_gr_state_get();
      s.canvas.width = s.width;
      s.canvas.height = s.height;
      return 0}
    function bigstring_to_array_buffer(bs){return bs.data.buffer}
    function lxor_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] ^= nat2.data[ofs2];return 0}
    function caml_final_release(){return 0}
    function caml_js_to_array(a)
     {var len=a.length,b=new Array(len + 1);
      b[0] = 0;
      for(var i=0;i < len;i++)b[i + 1] = a[i];
      return b}
    function caml_gr_plot(x,y)
     {var
       s=caml_gr_state_get(),
       im=s.context.createImageData(1,1),
       d=im.data,
       color=s.color;
      d[0] = color >> 16 & 0xff;
      d[1] = color >> 8 & 0xff,d[2] = color >> 0 & 0xff;
      d[3] = 0xFF;
      s.x = x;
      s.y = y;
      s.context.putImageData(im,x,s.height - y);
      return 0}
    function caml_bytes_set64(s,i,i64)
     {if(i >>> 0 >= s.l - 7)caml_bytes_bound_error();
      var a=caml_int64_to_bytes(i64);
      for(var j=0;j < 8;j++)caml_bytes_unsafe_set(s,i + 7 - j,a[j]);
      return 0}
    function caml_bytes_set16(s,i,i16)
     {if(i >>> 0 >= s.l - 1)caml_bytes_bound_error();
      var b2=0xFF & i16 >> 8,b1=0xFF & i16;
      caml_bytes_unsafe_set(s,i + 0,b1);
      caml_bytes_unsafe_set(s,i + 1,b2);
      return 0}
    function caml_string_set16(s,i,i16){return caml_bytes_set16(s,i,i16)}
    function caml_int64_bswap(x)
     {var y=caml_int64_to_bytes(x);
      return caml_int64_of_bytes([y[7],y[6],y[5],y[4],y[3],y[2],y[1],y[0]])}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_string=caml_fill_bytes;
    function caml_gc_major(){return 0}
    function caml_lex_array(s)
     {s = caml_jsbytes_of_string(s);
      var l=s.length / 2,a=new Array(l);
      for(var i=0;i < l;i++)
       a[i]
       =
       (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8)
       <<
       16
       >>
       16;
      return a}
    function caml_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      var c,state=start_state,buffer=caml_array_of_bytes(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)return - base - 1;
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         if(c == 256)lexbuf[lex_eof_reached] = 0}}
    function caml_sys_file_exists(name)
     {var root=resolve_fs_device(name);return root.device.exists(root.rest)}
    function caml_convert_raw_backtrace_slot()
     {caml_failwith("caml_convert_raw_backtrace_slot")}
    function caml_array_sub(a,i,len)
     {var a2=new Array(len + 1);
      a2[0] = 0;
      for(var i2=1,i1=i + 1;i2 <= len;i2++,i1++)a2[i2] = a[i1];
      return a2}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_gr_size_x(){var s=caml_gr_state_get();return s.width}
    function caml_sys_const_ostype_cygwin(){return 0}
    function caml_cosh_float(x){return (Math.exp(x) + Math.exp(- x)) / 2}
    var caml_ephe_key_offset=3;
    function caml_weak_check(x,i)
     {return x[caml_ephe_key_offset + i]
              !==
              undefined
              &&
              x[caml_ephe_key_offset + i]
              !==
              0
              ?1
              :0}
    var caml_ephe_check_key=caml_weak_check;
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h = caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
      return h}
    function caml_gr_text_size(txt)
     {var
       s=caml_gr_state_get(),
       w=s.context.measureText(caml_jsstring_of_string(txt)).width;
      return [0,w,s.text_size]}
    function caml_lex_run_mem(s,i,mem,curr_pos)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 0xff)return;
        var src=s.charCodeAt(i);
        i++;
        if(src == 0xff)
         mem[dst + 1] = curr_pos;
        else
         mem[dst + 1] = mem[src + 1]}}
    function caml_lex_run_tag(s,i,mem)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 0xff)return;
        var src=s.charCodeAt(i);
        i++;
        if(src == 0xff)mem[dst + 1] = - 1;else mem[dst + 1] = mem[src + 1]}}
    function caml_new_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_mem=10,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5,
       lex_base_code=6,
       lex_backtrk_code=7,
       lex_default_code=8,
       lex_trans_code=9,
       lex_check_code=10,
       lex_code=11;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      if(! tbl.lex_default_code)
       {tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
        tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
        tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
        tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
        tbl.lex_default_code = caml_lex_array(tbl[lex_default_code])}
      if(tbl.lex_code == null)
       tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
      var c,state=start_state,buffer=caml_array_of_bytes(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)
         {var pc_off=tbl.lex_base_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          return - base - 1}
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {var pc_off=tbl.lex_backtrk_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        var pstate=state;
        if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         {var base_code=tbl.lex_base_code[pstate],pc_off;
          if(tbl.lex_check_code[base_code + c] == pstate)
           pc_off = tbl.lex_trans_code[base_code + c];
          else
           pc_off = tbl.lex_default_code[pstate];
          if(pc_off > 0)
           caml_lex_run_mem
            (tbl.lex_code,pc_off,lexbuf[lex_mem],lexbuf[lex_curr_pos]);
          if(c == 256)lexbuf[lex_eof_reached] = 0}}}
    function caml_ba_uint8_set64(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 7 >= ba.data.length)caml_array_bound_error();
      var v=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)ba.set(ofs + i,v[7 - i]);
      return 0}
    function caml_sys_executable_name(a){return caml_executable_name}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_seek_out_64(chanid,pos)
     {caml_ml_flush(chanid);
      caml_ml_channels[chanid].offset = caml_int64_to_float(pos);
      return 0}
    function compare_nat_real(nat1,nat2)
     {return compare_nat(nat1,0,nat1.data.length,nat2,0,nat2.data.length)}
    function caml_gc_set(_control){return 0}
    function caml_js_get(o,f){return o[f]}
    function caml_gc_compaction(){return 0}
    function caml_weak_get(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_key");
      return x[caml_ephe_key_offset + i] === undefined
              ?0
              :x[caml_ephe_key_offset + i]}
    var caml_ephe_get_key=caml_weak_get;
    function caml_bigstring_blit_bytes_to_ba(str1,pos1,ba2,pos2,len)
     {if(12 != ba2.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs2=ba2.offset(pos2);
      if(pos1 + len > caml_ml_bytes_length(str1))caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=caml_array_of_bytes(str1).slice(pos1,pos1 + len);
      ba2.data.set(slice,ofs2);
      return 0}
    function win_cleanup(){}
    function caml_sys_close(fd){delete caml_global_data.fds[fd];return 0}
    function caml_ml_close_channel(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_flush(chanid);
      chan.opened = false;
      chan.file.close();
      caml_sys_close(chan.fd);
      return 0}
    function caml_exn_with_js_backtrace(exn,force)
     {if(! exn.js_error || force || exn[0] == 248)
       exn.js_error
       =
       new (joo_global_object.Error)("Js exception containing backtrace");
      return exn}
    function caml_sys_isatty(_chan){return 0}
    function is_digit_zero(nat,ofs){if(nat.data[ofs] == 0)return 1;return 0}
    function unix_inet_addr_of_string(){return 0}
    function caml_js_set(o,f,v){o[f] = v;return 0}
    function caml_array_get(array,index)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      return array[index + 1]}
    function caml_spacetime_only_works_for_native_code()
     {caml_failwith("Spacetime profiling only works for native code")}
    function caml_int64_sub(x,y){return x.sub(y)}
    function caml_ml_seek_in_64(chanid,pos)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill != null)caml_raise_sys_error("Illegal seek");
      chan.offset = caml_int64_to_float(pos);
      return 0}
    function caml_int64_shift_left(x,s){return x.shift_left(s)}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_sys_const_int_size(){return 32}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_is_js(){return 1}
    function caml_ba_dim(ba,i)
     {if(i < 0 || i >= ba.dims.length)caml_invalid_argument("Bigarray.dim");
      return ba.dims[i]}
    function caml_ba_dim_1(ba){return caml_ba_dim(ba,0)}
    function unix_localtime(t)
     {var
       d=new Date(t * 1000),
       d_num=d.getTime(),
       januaryfirst=new Date(d.getFullYear(),0,1).getTime(),
       doy=Math.floor((d_num - januaryfirst) / 86400000),
       jan=new Date(d.getFullYear(),0,1),
       jul=new Date(d.getFullYear(),6,1),
       stdTimezoneOffset=
        Math.max(jan.getTimezoneOffset(),jul.getTimezoneOffset());
      return [0,
              d.getSeconds(),
              d.getMinutes(),
              d.getHours(),
              d.getDate(),
              d.getMonth(),
              d.getFullYear() - 1900,
              d.getDay(),
              doy,
              d.getTimezoneOffset() < stdTimezoneOffset | 0]}
    function caml_js_meth_call(o,f,args)
     {return o[caml_jsstring_of_string(f)].apply(o,caml_js_from_array(args))}
    function caml_weak_create(n)
     {if(n < 0)caml_invalid_argument("Weak.create");
      var x=[251,"caml_ephe_list_head"];
      x.length = caml_ephe_key_offset + n;
      return x}
    var caml_ephe_create=caml_weak_create;
    function caml_js_to_byte_string(s){return caml_string_of_jsbytes(s)}
    function unix_mktime(tm)
     {var
       d=new Date(tm[6] + 1900,tm[5],tm[4],tm[3],tm[2],tm[1]).getTime(),
       t=Math.floor(d / 1000),
       tm2=unix_localtime(t);
      return [0,t,tm2]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_bytes_get64(s,i)
     {if(i >>> 0 >= s.l - 7)caml_bytes_bound_error();
      var a=new Array(8);
      for(var j=0;j < 8;j++)a[7 - j] = caml_bytes_unsafe_get(s,i + j);
      return caml_int64_of_bytes(a)}
    function caml_weak_set(x,i,v)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.set");
      x[caml_ephe_key_offset + i] = v;
      return 0}
    function caml_sys_remove(name)
     {var root=resolve_fs_device(name),ok=root.device.unlink(root.rest);
      if(ok == 0)caml_raise_no_such_file(name);
      return 0}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get32(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 3)caml_string_bound_error();
      var
       b1=caml_string_unsafe_get(s,i),
       b2=caml_string_unsafe_get(s,i + 1),
       b3=caml_string_unsafe_get(s,i + 2),
       b4=caml_string_unsafe_get(s,i + 3);
      return b4 << 24 | b3 << 16 | b2 << 8 | b1}
    function caml_hypot_float(x,y)
     {var
       x=Math.abs(x),
       y=Math.abs(y),
       a=Math.max(x,y),
       b=Math.min(x,y) / (a?a:1);
      return a * Math.sqrt(1 + b * b)}
    function caml_js_call(f,o,args)
     {return f.apply(o,caml_js_from_array(args))}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_ephe_unset_key(x,i){return caml_weak_set(x,i,0)}
    function caml_hash_mix_bytes_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_jsbytes(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_bytes(h,v)
     {switch(v.t & 6)
       {default:caml_convert_string_to_bytes(v);case 0:
         h = caml_hash_mix_jsbytes(h,v.c);break;
        case 2:h = caml_hash_mix_bytes_arr(h,v.c)
        }
      return h}
    function caml_bytes_lessthan(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?1:0}
    function caml_gr_fill_poly(ar)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      s.context.moveTo(ar[1][1],s.height - ar[1][2]);
      for(var i=2;i < ar.length;i++)
       s.context.lineTo(ar[i][1],s.height - ar[i][2]);
      s.context.lineTo(ar[1][1],s.height - ar[1][2]);
      s.context.fill();
      return 0}
    function caml_gc_quick_stat(){return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
    function caml_raise_end_of_file()
     {caml_raise_constant(caml_global_data.End_of_file)}
    function caml_ml_input_int(chanid)
     {var chan=caml_ml_channels[chanid],file=chan.file;
      while(chan.offset + 3 >= file.length())
       {var l=caml_ml_refill_input(chan);if(l == 0)caml_raise_end_of_file()}
      var
       o=chan.offset,
       r=
        file.read_one(o)
        <<
        24
        |
        file.read_one(o + 1)
        <<
        16
        |
        file.read_one(o + 2)
        <<
        8
        |
        file.read_one(o + 3);
      chan.offset += 4;
      return r}
    function caml_gr_display_mode()
     {caml_failwith("caml_gr_display_mode not Implemented")}
    function nth_digit_nat(nat,ofs){return nat.data[ofs]}
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_sys_getcwd()
     {return caml_string_of_jsbytes(caml_current_dir)}
    function caml_sys_const_big_endian(){return 0}
    function caml_list_to_js_array(l)
     {var a=[];for(;l !== 0;l = l[2])a.push(l[1]);return a}
    var
     caml_legacy_custom_code=false,
     caml_output_val=
      function()
        {function Writer(){this.chunk = []}
         Writer.prototype
         =
         {chunk_idx:20,
          block_len:0,
          obj_counter:0,
          size_32:0,
          size_64:0,
          write:
          function(size,value)
           {for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xFF},
          write_at:
          function(pos,size,value)
           {var pos=pos;
            for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[pos++] = value >> i & 0xFF},
          write_code:
          function(size,code,value)
           {this.chunk[this.chunk_idx++] = code;
            for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xFF},
          write_shared:
          function(offset)
           {if(offset < 1 << 8)
             this.write_code(8,0x04,offset);
            else
             if(offset < 1 << 16)
              this.write_code(16,0x05,offset);
             else
              this.write_code(32,0x06,offset)},
          pos:function(){return this.chunk_idx},
          finalize:
          function()
           {this.block_len = this.chunk_idx - 20;
            this.chunk_idx = 0;
            this.write(32,0x8495A6BE);
            this.write(32,this.block_len);
            this.write(32,this.obj_counter);
            this.write(32,this.size_32);
            this.write(32,this.size_64);
            return this.chunk}};
         return function(v,flags)
          {flags = caml_list_to_js_array(flags);
           var
            no_sharing=flags.indexOf(0) !== - 1,
            closures=flags.indexOf(1) !== - 1;
           if(closures)
            joo_global_object.console.warn
             ("in caml_output_val: flag Marshal.Closures is not supported.");
           var
            writer=new Writer(),
            stack=[],
            intern_obj_table=no_sharing?null:new MlObjectTable();
           function memo(v)
            {if(no_sharing)return false;
             var existing_offset=intern_obj_table.recall(v);
             if(existing_offset)
              {writer.write_shared(existing_offset);return true}
             else
              {intern_obj_table.store(v);return false}}
           function extern_rec(v)
            {if(v.caml_custom)
              {if(memo(v))return;
               var
                name=v.caml_custom,
                ops=caml_custom_ops[name],
                sz_32_64=[0,0];
               if(! ops.serialize)
                caml_invalid_argument("output_value: abstract value (Custom)");
               if(caml_legacy_custom_code)
                {writer.write(8,0x12);
                 for(var i=0;i < name.length;i++)
                  writer.write(8,name.charCodeAt(i));
                 writer.write(8,0);
                 ops.serialize(writer,v,sz_32_64)}
               else
                if(ops.fixed_length == undefined)
                 {writer.write(8,0x18);
                  for(var i=0;i < name.length;i++)
                   writer.write(8,name.charCodeAt(i));
                  writer.write(8,0);
                  var header_pos=writer.pos();
                  for(var i=0;i < 12;i++)writer.write(8,0);
                  ops.serialize(writer,v,sz_32_64);
                  writer.write_at(header_pos,32,sz_32_64[0]);
                  writer.write_at(header_pos + 4,32,0);
                  writer.write_at(header_pos + 8,32,sz_32_64[1])}
                else
                 {writer.write(8,0x19);
                  for(var i=0;i < name.length;i++)
                   writer.write(8,name.charCodeAt(i));
                  writer.write(8,0);
                  var old_pos=writer.pos();
                  ops.serialize(writer,v,sz_32_64);
                  if(ops.fixed_length != writer.pos() - old_pos)
                   caml_failwith
                    ("output_value: incorrect fixed sizes specified by " + name)}
               writer.size_32 += 2 + (sz_32_64[0] + 3 >> 2);
               writer.size_64 += 2 + (sz_32_64[1] + 7 >> 3)}
             else
              if(v instanceof Array && v[0] === (v[0] | 0))
               {if(v[0] == 251)
                 caml_failwith("output_value: abstract value (Abstract)");
                if(v.length > 1 && memo(v))return;
                if(v[0] < 16 && v.length - 1 < 8)
                 writer.write(8,0x80 + v[0] + (v.length - 1 << 4));
                else
                 writer.write_code(32,0x08,v.length - 1 << 10 | v[0]);
                writer.size_32 += v.length;
                writer.size_64 += v.length;
                if(v.length > 1)stack.push(v,1)}
              else
               if(caml_is_ml_bytes(v))
                {if(! caml_is_ml_bytes(caml_string_of_jsbytes("")))
                  caml_failwith
                   ("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");
                 if(memo(v))return;
                 var len=caml_ml_bytes_length(v);
                 if(len < 0x20)
                  writer.write(8,0x20 + len);
                 else
                  if(len < 0x100)
                   writer.write_code(8,0x09,len);
                  else
                   writer.write_code(32,0x0A,len);
                 for(var i=0;i < len;i++)
                  writer.write(8,caml_bytes_unsafe_get(v,i));
                 writer.size_32 += 1 + ((len + 4) / 4 | 0);
                 writer.size_64 += 1 + ((len + 8) / 8 | 0)}
               else
                if(caml_is_ml_string(v))
                 {var len=caml_ml_string_length(v);
                  if(len < 0x20)
                   writer.write(8,0x20 + len);
                  else
                   if(len < 0x100)
                    writer.write_code(8,0x09,len);
                   else
                    writer.write_code(32,0x0A,len);
                  for(var i=0;i < len;i++)
                   writer.write(8,caml_string_unsafe_get(v,i));
                  writer.size_32 += 1 + ((len + 4) / 4 | 0);
                  writer.size_64 += 1 + ((len + 8) / 8 | 0)}
                else
                 if(v != (v | 0))
                  {var type_of_v=typeof v;
                   caml_failwith
                    ("output_value: abstract value (" + type_of_v + ")")}
                 else
                  if(v >= 0 && v < 0x40)
                   writer.write(8,0X40 + v);
                  else
                   if(v >= - (1 << 7) && v < 1 << 7)
                    writer.write_code(8,0x00,v);
                   else
                    if(v >= - (1 << 15) && v < 1 << 15)
                     writer.write_code(16,0x01,v);
                    else
                     writer.write_code(32,0x02,v)}
           extern_rec(v);
           while(stack.length > 0)
            {var i=stack.pop(),v=stack.pop();
             if(i + 1 < v.length)stack.push(v,i + 1);
             extern_rec(v[i])}
           if(intern_obj_table)
            writer.obj_counter = intern_obj_table.objs.length;
           writer.finalize();
           return writer.chunk}}
       ();
    function caml_string_of_array(a)
     {return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length))}
    function caml_output_value_to_string(v,flags)
     {return caml_string_of_array(caml_output_val(v,flags))}
    function caml_raise_not_a_dir(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": Not a directory")}
    function caml_sys_system_command(cmd)
     {var cmd=caml_jsstring_of_string(cmd);
      if
       (typeof require
        !=
        "undefined"
        &&
        require("child_process")
        &&
        require("child_process").execSync)
       try
        {require("child_process").execSync(cmd,{stdio:"inherit"});return 0}
       catch(e){return 1}
      else
       return 127}
    function unix_isatty(fileDescriptor)
     {if(fs_node_supported())
       {var tty=require("tty");return tty.isatty(fileDescriptor)}
      else
       return false}
    function caml_js_error_of_exception(exn)
     {if(exn.js_error)return exn.js_error;return null}
    function deserialize_nat(reader,sz)
     {var len=reader.read32s(),nat=new MlNat(len);
      for(var i=0;i < len;i++)nat.data[i] = reader.read32s();
      sz[0] = len * 4;
      return nat}
    function initialize_nat()
     {caml_custom_ops["_nat"]
      =
      {deserialize:deserialize_nat,serialize:serialize_nat,hash:caml_hash_nat}}
    function caml_gr_open_subwindow(a,b,c,d)
     {caml_failwith("caml_gr_open_subwindow not Implemented")}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_copysign_float(x,y)
     {if(y == 0)y = 1 / y;x = Math.abs(x);return y < 0?- x:x}
    function caml_gr_set_text_size(size)
     {var s=caml_gr_state_get();
      s.text_size = size;
      s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
      return 0}
    var
     caml_md5_bytes=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 0x80 << 8 * (i & 3);
           for(i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
           var w=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
             d = ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
             c = ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
             b = ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
             a = ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
             d = ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
             c = ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
             b = ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
             a = ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
             d = ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
             c = ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
             b = ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
             a = ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
             d = ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
             c = ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
             b = ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
             a = gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
             d = gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
             c = gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
             b = gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
             a = gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
             d = gg(d,a,b,c,buffer[i + 10],9,0x02441453);
             c = gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
             b = gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
             a = gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
             d = gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
             c = gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
             b = gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
             a = gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
             d = gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
             c = gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
             b = gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
             a = hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
             d = hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
             c = hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
             b = hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
             a = hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
             d = hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
             c = hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
             b = hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
             a = hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
             d = hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
             c = hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
             b = hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
             a = hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
             d = hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
             c = hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
             b = hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
             a = ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
             d = ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
             c = ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
             b = ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
             a = ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
             d = ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
             c = ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
             b = ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
             a = ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
             d = ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
             c = ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
             b = ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
             a = ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
             d = ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
             c = ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
             b = ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 0xFF;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_ba_set_generic(ba,i,v)
     {ba.set(ba.offset(caml_js_from_array(i)),v);return 0}
    function caml_ephe_set_key(x,i,v){return caml_weak_set(x,i,[0,v])}
    function caml_bytes_lessequal(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c <= s2.c?1:0}
    function caml_string_lessequal(s1,s2){return caml_bytes_lessequal(s1,s2)}
    function caml_string_greaterequal(s1,s2)
     {return caml_string_lessequal(s2,s1)}
    function caml_int64_add(x,y){return x.add(y)}
    function caml_nextafter_float(x,y)
     {if(isNaN(x) || isNaN(y))return NaN;
      if(x == y)return y;
      if(x == 0)return y < 0?- Math.pow(2,- 1074):Math.pow(2,- 1074);
      var bits=caml_int64_bits_of_float(x),one=caml_int64_of_int32(1);
      if(x < y == x > 0)
       bits = caml_int64_add(bits,one);
      else
       bits = caml_int64_sub(bits,one);
      return caml_int64_float_of_bits(bits)}
    function caml_gr_size_y(){var s=caml_gr_state_get();return s.height}
    function caml_ml_pos_in(chanid){return caml_ml_channels[chanid].offset}
    function caml_int64_and(x,y){return x.and(y)}
    function caml_sys_const_word_size(){return 32}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function MlStringReader(s,i)
     {this.s = caml_jsbytes_of_string(s);this.i = i}
    MlStringReader.prototype
    =
    {read8u:function(){return this.s.charCodeAt(this.i++)},
     read8s:function(){return this.s.charCodeAt(this.i++) << 24 >> 24},
     read16u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1)},
     read16s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1)},
     read32u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return (s.charCodeAt(i)
               <<
               24
               |
               s.charCodeAt(i + 1)
               <<
               16
               |
               s.charCodeAt(i + 2)
               <<
               8
               |
               s.charCodeAt(i + 3))
              >>>
              0},
     read32s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return s.charCodeAt(i)
              <<
              24
              |
              s.charCodeAt(i + 1)
              <<
              16
              |
              s.charCodeAt(i + 2)
              <<
              8
              |
              s.charCodeAt(i + 3)},
     readstr:
     function(len)
      {var i=this.i;
       this.i = i + len;
       return caml_string_of_jsbytes(this.s.substring(i,i + len))}};
    function caml_float_of_bytes(a)
     {return caml_int64_float_of_bits(caml_int64_of_bytes(a))}
    function caml_input_value_from_reader(reader,ofs)
     {var
       _magic=reader.read32u(),
       _block_len=reader.read32u(),
       num_objects=reader.read32u(),
       _size_32=reader.read32u(),
       _size_64=reader.read32u(),
       stack=[],
       intern_obj_table=num_objects > 0?[]:null,
       obj_counter=0;
      function intern_rec()
       {var code=reader.read8u();
        if(code >= 0x40)
         if(code >= 0x80)
          {var tag=code & 0xF,size=code >> 4 & 0x7,v=[tag];
           if(size == 0)return v;
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           stack.push(v,size);
           return v}
         else
          return code & 0x3F;
        else
         if(code >= 0x20)
          {var len=code & 0x1F,v=reader.readstr(len);
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           return v}
         else
          switch(code)
           {case 0x00:return reader.read8s();
            case 0x01:return reader.read16s();
            case 0x02:return reader.read32s();
            case 0x03:caml_failwith("input_value: integer too large");break;
            case 0x04:
             var offset=reader.read8u();
             return intern_obj_table[obj_counter - offset];
            case 0x05:
             var offset=reader.read16u();
             return intern_obj_table[obj_counter - offset];
            case 0x06:
             var offset=reader.read32u();
             return intern_obj_table[obj_counter - offset];
            case 0x08:
             var
              header=reader.read32u(),
              tag=header & 0xFF,
              size=header >> 10,
              v=[tag];
             if(size == 0)return v;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             stack.push(v,size);
             return v;
            case 0x13:
             caml_failwith("input_value: data block too large");break;
            case 0x09:
             var len=reader.read8u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0A:
             var len=reader.read32u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0C:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[7 - i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0B:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0E:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0D:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x07:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0F:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x10:
            case 0x11:caml_failwith("input_value: code pointer");break;
            case 0x12:
            case 0x18:
            case 0x19:
             var c,s="";
             while((c = reader.read8u()) != 0)s += String.fromCharCode(c);
             var ops=caml_custom_ops[s],expected_size;
             if(! ops)
              caml_failwith("input_value: unknown custom block identifier");
             switch(code)
              {case 0x12:break;
               case 0x19:
                if(! ops.fixed_length)
                 caml_failwith
                  ("input_value: expected a fixed-size custom block");
                expected_size = ops.fixed_length;
                break;
               case 0x18:
                expected_size = reader.read32u();
                reader.read32s();
                reader.read32s();
                break
               }
             var old_pos=reader.i,size=[0],v=ops.deserialize(reader,size);
             if(expected_size != undefined)
              if(expected_size != size[0])
               caml_failwith
                ("input_value: incorrect length of serialized custom block");
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            default:caml_failwith("input_value: ill-formed message")}}
      var res=intern_rec();
      while(stack.length > 0)
       {var size=stack.pop(),v=stack.pop(),d=v.length;
        if(d < size)stack.push(v,size);
        v[d] = intern_rec()}
      if(typeof ofs != "number")ofs[0] = reader.i;
      return res}
    function caml_string_of_bytes(s){return s}
    function caml_input_value_from_bytes(s,ofs)
     {var
       reader=
        new
         MlStringReader
         (caml_string_of_bytes(s),typeof ofs == "number"?ofs:ofs[0]);
      return caml_input_value_from_reader(reader,ofs)}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    var
     re_match=
      function()
        {var
          re_word_letters=
           [0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0x03,
            0xFE,
            0xFF,
            0xFF,
            0x87,
            0xFE,
            0xFF,
            0xFF,
            0x07,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xFF,
            0xFF,
            0x7F,
            0xFF,
            0xFF,
            0xFF,
            0x7F,
            0xFF],
          opcodes=
           {CHAR:0,
            CHARNORM:1,
            STRING:2,
            STRINGNORM:3,
            CHARCLASS:4,
            BOL:5,
            EOL:6,
            WORDBOUNDARY:7,
            BEGGROUP:8,
            ENDGROUP:9,
            REFGROUP:10,
            ACCEPT:11,
            SIMPLEOPT:12,
            SIMPLESTAR:13,
            SIMPLEPLUS:14,
            GOTO:15,
            PUSHBACK:16,
            SETMARK:17,
            CHECKPROGRESS:18};
         function is_word_letter(c)
          {return re_word_letters[c >> 3] >> (c & 7) & 1}
         function in_bitset(s,i)
          {return caml_string_get(s,i >> 3) >> (i & 7) & 1}
         function re_match_impl(re,s,pos,partial)
          {var
            prog=caml_js_from_array(re[1]),
            cpool=caml_js_from_array(re[2]),
            normtable=caml_jsbytes_of_string(re[3]),
            numgroups=re[4] | 0,
            numregisters=re[5] | 0,
            startchars=re[6] | 0,
            s=caml_array_of_string(s),
            pc=0,
            quit=false,
            stack=[],
            groups=new Array(numgroups),
            re_register=new Array(numregisters);
           for(var i=0;i < groups.length;i++)groups[i] = {start:- 1,end:- 1};
           groups[0].start = pos;
           function backtrack()
            {while(stack.length)
              {var item=stack.pop();
               if(item.undo)
                item.undo.obj[item.undo.prop] = item.undo.value;
               else
                if(item.pos){pc = item.pos.pc;pos = item.pos.txt;return}}
             quit = true}
           function push(item){stack.push(item)}
           function accept()
            {groups[0].end = pos;
             var result=new Array(1 + groups.length * 2);
             result[0] = 0;
             for(var i=0;i < groups.length;i++)
              {var g=groups[i];
               if(g.start < 0 || g.end < 0)g.start = g.end = - 1;
               result[2 * i + 1] = g.start;
               result[2 * i + 1 + 1] = g.end}
             return result}
           function prefix_match()
            {if(partial)return accept();else backtrack()}
           while(! quit)
            {var
              op=prog[pc] & 0xff,
              sarg=prog[pc] >> 8,
              uarg=sarg & 0xff,
              c=s[pos],
              group;
             pc++;
             switch(op)
              {case opcodes.CHAR:
                if(pos === s.length){prefix_match();break}
                if(c === uarg)pos++;else backtrack();
                break;
               case opcodes.CHARNORM:
                if(pos === s.length){prefix_match();break}
                if(normtable.charCodeAt(c) === uarg)pos++;else backtrack();
                break;
               case opcodes.STRING:
                for
                 (var arg=caml_jsbytes_of_string(cpool[uarg]),i=0;
                  i
                  <
                  arg.length;
                  i++)
                 {if(pos === s.length){prefix_match();break}
                  if(c === arg.charCodeAt(i))
                   c = s[++pos];
                  else
                   {backtrack();break}}
                break;
               case opcodes.STRINGNORM:
                for
                 (var arg=caml_jsbytes_of_string(cpool[uarg]),i=0;
                  i
                  <
                  arg.length;
                  i++)
                 {if(pos === s.length){prefix_match();break}
                  if(normtable.charCodeAt(c) === arg.charCodeAt(i))
                   c = s[++pos];
                  else
                   {backtrack();break}}
                break;
               case opcodes.CHARCLASS:
                if(pos === s.length){prefix_match();break}
                if(in_bitset(cpool[uarg],c))pos++;else backtrack();
                break;
               case opcodes.BOL:
                if(pos > 0 && s[pos - 1] != 10)backtrack();break;
               case opcodes.EOL:
                if(pos < s.length && s[pos] != 10)backtrack();break;
               case opcodes.WORDBOUNDARY:
                if(pos == 0)
                 {if(pos === s.length){prefix_match();break}
                  if(is_word_letter(s[0]))break;
                  backtrack()}
                else
                 if(pos === s.length)
                  {if(is_word_letter(s[pos - 1]))break;backtrack()}
                 else
                  {if(is_word_letter(s[pos - 1]) != is_word_letter(s[pos]))
                    break;
                   backtrack()}
                break;
               case opcodes.BEGGROUP:
                group = groups[uarg];
                push({undo:{obj:group,prop:"start",value:group.start}});
                group.start = pos;
                break;
               case opcodes.ENDGROUP:
                group = groups[uarg];
                push({undo:{obj:group,prop:"end",value:group.end}});
                group.end = pos;
                break;
               case opcodes.REFGROUP:
                group = groups[uarg];
                if(group.start < 0 || group.end < 0){backtrack();break}
                for(var i=group.start;i < group.end;i++)
                 {if(pos === s.length){prefix_match();break}
                  if(s[i] != s[pos]){backtrack();break}
                  pos++}
                break;
               case opcodes.SIMPLEOPT:if(in_bitset(cpool[uarg],c))pos++;break;
               case opcodes.SIMPLESTAR:
                while(in_bitset(cpool[uarg],c))c = s[++pos];break;
               case opcodes.SIMPLEPLUS:
                if(pos === s.length){prefix_match();break}
                if(in_bitset(cpool[uarg],c))
                 do c = s[++pos];while(in_bitset(cpool[uarg],c));
                else
                 backtrack();
                break;
               case opcodes.ACCEPT:return accept();
               case opcodes.GOTO:pc = pc + sarg;break;
               case opcodes.PUSHBACK:push({pos:{pc:pc + sarg,txt:pos}});break;
               case opcodes.SETMARK:
                push
                 ({undo:{obj:re_register,prop:uarg,value:re_register[uarg]}});
                re_register[uarg] = pos;
                break;
               case opcodes.CHECKPROGRESS:
                if(re_register[uarg] === pos)backtrack();break;
               default:throw new Error("Invalid bytecode")}}
           return 0}
         return re_match_impl}
       ();
    function re_search_backward(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.search_backward");
      while(pos >= 0){var res=re_match(re,s,pos,0);if(res)return res;pos--}
      return [0]}
    function caml_js_from_string(s){return caml_jsstring_of_string(s)}
    function caml_ba_sub(ba,ofs,len)
     {var changed_dim,mul=1;
      if(ba.layout == 0)
       {for(var i=1;i < ba.dims.length;i++)mul = mul * ba.dims[i];
        changed_dim = 0}
      else
       {for(var i=0;i < ba.dims.length - 1;i++)mul = mul * ba.dims[i];
        changed_dim = ba.dims.length - 1;
        ofs = ofs - 1}
      if(ofs < 0 || len < 0 || ofs + len > ba.dims[changed_dim])
       caml_invalid_argument("Bigarray.sub: bad sub-array");
      var new_dims=[];
      for(var i=0;i < ba.dims.length;i++)new_dims[i] = ba.dims[i];
      new_dims[changed_dim] = len;
      mul *= caml_ba_get_size_per_element(ba.kind);
      var new_data=ba.data.subarray(ofs * mul,(ofs + len) * mul);
      return caml_ba_create_unsafe(ba.kind,ba.layout,new_dims,new_data)}
    function caml_gc_full_major(){return 0}
    function caml_bytes_set32(s,i,i32)
     {if(i >>> 0 >= s.l - 3)caml_bytes_bound_error();
      var
       b4=0xFF & i32 >> 24,
       b3=0xFF & i32 >> 16,
       b2=0xFF & i32 >> 8,
       b1=0xFF & i32;
      caml_bytes_unsafe_set(s,i + 0,b1);
      caml_bytes_unsafe_set(s,i + 1,b2);
      caml_bytes_unsafe_set(s,i + 2,b3);
      caml_bytes_unsafe_set(s,i + 3,b4);
      return 0}
    function caml_gr_sigio_signal(){return 0}
    function caml_ba_uint8_set32(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 3 >= ba.data.length)caml_array_bound_error();
      ba.set(ofs + 0,v & 0xff);
      ba.set(ofs + 1,v >>> 8 & 0xff);
      ba.set(ofs + 2,v >>> 16 & 0xff);
      ba.set(ofs + 3,v >>> 24 & 0xff);
      return 0}
    function caml_sys_const_ostype_unix(){return 1}
    function caml_signbit_float(x){if(x == 0)x = 1 / x;return x < 0?1:0}
    function caml_gr_current_x(){var s=caml_gr_state_get();return s.x}
    function caml_gr_set_line_width(w)
     {var s=caml_gr_state_get();
      s.line_width = w;
      s.context.lineWidth = w;
      return 0}
    function caml_gr_set_font(f)
     {var s=caml_gr_state_get();
      s.font = f;
      s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
      return 0}
    function caml_gr_set_color(color)
     {var s=caml_gr_state_get();
      function convert(number)
       {var str="" + number.toString(16);
        while(str.length < 2)str = "0" + str;
        return str}
      var r=color >> 16 & 0xff,g=color >> 8 & 0xff,b=color >> 0 & 0xff;
      s.color = color;
      var c_str="#" + convert(r) + convert(g) + convert(b);
      s.context.fillStyle = c_str;
      s.context.strokeStyle = c_str;
      return 0}
    function caml_gr_moveto(x,y)
     {var s=caml_gr_state_get();s.x = x;s.y = y;return 0}
    function caml_gr_resize_window(w,h)
     {var s=caml_gr_state_get();
      s.width = w;
      s.height = h;
      s.canvas.width = w;
      s.canvas.height = h;
      return 0}
    function caml_gr_state_init()
     {caml_gr_moveto(caml_gr_state.x,caml_gr_state.y);
      caml_gr_resize_window(caml_gr_state.width,caml_gr_state.height);
      caml_gr_set_line_width(caml_gr_state.line_width);
      caml_gr_set_text_size(caml_gr_state.text_size);
      caml_gr_set_font(caml_gr_state.font);
      caml_gr_set_color(caml_gr_state.color);
      caml_gr_set_window_title(caml_gr_state.title);
      caml_gr_state.context.textBaseline = "bottom"}
    function caml_ba_kind_of_typed_array(ta)
     {var g=joo_global_object,kind;
      if(ta instanceof g.Float32Array)
       kind = 0;
      else
       if(ta instanceof g.Float64Array)
        kind = 1;
       else
        if(ta instanceof g.Int8Array)
         kind = 2;
        else
         if(ta instanceof g.Uint8Array)
          kind = 3;
         else
          if(ta instanceof g.Int16Array)
           kind = 4;
          else
           if(ta instanceof g.Uint16Array)
            kind = 5;
           else
            if(ta instanceof g.Int32Array)
             kind = 6;
            else
             if(ta instanceof g.Uint32Array)
              kind = 6;
             else
              caml_invalid_argument
               ("caml_ba_kind_of_typed_array: unsupported kind");
      return kind}
    function caml_ba_from_typed_array(ta)
     {var kind=caml_ba_kind_of_typed_array(ta);
      return caml_ba_create_unsafe(kind,0,[ta.length],ta)}
    function caml_ml_seek_out(chanid,pos)
     {caml_ml_flush(chanid);caml_ml_channels[chanid].offset = pos;return 0}
    function caml_js_typeof(o){return typeof o}
    function caml_restore_raw_backtrace(exn,bt){return 0}
    function caml_gr_lineto(x,y)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      s.context.moveTo(s.x,s.height - s.y);
      s.context.lineTo(x,s.height - y);
      s.context.stroke();
      s.x = x;
      s.y = y;
      return 0}
    function caml_js_wrap_meth_callback_unsafe(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return f.apply(null,args)}}
    function caml_ba_dim_3(ba){return caml_ba_dim(ba,2)}
    var caml_ephe_data_offset=2;
    function caml_ephe_check_data(x)
     {return x[caml_ephe_data_offset] === undefined?0:1}
    function caml_bytes_get16(s,i)
     {if(i >>> 0 >= s.l - 1)caml_bytes_bound_error();
      var b1=caml_bytes_unsafe_get(s,i),b2=caml_bytes_unsafe_get(s,i + 1);
      return b2 << 8 | b1}
    function caml_obj_make_forward(b,v){b[0] = 250;b[1] = v;return 0}
    function caml_js_from_bool(x){return ! ! x}
    function caml_ml_set_channel_name(){return 0}
    function caml_gr_close_graph()
     {var s=caml_gr_state_get();
      s.canvas.width = 0;
      s.canvas.height = 0;
      return 0}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_md5_string(s,ofs,len)
     {return caml_md5_bytes(caml_bytes_of_string(s),ofs,len)}
    function caml_md5_chan(chanid,len)
     {var chan=caml_ml_channels[chanid],chan_len=chan.file.length();
      if(len < 0)len = chan_len - chan.offset;
      if(chan.offset + len > chan_len)caml_raise_end_of_file();
      var buf=caml_create_bytes(len);
      chan.file.read(chan.offset,buf,0,len);
      return caml_md5_string(caml_string_of_bytes(buf),0,len)}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_weak_get_copy(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_copy");
      var y=caml_weak_get(x,i);
      if(y === 0)return y;
      var z=y[1];
      if(z instanceof Array)return [0,caml_obj_dup(z)];
      return y}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ephe_get_data(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,x[caml_ephe_data_offset]]}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_array_append(a1,a2)
     {var l1=a1.length,l2=a2.length,l=l1 + l2 - 1,a=new Array(l);
      a[0] = 0;
      var i=1,j=1;
      for(;i < l1;i++)a[i] = a1[i];
      for(;i < l;i++,j++)a[i] = a2[j];
      return a}
    function caml_ml_set_channel_refill(chanid,f)
     {caml_ml_channels[chanid].refill = f;return 0}
    function caml_js_expr(s)
     {js_print_stderr("caml_js_expr: fallback to runtime evaluation\n");
      return eval(caml_jsstring_of_string(s))}
    function caml_int64_mul(x,y){return x.mul(y)}
    function caml_ml_runtime_warnings_enabled(_unit)
     {return caml_runtime_warnings}
    function caml_output_value_to_bytes(v,flags)
     {return caml_bytes_of_array(caml_output_val(v,flags))}
    function caml_hash_univ_param(count,limit,obj)
     {var hash_accu=0;
      function hash_aux(obj)
       {limit--;
        if(count < 0 || limit < 0)return;
        if(obj instanceof Array && obj[0] === (obj[0] | 0))
         switch(obj[0])
          {case 248:count--;hash_accu = hash_accu * 65599 + obj[2] | 0;break;
           case 250:limit++;hash_aux(obj);break;
           default:
            count--;
            hash_accu = hash_accu * 19 + obj[0] | 0;
            for(var i=obj.length - 1;i > 0;i--)hash_aux(obj[i])}
        else
         if(caml_is_ml_bytes(obj))
          {count--;
           switch(obj.t & 6)
            {default:caml_convert_string_to_bytes(obj);case 0:
              for(var b=obj.c,l=caml_ml_bytes_length(obj),i=0;i < l;i++)
               hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
              break;
             case 2:
              for(var a=obj.c,l=caml_ml_bytes_length(obj),i=0;i < l;i++)
               hash_accu = hash_accu * 19 + a[i] | 0
             }}
         else
          if(caml_is_ml_string(obj))
           {var jsbytes=caml_jsbytes_of_string(obj);
            for(var b=jsbytes,l=jsbytes.length,i=0;i < l;i++)
             hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0}
          else
           if(typeof obj === "string")
            for(var b=obj,l=obj.length,i=0;i < l;i++)
             hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
           else
            if(obj === (obj | 0))
             {count--;hash_accu = hash_accu * 65599 + obj | 0}
            else
             if(obj === + obj)
              {count--;
               var p=caml_int64_to_bytes(caml_int64_bits_of_float(obj));
               for(var i=7;i >= 0;i--)hash_accu = hash_accu * 19 + p[i] | 0}
             else
              if(obj && obj.caml_custom)
               if
                (caml_custom_ops[obj.caml_custom]
                 &&
                 caml_custom_ops[obj.caml_custom].hash)
                {var h=caml_custom_ops[obj.caml_custom].hash(obj) | 0;
                 hash_accu = hash_accu * 65599 + h | 0}}
      hash_aux(obj);
      return hash_accu & 0x3FFFFFFF}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_output_value_to_buffer(s,ofs,len,v,flags)
     {var t=caml_output_val(v,flags);
      if(t.length > len)caml_failwith("Marshal.to_buffer: buffer overflow");
      caml_blit_bytes(t,0,s,ofs,t.length);
      return 0}
    function re_replacement_text(repl,groups,orig)
     {var
       repl=caml_jsbytes_of_string(repl),
       len=repl.length,
       orig=caml_jsbytes_of_string(orig),
       res="",
       n=0,
       cur,
       start,
       end,
       c;
      while(n < len)
       {cur = repl.charAt(n++);
        if(cur != "\\")
         res += cur;
        else
         {if(n == len)
           caml_failwith("Str.replace: illegal backslash sequence");
          cur = repl.charAt(n++);
          switch(cur)
           {case "\\":res += cur;break;
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
             c = + cur;
             if(c * 2 >= groups.length - 1)
              caml_failwith("Str.replace: reference to unmatched group");
             start = caml_array_get(groups,c * 2);
             end = caml_array_get(groups,c * 2 + 1);
             if(start == - 1)
              caml_failwith("Str.replace: reference to unmatched group");
             res += orig.slice(start,end);
             break;
            default:res += "\\" + cur}}}
      return caml_string_of_jsbytes(res)}
    function caml_pure_js_expr(s)
     {js_print_stderr("caml_pure_js_expr: fallback to runtime evaluation\n");
      return eval(caml_jsstring_of_string(s))}
    function blit_nat(nat1,ofs1,nat2,ofs2,len)
     {for(var i=0;i < len;i++)nat1.data[ofs1 + i] = nat2.data[ofs2 + i];
      return 0}
    function caml_int64_ult(x,y){return x.ucompare(y) < 0}
    function caml_int64_xor(x,y){return x.xor(y)}
    function caml_bigstring_blit_ba_to_bytes(ba1,pos1,bytes2,pos2,len)
     {if(12 != ba1.kind)
       caml_invalid_argument
        ("caml_bigstring_blit_string_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs1=ba1.offset(pos1);
      if(ofs1 + len > ba1.data.length)caml_array_bound_error();
      if(pos2 + len > caml_ml_bytes_length(bytes2))caml_array_bound_error();
      var slice=ba1.data.slice(ofs1,ofs1 + len);
      caml_blit_bytes(caml_bytes_of_array(slice),0,bytes2,pos2,len);
      return 0}
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_to_js_string(s){return caml_jsstring_of_string(s)}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int64_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       base64=caml_int64_of_int32(base),
       threshold=
        new MlInt64(0xffffff,0xfffffff,0xffff).udivmod(base64).quotient,
       c=caml_string_unsafe_get(s,i),
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=caml_int64_of_int32(d);
      for(;;)
       {i++;
        c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        if(caml_int64_ult(threshold,res))caml_failwith("int_of_string");
        d = caml_int64_of_int32(d);
        res = caml_int64_add(caml_int64_mul(base64,res),d);
        if(caml_int64_ult(res,d))caml_failwith("int_of_string")}
      if(i != caml_ml_string_length(s))caml_failwith("int_of_string");
      if(base == 10 && caml_int64_ult(new MlInt64(0,0,0x8000),res))
       caml_failwith("int_of_string");
      if(sign < 0)res = caml_int64_neg(res);
      return res}
    function re_search_forward(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.search_forward");
      while(pos <= caml_ml_string_length(s))
       {var res=re_match(re,s,pos,0);if(res)return res;pos++}
      return [0]}
    var caml_blit_string_to_bigstring=caml_bigstring_blit_string_to_ba;
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_ml_seek_in(chanid,pos)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill != null)caml_raise_sys_error("Illegal seek");
      chan.offset = pos;
      return 0}
    function caml_sys_read_directory(name)
     {var
       root=resolve_fs_device(name),
       a=root.device.readdir(root.rest),
       l=new Array(a.length + 1);
      l[0] = 0;
      for(var i=0;i < a.length;i++)l[i + 1] = caml_string_of_jsbytes(a[i]);
      return l}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_sys_const_ostype_win32(){return 0}
    function caml_obj_is_block(x){return + (x instanceof Array)}
    function caml_ml_input_char(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_may_refill_input(chanid);
      if(chan.offset >= chan.file.length())caml_raise_end_of_file();
      var res=chan.file.read_one(chan.offset);
      chan.offset++;
      return res}
    function caml_js_var(x)
     {var x=caml_jsstring_of_string(x);
      if(! x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
       js_print_stderr
        ('caml_js_var: "'
         +
         x
         +
         '" is not a valid JavaScript variable. continuing ..');
      return eval(x)}
    function caml_trunc_float(x){return Math.trunc(x)}
    function caml_ephe_blit_data(src,dst)
     {dst[caml_ephe_data_offset] = src[caml_ephe_data_offset];return 0}
    function caml_is_printable(c){return + (c > 31 && c < 127)}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function re_partial_match(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.partial_match");
      var res=re_match(re,s,pos,1);
      return res?res:[0]}
    function caml_sys_random_seed()
     {var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
      return [0,x]}
    function caml_final_register_called_without_value(){return 0}
    function caml_ba_get_2(ba,i0,i1){return ba.get(ba.offset([i0,i1]))}
    function win_handle_fd(x){return x}
    function caml_ba_uint8_set16(ba,i0,v)
     {var ofs=ba.offset(i0);
      if(ofs + 1 >= ba.data.length)caml_array_bound_error();
      ba.set(ofs + 0,v & 0xff);
      ba.set(ofs + 1,v >>> 8 & 0xff);
      return 0}
    function caml_js_delete(o,f){delete o[f];return 0}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_list_mount_point()
     {var prev=0;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var old=prev;
        prev = [0,caml_string_of_jsbytes(jsoo_mount_point[i].path),old]}
      return prev}
    var
     caml_marshal_constants=
      {PREFIX_SMALL_BLOCK:0x80,
       PREFIX_SMALL_INT:0x40,
       PREFIX_SMALL_STRING:0x20,
       CODE_INT8:0x00,
       CODE_INT16:0x01,
       CODE_INT32:0x02,
       CODE_INT64:0x03,
       CODE_SHARED8:0x04,
       CODE_SHARED16:0x05,
       CODE_SHARED32:0x06,
       CODE_BLOCK32:0x08,
       CODE_BLOCK64:0x13,
       CODE_STRING8:0x09,
       CODE_STRING32:0x0A,
       CODE_DOUBLE_BIG:0x0B,
       CODE_DOUBLE_LITTLE:0x0C,
       CODE_DOUBLE_ARRAY8_BIG:0x0D,
       CODE_DOUBLE_ARRAY8_LITTLE:0x0E,
       CODE_DOUBLE_ARRAY32_BIG:0x0F,
       CODE_DOUBLE_ARRAY32_LITTLE:0x07,
       CODE_CODEPOINTER:0x10,
       CODE_INFIXPOINTER:0x11,
       CODE_CUSTOM:0x12,
       CODE_CUSTOM_LEN:0x18,
       CODE_CUSTOM_FIXED:0x19};
    function caml_js_equals(x,y){return + (x == y)}
    function bigstring_to_typed_array(bs){return bs.data}
    function caml_gr_arc_aux(ctx,cx,cy,ry,rx,a1,a2)
     {while(a1 > a2)a2 += 360;
      a1 /= 180;
      a2 /= 180;
      var
       rot=0,
       xPos,
       yPos,
       xPos_prev,
       yPos_prev,
       space=2,
       num=(a2 - a1) * Math.PI * ((rx + ry) / 2) / space | 0,
       delta=(a2 - a1) * Math.PI / num,
       i=a1 * Math.PI;
      for(var j=0;j <= num;j++)
       {xPos
        =
        cx
        -
        rx
        *
        Math.sin(i)
        *
        Math.sin(rot * Math.PI)
        +
        ry
        *
        Math.cos(i)
        *
        Math.cos(rot * Math.PI);
        xPos = xPos.toFixed(2);
        yPos
        =
        cy
        +
        ry
        *
        Math.cos(i)
        *
        Math.sin(rot * Math.PI)
        +
        rx
        *
        Math.sin(i)
        *
        Math.cos(rot * Math.PI);
        yPos = yPos.toFixed(2);
        if(j == 0)
         ctx.moveTo(xPos,yPos);
        else
         if(xPos_prev != xPos || yPos_prev != yPos)ctx.lineTo(xPos,yPos);
        xPos_prev = xPos;
        yPos_prev = yPos;
        i -= delta}
      return 0}
    function caml_gr_fill_arc(x,y,rx,ry,a1,a2)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      caml_gr_arc_aux(s.context,x,s.height - y,rx,ry,a1,a2);
      s.context.fill();
      return 0}
    function caml_ba_slice(ba,vind)
     {vind = caml_js_from_array(vind);
      var num_inds=vind.length,index=[],sub_dims=[],ofs;
      if(num_inds > ba.dims.length)
       caml_invalid_argument("Bigarray.slice: too many indices");
      if(ba.layout == 0)
       {for(var i=0;i < num_inds;i++)index[i] = vind[i];
        for(;i < ba.dims.length;i++)index[i] = 0;
        sub_dims = ba.dims.slice(num_inds)}
      else
       {for(var i=0;i < num_inds;i++)
         index[ba.dims.length - num_inds + i] = vind[i];
        for(var i=0;i < ba.dims.length - num_inds;i++)index[i] = 1;
        sub_dims = ba.dims.slice(0,ba.dims.length - num_inds)}
      ofs = ba.offset(index);
      var
       size=caml_ba_get_size(sub_dims),
       size_per_element=caml_ba_get_size_per_element(ba.kind),
       new_data=
        ba.data.subarray
         (ofs * size_per_element,(ofs + size) * size_per_element);
      return caml_ba_create_unsafe(ba.kind,ba.layout,sub_dims,new_data)}
    function caml_marshal_data_size(s,ofs)
     {function get32(s,i)
       {return caml_bytes_unsafe_get(s,i)
               <<
               24
               |
               caml_bytes_unsafe_get(s,i + 1)
               <<
               16
               |
               caml_bytes_unsafe_get(s,i + 2)
               <<
               8
               |
               caml_bytes_unsafe_get(s,i + 3)}
      if(get32(s,ofs) != (0x8495A6BE | 0))
       caml_failwith("Marshal.data_size: bad object");
      return get32(s,ofs + 4)}
    function caml_input_value(chanid)
     {var chan=caml_ml_channels[chanid],buf=caml_create_bytes(8);
      chan.file.read(chan.offset,buf,0,8);
      var len=caml_marshal_data_size(buf,0) + 20,buf=caml_create_bytes(len);
      chan.file.read(chan.offset,buf,0,len);
      var offset=[0],res=caml_input_value_from_bytes(buf,offset);
      chan.offset = chan.offset + offset[0];
      return res}
    function caml_ba_kind(ba){return ba.kind}
    function caml_js_fun_call(f,a)
     {switch(a.length)
       {case 1:return f();
        case 2:return f(a[1]);
        case 3:return f(a[1],a[2]);
        case 4:return f(a[1],a[2],a[3]);
        case 5:return f(a[1],a[2],a[3],a[4]);
        case 6:return f(a[1],a[2],a[3],a[4],a[5]);
        case 7:return f(a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:return f(a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
      return f.apply(null,caml_js_from_array(a))}
    function caml_js_pure_expr(f){return f()}
    function compare_digits_nat(nat1,ofs1,nat2,ofs2)
     {if(nat1.data[ofs1] > nat2.data[ofs2])return 1;
      if(nat1.data[ofs1] < nat2.data[ofs2])return - 1;
      return 0}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_gr_wait_event(_evl)
     {caml_failwith
       ("caml_gr_wait_event not Implemented: use Graphics_js instead")}
    function caml_gr_sigio_handler(){return 0}
    function caml_hash_mix_bigstring(h,bs)
     {return caml_hash_mix_bytes_arr(h,bs.data)}
    function caml_record_backtrace(){return 0}
    function unix_gmtime(t)
     {var
       d=new Date(t * 1000),
       d_num=d.getTime(),
       januaryfirst=new Date(Date.UTC(d.getUTCFullYear(),0,1)).getTime(),
       doy=Math.floor((d_num - januaryfirst) / 86400000);
      return [0,
              d.getUTCSeconds(),
              d.getUTCMinutes(),
              d.getUTCHours(),
              d.getUTCDate(),
              d.getUTCMonth(),
              d.getUTCFullYear() - 1900,
              d.getUTCDay(),
              doy,
              false | 0]}
    function caml_sys_get_config()
     {return [0,caml_string_of_jsbytes("Unix"),32,0]}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function unix_time(){return Math.floor(unix_gettimeofday())}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function bigstring_of_array_buffer(ab)
     {var ta=new (joo_global_object.Uint8Array)(ab);
      return caml_ba_create_unsafe(12,0,[ta.length],ta)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_ba_init(){return 0}
    function re_string_match(re,s,pos)
     {if(pos < 0 || pos > caml_ml_string_length(s))
       caml_invalid_argument("Str.string_match");
      var res=re_match(re,s,pos,0);
      return res?res:[0]}
    function BigStringReader(bs,i){this.s = bs;this.i = i}
    BigStringReader.prototype
    =
    {read8u:function(){return caml_ba_get_1(this.s,this.i++)},
     read8s:function(){return caml_ba_get_1(this.s,this.i++) << 24 >> 24},
     read16u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return caml_ba_get_1(s,i) << 8 | caml_ba_get_1(s,i + 1)},
     read16s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return caml_ba_get_1(s,i) << 24 >> 16 | caml_ba_get_1(s,i + 1)},
     read32u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return (caml_ba_get_1(s,i)
               <<
               24
               |
               caml_ba_get_1(s,i + 1)
               <<
               16
               |
               caml_ba_get_1(s,i + 2)
               <<
               8
               |
               caml_ba_get_1(s,i + 3))
              >>>
              0},
     read32s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return caml_ba_get_1(s,i)
              <<
              24
              |
              caml_ba_get_1(s,i + 1)
              <<
              16
              |
              caml_ba_get_1(s,i + 2)
              <<
              8
              |
              caml_ba_get_1(s,i + 3)},
     readstr:
     function(len)
      {var i=this.i,arr=new Array(len);
       for(var j=0;j < len;j++)arr[j] = caml_ba_get_1(this.s,i + j);
       this.i = i + len;
       return caml_string_of_array(arr)}};
    function caml_gr_dump_image(im)
     {var data=[0];
      for(var i=0;i < im.height;i++)
       {data[i + 1] = [0];
        for(var j=0;j < im.width;j++)
         {var
           o=i * (im.width * 4) + j * 4,
           r=im.data[o + 0],
           g=im.data[o + 1],
           b=im.data[o + 2];
          data[i + 1][j + 1] = (r << 16) + (g << 8) + b}}
      return data}
    function caml_ba_get_generic(ba,i)
     {var ofs=ba.offset(caml_js_from_array(i));return ba.get(ofs)}
    function caml_get_exception_backtrace(){return 0}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_mount_autoload(name,f)
     {var path=caml_make_path(name),name=path.join("/") + "/";
      jsoo_mount_point.push({path:name,device:new MlFakeDevice(name,f)});
      return 0}
    function caml_bigstring_blit_ba_to_ba(ba1,pos1,ba2,pos2,len)
     {if(12 != ba1.kind)
       caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
      if(12 != ba2.kind)
       caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
      if(len == 0)return 0;
      var ofs1=ba1.offset(pos1),ofs2=ba2.offset(pos2);
      if(ofs1 + len > ba1.data.length)caml_array_bound_error();
      if(ofs2 + len > ba2.data.length)caml_array_bound_error();
      var slice=ba1.data.subarray(ofs1,ofs1 + len);
      ba2.data.set(slice,pos2);
      return 0}
    var caml_blit_bigstring_to_bigstring=caml_bigstring_blit_ba_to_ba;
    function caml_string_lessthan(s1,s2){return caml_bytes_lessthan(s1,s2)}
    function caml_string_greaterthan(s1,s2)
     {return caml_string_lessthan(s2,s1)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    function caml_ephe_get_data_copy(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,caml_obj_dup(x[caml_ephe_data_offset])]}
    function caml_sys_get_argv(a){return [0,caml_argv[1],caml_argv]}
    function caml_js_to_bool(x){return + x}
    function caml_gr_create_image(x,y)
     {var s=caml_gr_state_get();return s.context.createImageData(x,y)}
    var caml_ephe_get_key_copy=caml_weak_get_copy;
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_raw_backtrace_next_slot(){return 0}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    function mult_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat3,ofs3,len3)
     {var carry=0;
      for(var i=0;i < len3;i++)
       carry
       +=
       mult_digit_nat(nat1,ofs1 + i,len1 - i,nat2,ofs2,len2,nat3,ofs3 + i);
      return carry}
    function square_nat(nat1,ofs1,len1,nat2,ofs2,len2)
     {var carry=0;
      carry += add_nat(nat1,ofs1,len1,nat1,ofs1,len1,0);
      carry += mult_nat(nat1,ofs1,len1,nat2,ofs2,len2,nat2,ofs2,len2);
      return carry}
    function caml_js_from_float(x){return x}
    function caml_floatarray_create(len)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 254;
      for(var i=1;i < len;i++)b[i] = 0;
      return b}
    function caml_gc_stat(){return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
    function caml_sys_modify_argv(arg){caml_argv = arg;return 0}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === null)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_js_get_console()
     {var
       c=joo_global_object.console?joo_global_object.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
      return c}
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function bigstring_of_typed_array(ba)
     {var
       ta=
        new
         (joo_global_object.Uint8Array)
         (ba.buffer,ba.byteOffset,ba.length * ba.BYTES_PER_ELEMENT);
      return caml_ba_create_unsafe(12,0,[ta.length],ta)}
    function caml_round_float(x){return Math.round(x)}
    function caml_ojs_new_arr(c,a)
     {switch(a.length)
       {case 0:return new c();
        case 1:return new c(a[0]);
        case 2:return new c(a[0],a[1]);
        case 3:return new c(a[0],a[1],a[2]);
        case 4:return new c(a[0],a[1],a[2],a[3]);
        case 5:return new c(a[0],a[1],a[2],a[3],a[4]);
        case 6:return new c(a[0],a[1],a[2],a[3],a[4],a[5]);
        case 7:return new c(a[0],a[1],a[2],a[3],a[4],a[5],a[6])
        }
      function F(){return c.apply(this,a)}
      F.prototype = c.prototype;
      return new F()}
    function complement_nat(nat,ofs,len)
     {for(var i=0;i < len;i++)
       nat.data[ofs + i] = (- 1 >>> 0) - (nat.data[ofs + i] >>> 0)}
    var caml_js_regexps={amp:/&/g,lt:/</g,quot:/\"/g,all:/[&<\"]/};
    function caml_js_html_escape(s)
     {if(! caml_js_regexps.all.test(s))return s;
      return s.replace(caml_js_regexps.amp,"&amp;").replace
               (caml_js_regexps.lt,"&lt;").replace
              (caml_js_regexps.quot,"&quot;")}
    function caml_ba_dim_2(ba){return caml_ba_dim(ba,1)}
    function caml_js_wrap_meth_callback_arguments(f)
     {return function()
       {var len=arguments.length,args=new Array(len);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_call_gen(f,[this,args])}}
    function caml_sinh_float(x){return (Math.exp(x) - Math.exp(- x)) / 2}
    function caml_ldexp_float(x,exp)
     {exp |= 0;
      if(exp > 1023)
       {exp -= 1023;
        x *= Math.pow(2,1023);
        if(exp > 1023){exp -= 1023;x *= Math.pow(2,1023)}}
      if(exp < - 1023){exp += 1023;x *= Math.pow(2,- 1023)}
      x *= Math.pow(2,exp);
      return x}
    function caml_gr_state_set(ctx)
     {caml_gr_state = ctx;caml_gr_state_init();return 0}
    function caml_js_wrap_callback_strict(arity,f)
     {return function()
       {var n=arguments.length;
        if(n == arity && f.length == arity)return f.apply(null,arguments);
        var args=new Array(arity),len=Math.min(arguments.length,arity);
        for(var i=0;i < len;i++)args[i] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_ba_set_1(ba,i0,v){ba.set(ba.offset(i0),v);return 0}
    function caml_get_current_callstack(){return [0]}
    function land_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] &= nat2.data[ofs2];return 0}
    function caml_int64_mod(x,y){return x.mod(y)}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_create_file_extern(name,content)
     {if(joo_global_object.caml_create_file)
       joo_global_object.caml_create_file(name,content);
      else
       {if(! joo_global_object.caml_fs_tmp)joo_global_object.caml_fs_tmp = [];
        joo_global_object.caml_fs_tmp.push({name:name,content:content})}
      return 0}
    function caml_int32_bswap(x)
     {return (x & 0x000000FF)
             <<
             24
             |
             (x & 0x0000FF00)
             <<
             8
             |
             (x & 0x00FF0000)
             >>>
             8
             |
             (x & 0xFF000000)
             >>>
             24}
    function win_startup(){}
    function caml_ba_set_3(ba,i0,i1,i2,v)
     {ba.set(ba.offset([i0,i1,i2]),v);return 0}
    function caml_js_instanceof(o,c){return o instanceof c}
    var caml_blit_bigstring_to_string=caml_bigstring_blit_ba_to_bytes;
    function nth_digit_nat_native(nat,ofs){return nat.data[ofs]}
    function set_digit_nat_native(nat,ofs,digit)
     {nat.data[ofs] = digit;return 0}
    function caml_string_set64(s,i,i64){return caml_bytes_set64(s,i,i64)}
    function caml_gr_state_create(canvas,w,h)
     {var context=canvas.getContext("2d");
      return {context:context,
              canvas:canvas,
              x:0,
              y:0,
              width:w,
              height:h,
              line_width:1,
              font:caml_string_of_jsbytes("fixed"),
              text_size:26,
              color:0x000000,
              title:caml_string_of_jsbytes("")}}
    function caml_js_wrap_callback(f)
     {return function()
       {var len=arguments.length;
        if(len > 0)
         {var args=new Array(len);
          for(var i=0;i < len;i++)args[i] = arguments[i];
          return caml_call_gen(f,args)}
        else
         return caml_call_gen(f,[undefined])}}
    function caml_gr_draw_arc(x,y,rx,ry,a1,a2)
     {var s=caml_gr_state_get();
      s.context.beginPath();
      caml_gr_arc_aux(s.context,x,s.height - y,rx,ry,a1,a2);
      s.context.stroke();
      return 0}
    function caml_ba_map_file(vfd,kind,layout,shared,dims,pos)
     {caml_failwith("caml_ba_map_file not implemented")}
    function caml_ba_map_file_bytecode(argv,argn)
     {return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5])}
    function caml_ba_create_from(data1,data2,jstyp,kind,layout,dims)
     {if(data2 || caml_ba_get_size_per_element(kind) == 2)
       caml_invalid_argument
        ("caml_ba_create_from: use return caml_ba_create_unsafe");
      return caml_ba_create_unsafe(kind,layout,dims,data1)}
    function caml_tanh_float(x)
     {var y=Math.exp(x),z=Math.exp(- x);return (y - z) / (y + z)}
    function caml_gr_draw_str(str)
     {var s=caml_gr_state_get(),m=s.context.measureText(str),dx=m.width;
      s.context.fillText(str,s.x,s.height - s.y);
      s.x += dx | 0;
      return 0}
    function caml_gr_draw_string(str)
     {caml_gr_draw_str(caml_jsstring_of_string(str));return 0}
    function caml_gr_draw_char(c)
     {caml_gr_draw_str(String.fromCharCode(c));return 0}
    function caml_unmount(name)
     {var path=caml_make_path(name),name=path.join("/") + "/",idx=- 1;
      for(var i=0;i < jsoo_mount_point.length;i++)
       if(jsoo_mount_point[i].path == name)idx = i;
      if(idx > - 1)jsoo_mount_point.splice(idx,1);
      return 0}
    function caml_input_value_from_string(s,ofs)
     {var reader=new MlStringReader(s,typeof ofs == "number"?ofs:ofs[0]);
      return caml_input_value_from_reader(reader,ofs)}
    function caml_ml_pos_in_64(chanid)
     {return caml_int64_of_float(caml_ml_channels[chanid].offset)}
    function caml_gr_draw_image(im,x,y)
     {var s=caml_gr_state_get();
      if(! im.image)
       {var canvas=document.createElement("canvas");
        canvas.width = s.width;
        canvas.height = s.height;
        canvas.getContext("2d").putImageData(im,0,0);
        var image=new (joo_global_object.Image)();
        image.onload
        =
        function()
         {s.context.drawImage(image,x,s.height - im.height - y);
          im.image = image};
        image.src = canvas.toDataURL("image/png")}
      else
       s.context.drawImage(im.image,x,s.height - im.height - y);
      return 0}
    function caml_register_channel_for_spacetime(_channel){return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    function caml_ml_pos_out(chanid)
     {caml_ml_flush(chanid);return caml_ml_channels[chanid].offset}
    function caml_spacetime_enabled(_unit){return 0}
    function caml_bytes_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_runtime_parameters(_unit){return caml_string_of_jsbytes("")}
    function caml_js_object(a)
     {var o={};
      for(var i=1;i < a.length;i++)
       {var p=a[i];o[caml_jsstring_of_string(p[1])] = p[2]}
      return o}
    function caml_ba_create(kind,layout,dims_ml)
     {var
       dims=caml_js_from_array(dims_ml),
       data=caml_ba_create_buffer(kind,caml_ba_get_size(dims));
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_weak_blit(a1,i1,a2,i2,len)
     {caml_array_blit
       (a1,caml_ephe_key_offset + i1 - 1,a2,caml_ephe_key_offset + i2 - 1,len);
      return 0}
    function caml_gr_remember_mode()
     {caml_failwith("caml_gr_remember_mode not Implemented")}
    function caml_bswap16(x){return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8}
    function caml_ml_set_binary_mode(chanid,mode)
     {var chan=caml_ml_channels[chanid],data=caml_global_data.fds[chan.fd];
      data.flags.text = ! mode;
      data.flags.binary = mode;
      return 0}
    function caml_final_register(){return 0}
    function caml_gr_draw_rect(x,y,w,h)
     {var s=caml_gr_state_get();
      s.context.strokeRect(x,s.height - y,w,- h);
      return 0}
    function caml_string_get16(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 1)caml_string_bound_error();
      var b1=caml_string_unsafe_get(s,i),b2=caml_string_unsafe_get(s,i + 1);
      return b2 << 8 | b1}
    function caml_ephe_unset_data(x,data)
     {x[caml_ephe_data_offset] = undefined;return 0}
    function caml_output_value(chanid,v,flags)
     {var s=caml_output_value_to_string(v,flags);
      caml_ml_output(chanid,s,0,caml_ml_string_length(s));
      return 0}
    function caml_ba_get_3(ba,i0,i1,i2){return ba.get(ba.offset([i0,i1,i2]))}
    var caml_ephe_blit_key=caml_weak_blit;
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_hash_mix_string(h,v)
     {return caml_hash_mix_jsbytes(h,caml_jsbytes_of_string(v))}
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > 256)sz = 256;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v && v.caml_custom)
         {if
           (caml_custom_ops[v.caml_custom]
            &&
            caml_custom_ops[v.caml_custom].hash)
           {var hh=caml_custom_ops[v.caml_custom].hash(v);
            h = caml_hash_mix_int(h,hh);
            num--}}
        else
         if(v instanceof Array && v[0] === (v[0] | 0))
          switch(v[0])
           {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
            case 250:queue[--rd] = v[1];break;
            default:
             var tag=v.length - 1 << 10 | v[0];
             h = caml_hash_mix_int(h,tag);
             for(i = 1,len = v.length;i < len;i++)
              {if(wr >= sz)break;queue[wr++] = v[i]}
             break}
         else
          if(caml_is_ml_bytes(v))
           {h = caml_hash_mix_bytes(h,v);num--}
          else
           if(caml_is_ml_string(v))
            {h = caml_hash_mix_string(h,v);num--}
           else
            if(typeof v === "string")
             {h = caml_hash_mix_jsbytes(h,v);num--}
            else
             if(v === (v | 0))
              {h = caml_hash_mix_int(h,v + v + 1);num--}
             else
              if(v === + v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_ba_to_typed_array(ba){return ba.data}
    function caml_js_export_var()
     {return typeof module !== "undefined" && module && module.exports
              ?module.exports
              :joo_global_object}
    function caml_bytes_get32(s,i)
     {if(i >>> 0 >= s.l - 3)caml_bytes_bound_error();
      var
       b1=caml_bytes_unsafe_get(s,i),
       b2=caml_bytes_unsafe_get(s,i + 1),
       b3=caml_bytes_unsafe_get(s,i + 2),
       b4=caml_bytes_unsafe_get(s,i + 3);
      return b4 << 24 | b3 << 16 | b2 << 8 | b1}
    function caml_frexp_float(x)
     {if(x == 0 || ! isFinite(x))return [0,x,0];
      var neg=x < 0;
      if(neg)x = - x;
      var exp=Math.max(- 1023,jsoo_floor_log2(x) + 1);
      x *= Math.pow(2,- exp);
      while(x < 0.5){x *= 2;exp--}
      while(x >= 1){x *= 0.5;exp++}
      if(neg)x = - x;
      return [0,x,exp]}
    function caml_string_get64(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s) - 7)caml_string_bound_error();
      var a=new Array(8);
      for(var j=0;j < 8;j++)a[7 - j] = caml_string_unsafe_get(s,i + j);
      return caml_int64_of_bytes(a)}
    function caml_ml_pos_out_64(chanid)
     {caml_ml_flush(chanid);
      return caml_int64_of_float(caml_ml_channels[chanid].offset)}
    function caml_gr_close_subwindow(a)
     {caml_failwith("caml_gr_close_subwindow not Implemented")}
    function caml_set_static_env(k,v)
     {if(! joo_global_object.jsoo_static_env)
       joo_global_object.jsoo_static_env = {};
      joo_global_object.jsoo_static_env[k] = v;
      return 0}
    function caml_ba_change_layout(ba,layout)
     {if(ba.layout == layout)return ba;
      var new_dims=[];
      for(var i=0;i < ba.dims.length;i++)
       new_dims[i] = ba.dims[ba.dims.length - i - 1];
      return caml_ba_create_unsafe(ba.kind,layout,new_dims,ba.data)}
    function caml_js_new(c,a)
     {switch(a.length)
       {case 1:return new c();
        case 2:return new c(a[1]);
        case 3:return new c(a[1],a[2]);
        case 4:return new c(a[1],a[2],a[3]);
        case 5:return new c(a[1],a[2],a[3],a[4]);
        case 6:return new c(a[1],a[2],a[3],a[4],a[5]);
        case 7:return new c(a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:return new c(a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
      function F(){return c.apply(this,caml_js_from_array(a))}
      F.prototype = c.prototype;
      return new F()}
    function caml_gr_current_y(){var s=caml_gr_state_get();return s.y}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    function caml_obj_truncate(x,s)
     {if(s <= 0 || s + 1 > x.length)caml_invalid_argument("Obj.truncate");
      if(x.length != s + 1)x.length = s + 1;
      return 0}
    function caml_js_to_string(s){return caml_string_of_jsstring(s)}
    function is_digit_odd(nat,ofs){if(nat.data[ofs] & 1)return 1;return 0}
    function caml_runtime_variant(_unit){return caml_string_of_jsbytes("")}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_array_concat(l)
     {var a=[0];
      while(l !== 0)
       {var b=l[1];for(var i=1;i < b.length;i++)a.push(b[i]);l = l[2]}
      return a}
    function caml_gr_open_graph(info)
     {var g=joo_global_object,info=caml_jsstring_of_string(info);
      function get(name)
       {var res=info.match("(^|,) *" + name + " *= *([a-zA-Z0-9_]+) *(,|$)");
        if(res)return res[2]}
      var specs=[];
      if(! (info == ""))specs.push(info);
      var target=get("target");
      if(! target)target = "";
      var status=get("status");
      if(! status)specs.push("status=1");
      var w=get("width");
      w = w?parseInt(w):200;
      specs.push("width=" + w);
      var h=get("height");
      h = h?parseInt(h):200;
      specs.push("height=" + h);
      var win=g.open("about:blank",target,specs.join(","));
      if(! win)caml_failwith("Graphics.open_graph: cannot open the window");
      var doc=win.document,canvas=doc.createElement("canvas");
      canvas.width = w;
      canvas.height = h;
      var ctx=caml_gr_state_create(canvas,w,h);
      ctx.set_title = function(title){doc.title = title};
      caml_gr_state_set(ctx);
      var body=doc.body;
      body.style.margin = "0px";
      body.appendChild(canvas);
      return 0}
    function caml_ephe_set_data(x,data)
     {x[caml_ephe_data_offset] = data;return 0}
    function caml_make_float_vect(len)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 254;
      for(var i=1;i < len;i++)b[i] = 0;
      return b}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_log1p_float(x)
     {var y=1 + x,z=y - 1;return z == 0?x:x * Math.log(y) / z}
    function caml_int64_or(x,y){return x.or(y)}
    function caml_lazy_make_forward(v){return [250,v]}
    function lor_digit_nat(nat1,ofs1,nat2,ofs2)
     {nat1.data[ofs1] |= nat2.data[ofs2];return 0}
    function caml_gr_blit_image(im,x,y)
     {var
       s=caml_gr_state_get(),
       im2=
        s.context.getImageData(x,s.height - im.height - y,im.width,im.height);
      for(var i=0;i < im2.data.length;i += 4)
       {im.data[i] = im2.data[i];
        im.data[i + 1] = im2.data[i + 1];
        im.data[i + 2] = im2.data[i + 2];
        im.data[i + 3] = im2.data[i + 3]}
      return 0}
    function caml_gr_window_id(a)
     {caml_failwith("caml_gr_window_id not Implemented")}
    function caml_js_on_ie()
     {var
       ua=
        joo_global_object.navigator?joo_global_object.navigator.userAgent:"";
      return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0}
    function caml_int64_shift_right(x,s){return x.shift_right(s)}
    function caml_ba_layout(ba){return ba.layout}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_array_set(array,index,newval)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      array[index + 1] = newval;
      return 0}
    function caml_bytes_greaterequal(s1,s2)
     {return caml_bytes_lessequal(s2,s1)}
    function set_digit_nat(nat,ofs,digit){nat.data[ofs] = digit;return 0}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_CamlinternalMod_update_mod(shape,real,x)
     {if(typeof shape === "number")
       switch(shape){case 0:case 1:case 2:default:caml_update_dummy(real,x)}
      else
       switch(shape[0])
        {case 0:
          for(var i=1;i < shape[1].length;i++)
           caml_CamlinternalMod_update_mod(shape[1][i],real[i],x[i]);
          break
         }
      return 0}
    function caml_gr_doc_of_state(state)
     {if(state.canvas.ownerDocument)return state.canvas.ownerDocument}
    function caml_ml_output_int(chanid,i)
     {var
       arr=[i >> 24 & 0xFF,i >> 16 & 0xFF,i >> 8 & 0xFF,i & 0xFF],
       s=caml_string_of_array(arr);
      caml_ml_output(chanid,s,0,4);
      return 0}
    function caml_obj_with_tag(tag,x)
     {var l=x.length,a=new Array(l);
      a[0] = tag;
      for(var i=1;i < l;i++)a[i] = x[i];
      return a}
    var caml_initial_time=new Date().getTime() * 0.001;
    function caml_sys_time()
     {var now=new Date().getTime();return now * 0.001 - caml_initial_time}
    function caml_ml_channel_size(chanid)
     {var chan=caml_ml_channels[chanid];return chan.file.length()}
    function caml_raw_backtrace_slot()
     {caml_invalid_argument
       ("Printexc.get_raw_backtrace_slot: index out of bounds")}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_js_wrap_meth_callback_strict(arity,f)
     {return function()
       {var args=new Array(arity + 1),len=Math.min(arguments.length,arity);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_backtrace_status(){return 0}
    function caml_install_signal_handler(){return 0}
    function caml_sys_argv(a){return caml_argv}
    function caml_ba_fill(ba,v){ba.fill(v);return 0}
    function caml_modf_float(x)
     {if(isFinite(x))
       {var neg=1 / x < 0;
        x = Math.abs(x);
        var i=Math.floor(x),f=x - i;
        if(neg){i = - i;f = - f}
        return [0,f,i]}
      if(isNaN(x))return [0,NaN,NaN];
      return [0,1 / x,x]}
    function caml_gc_get(){return [0,0,0,0,0,0,0,0,0]}
    function caml_float_compare(x,y)
     {if(x === y)return 0;
      if(x < y)return - 1;
      if(x > y)return 1;
      if(x === x)return 1;
      if(y === y)return - 1;
      return 0}
    function caml_string_set32(s,i,i32){return caml_bytes_set32(s,i,i32)}
    function caml_parse_engine(tables,env,cmd,arg)
     {var
       ERRCODE=256,
       loop=6,
       testshift=7,
       shift=8,
       shift_recover=9,
       reduce=10,
       READ_TOKEN=0,
       RAISE_PARSE_ERROR=1,
       GROW_STACKS_1=2,
       GROW_STACKS_2=3,
       COMPUTE_SEMANTIC_ACTION=4,
       CALL_ERROR_FUNCTION=5,
       env_s_stack=1,
       env_v_stack=2,
       env_symb_start_stack=3,
       env_symb_end_stack=4,
       env_stacksize=5,
       env_stackbase=6,
       env_curr_char=7,
       env_lval=8,
       env_symb_start=9,
       env_symb_end=10,
       env_asp=11,
       env_rule_len=12,
       env_rule_number=13,
       env_sp=14,
       env_state=15,
       env_errflag=16,
       tbl_transl_const=2,
       tbl_transl_block=3,
       tbl_lhs=4,
       tbl_len=5,
       tbl_defred=6,
       tbl_dgoto=7,
       tbl_sindex=8,
       tbl_rindex=9,
       tbl_gindex=10,
       tbl_tablesize=11,
       tbl_table=12,
       tbl_check=13;
      if(! tables.dgoto)
       {tables.defred = caml_lex_array(tables[tbl_defred]);
        tables.sindex = caml_lex_array(tables[tbl_sindex]);
        tables.check = caml_lex_array(tables[tbl_check]);
        tables.rindex = caml_lex_array(tables[tbl_rindex]);
        tables.table = caml_lex_array(tables[tbl_table]);
        tables.len = caml_lex_array(tables[tbl_len]);
        tables.lhs = caml_lex_array(tables[tbl_lhs]);
        tables.gindex = caml_lex_array(tables[tbl_gindex]);
        tables.dgoto = caml_lex_array(tables[tbl_dgoto])}
      var
       res=0,
       n,
       n1,
       n2,
       state1,
       sp=env[env_sp],
       state=env[env_state],
       errflag=env[env_errflag];
      exit:
      for(;;)
       switch(cmd)
        {case 0:state = 0;errflag = 0;
         case 6:
          n = tables.defred[state];
          if(n != 0){cmd = reduce;break}
          if(env[env_curr_char] >= 0){cmd = testshift;break}
          res = READ_TOKEN;
          break exit;
         case 1:
          if(arg instanceof Array)
           {env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
            env[env_lval] = arg[1]}
          else
           {env[env_curr_char] = tables[tbl_transl_const][arg + 1];
            env[env_lval] = 0}
         case 7:
          n1 = tables.sindex[state];
          n2 = n1 + env[env_curr_char];
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
           {cmd = shift;break}
          n1 = tables.rindex[state];
          n2 = n1 + env[env_curr_char];
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
           {n = tables.table[n2];cmd = reduce;break}
          if(errflag <= 0){res = CALL_ERROR_FUNCTION;break exit}
         case 5:
          if(errflag < 3)
           {errflag = 3;
            for(;;)
             {state1 = env[env_s_stack][sp + 1];
              n1 = tables.sindex[state1];
              n2 = n1 + ERRCODE;
              if
               (n1
                !=
                0
                &&
                n2
                >=
                0
                &&
                n2
                <=
                tables[tbl_tablesize]
                &&
                tables.check[n2]
                ==
                ERRCODE)
               {cmd = shift_recover;break}
              else
               {if(sp <= env[env_stackbase])return RAISE_PARSE_ERROR;sp--}}}
          else
           {if(env[env_curr_char] == 0)return RAISE_PARSE_ERROR;
            env[env_curr_char] = - 1;
            cmd = loop;
            break}
         case 8:env[env_curr_char] = - 1;if(errflag > 0)errflag--;
         case 9:
          state = tables.table[n2];
          sp++;
          if(sp >= env[env_stacksize]){res = GROW_STACKS_1;break exit}
         case 2:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = env[env_lval];
          env[env_symb_start_stack][sp + 1] = env[env_symb_start];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end];
          cmd = loop;
          break;
         case 10:
          var m=tables.len[n];
          env[env_asp] = sp;
          env[env_rule_number] = n;
          env[env_rule_len] = m;
          sp = sp - m + 1;
          m = tables.lhs[n];
          state1 = env[env_s_stack][sp];
          n1 = tables.gindex[m];
          n2 = n1 + state1;
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            state1)
           state = tables.table[n2];
          else
           state = tables.dgoto[m];
          if(sp >= env[env_stacksize]){res = GROW_STACKS_2;break exit}
         case 3:res = COMPUTE_SEMANTIC_ACTION;break exit;
         case 4:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = arg;
          var asp=env[env_asp];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
          if(sp > asp)
           env[env_symb_start_stack][sp + 1]
           =
           env[env_symb_end_stack][asp + 1];
          cmd = loop;
          break;
         default:return RAISE_PARSE_ERROR}
      env[env_sp] = sp;
      env[env_state] = state;
      env[env_errflag] = errflag;
      return res}
    function caml_array_fill(array,ofs,len,v)
     {for(var i=0;i < len;i++)array[ofs + i + 1] = v;return 0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_bytes_greaterthan(s1,s2){return caml_bytes_lessthan(s2,s1)}
    function caml_gr_make_image(arr)
     {var
       s=caml_gr_state_get(),
       h=arr.length - 1,
       w=arr[1].length - 1,
       im=s.context.createImageData(w,h);
      for(var i=0;i < h;i++)
       for(var j=0;j < w;j++)
        {var c=arr[i + 1][j + 1],o=i * (w * 4) + j * 4;
         if(c == - 1)
          {im.data[o + 0] = 0;
           im.data[o + 1] = 0;
           im.data[o + 2] = 0;
           im.data[o + 3] = 0}
         else
          {im.data[o + 0] = c >> 16 & 0xff;
           im.data[o + 1] = c >> 8 & 0xff;
           im.data[o + 2] = c >> 0 & 0Xff;
           im.data[o + 3] = 0xff}}
      return im}
    function caml_ml_set_channel_output(chanid,f)
     {var chan=caml_ml_channels[chanid];
      caml_global_data.fds[chan.fd].output = f;
      return 0}
    function caml_read_file_content(name)
     {var root=resolve_fs_device(name);
      if(root.device.exists(root.rest))
       {var
         file=root.device.open(root.rest,{rdonly:1}),
         len=file.length(),
         buf=caml_create_bytes(len);
        file.read(0,buf,0,len);
        return caml_string_of_bytes(buf)}
      caml_raise_no_such_file(name)}
    function caml_js_to_float(x){return x}
    joo_global_object.jsoo_runtime
    =
    {caml_ephe_check_data:caml_ephe_check_data,
     caml_ephe_unset_data:caml_ephe_unset_data,
     caml_ephe_set_data:caml_ephe_set_data,
     caml_ephe_get_data_copy:caml_ephe_get_data_copy,
     caml_ephe_get_data:caml_ephe_get_data,
     caml_ephe_blit_data:caml_ephe_blit_data,
     caml_ephe_unset_key:caml_ephe_unset_key,
     caml_ephe_set_key:caml_ephe_set_key,
     caml_ephe_check_key:caml_ephe_check_key,
     caml_ephe_get_key_copy:caml_ephe_get_key_copy,
     caml_ephe_get_key:caml_ephe_get_key,
     caml_ephe_blit_key:caml_ephe_blit_key,
     caml_ephe_create:caml_ephe_create,
     caml_weak_blit:caml_weak_blit,
     caml_weak_check:caml_weak_check,
     caml_weak_get_copy:caml_weak_get_copy,
     caml_weak_get:caml_weak_get,
     caml_weak_set:caml_weak_set,
     caml_weak_create:caml_weak_create,
     caml_ephe_data_offset:caml_ephe_data_offset,
     caml_ephe_key_offset:caml_ephe_key_offset,
     unix_isatty:unix_isatty,
     win_handle_fd:win_handle_fd,
     win_cleanup:win_cleanup,
     win_startup:win_startup,
     unix_mktime:unix_mktime,
     unix_localtime:unix_localtime,
     unix_gmtime:unix_gmtime,
     unix_time:unix_time,
     unix_gettimeofday:unix_gettimeofday,
     re_replacement_text:re_replacement_text,
     re_partial_match:re_partial_match,
     re_string_match:re_string_match,
     re_search_backward:re_search_backward,
     re_search_forward:re_search_forward,
     re_match:re_match,
     caml_spacetime_only_works_for_native_code:
     caml_spacetime_only_works_for_native_code,
     caml_register_channel_for_spacetime:caml_register_channel_for_spacetime,
     caml_spacetime_enabled:caml_spacetime_enabled,
     caml_ml_runtime_warnings_enabled:caml_ml_runtime_warnings_enabled,
     caml_ml_enable_runtime_warnings:caml_ml_enable_runtime_warnings,
     caml_runtime_warnings:caml_runtime_warnings,
     unix_inet_addr_of_string:unix_inet_addr_of_string,
     caml_install_signal_handler:caml_install_signal_handler,
     caml_runtime_parameters:caml_runtime_parameters,
     caml_runtime_variant:caml_runtime_variant,
     caml_sys_isatty:caml_sys_isatty,
     caml_sys_get_config:caml_sys_get_config,
     caml_sys_const_backend_type:caml_sys_const_backend_type,
     caml_sys_const_ostype_cygwin:caml_sys_const_ostype_cygwin,
     caml_sys_const_ostype_win32:caml_sys_const_ostype_win32,
     caml_sys_const_ostype_unix:caml_sys_const_ostype_unix,
     caml_sys_const_max_wosize:caml_sys_const_max_wosize,
     caml_sys_const_int_size:caml_sys_const_int_size,
     caml_sys_const_word_size:caml_sys_const_word_size,
     caml_sys_const_big_endian:caml_sys_const_big_endian,
     caml_sys_random_seed:caml_sys_random_seed,
     caml_sys_time:caml_sys_time,
     caml_sys_system_command:caml_sys_system_command,
     caml_sys_executable_name:caml_sys_executable_name,
     caml_sys_modify_argv:caml_sys_modify_argv,
     caml_sys_argv:caml_sys_argv,
     caml_sys_get_argv:caml_sys_get_argv,
     caml_executable_name:caml_executable_name,
     caml_argv:caml_argv,
     caml_sys_getenv:caml_sys_getenv,
     caml_set_static_env:caml_set_static_env,
     caml_sys_exit:caml_sys_exit,
     caml_raise_sys_error:caml_raise_sys_error,
     caml_is_printable:caml_is_printable,
     caml_get_global_data:caml_get_global_data,
     caml_register_global:caml_register_global,
     caml_global_data:caml_global_data,
     caml_named_value:caml_named_value,
     caml_register_named_value:caml_register_named_value,
     caml_named_values:caml_named_values,
     caml_call_gen:caml_call_gen,
     caml_set_parser_trace:caml_set_parser_trace,
     caml_parse_engine:caml_parse_engine,
     caml_fresh_oo_id:caml_fresh_oo_id,
     caml_set_oo_id:caml_set_oo_id,
     caml_oo_last_id:caml_oo_last_id,
     caml_get_public_method:caml_get_public_method,
     caml_lazy_make_forward:caml_lazy_make_forward,
     caml_obj_make_forward:caml_obj_make_forward,
     caml_obj_truncate:caml_obj_truncate,
     caml_obj_dup:caml_obj_dup,
     caml_obj_with_tag:caml_obj_with_tag,
     caml_obj_block:caml_obj_block,
     caml_obj_set_tag:caml_obj_set_tag,
     caml_obj_tag:caml_obj_tag,
     caml_obj_is_block:caml_obj_is_block,
     caml_update_dummy:caml_update_dummy,
     deserialize_nat:deserialize_nat,
     serialize_nat:serialize_nat,
     lxor_digit_nat:lxor_digit_nat,
     lor_digit_nat:lor_digit_nat,
     land_digit_nat:land_digit_nat,
     compare_nat_real:compare_nat_real,
     compare_nat:compare_nat,
     compare_digits_nat:compare_digits_nat,
     shift_right_nat:shift_right_nat,
     div_nat:div_nat,
     div_digit_nat:div_digit_nat,
     div_helper:div_helper,
     shift_left_nat:shift_left_nat,
     square_nat:square_nat,
     mult_nat:mult_nat,
     mult_digit_nat:mult_digit_nat,
     sub_nat:sub_nat,
     decr_nat:decr_nat,
     complement_nat:complement_nat,
     add_nat:add_nat,
     incr_nat:incr_nat,
     is_digit_odd:is_digit_odd,
     is_digit_zero:is_digit_zero,
     is_digit_int:is_digit_int,
     num_leading_zero_bits_in_digit:num_leading_zero_bits_in_digit,
     num_digits_nat:num_digits_nat,
     nth_digit_nat_native:nth_digit_nat_native,
     set_digit_nat_native:set_digit_nat_native,
     nth_digit_nat:nth_digit_nat,
     set_digit_nat:set_digit_nat,
     blit_nat:blit_nat,
     set_to_zero_nat:set_to_zero_nat,
     create_nat:create_nat,
     nat_of_array:nat_of_array,
     caml_hash_nat:caml_hash_nat,
     MlNat:MlNat,
     initialize_nat:initialize_nat,
     caml_js_to_string:caml_js_to_string,
     caml_to_js_string:caml_to_js_string,
     caml_js_from_string:caml_js_from_string,
     caml_new_string:caml_new_string,
     caml_js_to_byte_string:caml_js_to_byte_string,
     caml_is_ml_string:caml_is_ml_string,
     caml_is_ml_bytes:caml_is_ml_bytes,
     caml_string_of_jsstring:caml_string_of_jsstring,
     caml_jsstring_of_string:caml_jsstring_of_string,
     caml_jsbytes_of_string:caml_jsbytes_of_string,
     caml_string_of_jsbytes:caml_string_of_jsbytes,
     caml_bytes_of_string:caml_bytes_of_string,
     caml_string_of_bytes:caml_string_of_bytes,
     caml_string_lessthan:caml_string_lessthan,
     caml_string_lessequal:caml_string_lessequal,
     caml_string_equal:caml_string_equal,
     caml_string_compare:caml_string_compare,
     caml_ml_string_length:caml_ml_string_length,
     caml_string_unsafe_set:caml_string_unsafe_set,
     caml_string_unsafe_get:caml_string_unsafe_get,
     caml_bytes_of_jsbytes:caml_bytes_of_jsbytes,
     caml_ml_bytes_length:caml_ml_bytes_length,
     caml_blit_string:caml_blit_string,
     caml_blit_bytes:caml_blit_bytes,
     caml_fill_string:caml_fill_string,
     caml_fill_bytes:caml_fill_bytes,
     caml_bytes_greaterthan:caml_bytes_greaterthan,
     caml_string_greaterthan:caml_string_greaterthan,
     caml_bytes_greaterequal:caml_bytes_greaterequal,
     caml_string_greaterequal:caml_string_greaterequal,
     caml_bytes_lessthan:caml_bytes_lessthan,
     caml_bytes_lessequal:caml_bytes_lessequal,
     caml_bytes_notequal:caml_bytes_notequal,
     caml_string_notequal:caml_string_notequal,
     caml_bytes_equal:caml_bytes_equal,
     caml_bytes_compare:caml_bytes_compare,
     caml_bytes_of_array:caml_bytes_of_array,
     caml_string_of_array:caml_string_of_array,
     caml_create_bytes:caml_create_bytes,
     caml_create_string:caml_create_string,
     caml_array_of_string:caml_array_of_string,
     caml_array_of_bytes:caml_array_of_bytes,
     caml_convert_bytes_to_array:caml_convert_bytes_to_array,
     caml_convert_string_to_bytes:caml_convert_string_to_bytes,
     MlBytes:MlBytes,
     caml_bytes_of_utf16_jsstring:caml_bytes_of_utf16_jsstring,
     caml_bytes_set:caml_bytes_set,
     caml_string_set64:caml_string_set64,
     caml_bytes_set64:caml_bytes_set64,
     caml_string_set32:caml_string_set32,
     caml_bytes_set32:caml_bytes_set32,
     caml_string_set16:caml_string_set16,
     caml_bytes_set16:caml_bytes_set16,
     caml_string_set:caml_string_set,
     caml_bytes_get:caml_bytes_get,
     caml_bytes_get64:caml_bytes_get64,
     caml_string_get64:caml_string_get64,
     caml_bytes_get32:caml_bytes_get32,
     caml_string_get32:caml_string_get32,
     caml_bytes_get16:caml_bytes_get16,
     caml_string_get16:caml_string_get16,
     caml_string_get:caml_string_get,
     caml_bytes_bound_error:caml_bytes_bound_error,
     caml_string_bound_error:caml_string_bound_error,
     caml_bytes_unsafe_set:caml_bytes_unsafe_set,
     caml_bytes_unsafe_get:caml_bytes_unsafe_get,
     jsoo_is_ascii:jsoo_is_ascii,
     caml_utf16_of_utf8:caml_utf16_of_utf8,
     caml_utf8_of_utf16:caml_utf8_of_utf16,
     caml_subarray_to_jsbytes:caml_subarray_to_jsbytes,
     caml_str_repeat:caml_str_repeat,
     caml_md5_bytes:caml_md5_bytes,
     caml_md5_string:caml_md5_string,
     caml_md5_chan:caml_md5_chan,
     caml_output_value_to_buffer:caml_output_value_to_buffer,
     caml_output_value_to_bytes:caml_output_value_to_bytes,
     caml_output_value_to_string:caml_output_value_to_string,
     caml_output_val:caml_output_val,
     caml_legacy_custom_code:caml_legacy_custom_code,
     MlObjectTable:MlObjectTable,
     caml_marshal_data_size:caml_marshal_data_size,
     caml_input_value_from_reader:caml_input_value_from_reader,
     caml_custom_ops:caml_custom_ops,
     caml_nativeint_unmarshal:caml_nativeint_unmarshal,
     caml_int32_unmarshal:caml_int32_unmarshal,
     caml_int64_marshal:caml_int64_marshal,
     caml_int64_unmarshal:caml_int64_unmarshal,
     caml_input_value_from_bytes:caml_input_value_from_bytes,
     caml_input_value_from_string:caml_input_value_from_string,
     caml_float_of_bytes:caml_float_of_bytes,
     BigStringReader:BigStringReader,
     MlStringReader:MlStringReader,
     caml_marshal_constants:caml_marshal_constants,
     caml_new_lex_engine:caml_new_lex_engine,
     caml_lex_engine:caml_lex_engine,
     caml_lex_array:caml_lex_array,
     caml_js_export_var:caml_js_export_var,
     caml_js_object:caml_js_object,
     caml_pure_js_expr:caml_pure_js_expr,
     caml_js_expr:caml_js_expr,
     caml_js_eval_string:caml_js_eval_string,
     caml_js_equals:caml_js_equals,
     caml_js_wrap_meth_callback_unsafe:caml_js_wrap_meth_callback_unsafe,
     caml_js_wrap_meth_callback_strict:caml_js_wrap_meth_callback_strict,
     caml_js_wrap_meth_callback_arguments:caml_js_wrap_meth_callback_arguments,
     caml_js_wrap_meth_callback:caml_js_wrap_meth_callback,
     caml_js_wrap_callback_strict:caml_js_wrap_callback_strict,
     caml_js_wrap_callback_arguments:caml_js_wrap_callback_arguments,
     caml_js_wrap_callback:caml_js_wrap_callback,
     caml_ojs_new_arr:caml_ojs_new_arr,
     caml_js_new:caml_js_new,
     caml_js_meth_call:caml_js_meth_call,
     caml_js_fun_call:caml_js_fun_call,
     caml_js_call:caml_js_call,
     caml_js_var:caml_js_var,
     caml_list_to_js_array:caml_list_to_js_array,
     caml_list_of_js_array:caml_list_of_js_array,
     caml_js_to_array:caml_js_to_array,
     caml_js_from_array:caml_js_from_array,
     caml_js_to_float:caml_js_to_float,
     caml_js_from_float:caml_js_from_float,
     caml_js_to_bool:caml_js_to_bool,
     caml_js_from_bool:caml_js_from_bool,
     caml_js_error_of_exception:caml_js_error_of_exception,
     caml_exn_with_js_backtrace:caml_exn_with_js_backtrace,
     caml_wrap_exception:caml_wrap_exception,
     caml_is_js:caml_is_js,
     js_print_stderr:js_print_stderr,
     js_print_stdout:js_print_stdout,
     caml_trampoline_return:caml_trampoline_return,
     caml_trampoline:caml_trampoline,
     caml_js_get_console:caml_js_get_console,
     caml_js_html_entities:caml_js_html_entities,
     caml_js_html_escape:caml_js_html_escape,
     caml_js_on_ie:caml_js_on_ie,
     caml_js_typeof:caml_js_typeof,
     caml_js_instanceof:caml_js_instanceof,
     caml_js_delete:caml_js_delete,
     caml_js_get:caml_js_get,
     caml_js_set:caml_js_set,
     caml_js_pure_expr:caml_js_pure_expr,
     caml_ml_output_int:caml_ml_output_int,
     caml_ml_pos_out_64:caml_ml_pos_out_64,
     caml_ml_pos_out:caml_ml_pos_out,
     caml_ml_seek_out_64:caml_ml_seek_out_64,
     caml_ml_seek_out:caml_ml_seek_out,
     caml_output_value:caml_output_value,
     caml_ml_output_char:caml_ml_output_char,
     caml_ml_output:caml_ml_output,
     caml_ml_output_bytes:caml_ml_output_bytes,
     caml_ml_flush:caml_ml_flush,
     caml_ml_input_scan_line:caml_ml_input_scan_line,
     caml_ml_pos_in_64:caml_ml_pos_in_64,
     caml_ml_pos_in:caml_ml_pos_in,
     caml_ml_seek_in_64:caml_ml_seek_in_64,
     caml_ml_seek_in:caml_ml_seek_in,
     caml_ml_input_int:caml_ml_input_int,
     caml_ml_input_char:caml_ml_input_char,
     caml_input_value:caml_input_value,
     caml_ml_input:caml_ml_input,
     caml_ml_may_refill_input:caml_ml_may_refill_input,
     caml_ml_refill_input:caml_ml_refill_input,
     caml_ml_set_channel_refill:caml_ml_set_channel_refill,
     caml_ml_set_channel_output:caml_ml_set_channel_output,
     caml_ml_channel_size_64:caml_ml_channel_size_64,
     caml_ml_channel_size:caml_ml_channel_size,
     caml_ml_close_channel:caml_ml_close_channel,
     caml_ml_set_binary_mode:caml_ml_set_binary_mode,
     caml_ml_open_descriptor_in:caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out:caml_ml_open_descriptor_out,
     caml_ml_out_channels_list:caml_ml_out_channels_list,
     caml_ml_channels:caml_ml_channels,
     caml_ml_set_channel_name:caml_ml_set_channel_name,
     caml_sys_open:caml_sys_open,
     caml_std_output:caml_std_output,
     caml_sys_close:caml_sys_close,
     caml_int64_bswap:caml_int64_bswap,
     caml_int32_bswap:caml_int32_bswap,
     caml_bswap16:caml_bswap16,
     caml_mod:caml_mod,
     caml_div:caml_div,
     caml_mul:caml_mul,
     caml_int_of_string:caml_int_of_string,
     caml_parse_digit:caml_parse_digit,
     caml_parse_sign_and_base:caml_parse_sign_and_base,
     caml_format_int:caml_format_int,
     caml_CamlinternalMod_update_mod:caml_CamlinternalMod_update_mod,
     caml_CamlinternalMod_init_mod:caml_CamlinternalMod_init_mod,
     caml_int64_hash:caml_int64_hash,
     caml_int64_to_bytes:caml_int64_to_bytes,
     caml_int64_of_bytes:caml_int64_of_bytes,
     caml_int64_hi32:caml_int64_hi32,
     caml_int64_lo32:caml_int64_lo32,
     caml_int64_create_lo_hi:caml_int64_create_lo_hi,
     caml_int64_create_lo_mi_hi:caml_int64_create_lo_mi_hi,
     caml_int64_of_string:caml_int64_of_string,
     caml_int64_format:caml_int64_format,
     caml_int64_of_float:caml_int64_of_float,
     caml_int64_to_float:caml_int64_to_float,
     caml_int64_to_int32:caml_int64_to_int32,
     caml_int64_of_int32:caml_int64_of_int32,
     caml_int64_mod:caml_int64_mod,
     caml_int64_div:caml_int64_div,
     caml_int64_shift_right:caml_int64_shift_right,
     caml_int64_shift_right_unsigned:caml_int64_shift_right_unsigned,
     caml_int64_shift_left:caml_int64_shift_left,
     caml_int64_xor:caml_int64_xor,
     caml_int64_or:caml_int64_or,
     caml_int64_and:caml_int64_and,
     caml_int64_is_negative:caml_int64_is_negative,
     caml_int64_is_zero:caml_int64_is_zero,
     caml_int64_mul:caml_int64_mul,
     caml_int64_sub:caml_int64_sub,
     caml_int64_add:caml_int64_add,
     caml_int64_neg:caml_int64_neg,
     caml_int64_compare:caml_int64_compare,
     caml_int64_ult:caml_int64_ult,
     MlInt64:MlInt64,
     caml_int64_offset:caml_int64_offset,
     caml_float_of_string:caml_float_of_string,
     caml_format_float:caml_format_float,
     caml_round_float:caml_round_float,
     caml_tanh_float:caml_tanh_float,
     caml_sinh_float:caml_sinh_float,
     caml_cosh_float:caml_cosh_float,
     caml_log10_float:caml_log10_float,
     caml_hypot_float:caml_hypot_float,
     caml_log1p_float:caml_log1p_float,
     caml_expm1_float:caml_expm1_float,
     caml_signbit_float:caml_signbit_float,
     caml_copysign_float:caml_copysign_float,
     caml_float_compare:caml_float_compare,
     caml_frexp_float:caml_frexp_float,
     caml_ldexp_float:caml_ldexp_float,
     caml_modf_float:caml_modf_float,
     caml_classify_float:caml_classify_float,
     caml_int32_float_of_bits:caml_int32_float_of_bits,
     caml_trunc_float:caml_trunc_float,
     caml_nextafter_float:caml_nextafter_float,
     caml_int64_float_of_bits:caml_int64_float_of_bits,
     caml_hexstring_of_float:caml_hexstring_of_float,
     caml_int32_bits_of_float:caml_int32_bits_of_float,
     caml_int64_bits_of_float:caml_int64_bits_of_float,
     jsoo_floor_log2:jsoo_floor_log2,
     caml_hash:caml_hash,
     caml_hash_mix_string:caml_hash_mix_string,
     caml_hash_mix_bytes:caml_hash_mix_bytes,
     caml_hash_mix_bytes_arr:caml_hash_mix_bytes_arr,
     caml_hash_mix_jsbytes:caml_hash_mix_jsbytes,
     caml_hash_mix_int64:caml_hash_mix_int64,
     caml_hash_mix_float:caml_hash_mix_float,
     caml_hash_mix_final:caml_hash_mix_final,
     caml_hash_mix_int:caml_hash_mix_int,
     caml_hash_univ_param:caml_hash_univ_param,
     caml_gr_close_subwindow:caml_gr_close_subwindow,
     caml_gr_open_subwindow:caml_gr_open_subwindow,
     caml_gr_window_id:caml_gr_window_id,
     caml_gr_display_mode:caml_gr_display_mode,
     caml_gr_remember_mode:caml_gr_remember_mode,
     caml_gr_synchronize:caml_gr_synchronize,
     caml_gr_wait_event:caml_gr_wait_event,
     caml_gr_sigio_signal:caml_gr_sigio_signal,
     caml_gr_sigio_handler:caml_gr_sigio_handler,
     caml_gr_blit_image:caml_gr_blit_image,
     caml_gr_create_image:caml_gr_create_image,
     caml_gr_draw_image:caml_gr_draw_image,
     caml_gr_dump_image:caml_gr_dump_image,
     caml_gr_make_image:caml_gr_make_image,
     caml_gr_text_size:caml_gr_text_size,
     caml_gr_set_text_size:caml_gr_set_text_size,
     caml_gr_set_font:caml_gr_set_font,
     caml_gr_draw_string:caml_gr_draw_string,
     caml_gr_draw_char:caml_gr_draw_char,
     caml_gr_draw_str:caml_gr_draw_str,
     caml_gr_fill_arc:caml_gr_fill_arc,
     caml_gr_fill_poly:caml_gr_fill_poly,
     caml_gr_fill_rect:caml_gr_fill_rect,
     caml_gr_set_line_width:caml_gr_set_line_width,
     caml_gr_draw_arc:caml_gr_draw_arc,
     caml_gr_arc_aux:caml_gr_arc_aux,
     caml_gr_draw_rect:caml_gr_draw_rect,
     caml_gr_lineto:caml_gr_lineto,
     caml_gr_current_y:caml_gr_current_y,
     caml_gr_current_x:caml_gr_current_x,
     caml_gr_moveto:caml_gr_moveto,
     caml_gr_point_color:caml_gr_point_color,
     caml_gr_plot:caml_gr_plot,
     caml_gr_set_color:caml_gr_set_color,
     caml_gr_size_y:caml_gr_size_y,
     caml_gr_size_x:caml_gr_size_x,
     caml_gr_clear_graph:caml_gr_clear_graph,
     caml_gr_resize_window:caml_gr_resize_window,
     caml_gr_set_window_title:caml_gr_set_window_title,
     caml_gr_close_graph:caml_gr_close_graph,
     caml_gr_doc_of_state:caml_gr_doc_of_state,
     caml_gr_state_create:caml_gr_state_create,
     caml_gr_state_init:caml_gr_state_init,
     caml_gr_open_graph:caml_gr_open_graph,
     caml_gr_state_set:caml_gr_state_set,
     caml_gr_state_get:caml_gr_state_get,
     caml_gr_state:caml_gr_state,
     caml_final_release:caml_final_release,
     caml_final_register_called_without_value:
     caml_final_register_called_without_value,
     caml_final_register:caml_final_register,
     caml_memprof_set:caml_memprof_set,
     caml_gc_get:caml_gc_get,
     caml_gc_set:caml_gc_set,
     caml_gc_stat:caml_gc_stat,
     caml_gc_quick_stat:caml_gc_quick_stat,
     caml_gc_counters:caml_gc_counters,
     caml_gc_compaction:caml_gc_compaction,
     caml_gc_full_major:caml_gc_full_major,
     caml_gc_major:caml_gc_major,
     caml_gc_minor:caml_gc_minor,
     MlNodeFile:MlNodeFile,
     MlNodeDevice:MlNodeDevice,
     fs_node_supported:fs_node_supported,
     MlFakeFile:MlFakeFile,
     MlFakeDevice:MlFakeDevice,
     caml_read_file_content:caml_read_file_content,
     caml_create_file:caml_create_file,
     caml_fs_init:caml_fs_init,
     caml_create_file_extern:caml_create_file_extern,
     caml_ba_map_file_bytecode:caml_ba_map_file_bytecode,
     caml_ba_map_file:caml_ba_map_file,
     caml_sys_rename:caml_sys_rename,
     caml_sys_is_directory:caml_sys_is_directory,
     caml_sys_remove:caml_sys_remove,
     caml_sys_read_directory:caml_sys_read_directory,
     caml_sys_file_exists:caml_sys_file_exists,
     caml_raise_not_a_dir:caml_raise_not_a_dir,
     caml_raise_no_such_file:caml_raise_no_such_file,
     caml_sys_chdir:caml_sys_chdir,
     caml_sys_getcwd:caml_sys_getcwd,
     caml_unmount:caml_unmount,
     caml_mount_autoload:caml_mount_autoload,
     resolve_fs_device:resolve_fs_device,
     caml_list_mount_point:caml_list_mount_point,
     jsoo_mount_point:jsoo_mount_point,
     caml_make_path:caml_make_path,
     MlFile:MlFile,
     caml_root:caml_root,
     caml_current_dir:caml_current_dir,
     caml_finish_formatting:caml_finish_formatting,
     caml_parse_format:caml_parse_format,
     caml_array_bound_error:caml_array_bound_error,
     caml_raise_not_found:caml_raise_not_found,
     caml_raise_zero_divide:caml_raise_zero_divide,
     caml_raise_end_of_file:caml_raise_end_of_file,
     caml_invalid_argument:caml_invalid_argument,
     caml_failwith:caml_failwith,
     caml_raise_with_string:caml_raise_with_string,
     caml_raise_with_arg:caml_raise_with_arg,
     caml_return_exn_constant:caml_return_exn_constant,
     caml_raise_constant:caml_raise_constant,
     caml_lessthan:caml_lessthan,
     caml_lessequal:caml_lessequal,
     caml_greaterthan:caml_greaterthan,
     caml_greaterequal:caml_greaterequal,
     caml_notequal:caml_notequal,
     caml_equal:caml_equal,
     caml_int_compare:caml_int_compare,
     caml_compare:caml_compare,
     caml_compare_val:caml_compare_val,
     caml_compare_val_number_custom:caml_compare_val_number_custom,
     caml_compare_val_get_custom:caml_compare_val_get_custom,
     caml_compare_val_tag:caml_compare_val_tag,
     caml_blit_string_to_bigstring:caml_blit_string_to_bigstring,
     caml_blit_bigstring_to_string:caml_blit_bigstring_to_string,
     caml_blit_bigstring_to_bigstring:caml_blit_bigstring_to_bigstring,
     caml_bigstring_blit_ba_to_bytes:caml_bigstring_blit_ba_to_bytes,
     caml_bigstring_blit_bytes_to_ba:caml_bigstring_blit_bytes_to_ba,
     caml_bigstring_blit_string_to_ba:caml_bigstring_blit_string_to_ba,
     caml_bigstring_blit_ba_to_ba:caml_bigstring_blit_ba_to_ba,
     caml_bigstring_memcmp:caml_bigstring_memcmp,
     bigstring_of_typed_array:bigstring_of_typed_array,
     bigstring_of_array_buffer:bigstring_of_array_buffer,
     bigstring_to_typed_array:bigstring_to_typed_array,
     bigstring_to_array_buffer:bigstring_to_array_buffer,
     caml_hash_mix_bigstring:caml_hash_mix_bigstring,
     caml_ba_from_typed_array:caml_ba_from_typed_array,
     caml_ba_kind_of_typed_array:caml_ba_kind_of_typed_array,
     caml_ba_to_typed_array:caml_ba_to_typed_array,
     caml_ba_hash:caml_ba_hash,
     caml_ba_create_from:caml_ba_create_from,
     caml_ba_deserialize:caml_ba_deserialize,
     caml_ba_serialize:caml_ba_serialize,
     caml_ba_reshape:caml_ba_reshape,
     caml_ba_slice:caml_ba_slice,
     caml_ba_sub:caml_ba_sub,
     caml_ba_blit:caml_ba_blit,
     caml_ba_fill:caml_ba_fill,
     caml_ba_set_3:caml_ba_set_3,
     caml_ba_set_2:caml_ba_set_2,
     caml_ba_set_1:caml_ba_set_1,
     caml_ba_uint8_set64:caml_ba_uint8_set64,
     caml_ba_uint8_set32:caml_ba_uint8_set32,
     caml_ba_uint8_set16:caml_ba_uint8_set16,
     caml_ba_set_generic:caml_ba_set_generic,
     caml_ba_get_3:caml_ba_get_3,
     caml_ba_get_2:caml_ba_get_2,
     caml_ba_get_1:caml_ba_get_1,
     caml_ba_uint8_get64:caml_ba_uint8_get64,
     caml_ba_uint8_get32:caml_ba_uint8_get32,
     caml_ba_uint8_get16:caml_ba_uint8_get16,
     caml_ba_get_generic:caml_ba_get_generic,
     caml_ba_dim_3:caml_ba_dim_3,
     caml_ba_dim_2:caml_ba_dim_2,
     caml_ba_dim_1:caml_ba_dim_1,
     caml_ba_dim:caml_ba_dim,
     caml_ba_num_dims:caml_ba_num_dims,
     caml_ba_layout:caml_ba_layout,
     caml_ba_kind:caml_ba_kind,
     caml_ba_change_layout:caml_ba_change_layout,
     caml_ba_create:caml_ba_create,
     caml_ba_create_unsafe:caml_ba_create_unsafe,
     caml_ba_compare:caml_ba_compare,
     Ml_Bigarray_c_1_1:Ml_Bigarray_c_1_1,
     Ml_Bigarray:Ml_Bigarray,
     caml_ba_create_buffer:caml_ba_create_buffer,
     caml_ba_get_size_per_element:caml_ba_get_size_per_element,
     caml_ba_get_size:caml_ba_get_size,
     caml_ba_init:caml_ba_init,
     caml_convert_raw_backtrace_slot:caml_convert_raw_backtrace_slot,
     caml_get_current_callstack:caml_get_current_callstack,
     caml_restore_raw_backtrace:caml_restore_raw_backtrace,
     caml_raw_backtrace_slot:caml_raw_backtrace_slot,
     caml_raw_backtrace_next_slot:caml_raw_backtrace_next_slot,
     caml_raw_backtrace_length:caml_raw_backtrace_length,
     caml_convert_raw_backtrace:caml_convert_raw_backtrace,
     caml_record_backtrace:caml_record_backtrace,
     caml_get_exception_raw_backtrace:caml_get_exception_raw_backtrace,
     caml_get_exception_backtrace:caml_get_exception_backtrace,
     caml_backtrace_status:caml_backtrace_status,
     caml_floatarray_create:caml_floatarray_create,
     caml_make_float_vect:caml_make_float_vect,
     caml_make_vect:caml_make_vect,
     caml_check_bound:caml_check_bound,
     caml_array_fill:caml_array_fill,
     caml_array_get:caml_array_get,
     caml_array_set:caml_array_set,
     caml_array_blit:caml_array_blit,
     caml_array_concat:caml_array_concat,
     caml_array_append:caml_array_append,
     caml_array_sub:caml_array_sub};
    caml_fs_init();
    caml_register_global
     (0,[248,caml_string_of_jsbytes("Out_of_memory"),0],"Out_of_memory");
    caml_register_global
     (1,[248,caml_string_of_jsbytes("Sys_error"),-1],"Sys_error");
    caml_register_global
     (2,[248,caml_string_of_jsbytes("Failure"),-2],"Failure");
    caml_register_global
     (3,
      [248,caml_string_of_jsbytes("Invalid_argument"),-3],
      "Invalid_argument");
    caml_register_global
     (4,[248,caml_string_of_jsbytes("End_of_file"),-4],"End_of_file");
    caml_register_global
     (5,
      [248,caml_string_of_jsbytes("Division_by_zero"),-5],
      "Division_by_zero");
    caml_register_global
     (6,[248,caml_string_of_jsbytes("Not_found"),-6],"Not_found");
    caml_register_global
     (7,[248,caml_string_of_jsbytes("Match_failure"),-7],"Match_failure");
    caml_register_global
     (8,[248,caml_string_of_jsbytes("Stack_overflow"),-8],"Stack_overflow");
    caml_register_global
     (9,[248,caml_string_of_jsbytes("Sys_blocked_io"),-9],"Sys_blocked_io");
    caml_register_global
     (10,[248,caml_string_of_jsbytes("Assert_failure"),-10],"Assert_failure");
    caml_register_global
     (11,
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-11],
      "Undefined_recursive_module");
    return}
  (function(){return this}()));


//# 1 "../../.js/stdlib/stdlib.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_array_concat=runtime.caml_array_concat,
     caml_array_get=runtime.caml_array_get,
     caml_array_set=runtime.caml_array_set,
     caml_array_sub=runtime.caml_array_sub,
     caml_ba_change_layout=runtime.caml_ba_change_layout,
     caml_ba_create=runtime.caml_ba_create,
     caml_ba_dim_1=runtime.caml_ba_dim_1,
     caml_ba_dim_2=runtime.caml_ba_dim_2,
     caml_ba_kind=runtime.caml_ba_kind,
     caml_ba_num_dims=runtime.caml_ba_num_dims,
     caml_ba_reshape=runtime.caml_ba_reshape,
     caml_ba_slice=runtime.caml_ba_slice,
     caml_blit_bytes=runtime.caml_blit_bytes,
     caml_blit_string=runtime.caml_blit_string,
     caml_bswap16=runtime.caml_bswap16,
     caml_bytes_get=runtime.caml_bytes_get,
     caml_bytes_get16=runtime.caml_bytes_get16,
     caml_bytes_get32=runtime.caml_bytes_get32,
     caml_bytes_get64=runtime.caml_bytes_get64,
     caml_bytes_of_string=runtime.caml_bytes_of_string,
     caml_bytes_set=runtime.caml_bytes_set,
     caml_bytes_set16=runtime.caml_bytes_set16,
     caml_bytes_set32=runtime.caml_bytes_set32,
     caml_bytes_set64=runtime.caml_bytes_set64,
     caml_bytes_unsafe_get=runtime.caml_bytes_unsafe_get,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_div=runtime.caml_div,
     caml_ephe_set_key=runtime.caml_ephe_set_key,
     caml_ephe_unset_key=runtime.caml_ephe_unset_key,
     caml_equal=runtime.caml_equal,
     caml_fill_bytes=runtime.caml_fill_bytes,
     caml_float_compare=runtime.caml_float_compare,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_floatarray_create=runtime.caml_floatarray_create,
     caml_format_float=runtime.caml_format_float,
     caml_format_int=runtime.caml_format_int,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_get_exception_raw_backtra=runtime.caml_get_exception_raw_backtrace,
     caml_get_public_method=runtime.caml_get_public_method,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_hash=runtime.caml_hash,
     caml_input_value=runtime.caml_input_value,
     caml_int32_bswap=runtime.caml_int32_bswap,
     caml_int64_add=runtime.caml_int64_add,
     caml_int64_bswap=runtime.caml_int64_bswap,
     caml_int64_compare=runtime.caml_int64_compare,
     caml_int64_float_of_bits=runtime.caml_int64_float_of_bits,
     caml_int64_format=runtime.caml_int64_format,
     caml_int64_mul=runtime.caml_int64_mul,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_int64_of_string=runtime.caml_int64_of_string,
     caml_int64_or=runtime.caml_int64_or,
     caml_int64_shift_left=runtime.caml_int64_shift_left,
     caml_int64_sub=runtime.caml_int64_sub,
     caml_int_compare=runtime.caml_int_compare,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_lessequal=runtime.caml_lessequal,
     caml_lessthan=runtime.caml_lessthan,
     caml_make_vect=runtime.caml_make_vect,
     caml_marshal_data_size=runtime.caml_marshal_data_size,
     caml_md5_string=runtime.caml_md5_string,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_channel_size=runtime.caml_ml_channel_size,
     caml_ml_channel_size_64=runtime.caml_ml_channel_size_64,
     caml_ml_close_channel=runtime.caml_ml_close_channel,
     caml_ml_flush=runtime.caml_ml_flush,
     caml_ml_input=runtime.caml_ml_input,
     caml_ml_input_char=runtime.caml_ml_input_char,
     caml_ml_open_descriptor_in=runtime.caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out=runtime.caml_ml_open_descriptor_out,
     caml_ml_output=runtime.caml_ml_output,
     caml_ml_output_bytes=runtime.caml_ml_output_bytes,
     caml_ml_output_char=runtime.caml_ml_output_char,
     caml_ml_set_binary_mode=runtime.caml_ml_set_binary_mode,
     caml_ml_set_channel_name=runtime.caml_ml_set_channel_name,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mod=runtime.caml_mod,
     caml_mul=runtime.caml_mul,
     caml_nextafter_float=runtime.caml_nextafter_float,
     caml_notequal=runtime.caml_notequal,
     caml_obj_block=runtime.caml_obj_block,
     caml_obj_make_forward=runtime.caml_obj_make_forward,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_output_value=runtime.caml_output_value,
     caml_register_global=runtime.caml_register_global,
     caml_register_named_value=runtime.caml_register_named_value,
     caml_restore_raw_backtrace=runtime.caml_restore_raw_backtrace,
     caml_set_oo_id=runtime.caml_set_oo_id,
     caml_signbit_float=runtime.caml_signbit_float,
     caml_spacetime_enabled=runtime.caml_spacetime_enabled,
     caml_spacetime_only_works_for_=
      runtime.caml_spacetime_only_works_for_native_code,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_bytes=runtime.caml_string_of_bytes,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_unsafe_get=runtime.caml_string_unsafe_get,
     caml_sys_argv=runtime.caml_sys_argv,
     caml_sys_getenv=runtime.caml_sys_getenv,
     caml_sys_open=runtime.caml_sys_open,
     caml_sys_random_seed=runtime.caml_sys_random_seed,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$0=caml_string_of_jsbytes("%,"),
     cst_really_input=caml_string_of_jsbytes("really_input"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_output_substring=caml_string_of_jsbytes("output_substring"),
     cst_output=caml_string_of_jsbytes("output"),
     cst_12g=caml_string_of_jsbytes("%.12g"),
     cst=caml_string_of_jsbytes("."),
     cst_false$1=caml_string_of_jsbytes("false"),
     cst_true$1=caml_string_of_jsbytes("true"),
     cst_false$0=caml_string_of_jsbytes("false"),
     cst_true$0=caml_string_of_jsbytes("true"),
     cst_bool_of_string=caml_string_of_jsbytes("bool_of_string"),
     cst_true=caml_string_of_jsbytes("true"),
     cst_false=caml_string_of_jsbytes("false"),
     cst_char_of_int=caml_string_of_jsbytes("char_of_int"),
     cst_Stdlib_Exit=caml_string_of_jsbytes("Stdlib.Exit"),
     cst_Stdlib_Pervasives_Exit=
      caml_string_of_jsbytes("Stdlib.Pervasives.Exit"),
     cst_option_is_None=caml_string_of_jsbytes("option is None"),
     cst_result_is_Ok=caml_string_of_jsbytes("result is Ok _"),
     cst_result_is_Error=caml_string_of_jsbytes("result is Error _"),
     cst_true$2=caml_string_of_jsbytes("true"),
     cst_false$2=caml_string_of_jsbytes("false"),
     cst$1=caml_string_of_jsbytes("\\\\"),
     cst$2=caml_string_of_jsbytes("\\'"),
     cst_b=caml_string_of_jsbytes("\\b"),
     cst_t=caml_string_of_jsbytes("\\t"),
     cst_n=caml_string_of_jsbytes("\\n"),
     cst_r=caml_string_of_jsbytes("\\r"),
     cst_Char_chr=caml_string_of_jsbytes("Char.chr"),
     cst_is_not_a_latin1_character=
      caml_string_of_jsbytes(" is not a latin1 character"),
     cst_04X=caml_string_of_jsbytes("%04X"),
     cst_U=caml_string_of_jsbytes("U+"),
     cst_is_not_an_Unicode_scalar_v=
      caml_string_of_jsbytes(" is not an Unicode scalar value"),
     cst_X=caml_string_of_jsbytes("%X"),
     err_no_pred=caml_string_of_jsbytes("U+0000 has no predecessor"),
     err_no_succ=caml_string_of_jsbytes("U+10FFFF has no successor"),
     cst_Stdlib_Sys_Break=caml_string_of_jsbytes("Stdlib.Sys.Break"),
     ocaml_version=caml_string_of_jsbytes("4.09.0"),
     cst_List_map2=caml_string_of_jsbytes("List.map2"),
     cst_List_iter2=caml_string_of_jsbytes("List.iter2"),
     cst_List_fold_left2=caml_string_of_jsbytes("List.fold_left2"),
     cst_List_fold_right2=caml_string_of_jsbytes("List.fold_right2"),
     cst_List_for_all2=caml_string_of_jsbytes("List.for_all2"),
     cst_List_exists2=caml_string_of_jsbytes("List.exists2"),
     cst_List_combine=caml_string_of_jsbytes("List.combine"),
     cst_List_rev_map2=caml_string_of_jsbytes("List.rev_map2"),
     cst_List_init=caml_string_of_jsbytes("List.init"),
     cst_List_nth$0=caml_string_of_jsbytes("List.nth"),
     cst_nth=caml_string_of_jsbytes("nth"),
     cst_List_nth=caml_string_of_jsbytes("List.nth"),
     cst_tl=caml_string_of_jsbytes("tl"),
     cst_hd=caml_string_of_jsbytes("hd"),
     cst_Bytes_of_seq_cannot_grow_b=
      caml_string_of_jsbytes("Bytes.of_seq: cannot grow bytes"),
     cst_String_rcontains_from_Byte=
      caml_string_of_jsbytes("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes=
      caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Byt=
      caml_string_of_jsbytes("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_r=
      caml_string_of_jsbytes("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Byte=
      caml_string_of_jsbytes("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_in=
      caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     cst_Bytes_concat=caml_string_of_jsbytes("Bytes.concat"),
     cst_String_blit_Bytes_blit_str=
      caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     cst_Bytes_blit=caml_string_of_jsbytes("Bytes.blit"),
     cst_String_fill_Bytes_fill=
      caml_string_of_jsbytes("String.fill / Bytes.fill"),
     cst_Bytes_extend=caml_string_of_jsbytes("Bytes.extend"),
     cst_String_sub_Bytes_sub=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     cst_String_rcontains_from_Byte$0=
      caml_string_of_jsbytes("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes$0=
      caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Byt$0=
      caml_string_of_jsbytes("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_r$0=
      caml_string_of_jsbytes("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Byte$0=
      caml_string_of_jsbytes("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_in$0=
      caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     cst$4=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_String_concat=caml_string_of_jsbytes("String.concat"),
     cst$5=caml_string_of_jsbytes("()"),
     cst_Marshal_from_bytes=caml_string_of_jsbytes("Marshal.from_bytes"),
     cst_Marshal_from_bytes$0=caml_string_of_jsbytes("Marshal.from_bytes"),
     cst_Marshal_data_size=caml_string_of_jsbytes("Marshal.data_size"),
     cst_Marshal_to_buffer_substrin=
      caml_string_of_jsbytes("Marshal.to_buffer: substring out of bounds"),
     cst_Obj_Ephemeron_blit_key=
      caml_string_of_jsbytes("Obj.Ephemeron.blit_key"),
     cst_Obj_Ephemeron_check_key=
      caml_string_of_jsbytes("Obj.Ephemeron.check_key"),
     cst_Obj_Ephemeron_unset_key=
      caml_string_of_jsbytes("Obj.Ephemeron.unset_key"),
     cst_Obj_Ephemeron_set_key=caml_string_of_jsbytes("Obj.Ephemeron.set_key"),
     cst_Obj_Ephemeron_get_key_copy=
      caml_string_of_jsbytes("Obj.Ephemeron.get_key_copy"),
     cst_Obj_Ephemeron_get_key=caml_string_of_jsbytes("Obj.Ephemeron.get_key"),
     cst_Obj_Ephemeron_create=caml_string_of_jsbytes("Obj.Ephemeron.create"),
     cst_Obj_extension_constructor$0=
      caml_string_of_jsbytes("Obj.extension_constructor"),
     cst_Obj_extension_constructor=
      caml_string_of_jsbytes("Obj.extension_constructor"),
     cst_Array_map2_arrays_must_hav=
      caml_string_of_jsbytes("Array.map2: arrays must have the same length"),
     cst_Array_iter2_arrays_must_ha=
      caml_string_of_jsbytes("Array.iter2: arrays must have the same length"),
     cst_Array_blit=caml_string_of_jsbytes("Array.blit"),
     cst_Array_fill=caml_string_of_jsbytes("Array.fill"),
     cst_Array_sub=caml_string_of_jsbytes("Array.sub"),
     cst_Array_init=caml_string_of_jsbytes("Array.init"),
     cst_Stdlib_Array_Bottom=caml_string_of_jsbytes("Stdlib.Array.Bottom"),
     cst_Float_Array_map2_arrays_mu=
      caml_string_of_jsbytes
       ("Float.Array.map2: arrays must have the same length"),
     cst_Float_Array_iter2_arrays_m=
      caml_string_of_jsbytes
       ("Float.Array.iter2: arrays must have the same length"),
     cst_Float_array_blit=caml_string_of_jsbytes("Float.array.blit"),
     cst_Float_array_blit$0=caml_string_of_jsbytes("Float.array.blit"),
     cst_Float_Array_fill=caml_string_of_jsbytes("Float.Array.fill"),
     cst_Float_Array_sub=caml_string_of_jsbytes("Float.Array.sub"),
     cst_Float_Array_concat=caml_string_of_jsbytes("Float.Array.concat"),
     cst_Float_Array_init=caml_string_of_jsbytes("Float.Array.init"),
     cst_Stdlib_Float_Array_Bottom=
      caml_string_of_jsbytes("Stdlib.Float.Array.Bottom"),
     cst_d=caml_string_of_jsbytes("%d"),
     cst_d$0=caml_string_of_jsbytes("%d"),
     zero$2=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     one$2=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     minus_one$2=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     min_int$2=runtime.caml_int64_create_lo_mi_hi(0,0,32768),
     max_int$2=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,32767),
     cst_d$1=caml_string_of_jsbytes("%d"),
     cst_Lexing_lex_refill_cannot_g=
      caml_string_of_jsbytes("Lexing.lex_refill: cannot grow buffer"),
     dummy_pos=[0,caml_string_of_jsbytes(""),0,0,-1],
     zero_pos=[0,caml_string_of_jsbytes(""),1,0,0],
     cst_syntax_error=caml_string_of_jsbytes("syntax error"),
     cst_Stdlib_Parsing_YYexit=caml_string_of_jsbytes("Stdlib.Parsing.YYexit"),
     cst_Stdlib_Parsing_Parse_error=
      caml_string_of_jsbytes("Stdlib.Parsing.Parse_error"),
     cst_Set_remove_min_elt=caml_string_of_jsbytes("Set.remove_min_elt"),
     cst_Set_bal=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$0=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$1=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$2=caml_string_of_jsbytes("Set.bal"),
     cst_Map_remove_min_elt=caml_string_of_jsbytes("Map.remove_min_elt"),
     cst_Map_bal=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$0=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$1=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$2=caml_string_of_jsbytes("Map.bal"),
     cst_Stdlib_Stack_Empty=caml_string_of_jsbytes("Stdlib.Stack.Empty"),
     cst_Stdlib_Queue_Empty=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
     cst_CamlinternalLazy_Undefined=
      caml_string_of_jsbytes("CamlinternalLazy.Undefined"),
     cst_count=caml_string_of_jsbytes("{count = "),
     cst_data=caml_string_of_jsbytes("; data = "),
     cst$6=caml_string_of_jsbytes("}"),
     cst_Sempty=caml_string_of_jsbytes("Sempty"),
     cst_Scons=caml_string_of_jsbytes("Scons ("),
     cst$7=caml_string_of_jsbytes(", "),
     cst$8=caml_string_of_jsbytes(")"),
     cst_Sapp=caml_string_of_jsbytes("Sapp ("),
     cst$9=caml_string_of_jsbytes(", "),
     cst$10=caml_string_of_jsbytes(")"),
     cst_Slazy=caml_string_of_jsbytes("Slazy"),
     cst_Sgen=caml_string_of_jsbytes("Sgen"),
     cst_Sbuffio=caml_string_of_jsbytes("Sbuffio"),
     cst_Stdlib_Stream_Failure=caml_string_of_jsbytes("Stdlib.Stream.Failure"),
     cst_Stdlib_Stream_Error=caml_string_of_jsbytes("Stdlib.Stream.Error"),
     cst_Buffer_truncate=caml_string_of_jsbytes("Buffer.truncate"),
     cst_Buffer_add_channel=caml_string_of_jsbytes("Buffer.add_channel"),
     cst_Buffer_add_substring_add_s=
      caml_string_of_jsbytes("Buffer.add_substring/add_subbytes"),
     cst_Buffer_add_cannot_grow_buf=
      caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     cst_Buffer_nth=caml_string_of_jsbytes("Buffer.nth"),
     cst_Buffer_blit=caml_string_of_jsbytes("Buffer.blit"),
     cst_Buffer_sub=caml_string_of_jsbytes("Buffer.sub"),
     cst_c=caml_string_of_jsbytes("%c"),
     cst_s=caml_string_of_jsbytes("%s"),
     cst_i=caml_string_of_jsbytes("%i"),
     cst_li=caml_string_of_jsbytes("%li"),
     cst_ni=caml_string_of_jsbytes("%ni"),
     cst_Li=caml_string_of_jsbytes("%Li"),
     cst_f=caml_string_of_jsbytes("%f"),
     cst_B=caml_string_of_jsbytes("%B"),
     cst$21=caml_string_of_jsbytes("%{"),
     cst$22=caml_string_of_jsbytes("%}"),
     cst$23=caml_string_of_jsbytes("%("),
     cst$24=caml_string_of_jsbytes("%)"),
     cst_a=caml_string_of_jsbytes("%a"),
     cst_t$0=caml_string_of_jsbytes("%t"),
     cst$25=caml_string_of_jsbytes("%?"),
     cst_r$0=caml_string_of_jsbytes("%r"),
     cst_r$1=caml_string_of_jsbytes("%_r"),
     cst_u$0=caml_string_of_jsbytes("%u"),
     cst_Printf_bad_conversion=
      caml_string_of_jsbytes("Printf: bad conversion %["),
     cst_Printf_bad_conversion$0=
      caml_string_of_jsbytes("Printf: bad conversion %_"),
     cst$29=caml_string_of_jsbytes("@{"),
     cst$30=caml_string_of_jsbytes("@["),
     cst$31=caml_string_of_jsbytes("@{"),
     cst$32=caml_string_of_jsbytes("@["),
     cst$33=caml_string_of_jsbytes("@{"),
     cst$34=caml_string_of_jsbytes("@["),
     cst_0=caml_string_of_jsbytes("0"),
     cst_padding=caml_string_of_jsbytes("padding"),
     cst_precision=caml_string_of_jsbytes("precision"),
     cst$39=caml_string_of_jsbytes("'*'"),
     cst$37=caml_string_of_jsbytes("'-'"),
     cst_0$2=caml_string_of_jsbytes("'0'"),
     cst$38=caml_string_of_jsbytes("'*'"),
     cst_0$0=caml_string_of_jsbytes("0"),
     cst_0$1=caml_string_of_jsbytes("0"),
     cst_precision$0=caml_string_of_jsbytes("precision"),
     cst_precision$1=caml_string_of_jsbytes("precision"),
     cst$40=caml_string_of_jsbytes("'+'"),
     cst$41=caml_string_of_jsbytes("'#'"),
     cst$42=caml_string_of_jsbytes("' '"),
     cst_padding$0=caml_string_of_jsbytes("`padding'"),
     cst_precision$2=caml_string_of_jsbytes("`precision'"),
     cst$43=caml_string_of_jsbytes("'+'"),
     cst$44=caml_string_of_jsbytes("'_'"),
     sub_format=[0,0,caml_string_of_jsbytes("")],
     formatting_lit=[0,caml_string_of_jsbytes("@;"),1,0],
     cst_digit=caml_string_of_jsbytes("digit"),
     cst_character=caml_string_of_jsbytes("character ')'"),
     cst_character$0=caml_string_of_jsbytes("character '}'"),
     cst$48=caml_string_of_jsbytes("'#'"),
     cst$47=caml_string_of_jsbytes("'+'"),
     cst$46=caml_string_of_jsbytes("'+'"),
     cst$45=caml_string_of_jsbytes("' '"),
     cst$49=caml_string_of_jsbytes("'+'"),
     cst_non_zero_widths_are_unsupp=
      caml_string_of_jsbytes
       ("non-zero widths are unsupported for %c conversions"),
     cst_unexpected_end_of_format=
      caml_string_of_jsbytes("unexpected end of format"),
     cst$35=caml_string_of_jsbytes(""),
     cst$36=caml_string_of_jsbytes(""),
     cst_b$0=caml_string_of_jsbytes("b"),
     cst_h=caml_string_of_jsbytes("h"),
     cst_hov=caml_string_of_jsbytes("hov"),
     cst_hv=caml_string_of_jsbytes("hv"),
     cst_v=caml_string_of_jsbytes("v"),
     cst_nan=caml_string_of_jsbytes("nan"),
     cst$28=caml_string_of_jsbytes("."),
     cst_neg_infinity=caml_string_of_jsbytes("neg_infinity"),
     cst_infinity=caml_string_of_jsbytes("infinity"),
     cst_nd$0=caml_string_of_jsbytes("%+nd"),
     cst_nd$1=caml_string_of_jsbytes("% nd"),
     cst_ni$1=caml_string_of_jsbytes("%+ni"),
     cst_ni$2=caml_string_of_jsbytes("% ni"),
     cst_nx=caml_string_of_jsbytes("%nx"),
     cst_nx$0=caml_string_of_jsbytes("%#nx"),
     cst_nX=caml_string_of_jsbytes("%nX"),
     cst_nX$0=caml_string_of_jsbytes("%#nX"),
     cst_no=caml_string_of_jsbytes("%no"),
     cst_no$0=caml_string_of_jsbytes("%#no"),
     cst_nd=caml_string_of_jsbytes("%nd"),
     cst_ni$0=caml_string_of_jsbytes("%ni"),
     cst_nu=caml_string_of_jsbytes("%nu"),
     cst_ld$0=caml_string_of_jsbytes("%+ld"),
     cst_ld$1=caml_string_of_jsbytes("% ld"),
     cst_li$1=caml_string_of_jsbytes("%+li"),
     cst_li$2=caml_string_of_jsbytes("% li"),
     cst_lx=caml_string_of_jsbytes("%lx"),
     cst_lx$0=caml_string_of_jsbytes("%#lx"),
     cst_lX=caml_string_of_jsbytes("%lX"),
     cst_lX$0=caml_string_of_jsbytes("%#lX"),
     cst_lo=caml_string_of_jsbytes("%lo"),
     cst_lo$0=caml_string_of_jsbytes("%#lo"),
     cst_ld=caml_string_of_jsbytes("%ld"),
     cst_li$0=caml_string_of_jsbytes("%li"),
     cst_lu=caml_string_of_jsbytes("%lu"),
     cst_Ld$0=caml_string_of_jsbytes("%+Ld"),
     cst_Ld$1=caml_string_of_jsbytes("% Ld"),
     cst_Li$1=caml_string_of_jsbytes("%+Li"),
     cst_Li$2=caml_string_of_jsbytes("% Li"),
     cst_Lx=caml_string_of_jsbytes("%Lx"),
     cst_Lx$0=caml_string_of_jsbytes("%#Lx"),
     cst_LX=caml_string_of_jsbytes("%LX"),
     cst_LX$0=caml_string_of_jsbytes("%#LX"),
     cst_Lo=caml_string_of_jsbytes("%Lo"),
     cst_Lo$0=caml_string_of_jsbytes("%#Lo"),
     cst_Ld=caml_string_of_jsbytes("%Ld"),
     cst_Li$0=caml_string_of_jsbytes("%Li"),
     cst_Lu=caml_string_of_jsbytes("%Lu"),
     cst_d$3=caml_string_of_jsbytes("%+d"),
     cst_d$4=caml_string_of_jsbytes("% d"),
     cst_i$1=caml_string_of_jsbytes("%+i"),
     cst_i$2=caml_string_of_jsbytes("% i"),
     cst_x=caml_string_of_jsbytes("%x"),
     cst_x$0=caml_string_of_jsbytes("%#x"),
     cst_X$0=caml_string_of_jsbytes("%X"),
     cst_X$1=caml_string_of_jsbytes("%#X"),
     cst_o=caml_string_of_jsbytes("%o"),
     cst_o$0=caml_string_of_jsbytes("%#o"),
     cst_d$2=caml_string_of_jsbytes("%d"),
     cst_i$0=caml_string_of_jsbytes("%i"),
     cst_u=caml_string_of_jsbytes("%u"),
     cst$26=caml_string_of_jsbytes("%!"),
     cst$27=caml_string_of_jsbytes("@{"),
     cst_0c=caml_string_of_jsbytes("0c"),
     cst$20=caml_string_of_jsbytes("%%"),
     cst$12=caml_string_of_jsbytes("@]"),
     cst$13=caml_string_of_jsbytes("@}"),
     cst$14=caml_string_of_jsbytes("@?"),
     cst$15=caml_string_of_jsbytes("@\n"),
     cst$16=caml_string_of_jsbytes("@."),
     cst$17=caml_string_of_jsbytes("@@"),
     cst$18=caml_string_of_jsbytes("@%"),
     cst$19=caml_string_of_jsbytes("@"),
     cst$11=caml_string_of_jsbytes(".*"),
     cst_CamlinternalFormat_Type_mi=
      caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     cst$57=caml_string_of_jsbytes(""),
     cst$58=caml_string_of_jsbytes("\n"),
     cst_a_boolean=caml_string_of_jsbytes("a boolean"),
     cst_an_integer=caml_string_of_jsbytes("an integer"),
     cst_an_integer$0=caml_string_of_jsbytes("an integer"),
     cst_a_float=caml_string_of_jsbytes("a float"),
     cst_a_float$0=caml_string_of_jsbytes("a float"),
     cst$54=caml_string_of_jsbytes(""),
     cst$55=caml_string_of_jsbytes(" "),
     cst$56=caml_string_of_jsbytes(""),
     cst_one_of=caml_string_of_jsbytes("one of: "),
     cst_Arg_Expand_is_is_only_allo=
      caml_string_of_jsbytes
       ("Arg.Expand is is only allowed with Arg.parse_and_expand_argv_dynamic"),
     cst_no_argument=caml_string_of_jsbytes("no argument"),
     cst$53=caml_string_of_jsbytes("(?)"),
     cst_help$3=caml_string_of_jsbytes("--help"),
     cst_help$4=caml_string_of_jsbytes("-help"),
     cst_help$2=caml_string_of_jsbytes("-help"),
     cst_Display_this_list_of_optio=
      caml_string_of_jsbytes(" Display this list of options"),
     cst_help=caml_string_of_jsbytes("-help"),
     cst_help$1=caml_string_of_jsbytes("--help"),
     cst_Display_this_list_of_optio$0=
      caml_string_of_jsbytes(" Display this list of options"),
     cst_help$0=caml_string_of_jsbytes("--help"),
     cst$50=caml_string_of_jsbytes("}"),
     cst$51=caml_string_of_jsbytes("|"),
     cst$52=caml_string_of_jsbytes("{"),
     cst_none=caml_string_of_jsbytes("<none>"),
     cst_Stdlib_Arg_Bad=caml_string_of_jsbytes("Stdlib.Arg.Bad"),
     cst_Stdlib_Arg_Help=caml_string_of_jsbytes("Stdlib.Arg.Help"),
     cst_Stdlib_Arg_Stop=caml_string_of_jsbytes("Stdlib.Arg.Stop"),
     cst$60=caml_string_of_jsbytes(""),
     cst_Program_not_linked_with_g_=
      caml_string_of_jsbytes
       ("(Program not linked with -g, cannot print stack backtrace)\n"),
     cst_Raised_at=caml_string_of_jsbytes("Raised at"),
     cst_Re_raised_at=caml_string_of_jsbytes("Re-raised at"),
     cst_Raised_by_primitive_operat=
      caml_string_of_jsbytes("Raised by primitive operation at"),
     cst_Called_from=caml_string_of_jsbytes("Called from"),
     cst_inlined=caml_string_of_jsbytes(" (inlined)"),
     cst$63=caml_string_of_jsbytes(""),
     partial=[4,0,0,0,0],
     cst_Out_of_memory=caml_string_of_jsbytes("Out of memory"),
     cst_Stack_overflow=caml_string_of_jsbytes("Stack overflow"),
     cst_Pattern_matching_failed=
      caml_string_of_jsbytes("Pattern matching failed"),
     cst_Assertion_failed=caml_string_of_jsbytes("Assertion failed"),
     cst_Undefined_recursive_module=
      caml_string_of_jsbytes("Undefined recursive module"),
     cst$61=caml_string_of_jsbytes(""),
     cst$62=caml_string_of_jsbytes(""),
     cst$59=caml_string_of_jsbytes("_"),
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     cst_Stdlib_Fun_Finally_raised=
      caml_string_of_jsbytes("Stdlib.Fun.Finally_raised"),
     cst_Digest_from_hex$0=caml_string_of_jsbytes("Digest.from_hex"),
     cst_Digest_from_hex=caml_string_of_jsbytes("Digest.from_hex"),
     cst_Digest_to_hex=caml_string_of_jsbytes("Digest.to_hex"),
     cst_Digest_substring=caml_string_of_jsbytes("Digest.substring"),
     cst_Random_int64=caml_string_of_jsbytes("Random.int64"),
     cst_Random_int32=caml_string_of_jsbytes("Random.int32"),
     cst_Random_int=caml_string_of_jsbytes("Random.int"),
     cst_x$1=caml_string_of_jsbytes("x"),
     cst_OCAMLRUNPARAM=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     cst_CAMLRUNPARAM=caml_string_of_jsbytes("CAMLRUNPARAM"),
     cst$64=caml_string_of_jsbytes(""),
     cst_Weak_Make_hash_bucket_cann=
      caml_string_of_jsbytes("Weak.Make: hash bucket cannot grow more"),
     cst_Weak_fill=caml_string_of_jsbytes("Weak.fill"),
     cst_Weak_blit=caml_string_of_jsbytes("Weak.blit"),
     cst_Weak_check=caml_string_of_jsbytes("Weak.check"),
     cst_Weak_get_copy=caml_string_of_jsbytes("Weak.get_copy"),
     cst_Weak_get=caml_string_of_jsbytes("Weak.get"),
     cst_Weak_set=caml_string_of_jsbytes("Weak.set"),
     cst_Weak_create=caml_string_of_jsbytes("Weak.create"),
     cst$82=caml_string_of_jsbytes(""),
     cst$83=caml_string_of_jsbytes(""),
     cst$81=caml_string_of_jsbytes("."),
     cst$78=caml_string_of_jsbytes(">"),
     cst$79=caml_string_of_jsbytes("<\/"),
     cst$80=caml_string_of_jsbytes(""),
     cst$75=caml_string_of_jsbytes(">"),
     cst$76=caml_string_of_jsbytes("<"),
     cst$77=caml_string_of_jsbytes(""),
     cst$74=caml_string_of_jsbytes("\n"),
     cst_Format_pp_set_geometry_max=
      caml_string_of_jsbytes("Format.pp_set_geometry: max_indent < 2"),
     cst_Format_pp_set_geometry_mar=
      caml_string_of_jsbytes("Format.pp_set_geometry: margin <= max_indent"),
     cst$70=caml_string_of_jsbytes(""),
     cst$71=caml_string_of_jsbytes(""),
     cst$72=caml_string_of_jsbytes(""),
     cst$73=caml_string_of_jsbytes(""),
     cst$66=caml_string_of_jsbytes(""),
     cst$67=caml_string_of_jsbytes(""),
     cst$68=caml_string_of_jsbytes(""),
     cst$69=caml_string_of_jsbytes(""),
     cst$65=caml_string_of_jsbytes(""),
     cst_Stdlib_Format_String_tag=
      caml_string_of_jsbytes("Stdlib.Format.String_tag"),
     cst_end_of_input_not_found=
      caml_string_of_jsbytes("end of input not found"),
     cst_scanf_bad_conversion_a=
      caml_string_of_jsbytes('scanf: bad conversion "%a"'),
     cst_scanf_bad_conversion_t=
      caml_string_of_jsbytes('scanf: bad conversion "%t"'),
     cst_scanf_missing_reader=caml_string_of_jsbytes("scanf: missing reader"),
     cst_scanf_bad_conversion_custo=
      caml_string_of_jsbytes('scanf: bad conversion "%?" (custom converter)'),
     cst_scanf_bad_conversion=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$1=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$0=
      caml_string_of_jsbytes('scanf: bad conversion "%-"'),
     cst_scanf_bad_conversion$2=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst$89=caml_string_of_jsbytes('"'),
     cst$90=caml_string_of_jsbytes('"'),
     cst$87=caml_string_of_jsbytes('"'),
     cst$88=caml_string_of_jsbytes('"'),
     cst$86=caml_string_of_jsbytes('"'),
     cst_in_format=caml_string_of_jsbytes(' in format "'),
     cst_an=caml_string_of_jsbytes("an"),
     cst_x$2=caml_string_of_jsbytes("x"),
     cst_nfinity=caml_string_of_jsbytes("nfinity"),
     cst_digits=caml_string_of_jsbytes("digits"),
     cst_decimal_digits=caml_string_of_jsbytes("decimal digits"),
     cst_0b=caml_string_of_jsbytes("0b"),
     cst_0o=caml_string_of_jsbytes("0o"),
     cst_0u=caml_string_of_jsbytes("0u"),
     cst_0x=caml_string_of_jsbytes("0x"),
     cst_false$3=caml_string_of_jsbytes("false"),
     cst_true$3=caml_string_of_jsbytes("true"),
     cst_not_a_valid_float_in_hexad=
      caml_string_of_jsbytes("not a valid float in hexadecimal notation"),
     cst_no_dot_or_exponent_part_fo=
      caml_string_of_jsbytes("no dot or exponent part found in float token"),
     cst$85=caml_string_of_jsbytes("-"),
     cst_unnamed_function=caml_string_of_jsbytes("unnamed function"),
     cst_unnamed_character_string=
      caml_string_of_jsbytes("unnamed character string"),
     cst_unnamed_Stdlib_input_chann=
      caml_string_of_jsbytes("unnamed Stdlib input channel"),
     cst$84=caml_string_of_jsbytes("-"),
     cst_Stdlib_Scanf_Scan_failure=
      caml_string_of_jsbytes("Stdlib.Scanf.Scan_failure"),
     cst_binary=caml_string_of_jsbytes("binary"),
     cst_octal=caml_string_of_jsbytes("octal"),
     cst_hexadecimal=caml_string_of_jsbytes("hexadecimal"),
     cst_a_Char=caml_string_of_jsbytes("a Char"),
     cst_a_String=caml_string_of_jsbytes("a String"),
     cst$91=caml_string_of_jsbytes(""),
     cst$92=caml_string_of_jsbytes(""),
     cst$93=caml_string_of_jsbytes(""),
     cst$94=caml_string_of_jsbytes(""),
     cst$95=caml_string_of_jsbytes(""),
     cst$97=caml_string_of_jsbytes(""),
     cst$96=caml_string_of_jsbytes(""),
     cst_Illegal_character=caml_string_of_jsbytes("Illegal character "),
     cst_Filename_chop_extension=
      caml_string_of_jsbytes("Filename.chop_extension"),
     cst$108=caml_string_of_jsbytes(""),
     cst_Filename_chop_suffix=caml_string_of_jsbytes("Filename.chop_suffix"),
     cst$107=caml_string_of_jsbytes(""),
     cst$105=caml_string_of_jsbytes("./"),
     cst$104=caml_string_of_jsbytes(".\\"),
     cst$103=caml_string_of_jsbytes("../"),
     cst$102=caml_string_of_jsbytes("..\\"),
     cst$101=caml_string_of_jsbytes("./"),
     cst$100=caml_string_of_jsbytes("../"),
     cst$99=caml_string_of_jsbytes(""),
     cst$98=caml_string_of_jsbytes(""),
     current_dir_name=caml_string_of_jsbytes("."),
     parent_dir_name=caml_string_of_jsbytes(".."),
     dir_sep=caml_string_of_jsbytes("/"),
     cst_TMPDIR=caml_string_of_jsbytes("TMPDIR"),
     cst_tmp=caml_string_of_jsbytes("/tmp"),
     quotequote=caml_string_of_jsbytes("'\\''"),
     current_dir_name$0=caml_string_of_jsbytes("."),
     parent_dir_name$0=caml_string_of_jsbytes(".."),
     dir_sep$0=caml_string_of_jsbytes("\\"),
     cst_TEMP=caml_string_of_jsbytes("TEMP"),
     cst$106=caml_string_of_jsbytes("."),
     current_dir_name$1=caml_string_of_jsbytes("."),
     parent_dir_name$1=caml_string_of_jsbytes(".."),
     dir_sep$1=caml_string_of_jsbytes("/"),
     cst_Cygwin=caml_string_of_jsbytes("Cygwin"),
     cst_Win32=caml_string_of_jsbytes("Win32"),
     zero$4=[254,0.,0.],
     one$4=[254,1.,0.],
     i=[254,0.,1.],
     cst_Series_is_closed$0=caml_string_of_jsbytes("Series is closed"),
     cst_Series_is_closed=caml_string_of_jsbytes("Series is closed"),
     cst_Bigarray_array3_of_genarra=
      caml_string_of_jsbytes("Bigarray.array3_of_genarray"),
     cst_Bigarray_array2_of_genarra=
      caml_string_of_jsbytes("Bigarray.array2_of_genarray"),
     cst_Bigarray_array1_of_genarra=
      caml_string_of_jsbytes("Bigarray.array1_of_genarray"),
     cst_Bigarray_array0_of_genarra=
      caml_string_of_jsbytes("Bigarray.array0_of_genarray"),
     cst_Bigarray_Array3_of_array_n=
      caml_string_of_jsbytes("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array3_of_array_n$0=
      caml_string_of_jsbytes("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array2_of_array_n=
      caml_string_of_jsbytes("Bigarray.Array2.of_array: non-rectangular data"),
     Invalid_argument=global_data.Invalid_argument,
     Failure=global_data.Failure,
     Match_failure=global_data.Match_failure,
     Assert_failure=global_data.Assert_failure,
     Not_found=global_data.Not_found,
     Out_of_memory=global_data.Out_of_memory,
     Stack_overflow=global_data.Stack_overflow,
     Sys_error=global_data.Sys_error,
     End_of_file=global_data.End_of_file,
     Division_by_zero=global_data.Division_by_zero,
     Sys_blocked_io=global_data.Sys_blocked_io,
     Undefined_recursive_module=global_data.Undefined_recursive_module,
     _l_=[0,0,[0,6,0]],
     _k_=[0,0,[0,7,0]],
     _j_=[0,1,[0,3,[0,4,[0,6,0]]]],
     _i_=[0,1,[0,3,[0,4,[0,7,0]]]],
     _g_=[0,1],
     _h_=[0,0],
     _a_=runtime.caml_int64_create_lo_mi_hi(0,0,32752),
     _b_=runtime.caml_int64_create_lo_mi_hi(0,0,65520),
     _c_=runtime.caml_int64_create_lo_mi_hi(1,0,32752),
     _d_=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,32751),
     _e_=runtime.caml_int64_create_lo_mi_hi(0,0,16),
     _f_=runtime.caml_int64_create_lo_mi_hi(0,0,15536),
     _o_=[0,0,0],
     _p_=[0,caml_string_of_jsbytes("list.ml"),282,11],
     _t_=[0,caml_string_of_jsbytes("array.ml"),236,4],
     _v_=[0,caml_string_of_jsbytes("float.ml"),381,6],
     _u_=[0,caml_string_of_jsbytes("float.ml"),208,14],
     _G_=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     _F_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _E_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _D_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _H_=[0,0,0,0],
     _I_=[0,0,0],
     _J_=[0,caml_string_of_jsbytes("set.ml"),547,18],
     _K_=[0,0,0,0],
     _L_=[0,caml_string_of_jsbytes("map.ml"),398,10],
     _M_=[0,0,0],
     _N_=[0,caml_string_of_jsbytes("stream.ml"),53,12],
     _O_=[0,0],
     _P_=[0,caml_string_of_jsbytes("stream.ml"),82,12],
     _Z_=[0,caml_string_of_jsbytes("buffer.ml"),282,9],
     _Y_=[0,caml_string_of_jsbytes("buffer.ml"),263,2],
     _X_=[0,caml_string_of_jsbytes("buffer.ml"),195,19],
     _W_=[0,caml_string_of_jsbytes("buffer.ml"),213,8],
     _V_=[0,caml_string_of_jsbytes("buffer.ml"),174,19],
     _U_=[0,caml_string_of_jsbytes("buffer.ml"),192,8],
     _T_=[0,caml_string_of_jsbytes("buffer.ml"),138,19],
     _S_=[0,caml_string_of_jsbytes("buffer.ml"),171,8],
     _R_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _Q_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _$_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,23],
     _ak_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),811,21],
     _ac_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),812,21],
     _al_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _ad_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),816,21],
     _am_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,19],
     _ae_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),820,19],
     _an_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,22],
     _af_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),824,22],
     _ao_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),828,30],
     _ag_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),829,30],
     _ai_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),833,26],
     _aa_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),834,26],
     _aj_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),843,28],
     _ab_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),844,28],
     _ah_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),848,23],
     _aq_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1555,4],
     _ar_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1623,39],
     _as_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1646,31],
     _at_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1647,31],
     _au_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1827,8],
     _aY_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _aX_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _aA_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", duplicate flag "),[1,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, duplicate flag %C")],
     _aB_=[0,1,0],
     _aC_=[0,0],
     _aE_=[1,0],
     _aD_=[1,1],
     _aG_=[1,1],
     _aF_=[1,1],
     _aK_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", flag "),
            [1,
             [11,
              caml_string_of_jsbytes(" is only allowed after the '"),
              [12,
               37,
               [11,
                caml_string_of_jsbytes("', before padding and precision"),
                0]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision")],
     _aH_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(', invalid conversion "'),
            [12,37,[0,[12,34,0]]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: at character number %d, invalid conversion "%%%c"')],
     _aI_=[0,0],
     _aJ_=[0,0],
     _aL_=[0,[12,64,0]],
     _aM_=[0,caml_string_of_jsbytes("@ "),1,0],
     _aN_=[0,caml_string_of_jsbytes("@,"),0,0],
     _aO_=[2,60],
     _aP_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": '"),
          [12,
           37,
           [11,
            caml_string_of_jsbytes
             ("' alone is not accepted in character sets, use "),
            [12,
             37,
             [12,
              37,
              [11,
               caml_string_of_jsbytes(" instead at position "),
               [4,0,0,0,[12,46,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.")],
     _aQ_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": integer "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(" is greater than the limit "),
            [4,0,0,0,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: integer %d is greater than the limit %d")],
     _aR_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2842,11],
     _aS_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(': unclosed sub-format, expected "'),
          [12,
           37,
           [0,
            [11,caml_string_of_jsbytes('" at character number '),[4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: unclosed sub-format, expected "%%%c" at character number %d')],
     _aT_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2904,34],
     _aU_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2940,28],
     _aV_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2961,11],
     _aW_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,
             0,
             [11,
              caml_string_of_jsbytes(" is incompatible with '"),
              [0,[11,caml_string_of_jsbytes("' in sub-format "),[3,0,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S")],
     _az_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,0,[11,caml_string_of_jsbytes(" expected, read "),[1,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s expected, read %C")],
     _ay_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", '"),
            [0,[11,caml_string_of_jsbytes("' without "),[2,0,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, '%c' without %s")],
     _ax_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", "),[2,0,0]]]]]],
       caml_string_of_jsbytes("invalid format %S: at character number %d, %s")],
     _aw_=
      [0,
       [11,caml_string_of_jsbytes("invalid box description "),[3,0,0]],
       caml_string_of_jsbytes("invalid box description %S")],
     _av_=[0,0,4],
     _ap_=[0,103],
     ___=[0,0,0],
     _bi_=[0,[2,0,[0,0]],caml_string_of_jsbytes("%s%c")],
     _bc_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bd_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _ba_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bb_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a__=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a$_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a4_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": unknown option '"),
         [2,0,[11,caml_string_of_jsbytes("'.\n"),0]]]],
       caml_string_of_jsbytes("%s: unknown option '%s'.\n")],
     _a7_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": wrong argument '"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("'; option '"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("' expects "),
             [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]]]]]],
       caml_string_of_jsbytes
        ("%s: wrong argument '%s'; option '%s' expects %s.\n")],
     _a8_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": option '"),
         [2,0,[11,caml_string_of_jsbytes("' needs an argument.\n"),0]]]],
       caml_string_of_jsbytes("%s: option '%s' needs an argument.\n")],
     _a9_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": "),
         [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]],
       caml_string_of_jsbytes("%s: %s.\n")],
     _a5_=[0,caml_string_of_jsbytes("-help")],
     _a6_=[0,caml_string_of_jsbytes("--help")],
     _a3_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a2_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _a1_=[0,caml_string_of_jsbytes("-help")],
     _aZ_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[12,10,0]]]]],
       caml_string_of_jsbytes("  %s %s\n")],
     _a0_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[2,0,[12,10,0]]]]]],
       caml_string_of_jsbytes("  %s %s%s\n")],
     _bn_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _bw_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bu_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bv_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_string_of_jsbytes
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bs_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(' file "'),
         [2,
          0,
          [12,
           34,
           [2,
            0,
            [11,
             caml_string_of_jsbytes(", line "),
             [4,
              0,
              0,
              0,
              [11,
               caml_string_of_jsbytes(", characters "),
               [4,0,0,0,[12,45,partial]]]]]]]]]],
       caml_string_of_jsbytes('%s file "%s"%s, line %d, characters %d-%d')],
     _bt_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
       caml_string_of_jsbytes("%s unknown location")],
     _br_=
      [0,
       [11,caml_string_of_jsbytes("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Uncaught exception: %s\n")],
     _bq_=
      [0,
       [11,caml_string_of_jsbytes("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Uncaught exception: %s\n")],
     _bo_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _bp_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _bm_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bl_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _bF_=
      [0,
       [11,caml_string_of_jsbytes("minor_collections: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("minor_collections: %d\n")],
     _bG_=
      [0,
       [11,caml_string_of_jsbytes("major_collections: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("major_collections: %d\n")],
     _bH_=
      [0,
       [11,caml_string_of_jsbytes("compactions:       "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("compactions:       %d\n")],
     _bI_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bJ_=[0,[8,[0,0,0],0,[0,0],0],caml_string_of_jsbytes("%.0f")],
     _bK_=
      [0,
       [11,
        caml_string_of_jsbytes("minor_words:    "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("minor_words:    %*.0f\n")],
     _bL_=
      [0,
       [11,
        caml_string_of_jsbytes("promoted_words: "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("promoted_words: %*.0f\n")],
     _bM_=
      [0,
       [11,
        caml_string_of_jsbytes("major_words:    "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("major_words:    %*.0f\n")],
     _bN_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bO_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bP_=
      [0,
       [11,caml_string_of_jsbytes("top_heap_words: "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("top_heap_words: %*d\n")],
     _bQ_=
      [0,
       [11,caml_string_of_jsbytes("heap_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("heap_words:     %*d\n")],
     _bR_=
      [0,
       [11,caml_string_of_jsbytes("live_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("live_words:     %*d\n")],
     _bS_=
      [0,
       [11,caml_string_of_jsbytes("free_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("free_words:     %*d\n")],
     _bT_=
      [0,
       [11,caml_string_of_jsbytes("largest_free:   "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("largest_free:   %*d\n")],
     _bU_=
      [0,
       [11,caml_string_of_jsbytes("fragments:      "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("fragments:      %*d\n")],
     _bV_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bW_=
      [0,
       [11,caml_string_of_jsbytes("live_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("live_blocks: %d\n")],
     _bX_=
      [0,
       [11,caml_string_of_jsbytes("free_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("free_blocks: %d\n")],
     _bY_=
      [0,
       [11,caml_string_of_jsbytes("heap_chunks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("heap_chunks: %d\n")],
     _b1_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _b2_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _b3_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _b7_=[0,0],
     _b6_=[0,caml_string_of_jsbytes("hashtbl.ml"),108,23],
     _b__=[3,0,3],
     _b9_=[0,caml_string_of_jsbytes("")],
     _b8_=[0,caml_string_of_jsbytes(""),0,caml_string_of_jsbytes("")],
     _co_=[0,91],
     _cn_=[0,123],
     _cp_=[0,caml_string_of_jsbytes("scanf.ml"),1453,13],
     _cq_=[0,[3,0,[10,0]],caml_string_of_jsbytes("%S%!")],
     _cm_=[0,37,caml_string_of_jsbytes("")],
     _cl_=
      [0,
       [11,
        caml_string_of_jsbytes("scanf: bad input at char number "),
        [4,3,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]],
       caml_string_of_jsbytes("scanf: bad input at char number %i: %s")],
     _ck_=
      [0,
       [11,
        caml_string_of_jsbytes("the character "),
        [1,[11,caml_string_of_jsbytes(" cannot start a boolean"),0]]],
       caml_string_of_jsbytes("the character %C cannot start a boolean")],
     _cj_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character hexadecimal encoding \\"),
        [0,[0,0]]],
       caml_string_of_jsbytes("bad character hexadecimal encoding \\%c%c")],
     _ci_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character decimal encoding \\"),
        [0,[0,[0,0]]]],
       caml_string_of_jsbytes("bad character decimal encoding \\%c%c%c")],
     _ch_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,
         [11,
          caml_string_of_jsbytes(" is not a valid "),
          [2,0,[11,caml_string_of_jsbytes(" digit"),0]]]]],
       caml_string_of_jsbytes("character %C is not a valid %s digit")],
     _cg_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,[11,caml_string_of_jsbytes(" is not a decimal digit"),0]]],
       caml_string_of_jsbytes("character %C is not a decimal digit")],
     _cf_=[0,caml_string_of_jsbytes("scanf.ml"),555,9],
     _ce_=
      [0,
       [11,caml_string_of_jsbytes("invalid boolean '"),[2,0,[12,39,0]]],
       caml_string_of_jsbytes("invalid boolean '%s'")],
     _cd_=
      [0,
       [11,
        caml_string_of_jsbytes("looking for "),
        [1,[11,caml_string_of_jsbytes(", found "),[1,0]]]],
       caml_string_of_jsbytes("looking for %C, found %C")],
     _cc_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: premature end of file occurred before end of token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: premature end of file occurred before end of token")],
     _cb_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: the specified length was too short for token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: the specified length was too short for token")],
     _ca_=
      [0,
       [11,caml_string_of_jsbytes("illegal escape character "),[1,0]],
       caml_string_of_jsbytes("illegal escape character %C")],
     _cx_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),438,17],
     _cw_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),420,13],
     _cv_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),417,13],
     _cu_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),414,13],
     _ct_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),411,13],
     _cs_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),408,13],
     _cr_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),281,50],
     _cA_=[0,0],
     _cz_=[0,0],
     _cy_=[0,0],
     _cE_=[0,7,0],
     _cD_=[0,1,[0,3,[0,5,0]]],
     _cC_=[0,[2,0,[4,6,[0,2,6],0,[2,0,0]]],caml_string_of_jsbytes("%s%06x%s")],
     _cF_=[254,0.,0.];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    var CamlinternalFormatBasics=[0,concat_fmtty,erase_rel,concat_fmt];
    caml_register_global
     (708,CamlinternalFormatBasics,"CamlinternalFormatBasics");
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    var Exit=[248,cst_Stdlib_Exit,caml_fresh_oo_id(0)];
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    function lnot(x){return x ^ -1}
    var
     infinity=caml_int64_float_of_bits(_a_),
     neg_infinity=caml_int64_float_of_bits(_b_),
     nan=caml_int64_float_of_bits(_c_),
     max_float=caml_int64_float_of_bits(_d_),
     min_float=caml_int64_float_of_bits(_e_),
     epsilon=caml_int64_float_of_bits(_f_),
     max_int=2147483647,
     min_int=-2147483648;
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function char_of_int(n)
     {if(0 <= n && ! (255 < n))return n;return invalid_arg(cst_char_of_int)}
    function string_of_bool(b){return b?cst_true:cst_false}
    function bool_of_string(param)
     {return caml_string_notequal(param,cst_false$0)
              ?caml_string_notequal(param,cst_true$0)
                ?invalid_arg(cst_bool_of_string)
                :1
              :0}
    function bool_of_string_opt(param)
     {return caml_string_notequal(param,cst_false$1)
              ?caml_string_notequal(param,cst_true$1)?0:_g_
              :_h_}
    function string_of_int(n){return caml_string_of_jsbytes("" + n)}
    function int_of_string_opt(s)
     {try
       {var _AB_=[0,caml_int_of_string(s)];return _AB_}
      catch(_AC_)
       {_AC_ = caml_wrap_exception(_AC_);
        if(_AC_[1] === Failure)return 0;
        throw _AC_}}
    function valid_float_lexem(s)
     {var l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return symbol(s,cst);
        var match=caml_string_get(s,i),switch$0=0;
        if(48 <= match)
         {if(! (58 <= match))switch$0 = 1}
        else
         if(45 === match)switch$0 = 1;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    function to_string(f)
     {return valid_float_lexem(caml_format_float(cst_12g,f))}
    function of_string_opt(s)
     {try
       {var _Az_=[0,caml_float_of_string(s)];return _Az_}
      catch(_AA_)
       {_AA_ = caml_wrap_exception(_AA_);
        if(_AA_[1] === Failure)return 0;
        throw _AA_}}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    var
     stdin=caml_ml_open_descriptor_in(0),
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function open_out_gen(mode,perm,name)
     {var c=caml_ml_open_descriptor_out(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_out(name){return open_out_gen(_i_,438,name)}
    function open_out_bin(name){return open_out_gen(_j_,438,name)}
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_Ay_)
             {_Ay_ = caml_wrap_exception(_Ay_);
              if(_Ay_[1] !== Sys_error)throw _Ay_;
              var _Ax_=_Ay_}
            var param$0=l;
            continue}
          return 0}}
      return iter(runtime.caml_ml_out_channels_list(0))}
    function output_bytes(oc,s)
     {return caml_ml_output_bytes(oc,s,0,caml_ml_bytes_length(s))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function output(oc,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_ml_output_bytes(oc,s,ofs,len);
      return invalid_arg(cst_output)}
    function output_substring(oc,s,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_string_length(s) - len | 0) < ofs))
       return caml_ml_output(oc,s,ofs,len);
      return invalid_arg(cst_output_substring)}
    function output_value(chan,v){return caml_output_value(chan,v,0)}
    function close_out(oc){caml_ml_flush(oc);return caml_ml_close_channel(oc)}
    function close_out_noerr(oc)
     {try {caml_ml_flush(oc)}catch(_Aw_){}
      try
       {var _Au_=caml_ml_close_channel(oc);return _Au_}
      catch(_Av_){return 0}}
    function open_in_gen(mode,perm,name)
     {var c=caml_ml_open_descriptor_in(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_in(name){return open_in_gen(_k_,0,name)}
    function open_in_bin(name){return open_in_gen(_l_,0,name)}
    function input(ic,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_ml_input(ic,s,ofs,len);
      return invalid_arg(cst_input)}
    function unsafe_really_input(ic,s,ofs,len)
     {var ofs$0=ofs,len$0=len;
      for(;;)
       {if(0 < len$0)
         {var r=caml_ml_input(ic,s,ofs$0,len$0);
          if(0 === r)throw End_of_file;
          var len$1=len$0 - r | 0,ofs$1=ofs$0 + r | 0,ofs$0=ofs$1,len$0=len$1;
          continue}
        return 0}}
    function really_input(ic,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return unsafe_really_input(ic,s,ofs,len);
      return invalid_arg(cst_really_input)}
    function really_input_string(ic,len)
     {var s=caml_create_bytes(len);
      really_input(ic,s,0,len);
      return caml_string_of_bytes(s)}
    function input_line(chan)
     {function build_result(buf,pos,param)
       {var pos$0=pos,param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1],len=caml_ml_bytes_length(hd);
            caml_blit_bytes(hd,0,buf,pos$0 - len | 0,len);
            var pos$1=pos$0 - len | 0,pos$0=pos$1,param$0=tl;
            continue}
          return buf}}
      var accu=0,len=0;
      for(;;)
       {var n=runtime.caml_ml_input_scan_line(chan);
        if(0 === n)
         {if(! accu)throw End_of_file;
          var _At_=build_result(caml_create_bytes(len),len,accu)}
        else
         {if(! (0 < n))
           {var beg=caml_create_bytes(- n | 0);
            caml_ml_input(chan,beg,0,- n | 0);
            var len$1=len - n | 0,accu$0=[0,beg,accu],accu=accu$0,len=len$1;
            continue}
          var res=caml_create_bytes(n - 1 | 0);
          caml_ml_input(chan,res,0,n - 1 | 0);
          caml_ml_input_char(chan);
          if(accu)
           var
            len$0=(len + n | 0) - 1 | 0,
            _At_=build_result(caml_create_bytes(len$0),len$0,[0,res,accu]);
          else
           var _At_=res}
        return caml_string_of_bytes(_At_)}}
    function close_in_noerr(ic)
     {try
       {var _Ar_=caml_ml_close_channel(ic);return _Ar_}
      catch(_As_){return 0}}
    function print_char(c){return caml_ml_output_char(stdout,c)}
    function print_string(s){return output_string(stdout,s)}
    function print_bytes(s){return output_bytes(stdout,s)}
    function print_int(i)
     {return output_string(stdout,caml_string_of_jsbytes("" + i))}
    function print_float(f){return output_string(stdout,to_string(f))}
    function print_endline(s)
     {output_string(stdout,s);
      caml_ml_output_char(stdout,10);
      return caml_ml_flush(stdout)}
    function print_newline(param)
     {caml_ml_output_char(stdout,10);return caml_ml_flush(stdout)}
    function prerr_char(c){return caml_ml_output_char(stderr,c)}
    function prerr_string(s){return output_string(stderr,s)}
    function prerr_bytes(s){return output_bytes(stderr,s)}
    function prerr_int(i)
     {return output_string(stderr,caml_string_of_jsbytes("" + i))}
    function prerr_float(f){return output_string(stderr,to_string(f))}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    function prerr_newline(param)
     {caml_ml_output_char(stderr,10);return caml_ml_flush(stderr)}
    function read_line(param){caml_ml_flush(stdout);return input_line(stdin)}
    function read_int(param){return caml_int_of_string(read_line(0))}
    function read_int_opt(param){return int_of_string_opt(read_line(0))}
    function read_float(param){return caml_float_of_string(read_line(0))}
    function read_float_opt(param){return of_string_opt(read_line(0))}
    function string_of_format(param){var str=param[2];return str}
    function symbol$0(param,_Ap_)
     {var
       str2=_Ap_[2],
       fmt2=_Ap_[1],
       str1=param[2],
       fmt1=param[1],
       _Aq_=symbol(str1,symbol(cst$0,str2));
      return [0,concat_fmt(fmt1,fmt2),_Aq_]}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {var g=exit_function[1],f_already_ran=[0,0];
      exit_function[1]
      =
      function(param)
       {if(1 - f_already_ran[1]){f_already_ran[1] = 1;caml_call1(f,0)}
        return caml_call1(g,0)};
      return 0}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function exit(retcode)
     {do_at_exit(0);return runtime.caml_sys_exit(retcode)}
    var
     set_binary_mode_in=caml_ml_set_binary_mode,
     close_in=caml_ml_close_channel,
     in_channel_length=caml_ml_channel_size,
     pos_in=runtime.caml_ml_pos_in,
     seek_in=runtime.caml_ml_seek_in,
     input_value=caml_input_value,
     input_binary_int=runtime.caml_ml_input_int,
     input_byte=caml_ml_input_char,
     input_char=caml_ml_input_char,
     set_binary_mode_out=caml_ml_set_binary_mode,
     out_channel_length=caml_ml_channel_size,
     pos_out=runtime.caml_ml_pos_out,
     seek_out=runtime.caml_ml_seek_out,
     output_binary_int=runtime.caml_ml_output_int,
     output_byte=caml_ml_output_char,
     output_char=caml_ml_output_char,
     flush=caml_ml_flush,
     Stdlib=
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon,
       symbol,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       to_string,
       of_string_opt,
       append,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit];
    caml_register_global(721,Stdlib,"Stdlib");
    var
     Exit$0=[248,cst_Stdlib_Pervasives_Exit,caml_fresh_oo_id(0)],
     Stdlib_pervasives=
      [0,
       invalid_arg,
       failwith,
       Exit$0,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon,
       symbol,
       char_of_int,
       string_of_bool,
       bool_of_string,
       bool_of_string_opt,
       string_of_int,
       int_of_string_opt,
       to_string,
       of_string_opt,
       append,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_int_opt,
       read_float,
       read_float_opt,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       do_at_exit];
    caml_register_global(722,Stdlib_pervasives,"Stdlib__pervasives");
    function empty(param){return 0}
    function return$0(x,param){return [0,x,empty]}
    function map(f,seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var
         next=match[2],
         x=match[1],
         _An_=function(_Ao_){return map(f,next,_Ao_)};
        return [0,caml_call1(f,x),_An_]}
      return 0}
    function filter_map(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1],match$0=caml_call1(f,x);
          if(match$0)
           {var y=match$0[1];
            return [0,y,function(_Am_){return filter_map(f,next,_Am_)}]}
          var seq$0=next;
          continue}
        return 0}}
    function filter(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1];
          if(caml_call1(f,x))
           return [0,x,function(_Al_){return filter(f,next,_Al_)}];
          var seq$0=next;
          continue}
        return 0}}
    function flat_map$0(counter,f,seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var next=match[2],x=match[1],_Ak_=caml_call1(f,x),_Aj_=0;
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return flat_map_app$0(counter$0,f,_Ak_,next,_Aj_)}
        return caml_trampoline_return(flat_map_app$0,[0,f,_Ak_,next,_Aj_])}
      return 0}
    function flat_map_app$0(counter,f,seq,tail,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var next=match[2],x=match[1];
        return [0,x,function(_Ai_){return flat_map_app(f,next,tail,_Ai_)}]}
      var _Ah_=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return flat_map$0(counter$0,f,tail,_Ah_)}
      return caml_trampoline_return(flat_map$0,[0,f,tail,_Ah_])}
    function flat_map(f,seq,param)
     {return caml_trampoline(flat_map$0(0,f,seq,param))}
    function flat_map_app(f,seq,tail,param)
     {return caml_trampoline(flat_map_app$0(0,f,seq,tail,param))}
    function fold_left(f,acc,seq)
     {var acc$0=acc,seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var
           next=match[2],
           x=match[1],
           acc$1=caml_call2(f,acc$0,x),
           acc$0=acc$1,
           seq$0=next;
          continue}
        return acc$0}}
    function iter(f,seq)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1];
          caml_call1(f,x);
          var seq$0=next;
          continue}
        return 0}}
    var
     Stdlib_seq=
      [0,empty,return$0,map,filter,filter_map,flat_map,fold_left,iter];
    caml_register_global(723,Stdlib_seq,"Stdlib__seq");
    var none=0;
    function some(v){return [0,v]}
    function value(o,default$0){if(o){var v=o[1];return v}return default$0}
    function get(param)
     {if(param){var v=param[1];return v}
      return invalid_arg(cst_option_is_None)}
    function bind(o,f){if(o){var v=o[1];return caml_call1(f,v)}return 0}
    function join(param)
     {if(param){var _Ag_=param[1];if(_Ag_)return _Ag_}return 0}
    function map$0(f,o){if(o){var v=o[1];return [0,caml_call1(f,v)]}return 0}
    function fold(none,some,param)
     {if(param){var v=param[1];return caml_call1(some,v)}return none}
    function iter$0(f,param)
     {if(param){var v=param[1];return caml_call1(f,v)}return 0}
    function is_none(param){return param?0:1}
    function is_some(param){return param?1:0}
    function equal(eq,o0,o1)
     {if(o0)
       {if(o1){var v1=o1[1],v0=o0[1];return caml_call2(eq,v0,v1)}}
      else
       if(! o1)return 1;
      return 0}
    function compare(cmp,o0,o1)
     {if(o0)
       {var _Af_=o0[1];
        if(o1){var v1=o1[1];return caml_call2(cmp,_Af_,v1)}
        return 1}
      return o1?-1:0}
    function to_result(none,param)
     {if(param){var v=param[1];return [0,v]}return [1,none]}
    function to_list(param){if(param){var v=param[1];return [0,v,0]}return 0}
    function to_seq(param)
     {if(param){var v=param[1];return function(_Ae_){return return$0(v,_Ae_)}}
      return empty}
    var
     Stdlib_option=
      [0,
       none,
       some,
       value,
       get,
       bind,
       join,
       map$0,
       fold,
       iter$0,
       is_none,
       is_some,
       equal,
       compare,
       to_result,
       to_list,
       to_seq];
    caml_register_global(724,Stdlib_option,"Stdlib__option");
    function ok(v){return [0,v]}
    function error(e){return [1,e]}
    function value$0(r,default$0)
     {if(0 === r[0]){var v=r[1];return v}return default$0}
    function get_ok(param)
     {if(0 === param[0]){var v=param[1];return v}
      return invalid_arg(cst_result_is_Error)}
    function get_error(param)
     {if(0 === param[0])return invalid_arg(cst_result_is_Ok);
      var e=param[1];
      return e}
    function bind$0(r,f)
     {if(0 === r[0]){var v=r[1];return caml_call1(f,v)}return r}
    function join$0(e){if(0 === e[0]){var r=e[1];return r}return e}
    function map$1(f,e)
     {if(0 === e[0]){var v=e[1];return [0,caml_call1(f,v)]}return e}
    function map_error(f,v)
     {if(0 === v[0])return v;var e=v[1];return [1,caml_call1(f,e)]}
    function fold$0(ok,error,param)
     {if(0 === param[0]){var v=param[1];return caml_call1(ok,v)}
      var e=param[1];
      return caml_call1(error,e)}
    function iter$1(f,param)
     {if(0 === param[0]){var v=param[1];return caml_call1(f,v)}return 0}
    function iter_error(f,param)
     {if(0 === param[0])return 0;var e=param[1];return caml_call1(f,e)}
    function is_ok(param){return 0 === param[0]?1:0}
    function is_error(param){return 0 === param[0]?0:1}
    function equal$0(ok,error,r0,match)
     {if(0 === r0[0])
       {var _Ac_=r0[1];
        if(0 === match[0]){var v1=match[1];return caml_call2(ok,_Ac_,v1)}}
      else
       {var _Ad_=r0[1];
        if(0 !== match[0]){var e1=match[1];return caml_call2(error,_Ad_,e1)}}
      return 0}
    function compare$0(ok,error,r0,match)
     {if(0 === r0[0])
       {var _Aa_=r0[1];
        if(0 === match[0]){var v1=match[1];return caml_call2(ok,_Aa_,v1)}
        return -1}
      var _Ab_=r0[1];
      if(0 === match[0])return 1;
      var e1=match[1];
      return caml_call2(error,_Ab_,e1)}
    function to_option(param)
     {if(0 === param[0]){var v=param[1];return [0,v]}return 0}
    function to_list$0(param)
     {if(0 === param[0]){var v=param[1];return [0,v,0]}return 0}
    function to_seq$0(param)
     {if(0 === param[0])
       {var v=param[1];return function(_z$_){return return$0(v,_z$_)}}
      return empty}
    var
     Stdlib_result=
      [0,
       ok,
       error,
       value$0,
       get_ok,
       get_error,
       bind$0,
       join$0,
       map$1,
       map_error,
       fold$0,
       iter$1,
       iter_error,
       is_ok,
       is_error,
       equal$0,
       compare$0,
       to_option,
       to_list$0,
       to_seq$0];
    caml_register_global(725,Stdlib_result,"Stdlib__result");
    function equal$1(_z__,_z9_){return _z__ === _z9_?1:0}
    var compare$1=caml_int_compare;
    function to_int(param){return 0 === param?0:1}
    function to_float(param){return 0 === param?0.:1.}
    function to_string$0(param){return 0 === param?cst_false$2:cst_true$2}
    var
     Stdlib_bool=
      [0,
       function(_z8_){return 1 - _z8_},
       equal$1,
       compare$1,
       to_int,
       to_float,
       to_string$0];
    caml_register_global(726,Stdlib_bool,"Stdlib__bool");
    function chr(n)
     {if(0 <= n && ! (255 < n))return n;return invalid_arg(cst_Char_chr)}
    function escaped(c)
     {var switch$0=0;
      if(40 <= c)
       {if(92 === c)return cst$1;if(! (127 <= c))switch$0 = 1}
      else
       if(32 <= c)
        {if(39 <= c)return cst$2;switch$0 = 1}
       else
        if(! (14 <= c))
         switch(c)
          {case 8:return cst_b;
           case 9:return cst_t;
           case 10:return cst_n;
           case 13:return cst_r
           }
      if(switch$0)
       {var s$0=caml_create_bytes(1);
        caml_bytes_unsafe_set(s$0,0,c);
        return caml_string_of_bytes(s$0)}
      var s=caml_create_bytes(4);
      caml_bytes_unsafe_set(s,0,92);
      caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
      caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
      caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
      return caml_string_of_bytes(s)}
    function lowercase(c)
     {var switch$0=0;
      if(! (65 <= c) || 90 < c)switch$0 = 1;
      if(switch$0)
       {var switch$1=0;
        if(! (192 <= c) || 214 < c)switch$1 = 1;
        if(switch$1)
         {var switch$2=0;
          if(! (216 <= c) || 222 < c)switch$2 = 1;
          if(switch$2)return c}}
      return c + 32 | 0}
    function uppercase(c)
     {var switch$0=0;
      if(! (97 <= c) || 122 < c)switch$0 = 1;
      if(switch$0)
       {var switch$1=0;
        if(! (224 <= c) || 246 < c)switch$1 = 1;
        if(switch$1)
         {var switch$2=0;
          if(! (248 <= c) || 254 < c)switch$2 = 1;
          if(switch$2)return c}}
      return c - 32 | 0}
    function lowercase_ascii(c)
     {if(65 <= c && ! (90 < c))return c + 32 | 0;return c}
    function uppercase_ascii(c)
     {if(97 <= c && ! (122 < c))return c - 32 | 0;return c}
    function compare$2(c1,c2){return c1 - c2 | 0}
    function equal$2(c1,c2){return 0 === (c1 - c2 | 0)?1:0}
    var
     Stdlib_char=
      [0,
       chr,
       escaped,
       lowercase,
       uppercase,
       lowercase_ascii,
       uppercase_ascii,
       compare$2,
       equal$2];
    caml_register_global(727,Stdlib_char,"Stdlib__char");
    var
     min$0=0,
     max$0=1114111,
     lo_bound=55295,
     hi_bound=57344,
     bom=65279,
     rep=65533;
    function succ(u)
     {return u === 55295
              ?hi_bound
              :u === 1114111?invalid_arg(err_no_succ):u + 1 | 0}
    function pred(u)
     {return u === 57344?lo_bound:u === 0?invalid_arg(err_no_pred):u - 1 | 0}
    function is_valid(i)
     {var _z4_=0 <= i?1:0,_z5_=_z4_?i <= 55295?1:0:_z4_;
      if(_z5_)
       var _z6_=_z5_;
      else
       var _z7_=57344 <= i?1:0,_z6_=_z7_?i <= 1114111?1:0:_z7_;
      return _z6_}
    function of_int(i)
     {return is_valid(i)
              ?i
              :invalid_arg
                (symbol
                  (caml_format_int(cst_X,i),cst_is_not_an_Unicode_scalar_v))}
    function is_char(u){return u < 256?1:0}
    function of_char(c){return c}
    function to_char(u)
     {return 255 < u
              ?invalid_arg
                (symbol
                  (cst_U,
                   symbol
                    (caml_format_int(cst_04X,u),cst_is_not_a_latin1_character)))
              :u}
    function unsafe_to_char(_z3_){return _z3_}
    function equal$3(_z2_,_z1_){return _z2_ === _z1_?1:0}
    var compare$3=caml_int_compare;
    function hash(_z0_){return _z0_}
    function _m_(_zZ_){return _zZ_}
    var
     Stdlib_uchar=
      [0,
       min$0,
       max$0,
       bom,
       rep,
       succ,
       pred,
       is_valid,
       of_int,
       function(_zY_){return _zY_},
       _m_,
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal$3,
       compare$3,
       hash];
    caml_register_global(728,Stdlib_uchar,"Stdlib__uchar");
    var
     executable_name=runtime.caml_sys_executable_name(0),
     match=runtime.caml_sys_get_config(0),
     os_type=match[1],
     match$0=runtime.caml_sys_const_backend_type(0),
     unix=runtime.caml_sys_const_ostype_unix(0),
     win32=runtime.caml_sys_const_ostype_win32(0),
     cygwin=runtime.caml_sys_const_ostype_cygwin(0),
     max_array_length=runtime.caml_sys_const_max_wosize(0),
     max_floatarray_length=max_array_length / 2 | 0,
     max_string_length=(4 * max_array_length | 0) - 1 | 0,
     big_endian=0,
     match$1=32,
     int_size=32;
    function getenv_opt(s)
     {try
       {var _zW_=[0,caml_sys_getenv(s)];return _zW_}
      catch(_zX_)
       {_zX_ = caml_wrap_exception(_zX_);
        if(_zX_ === Not_found)return 0;
        throw _zX_}}
    var interactive=[0,0];
    function set_signal(sig_num,sig_beh){return 0}
    var
     Break=[248,cst_Stdlib_Sys_Break,caml_fresh_oo_id(0)],
     sigabrt=-1,
     sigalrm=-2,
     sigfpe=-3,
     sighup=-4,
     sigill=-5,
     sigint=-6,
     sigkill=-7,
     sigpipe=-8,
     sigquit=-9,
     sigsegv=-10,
     sigterm=-11,
     sigusr1=-12,
     sigusr2=-13,
     sigchld=-14,
     sigcont=-15,
     sigstop=-16,
     sigtstp=-17,
     sigttin=-18,
     sigttou=-19,
     sigvtalrm=-20,
     sigprof=-21,
     sigbus=-22,
     sigpoll=-23,
     sigsys=-24,
     sigtrap=-25,
     sigurg=-26,
     sigxcpu=-27,
     sigxfsz=-28;
    function catch_break(on){return on?0:0}
    var
     Stdlib_sys=
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       match$0,
       unix,
       win32,
       cygwin,
       match$1,
       int_size,
       big_endian,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       sigabrt,
       sigalrm,
       sigfpe,
       sighup,
       sigill,
       sigint,
       sigkill,
       sigpipe,
       sigquit,
       sigsegv,
       sigterm,
       sigusr1,
       sigusr2,
       sigchld,
       sigcont,
       sigstop,
       sigtstp,
       sigttin,
       sigttou,
       sigvtalrm,
       sigprof,
       sigbus,
       sigpoll,
       sigsys,
       sigtrap,
       sigurg,
       sigxcpu,
       sigxfsz,
       Break,
       catch_break,
       ocaml_version,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled];
    caml_register_global(729,Stdlib_sys,"Stdlib__sys");
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function cons(a,l){return [0,a,l]}
    function hd(param)
     {if(param){var a=param[1];return a}return failwith(cst_hd)}
    function tl(param)
     {if(param){var l=param[2];return l}return failwith(cst_tl)}
    function nth(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return a;
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return failwith(cst_nth)}}
      return invalid_arg(cst_List_nth)}
    function nth_opt(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return [0,a];
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return 0}}
      return invalid_arg(cst_List_nth$0)}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function rev(l){return rev_append(l,0)}
    function init_aux(i,n,f)
     {if(n <= i)return 0;
      var r=caml_call1(f,i);
      return [0,r,init_aux(i + 1 | 0,n,f)]}
    var rev_init_threshold=typeof match$0 === "number"?10000:50;
    function init(len,f)
     {if(0 <= len)
       {if(rev_init_threshold < len)
         {var acc=0,i=0;
          for(;;)
           {if(len <= i)return rev(acc);
            var i$0=i + 1 | 0,acc$0=[0,caml_call1(f,i),acc],acc=acc$0,i=i$0;
            continue}}
        return init_aux(0,len,f)}
      return invalid_arg(cst_List_init)}
    function flatten(param)
     {if(param){var r=param[2],l=param[1];return append(l,flatten(r))}
      return 0}
    function map$2(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map$2(f,l)]}
      return 0}
    function _n_(i,f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call2(f,i,a);
        return [0,r,_n_(i + 1 | 0,f,l)]}
      return 0}
    function mapi(f,l){return _n_(0,f,l)}
    function rev_map(f,param)
     {var accu=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           a=param$0[1],
           accu$0=[0,caml_call1(f,a),accu],
           accu=accu$0,
           param$0=l;
          continue}
        return accu}}
    function iter$2(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=l;
          continue}
        return 0}}
    function iteri(f,l$0)
     {var i=0,param=l$0;
      for(;;)
       {if(param)
         {var l=param[2],a=param[1];
          caml_call2(f,i,a);
          var i$0=i + 1 | 0,i=i$0,param=l;
          continue}
        return 0}}
    function fold_left$0(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function fold_right(f,l,accu)
     {if(l){var l$0=l[2],a=l[1];return caml_call2(f,a,fold_right(f,l$0,accu))}
      return accu}
    function map2(f,l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1],r=caml_call2(f,a1,a2);
          return [0,r,map2(f,l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_map2)}
    function rev_map2(f,l1,l2)
     {var accu=0,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$0=[0,caml_call2(f,a1,a2),accu],
             accu=accu$0,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu;
        return invalid_arg(cst_List_rev_map2)}}
    function iter2(f,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var l2$1=l2$0[2],a2=l2$0[1],l1$1=l1$0[2],a1=l1$0[1];
            caml_call2(f,a1,a2);
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_iter2)}}
    function fold_left2(f,accu,l1,l2)
     {var accu$0=accu,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$1=caml_call3(f,accu$0,a1,a2),
             accu$0=accu$1,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu$0;
        return invalid_arg(cst_List_fold_left2)}}
    function fold_right2(f,l1,l2,accu)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return caml_call3(f,a1,a2,fold_right2(f,l1$0,l2$0,accu))}}
      else
       if(! l2)return accu;
      return invalid_arg(cst_List_fold_right2)}
    function for_all(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_zV_=caml_call1(p,a);
          if(_zV_){var param$0=l;continue}
          return _zV_}
        return 1}}
    function exists(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_zU_=caml_call1(p,a);
          if(_zU_)return _zU_;
          var param$0=l;
          continue}
        return 0}}
    function for_all2(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _zT_=caml_call2(p,a1,a2);
            if(_zT_){var l1$0=l1$1,l2$0=l2$1;continue}
            return _zT_}}
        else
         if(! l2$0)return 1;
        return invalid_arg(cst_List_for_all2)}}
    function exists2(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _zS_=caml_call2(p,a1,a2);
            if(_zS_)return _zS_;
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_exists2)}}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_zR_=0 === caml_compare(a,x)?1:0;
          if(_zR_)return _zR_;
          var param$0=l;
          continue}
        return 0}}
    function memq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_zQ_=a === x?1:0;
          if(_zQ_)return _zQ_;
          var param$0=l;
          continue}
        return 0}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function assoc_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return [0,b];
          var param$0=l;
          continue}
        return 0}}
    function assq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function assq_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return [0,b];
          var param$0=l;
          continue}
        return 0}}
    function mem_assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           match=param$0[1],
           a=match[1],
           _zP_=0 === caml_compare(a,x)?1:0;
          if(_zP_)return _zP_;
          var param$0=l;
          continue}
        return 0}}
    function mem_assq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],a=match[1],_zO_=a === x?1:0;
          if(_zO_)return _zO_;
          var param$0=l;
          continue}
        return 0}}
    function remove_assoc(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return 0 === caml_compare(a,x)?l:[0,pair,remove_assoc(x,l)]}
      return 0}
    function remove_assq(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return a === x?l:[0,pair,remove_assq(x,l)]}
      return 0}
    function find(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return x;
          var param$0=l;
          continue}
        throw Not_found}}
    function find_opt(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return [0,x];
          var param$0=l;
          continue}
        return 0}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function filter_map$0(f)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1],match=caml_call1(f,x);
            if(match)
             {var v=match[1],accu$1=[0,v,accu$0],accu$0=accu$1,param=l;
              continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function partition(p,param)
     {var yes=0,no=0,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))
           {var yes$0=[0,x,yes],yes=yes$0,param$0=l;continue}
          var no$0=[0,x,no],no=no$0,param$0=l;
          continue}
        var _zN_=rev(no);
        return [0,rev(yes),_zN_]}}
    function split(param)
     {if(param)
       {var
         l=param[2],
         match=param[1],
         y=match[2],
         x=match[1],
         match$0=split(l),
         ry=match$0[2],
         rx=match$0[1];
        return [0,[0,x,rx],[0,y,ry]]}
      return _o_}
    function combine(l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return [0,[0,a1,a2],combine(l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_combine)}
    function merge(cmp,l1,match)
     {if(l1)
       {if(match)
         {var t2=match[2],h2=match[1],t1=l1[2],h1=l1[1];
          return 0 < caml_call2(cmp,h1,h2)
                  ?[0,h2,merge(cmp,l1,t2)]
                  :[0,h1,merge(cmp,t1,match)]}
        return l1}
      return match}
    function chop(k,l)
     {var k$0=k,l$0=l;
      for(;;)
       {if(0 === k$0)return l$0;
        if(l$0){var l$1=l$0[2],k$1=k$0 - 1 | 0,k$0=k$1,l$0=l$1;continue}
        throw [0,Assert_failure,_p_]}}
    function fast_sort(cmp,l)
     {function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zK_=l[2];
            if(_zK_)
             {var x2=_zK_[1],x1=l[1];
              return 0 < caml_call2(cmp,x1,x2)?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
        else
         if(3 === n && l)
          {var _zL_=l[2];
           if(_zL_)
            {var _zM_=_zL_[2];
             if(_zM_)
              {var x3=_zM_[1],x2$0=_zL_[1],x1$0=l[1];
               return 0 < caml_call2(cmp,x1$0,x2$0)
                       ?0 < caml_call2(cmp,x1$0,x3)
                         ?0 < caml_call2(cmp,x2$0,x3)
                           ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                           :[0,x2$0,[0,x3,[0,x1$0,0]]]
                         :[0,x2$0,[0,x1$0,[0,x3,0]]]
                       :0 < caml_call2(cmp,x2$0,x3)
                         ?0 < caml_call2(cmp,x1$0,x3)
                           ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                           :[0,x1$0,[0,x3,[0,x2$0,0]]]
                         :[0,x1$0,[0,x2$0,[0,x3,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=chop(n1,l),
         l1$0=rev_sort(n1,l),
         l2$1=rev_sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h1,accu],l1=t1,accu=accu$0;continue}
              var accu$1=[0,h2,accu],l2=t2,accu=accu$1;
              continue}
            return rev_append(l1,accu)}
          return rev_append(l2,accu)}}
      function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zH_=l[2];
            if(_zH_)
             {var x2=_zH_[1],x1=l[1];
              return 0 < caml_call2(cmp,x1,x2)?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
        else
         if(3 === n && l)
          {var _zI_=l[2];
           if(_zI_)
            {var _zJ_=_zI_[2];
             if(_zJ_)
              {var x3=_zJ_[1],x2$0=_zI_[1],x1$0=l[1];
               return 0 < caml_call2(cmp,x1$0,x2$0)
                       ?0 < caml_call2(cmp,x2$0,x3)
                         ?[0,x1$0,[0,x2$0,[0,x3,0]]]
                         :0 < caml_call2(cmp,x1$0,x3)
                           ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                           :[0,x3,[0,x1$0,[0,x2$0,0]]]
                       :0 < caml_call2(cmp,x1$0,x3)
                         ?[0,x2$0,[0,x1$0,[0,x3,0]]]
                         :0 < caml_call2(cmp,x2$0,x3)
                           ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                           :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=chop(n1,l),
         l1$0=sort(n1,l),
         l2$1=sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h2,accu],l2=t2,accu=accu$0;continue}
              var accu$1=[0,h1,accu],l1=t1,accu=accu$1;
              continue}
            return rev_append(l1,accu)}
          return rev_append(l2,accu)}}
      var len=length(l);
      return 2 <= len?sort(len,l):l}
    function sort_uniq(cmp,l)
     {function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zE_=l[2];
            if(_zE_)
             {var x2=_zE_[1],x1=l[1],c$0=caml_call2(cmp,x1,x2);
              return 0 === c$0
                      ?[0,x1,0]
                      :0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
        else
         if(3 === n && l)
          {var _zF_=l[2];
           if(_zF_)
            {var _zG_=_zF_[2];
             if(_zG_)
              {var
                x3=_zG_[1],
                x2$0=_zF_[1],
                x1$0=l[1],
                c$1=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$1)
                {var c$2=caml_call2(cmp,x2$0,x3);
                 return 0 === c$2
                         ?[0,x2$0,0]
                         :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]]}
               if(0 <= c$1)
                {var c$3=caml_call2(cmp,x1$0,x3);
                 if(0 === c$3)return [0,x2$0,[0,x1$0,0]];
                 if(0 <= c$3)
                  {var c$4=caml_call2(cmp,x2$0,x3);
                   return 0 === c$4
                           ?[0,x2$0,[0,x1$0,0]]
                           :0 <= c$4
                             ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                             :[0,x2$0,[0,x3,[0,x1$0,0]]]}
                 return [0,x2$0,[0,x1$0,[0,x3,0]]]}
               var c$5=caml_call2(cmp,x2$0,x3);
               if(0 === c$5)return [0,x1$0,[0,x2$0,0]];
               if(0 <= c$5)
                {var c$6=caml_call2(cmp,x1$0,x3);
                 return 0 === c$6
                         ?[0,x1$0,[0,x2$0,0]]
                         :0 <= c$6
                           ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                           :[0,x1$0,[0,x3,[0,x2$0,0]]]}
               return [0,x1$0,[0,x2$0,[0,x3,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=chop(n1,l),
         l1$0=rev_sort(n1,l),
         l2$1=rev_sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
              var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
              continue}
            return rev_append(l1,accu)}
          return rev_append(l2,accu)}}
      function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zB_=l[2];
            if(_zB_)
             {var x2=_zB_[1],x1=l[1],c$0=caml_call2(cmp,x1,x2);
              return 0 === c$0
                      ?[0,x1,0]
                      :0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
        else
         if(3 === n && l)
          {var _zC_=l[2];
           if(_zC_)
            {var _zD_=_zC_[2];
             if(_zD_)
              {var
                x3=_zD_[1],
                x2$0=_zC_[1],
                x1$0=l[1],
                c$1=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$1)
                {var c$2=caml_call2(cmp,x2$0,x3);
                 return 0 === c$2
                         ?[0,x2$0,0]
                         :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]]}
               if(0 < c$1)
                {var c$3=caml_call2(cmp,x2$0,x3);
                 if(0 === c$3)return [0,x1$0,[0,x2$0,0]];
                 if(0 < c$3)return [0,x1$0,[0,x2$0,[0,x3,0]]];
                 var c$4=caml_call2(cmp,x1$0,x3);
                 return 0 === c$4
                         ?[0,x1$0,[0,x2$0,0]]
                         :0 < c$4
                           ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                           :[0,x3,[0,x1$0,[0,x2$0,0]]]}
               var c$5=caml_call2(cmp,x1$0,x3);
               if(0 === c$5)return [0,x2$0,[0,x1$0,0]];
               if(0 < c$5)return [0,x2$0,[0,x1$0,[0,x3,0]]];
               var c$6=caml_call2(cmp,x2$0,x3);
               return 0 === c$6
                       ?[0,x2$0,[0,x1$0,0]]
                       :0 < c$6
                         ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                         :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=chop(n1,l),
         l1$0=sort(n1,l),
         l2$1=sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 <= c){var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
              var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
              continue}
            return rev_append(l1,accu)}
          return rev_append(l2,accu)}}
      var len=length(l);
      return 2 <= len?sort(len,l):l}
    function compare_lengths(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0){var l2$1=l2$0[2],l1$1=l1$0[2],l1$0=l1$1,l2$0=l2$1;continue}
          return 1}
        return l2$0?-1:0}}
    function compare_length_with(l,n)
     {var l$0=l,n$0=n;
      for(;;)
       {if(l$0)
         {var l$1=l$0[2];
          if(0 < n$0){var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;continue}
          return 1}
        return 0 === n$0?0:0 < n$0?-1:1}}
    function to_seq$1(l)
     {function aux(l,param)
       {if(l)
         {var tail=l[2],x=l[1];
          return [0,x,function(_zA_){return aux(tail,_zA_)}]}
        return 0}
      return function(_zz_){return aux(l,_zz_)}}
    function of_seq(seq)
     {function direct(depth,seq)
       {if(0 === depth)
         {var _zy_=0;
          return rev(fold_left(function(acc,x){return [0,x,acc]},_zy_,seq))}
        var match=caml_call1(seq,0);
        if(match)
         {var next=match[2],x=match[1];
          return [0,x,direct(depth - 1 | 0,next)]}
        return 0}
      return direct(500,seq)}
    var
     include=
      [0,
       length,
       compare_lengths,
       compare_length_with,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       iter$2,
       iteri,
       map$2,
       mapi,
       rev_map,
       filter_map$0,
       fold_left$0,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_all,
       find_all,
       partition,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq$1,
       of_seq];
    caml_register_global(730,include,"Stdlib__list");
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function init$0(n,f)
     {var s=caml_create_bytes(n),_zw_=n - 1 | 0,_zv_=0;
      if(! (_zw_ < 0))
       {var i=_zv_;
        for(;;)
         {caml_bytes_unsafe_set(s,i,caml_call1(f,i));
          var _zx_=i + 1 | 0;
          if(_zw_ !== i){var i=_zx_;continue}
          break}}
      return s}
    var empty$0=caml_create_bytes(0);
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function to_string$1(b){return caml_string_of_bytes(copy(b))}
    function of_string(s){return copy(caml_bytes_of_string(s))}
    function sub(s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(cst_String_sub_Bytes_sub)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function symbol$1(a,b)
     {var c=a + b | 0,_zu_=b < 0?1:0,match=c < 0?1:0,switch$0=0;
      if(0 === (a < 0?1:0))
       {if(0 === _zu_ && 0 !== match)switch$0 = 1}
      else
       if(0 !== _zu_ && 0 === match)switch$0 = 1;
      return switch$0?invalid_arg(cst_Bytes_extend):c}
    function extend(s,left,right)
     {var
       len=symbol$1(symbol$1(caml_ml_bytes_length(s),left),right),
       r=caml_create_bytes(len);
      if(0 <= left)
       var srcoff=0,dstoff=left;
      else
       var srcoff=- left | 0,dstoff=0;
      var cpylen=min(caml_ml_bytes_length(s) - srcoff | 0,len - dstoff | 0);
      if(0 < cpylen)caml_blit_bytes(s,srcoff,r,dstoff,cpylen);
      return r}
    function fill(s,ofs,len,c)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_fill_bytes(s,ofs,len,c);
      return invalid_arg(cst_String_fill_Bytes_fill)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_Bytes_blit)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_String_blit_Bytes_blit_str)}
    function iter$3(f,a)
     {var _zs_=caml_ml_bytes_length(a) - 1 | 0,_zr_=0;
      if(! (_zs_ < 0))
       {var i=_zr_;
        for(;;)
         {caml_call1(f,caml_bytes_unsafe_get(a,i));
          var _zt_=i + 1 | 0;
          if(_zs_ !== i){var i=_zt_;continue}
          break}}
      return 0}
    function iteri$0(f,a)
     {var _zp_=caml_ml_bytes_length(a) - 1 | 0,_zo_=0;
      if(! (_zp_ < 0))
       {var i=_zo_;
        for(;;)
         {caml_call2(f,i,caml_bytes_unsafe_get(a,i));
          var _zq_=i + 1 | 0;
          if(_zp_ !== i){var i=_zq_;continue}
          break}}
      return 0}
    function concat(sep,l)
     {if(l)
       {var seplen=caml_ml_bytes_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _zj_=param[2],_zk_=param[1];
            if(_zj_)
             {var
               x=(caml_ml_bytes_length(_zk_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(cst_Bytes_concat),
               acc=acc$0,
               param=_zj_;
              continue}
            var _zn_=caml_ml_bytes_length(_zk_) + acc | 0}
          else
           var _zn_=acc;
          var dst=caml_create_bytes(_zn_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _zl_=param$0[2],_zm_=param$0[1];
              if(_zl_)
               {caml_blit_bytes(_zm_,0,dst,pos,caml_ml_bytes_length(_zm_));
                caml_blit_bytes
                 (sep,0,dst,pos + caml_ml_bytes_length(_zm_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_bytes_length(_zm_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=_zl_;
                continue}
              caml_blit_bytes(_zm_,0,dst,pos,caml_ml_bytes_length(_zm_));
              return dst}
            return dst}}}
      return empty$0}
    function cat(s1,s2)
     {var
       l1=caml_ml_bytes_length(s1),
       l2=caml_ml_bytes_length(s2),
       r=caml_create_bytes(l1 + l2 | 0);
      caml_blit_bytes(s1,0,r,0,l1);
      caml_blit_bytes(s2,0,r,l1,l2);
      return r}
    function is_space(param)
     {var _zi_=param - 9 | 0,switch$0=0;
      if(4 < _zi_ >>> 0)
       {if(23 === _zi_)switch$0 = 1}
      else
       if(2 !== _zi_)switch$0 = 1;
      return switch$0?1:0}
    function trim(s)
     {var len=caml_ml_bytes_length(s),i=[0,0];
      for(;;)
       {if(i[1] < len && is_space(caml_bytes_unsafe_get(s,i[1])))
         {i[1]++;continue}
        var j=[0,len - 1 | 0];
        for(;;)
         {if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s,j[1])))
           {j[1] += -1;continue}
          return i[1] <= j[1]?sub(s,i[1],(j[1] - i[1] | 0) + 1 | 0):empty$0}}}
    function escaped$0(s)
     {var n=[0,0],_zb_=caml_ml_bytes_length(s) - 1 | 0,_za_=0;
      if(! (_zb_ < 0))
       {var i$0=_za_;
        for(;;)
         {var match=caml_bytes_unsafe_get(s,i$0),switch$0=0;
          if(32 <= match)
           {var _zf_=match - 34 | 0,switch$1=0;
            if(58 < _zf_ >>> 0)
             {if(93 <= _zf_)switch$1 = 1}
            else
             if(56 < (_zf_ - 1 | 0) >>> 0){switch$0 = 1;switch$1 = 1}
            if(! switch$1){var _zg_=1;switch$0 = 2}}
          else
           if(11 <= match)
            {if(13 === match)switch$0 = 1}
           else
            if(8 <= match)switch$0 = 1;
          switch(switch$0){case 0:var _zg_=4;break;case 1:var _zg_=2;break}
          n[1] = n[1] + _zg_ | 0;
          var _zh_=i$0 + 1 | 0;
          if(_zb_ !== i$0){var i$0=_zh_;continue}
          break}}
      if(n[1] === caml_ml_bytes_length(s))return copy(s);
      var s$0=caml_create_bytes(n[1]);
      n[1] = 0;
      var _zd_=caml_ml_bytes_length(s) - 1 | 0,_zc_=0;
      if(! (_zd_ < 0))
       {var i=_zc_;
        for(;;)
         {var c=caml_bytes_unsafe_get(s,i),switch$2=0;
          if(35 <= c)
           if(92 === c)
            switch$2 = 2;
           else
            if(127 <= c)switch$2 = 1;else switch$2 = 3;
          else
           if(32 <= c)
            if(34 <= c)switch$2 = 2;else switch$2 = 3;
           else
            if(14 <= c)
             switch$2 = 1;
            else
             switch(c)
              {case 8:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],98);
                break;
               case 9:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],116);
                break;
               case 10:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],110);
                break;
               case 13:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],114);
                break;
               default:switch$2 = 1}
          switch(switch$2)
           {case 1:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c / 100 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c % 10 | 0) | 0);
             break;
            case 2:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],c);
             break;
            case 3:caml_bytes_unsafe_set(s$0,n[1],c);break
            }
          n[1]++;
          var _ze_=i + 1 | 0;
          if(_zd_ !== i){var i=_ze_;continue}
          break}}
      return s$0}
    function map$3(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_y__=l - 1 | 0,_y9_=0;
      if(! (_y__ < 0))
       {var i=_y9_;
        for(;;)
         {caml_bytes_unsafe_set(r,i,caml_call1(f,caml_bytes_unsafe_get(s,i)));
          var _y$_=i + 1 | 0;
          if(_y__ !== i){var i=_y$_;continue}
          break}}
      return r}
    function mapi$0(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_y7_=l - 1 | 0,_y6_=0;
      if(! (_y7_ < 0))
       {var i=_y6_;
        for(;;)
         {caml_bytes_unsafe_set
           (r,i,caml_call2(f,i,caml_bytes_unsafe_get(s,i)));
          var _y8_=i + 1 | 0;
          if(_y7_ !== i){var i=_y8_;continue}
          break}}
      return r}
    function uppercase_ascii$0(s){return map$3(uppercase_ascii,s)}
    function lowercase_ascii$0(s){return map$3(lowercase_ascii,s)}
    function apply1(f,s)
     {if(0 === caml_ml_bytes_length(s))return s;
      var r=copy(s);
      caml_bytes_unsafe_set(r,0,caml_call1(f,caml_bytes_unsafe_get(s,0)));
      return r}
    function capitalize_ascii(s){return apply1(uppercase_ascii,s)}
    function uncapitalize_ascii(s){return apply1(lowercase_ascii,s)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index(s,c){return index_rec(s,caml_ml_bytes_length(s),0,c)}
    function index_rec_opt(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_opt(s,c)
     {return index_rec_opt(s,caml_ml_bytes_length(s),0,c)}
    function index_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))return index_rec(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_in)}
    function index_from_opt(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))return index_rec_opt(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Byte)}
    function rindex_rec(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        throw Not_found}}
    function rindex(s,c)
     {return rindex_rec(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from(s,i,c)
     {if(-1 <= i && ! (caml_ml_bytes_length(s) <= i))return rindex_rec(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_r)}
    function rindex_rec_opt(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        return 0}}
    function rindex_opt(s,c)
     {return rindex_rec_opt(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from_opt(s,i,c)
     {if(-1 <= i && ! (caml_ml_bytes_length(s) <= i))
       return rindex_rec_opt(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Byt)}
    function contains_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec(s,l,i,c);var _y4_=1;return _y4_}
       catch(_y5_)
        {_y5_ = caml_wrap_exception(_y5_);
         if(_y5_ === Not_found)return 0;
         throw _y5_}
      return invalid_arg(cst_String_contains_from_Bytes)}
    function contains(s,c){return contains_from(s,0,c)}
    function rcontains_from(s,i,c)
     {if(0 <= i && ! (caml_ml_bytes_length(s) <= i))
       try
        {rindex_rec(s,i,c);var _y2_=1;return _y2_}
       catch(_y3_)
        {_y3_ = caml_wrap_exception(_y3_);
         if(_y3_ === Not_found)return 0;
         throw _y3_}
      return invalid_arg(cst_String_rcontains_from_Byte)}
    var compare$4=runtime.caml_bytes_compare;
    function uppercase$0(s){return map$3(uppercase,s)}
    function lowercase$0(s){return map$3(lowercase,s)}
    function capitalize(s){return apply1(uppercase,s)}
    function uncapitalize(s){return apply1(lowercase,s)}
    function to_seq$2(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_y0_=i + 1 | 0;
        return [0,x,function(_y1_){return aux(_y0_,_y1_)}]}
      var _yY_=0;
      return function(_yZ_){return aux(_yY_,_yZ_)}}
    function to_seqi(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_yW_=i + 1 | 0;
        return [0,[0,i,x],function(_yX_){return aux(_yW_,_yX_)}]}
      var _yU_=0;
      return function(_yV_){return aux(_yU_,_yV_)}}
    function of_seq$0(i)
     {var n=[0,0],buf=[0,make(256,0)];
      iter
       (function(c)
         {if(n[1] === caml_ml_bytes_length(buf[1]))
           {var
             new_len=
              min(2 * caml_ml_bytes_length(buf[1]) | 0,max_string_length);
            if(caml_ml_bytes_length(buf[1]) === new_len)
             failwith(cst_Bytes_of_seq_cannot_grow_b);
            var new_buf=make(new_len,0);
            blit(buf[1],0,new_buf,0,n[1]);
            buf[1] = new_buf}
          caml_bytes_set(buf[1],n[1],c);
          n[1]++;
          return 0},
        i);
      return sub(buf[1],0,n[1])}
    function get_int8(b,i){return caml_bytes_get(b,i) << 24 >> 24}
    function get_uint16_le(b,i){return caml_bytes_get16(b,i)}
    function get_uint16_be(b,i){return caml_bswap16(caml_bytes_get16(b,i))}
    function get_int16_ne(b,i){return caml_bytes_get16(b,i) << 16 >> 16}
    function get_int16_le(b,i){return caml_bytes_get16(b,i) << 16 >> 16}
    function get_int16_be(b,i){return get_uint16_be(b,i) << 16 >> 16}
    function get_int32_le(b,i){return caml_bytes_get32(b,i)}
    function get_int32_be(b,i){return caml_int32_bswap(caml_bytes_get32(b,i))}
    function get_int64_le(b,i){return caml_bytes_get64(b,i)}
    function get_int64_be(b,i){return caml_int64_bswap(caml_bytes_get64(b,i))}
    function set_int16_le(b,i,x){return caml_bytes_set16(b,i,x)}
    function set_int16_be(b,i,x){return caml_bytes_set16(b,i,caml_bswap16(x))}
    function set_int32_le(b,i,x){return caml_bytes_set32(b,i,x)}
    function set_int32_be(b,i,x)
     {return caml_bytes_set32(b,i,caml_int32_bswap(x))}
    function set_int64_le(b,i,x){return caml_bytes_set64(b,i,x)}
    function set_int64_be(b,i,x)
     {return caml_bytes_set64(b,i,caml_int64_bswap(x))}
    var
     set_uint8=caml_bytes_set,
     set_uint16_ne=caml_bytes_set16,
     set_int64_ne=caml_bytes_set64,
     set_int32_ne=caml_bytes_set32,
     set_int16_ne=caml_bytes_set16,
     set_int8=caml_bytes_set,
     get_int64_ne=caml_bytes_get64,
     get_int32_ne=caml_bytes_get32,
     get_uint16_ne=caml_bytes_get16,
     get_uint8=caml_bytes_get,
     unsafe_of_string=caml_bytes_of_string,
     unsafe_to_string=caml_string_of_bytes,
     equal$4=runtime.caml_bytes_equal,
     include$0=
      [0,
       make,
       init$0,
       empty$0,
       copy,
       of_string,
       to_string$1,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat,
       cat,
       iter$3,
       iteri$0,
       map$3,
       mapi$0,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase$0,
       lowercase$0,
       capitalize,
       uncapitalize,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$4,
       equal$4,
       unsafe_to_string,
       unsafe_of_string,
       to_seq$2,
       to_seqi,
       of_seq$0,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le];
    caml_register_global(731,include$0,"Stdlib__bytes");
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function init$1(n,f){return caml_string_of_bytes(init$0(n,f))}
    function copy$0(s)
     {return caml_string_of_bytes(copy(caml_bytes_of_string(s)))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    function concat$0(sep,l)
     {if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _yP_=param[2],_yQ_=param[1];
            if(_yP_)
             {var
               x=(caml_ml_string_length(_yQ_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(cst_String_concat),
               acc=acc$0,
               param=_yP_;
              continue}
            var _yT_=caml_ml_string_length(_yQ_) + acc | 0}
          else
           var _yT_=acc;
          var dst=caml_create_bytes(_yT_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _yR_=param$0[2],_yS_=param$0[1];
              if(_yR_)
               {caml_blit_string(_yS_,0,dst,pos,caml_ml_string_length(_yS_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_yS_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_yS_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=_yR_;
                continue}
              caml_blit_string(_yS_,0,dst,pos,caml_ml_string_length(_yS_))}
            return caml_string_of_bytes(dst)}}}
      return cst$3}
    function iter$4(f,s)
     {var _yN_=caml_ml_string_length(s) - 1 | 0,_yM_=0;
      if(! (_yN_ < 0))
       {var i=_yM_;
        for(;;)
         {caml_call1(f,caml_string_unsafe_get(s,i));
          var _yO_=i + 1 | 0;
          if(_yN_ !== i){var i=_yO_;continue}
          break}}
      return 0}
    function iteri$1(f,s)
     {var _yK_=caml_ml_string_length(s) - 1 | 0,_yJ_=0;
      if(! (_yK_ < 0))
       {var i=_yJ_;
        for(;;)
         {caml_call2(f,i,caml_string_unsafe_get(s,i));
          var _yL_=i + 1 | 0;
          if(_yK_ !== i){var i=_yL_;continue}
          break}}
      return 0}
    function map$4(f,s)
     {return caml_string_of_bytes(map$3(f,caml_bytes_of_string(s)))}
    function mapi$1(f,s)
     {return caml_string_of_bytes(mapi$0(f,caml_bytes_of_string(s)))}
    function is_space$0(param)
     {var _yI_=param - 9 | 0,switch$0=0;
      if(4 < _yI_ >>> 0)
       {if(23 === _yI_)switch$0 = 1}
      else
       if(2 !== _yI_)switch$0 = 1;
      return switch$0?1:0}
    function trim$0(s)
     {if(caml_string_equal(s,cst$4))return s;
      if
       (!
        is_space$0(caml_string_unsafe_get(s,0))
        &&
        !
        is_space$0(caml_string_unsafe_get(s,caml_ml_string_length(s) - 1 | 0)))
       return s;
      return caml_string_of_bytes(trim(caml_bytes_of_string(s)))}
    function escaped$1(s)
     {var n=caml_ml_string_length(s),i=0;
      for(;;)
       {if(n <= i)return s;
        var match=caml_string_unsafe_get(s,i),_yH_=match - 32 | 0,switch$0=0;
        if(59 < _yH_ >>> 0)
         {if(33 < (_yH_ - 61 | 0) >>> 0)switch$0 = 1}
        else
         if(2 === _yH_)switch$0 = 1;
        if(switch$0)
         return caml_string_of_bytes(escaped$0(caml_bytes_of_string(s)));
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function index_rec$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index$0(s,c){return index_rec$0(s,caml_ml_string_length(s),0,c)}
    function index_rec_opt$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_opt$0(s,c)
     {return index_rec_opt$0(s,caml_ml_string_length(s),0,c)}
    function index_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))return index_rec$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_in$0)}
    function index_from_opt$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))return index_rec_opt$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Byte$0)}
    function rindex_rec$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_string_unsafe_get(s,i$0) === c)return i$0;
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        throw Not_found}}
    function rindex$0(s,c)
     {return rindex_rec$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from$0(s,i,c)
     {if(-1 <= i && ! (caml_ml_string_length(s) <= i))
       return rindex_rec$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_r$0)}
    function rindex_rec_opt$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        return 0}}
    function rindex_opt$0(s,c)
     {return rindex_rec_opt$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from_opt$0(s,i,c)
     {if(-1 <= i && ! (caml_ml_string_length(s) <= i))
       return rindex_rec_opt$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Byt$0)}
    function contains_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec$0(s,l,i,c);var _yF_=1;return _yF_}
       catch(_yG_)
        {_yG_ = caml_wrap_exception(_yG_);
         if(_yG_ === Not_found)return 0;
         throw _yG_}
      return invalid_arg(cst_String_contains_from_Bytes$0)}
    function contains$0(s,c){return contains_from$0(s,0,c)}
    function rcontains_from$0(s,i,c)
     {if(0 <= i && ! (caml_ml_string_length(s) <= i))
       try
        {rindex_rec$0(s,i,c);var _yD_=1;return _yD_}
       catch(_yE_)
        {_yE_ = caml_wrap_exception(_yE_);
         if(_yE_ === Not_found)return 0;
         throw _yE_}
      return invalid_arg(cst_String_rcontains_from_Byte$0)}
    function uppercase_ascii$1(s)
     {return caml_string_of_bytes(uppercase_ascii$0(caml_bytes_of_string(s)))}
    function lowercase_ascii$1(s)
     {return caml_string_of_bytes(lowercase_ascii$0(caml_bytes_of_string(s)))}
    function capitalize_ascii$0(s)
     {return caml_string_of_bytes(capitalize_ascii(caml_bytes_of_string(s)))}
    function uncapitalize_ascii$0(s)
     {return caml_string_of_bytes(uncapitalize_ascii(caml_bytes_of_string(s)))}
    var compare$5=caml_string_compare;
    function split_on_char(sep,s)
     {var
       r=[0,0],
       j=[0,caml_ml_string_length(s)],
       _yz_=caml_ml_string_length(s) - 1 | 0;
      if(! (_yz_ < 0))
       {var i=_yz_;
        for(;;)
         {if(caml_string_unsafe_get(s,i) === sep)
           {var _yB_=r[1];
            r[1] = [0,sub$0(s,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_yB_];
            j[1] = i}
          var _yC_=i - 1 | 0;
          if(0 !== i){var i=_yC_;continue}
          break}}
      var _yA_=r[1];
      return [0,sub$0(s,0,j[1]),_yA_]}
    function uppercase$1(s)
     {return caml_string_of_bytes(uppercase$0(caml_bytes_of_string(s)))}
    function lowercase$1(s)
     {return caml_string_of_bytes(lowercase$0(caml_bytes_of_string(s)))}
    function capitalize$0(s)
     {return caml_string_of_bytes(capitalize(caml_bytes_of_string(s)))}
    function uncapitalize$0(s)
     {return caml_string_of_bytes(uncapitalize(caml_bytes_of_string(s)))}
    function to_seq$3(s){return to_seq$2(caml_bytes_of_string(s))}
    function to_seqi$0(s){return to_seqi(caml_bytes_of_string(s))}
    function of_seq$1(g){return caml_string_of_bytes(of_seq$0(g))}
    var
     equal$5=caml_string_equal,
     include$1=
      [0,
       make$0,
       init$1,
       copy$0,
       sub$0,
       fill,
       blit$0,
       concat$0,
       iter$4,
       iteri$1,
       map$4,
       mapi$1,
       trim$0,
       escaped$1,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       contains$0,
       contains_from$0,
       rcontains_from$0,
       uppercase$1,
       lowercase$1,
       capitalize$0,
       uncapitalize$0,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       compare$5,
       equal$5,
       split_on_char,
       to_seq$3,
       to_seqi$0,
       of_seq$1];
    caml_register_global(732,include$1,"Stdlib__string");
    function equal$6(param,_yy_){return 1}
    function compare$6(param,_yx_){return 0}
    function to_string$2(param){return cst$5}
    var Stdlib_unit=[0,equal$6,compare$6,to_string$2];
    caml_register_global(733,Stdlib_unit,"Stdlib__unit");
    function to_buffer(buff,ofs,len,v,flags)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_bytes_length(buff) - len | 0) < ofs))
       return runtime.caml_output_value_to_buffer(buff,ofs,len,v,flags);
      return invalid_arg(cst_Marshal_to_buffer_substrin)}
    var header_size=20;
    function data_size(buff,ofs)
     {if(0 <= ofs && ! ((caml_ml_bytes_length(buff) - 20 | 0) < ofs))
       return caml_marshal_data_size(buff,ofs);
      return invalid_arg(cst_Marshal_data_size)}
    function total_size(buff,ofs){return 20 + data_size(buff,ofs) | 0}
    function from_bytes(buff,ofs)
     {if(0 <= ofs && ! ((caml_ml_bytes_length(buff) - 20 | 0) < ofs))
       {var len=caml_marshal_data_size(buff,ofs);
        return (caml_ml_bytes_length(buff) - (20 + len | 0) | 0) < ofs
                ?invalid_arg(cst_Marshal_from_bytes$0)
                :runtime.caml_input_value_from_bytes(buff,ofs)}
      return invalid_arg(cst_Marshal_from_bytes)}
    function from_string(buff,ofs)
     {return from_bytes(caml_bytes_of_string(buff),ofs)}
    var
     Stdlib_marshal=
      [0,
       caml_output_value,
       to_buffer,
       caml_input_value,
       from_bytes,
       from_string,
       header_size,
       data_size,
       total_size];
    caml_register_global(734,Stdlib_marshal,"Stdlib__marshal");
    function is_block(a){return 1 - (typeof a === "number"?1:0)}
    var double_field=caml_array_get,set_double_field=caml_array_set;
    function marshal(obj){return runtime.caml_output_value_to_bytes(obj,0)}
    function unmarshal(str,pos)
     {var _yw_=pos + total_size(str,pos) | 0;
      return [0,from_bytes(str,pos),_yw_]}
    var
     first_non_constant_constructor=0,
     last_non_constant_constructor_=245,
     lazy_tag=246,
     closure_tag=247,
     object_tag=248,
     infix_tag=249,
     forward_tag=250,
     no_scan_tag=251,
     abstract_tag=251,
     string_tag=252,
     double_tag=253,
     double_array_tag=254,
     custom_tag=255,
     int_tag=1000,
     out_of_heap_tag=1001,
     unaligned_tag=1002;
    function of_val(x)
     {var switch$0=0;
      if(is_block(x) && caml_obj_tag(x) !== 248 && 1 <= x.length - 1)
       {var slot=x[1];switch$0 = 1}
      if(! switch$0)var slot=x;
      var switch$1=0;
      if(is_block(slot) && caml_obj_tag(slot) === 248)
       {var name=slot[1];switch$1 = 1}
      if(! switch$1)var name=invalid_arg(cst_Obj_extension_constructor$0);
      return caml_obj_tag(name) === 252
              ?slot
              :invalid_arg(cst_Obj_extension_constructor)}
    function name(slot){return slot[1]}
    function id(slot){return slot[2]}
    var
     Extension_constructor=[0,of_val,name,id],
     extension_constructor=Extension_constructor[1],
     extension_name=Extension_constructor[2],
     extension_id=Extension_constructor[3],
     max_ephe_length=max_array_length - 2 | 0;
    function create(l)
     {var _yu_=0 <= l?1:0,_yv_=_yu_?l <= max_ephe_length?1:0:_yu_;
      if(1 - _yv_)invalid_arg(cst_Obj_Ephemeron_create);
      return runtime.caml_ephe_create(l)}
    function length$0(x){return x.length - 1 - 2 | 0}
    function raise_if_invalid_offset(e,o,msg)
     {var _yr_=0 <= o?1:0,_ys_=_yr_?o < length$0(e)?1:0:_yr_,_yt_=1 - _ys_;
      return _yt_?invalid_arg(msg):_yt_}
    function get_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_get_key);
      return runtime.caml_ephe_get_key(e,o)}
    function get_key_copy(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_get_key_copy);
      return runtime.caml_ephe_get_key_copy(e,o)}
    function set_key(e,o,x)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_set_key);
      return caml_ephe_set_key(e,o,x)}
    function unset_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_unset_key);
      return caml_ephe_unset_key(e,o)}
    function check_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_check_key);
      return runtime.caml_ephe_check_key(e,o)}
    function blit_key(e1,o1,e2,o2,l)
     {if
       (0
        <=
        l
        &&
        0
        <=
        o1
        &&
        !
        ((length$0(e1) - l | 0) < o1)
        &&
        0
        <=
        o2
        &&
        !
        ((length$0(e2) - l | 0) < o2))
       {var
         _yp_=0 !== l?1:0,
         _yq_=_yp_?runtime.caml_ephe_blit_key(e1,o1,e2,o2,l):_yp_;
        return _yq_}
      return invalid_arg(cst_Obj_Ephemeron_blit_key)}
    var
     _q_=runtime.caml_ephe_blit_data,
     _r_=runtime.caml_ephe_check_data,
     _s_=
      [0,
       create,
       length$0,
       get_key,
       get_key_copy,
       set_key,
       unset_key,
       check_key,
       blit_key,
       runtime.caml_ephe_get_data,
       runtime.caml_ephe_get_data_copy,
       runtime.caml_ephe_set_data,
       function(_yo_){return runtime.caml_ephe_unset_data(_yo_)},
       _r_,
       _q_,
       max_ephe_length],
     Stdlib_obj=
      [0,
       is_block,
       double_field,
       set_double_field,
       first_non_constant_constructor,
       last_non_constant_constructor_,
       lazy_tag,
       closure_tag,
       object_tag,
       infix_tag,
       forward_tag,
       no_scan_tag,
       abstract_tag,
       string_tag,
       double_tag,
       double_array_tag,
       custom_tag,
       custom_tag,
       int_tag,
       out_of_heap_tag,
       unaligned_tag,
       Extension_constructor,
       extension_constructor,
       extension_name,
       extension_id,
       marshal,
       unmarshal,
       _s_];
    caml_register_global(735,Stdlib_obj,"Stdlib__obj");
    var make_float=runtime.caml_make_float_vect,Floatarray=[0];
    function init$2(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_ym_=l - 1 | 0,_yl_=1;
        if(! (_ym_ < 1))
         {var i=_yl_;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _yn_=i + 1 | 0;
            if(_ym_ !== i){var i=_yn_;continue}
            break}}
        return res}
      return invalid_arg(cst_Array_init)}
    function create_matrix(sx,sy,init)
     {var res=caml_make_vect(sx,[0]),_yj_=sx - 1 | 0,_yi_=0;
      if(! (_yj_ < 0))
       {var x=_yi_;
        for(;;)
         {res[1 + x] = caml_make_vect(sy,init);
          var _yk_=x + 1 | 0;
          if(_yj_ !== x){var x=_yk_;continue}
          break}}
      return res}
    function copy$1(a)
     {var l=a.length - 1;return 0 === l?[0]:caml_array_sub(a,0,l)}
    function append$0(a1,a2)
     {var l1=a1.length - 1;
      return 0 === l1
              ?copy$1(a2)
              :0 === a2.length - 1
                ?caml_array_sub(a1,0,l1)
                :runtime.caml_array_append(a1,a2)}
    function sub$1(a,ofs,len)
     {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
       return caml_array_sub(a,ofs,len);
      return invalid_arg(cst_Array_sub)}
    function fill$0(a,ofs,len,v)
     {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
       {var _yg_=(ofs + len | 0) - 1 | 0;
        if(! (_yg_ < ofs))
         {var i=ofs;
          for(;;)
           {a[1 + i] = v;
            var _yh_=i + 1 | 0;
            if(_yg_ !== i){var i=_yh_;continue}
            break}}
        return 0}
      return invalid_arg(cst_Array_fill)}
    function blit$1(a1,ofs1,a2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((a1.length - 1 - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((a2.length - 1 - len | 0) < ofs2))
       return runtime.caml_array_blit(a1,ofs1,a2,ofs2,len);
      return invalid_arg(cst_Array_blit)}
    function iter$5(f,a)
     {var _ye_=a.length - 1 - 1 | 0,_yd_=0;
      if(! (_ye_ < 0))
       {var i=_yd_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _yf_=i + 1 | 0;
          if(_ye_ !== i){var i=_yf_;continue}
          break}}
      return 0}
    function iter2$0(f,a,b)
     {if(a.length - 1 !== b.length - 1)
       return invalid_arg(cst_Array_iter2_arrays_must_ha);
      var _yb_=a.length - 1 - 1 | 0,_ya_=0;
      if(! (_yb_ < 0))
       {var i=_ya_;
        for(;;)
         {caml_call2(f,a[1 + i],b[1 + i]);
          var _yc_=i + 1 | 0;
          if(_yb_ !== i){var i=_yc_;continue}
          break}}
      return 0}
    function map$5(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_x__=l - 1 | 0,_x9_=1;
      if(! (_x__ < 1))
       {var i=_x9_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _x$_=i + 1 | 0;
          if(_x__ !== i){var i=_x$_;continue}
          break}}
      return r}
    function map2$0(f,a,b)
     {var la=a.length - 1,lb=b.length - 1;
      if(la !== lb)return invalid_arg(cst_Array_map2_arrays_must_hav);
      if(0 === la)return [0];
      var r=caml_make_vect(la,caml_call2(f,a[1],b[1])),_x7_=la - 1 | 0,_x6_=1;
      if(! (_x7_ < 1))
       {var i=_x6_;
        for(;;)
         {r[1 + i] = caml_call2(f,a[1 + i],b[1 + i]);
          var _x8_=i + 1 | 0;
          if(_x7_ !== i){var i=_x8_;continue}
          break}}
      return r}
    function iteri$2(f,a)
     {var _x4_=a.length - 1 - 1 | 0,_x3_=0;
      if(! (_x4_ < 0))
       {var i=_x3_;
        for(;;)
         {caml_call2(f,i,a[1 + i]);
          var _x5_=i + 1 | 0;
          if(_x4_ !== i){var i=_x5_;continue}
          break}}
      return 0}
    function mapi$2(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call2(f,0,a[1])),_x1_=l - 1 | 0,_x0_=1;
      if(! (_x1_ < 1))
       {var i=_x0_;
        for(;;)
         {r[1 + i] = caml_call2(f,i,a[1 + i]);
          var _x2_=i + 1 | 0;
          if(_x1_ !== i){var i=_x2_;continue}
          break}}
      return r}
    function to_list$1(a)
     {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
      for(;;)
       {if(0 <= i)
         {var res$0=[0,a[1 + i],res],i$0=i - 1 | 0,i=i$0,res=res$0;continue}
        return res}}
    function list_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[2],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function of_list(l)
     {if(l)
       {var
         tl=l[2],
         hd=l[1],
         a=caml_make_vect(list_length(0,l),hd),
         i=1,
         param=tl;
        for(;;)
         {if(param)
           {var tl$0=param[2],hd$0=param[1];
            a[1 + i] = hd$0;
            var i$0=i + 1 | 0,i=i$0,param=tl$0;
            continue}
          return a}}
      return [0]}
    function fold_left$1(f,x,a)
     {var r=[0,x],_xY_=a.length - 1 - 1 | 0,_xX_=0;
      if(! (_xY_ < 0))
       {var i=_xX_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[1 + i]);
          var _xZ_=i + 1 | 0;
          if(_xY_ !== i){var i=_xZ_;continue}
          break}}
      return r[1]}
    function fold_right$0(f,a,x)
     {var r=[0,x],_xV_=a.length - 1 - 1 | 0;
      if(! (_xV_ < 0))
       {var i=_xV_;
        for(;;)
         {r[1] = caml_call2(f,a[1 + i],r[1]);
          var _xW_=i - 1 | 0;
          if(0 !== i){var i=_xW_;continue}
          break}}
      return r[1]}
    function exists$0(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,a[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function for_all$0(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 1;
        if(caml_call1(p,a[1 + i])){var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function mem$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(0 === caml_compare(a[1 + i],x))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function memq$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(x === a[1 + i])return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    var Bottom=[248,cst_Stdlib_Array_Bottom,caml_fresh_oo_id(0)];
    function sort(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {var _xO_=i31 + 1 | 0,_xP_=caml_check_bound(a,_xO_)[1 + _xO_];
          if(caml_call2(cmp,caml_check_bound(a,i31)[1 + i31],_xP_) < 0)
           x[1] = i31 + 1 | 0;
          var
           _xQ_=i31 + 2 | 0,
           _xR_=caml_check_bound(a,_xQ_)[1 + _xQ_],
           _xS_=x[1];
          if(caml_call2(cmp,caml_check_bound(a,_xS_)[1 + _xS_],_xR_) < 0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if((i31 + 1 | 0) < l)
         {var _xT_=i31 + 1 | 0,_xU_=caml_check_bound(a,_xT_)[1 + _xT_];
          if(! (0 <= caml_call2(cmp,caml_check_bound(a,i31)[1 + i31],_xU_)))
           return i31 + 1 | 0}
        if(i31 < l)return i31;
        throw [0,Bottom,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_call2(cmp,caml_check_bound(a,j)[1 + j],e))
           {var _xN_=caml_check_bound(a,j)[1 + j];
            caml_check_bound(a,i$0)[1 + i$0] = _xN_;
            var i$0=j;
            continue}
          caml_check_bound(a,i$0)[1 + i$0] = e;
          return 0}}
      function trickle(l,i,e)
       {try
         {var _xM_=trickledown(l,i,e);return _xM_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom)
           {var i$0=exn[2];caml_check_bound(a,i$0)[1 + i$0] = e;return 0}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0),_xL_=caml_check_bound(a,i$1)[1 + i$1];
          caml_check_bound(a,i$0)[1 + i$0] = _xL_;
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _xK_=bubbledown(l,i);return _xK_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom){var i$0=exn[2];return i$0}
          throw exn}}
      var l=a.length - 1,_xC_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_xC_ < 0))
       {var i$2=_xC_;
        for(;;)
         {trickle(l,i$2,caml_check_bound(a,i$2)[1 + i$2]);
          var _xJ_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_xJ_;continue}
          break}}
      var _xD_=l - 1 | 0;
      if(! (_xD_ < 2))
       {var i$0=_xD_;
        a:
        for(;;)
         {var
           e$0=caml_check_bound(a,i$0)[1 + i$0],
           _xH_=caml_check_bound(a,0)[1];
          caml_check_bound(a,i$0)[1 + i$0] = _xH_;
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_t_];
            if
             (0 <= caml_call2(cmp,caml_check_bound(a,father)[1 + father],e$0))
             caml_check_bound(a,i)[1 + i] = e$0;
            else
             {var _xB_=caml_check_bound(a,father)[1 + father];
              caml_check_bound(a,i)[1 + i] = _xB_;
              if(0 < father){var i=father;continue}
              caml_check_bound(a,0)[1] = e$0}
            var _xI_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_xI_;continue a}
            break}
          break}}
      var _xE_=1 < l?1:0;
      if(_xE_)
       {var e=caml_check_bound(a,1)[2],_xF_=caml_check_bound(a,0)[1];
        caml_check_bound(a,1)[2] = _xF_;
        caml_check_bound(a,0)[1] = e;
        var _xG_=0}
      else
       var _xG_=_xE_;
      return _xG_}
    function fast_sort$0(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_check_bound(src2,src2ofs)[1 + src2ofs],
         s1$1=caml_check_bound(a,src1ofs)[1 + src1ofs],
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_check_bound(dst,d)[1 + d] = s2;
            var i2$0=i2 + 1 | 0;
            if(i2$0 < src2r)
             {var
               d$0=d + 1 | 0,
               s2$0=caml_check_bound(src2,i2$0)[1 + i2$0],
               i2=i2$0,
               s2=s2$0,
               d=d$0;
              continue}
            return blit$1(a,i1,dst,d + 1 | 0,src1r - i1 | 0)}
          caml_check_bound(dst,d)[1 + d] = s1;
          var i1$0=i1 + 1 | 0;
          if(i1$0 < src1r)
           {var
             d$1=d + 1 | 0,
             s1$0=caml_check_bound(a,i1$0)[1 + i1$0],
             i1=i1$0,
             s1=s1$0,
             d=d$1;
            continue}
          return blit$1(src2,i2,dst,d + 1 | 0,src2r - i2 | 0)}}
      function isortto(srcofs,dst,dstofs,len)
       {var _xt_=len - 1 | 0,_xs_=0;
        if(! (_xt_ < 0))
         {var i=_xs_;
          a:
          for(;;)
           {var
             _xu_=srcofs + i | 0,
             e=caml_check_bound(a,_xu_)[1 + _xu_],
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if(dstofs <= j[1])
               {var _xv_=j[1];
                if(0 < caml_call2(cmp,caml_check_bound(dst,_xv_)[1 + _xv_],e))
                 {var
                   _xw_=j[1],
                   _xx_=caml_check_bound(dst,_xw_)[1 + _xw_],
                   _xy_=j[1] + 1 | 0;
                  caml_check_bound(dst,_xy_)[1 + _xy_] = _xx_;
                  j[1] += -1;
                  continue}}
              var _xz_=j[1] + 1 | 0;
              caml_check_bound(dst,_xz_)[1 + _xz_] = e;
              var _xA_=i + 1 | 0;
              if(_xt_ !== i){var i=_xA_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var
       l1=l / 2 | 0,
       l2=l - l1 | 0,
       t=caml_make_vect(l2,caml_check_bound(a,0)[1]);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    function to_seq$4(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_xq_=i + 1 | 0;
          return [0,x,function(_xr_){return aux(_xq_,_xr_)}]}
        return 0}
      var _xo_=0;
      return function(_xp_){return aux(_xo_,_xp_)}}
    function to_seqi$1(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_xm_=i + 1 | 0;
          return [0,[0,i,x],function(_xn_){return aux(_xm_,_xn_)}]}
        return 0}
      var _xk_=0;
      return function(_xl_){return aux(_xk_,_xl_)}}
    function of_seq$2(i$2)
     {var _xj_=0,l=fold_left(function(acc,x){return [0,x,acc]},_xj_,i$2);
      if(l)
       {var
         tl=l[2],
         hd=l[1],
         len=list_length(0,l),
         a=caml_make_vect(len,hd),
         i$1=len - 2 | 0,
         i=i$1,
         param=tl;
        for(;;)
         {if(param)
           {var tl$0=param[2],hd$0=param[1];
            a[1 + i] = hd$0;
            var i$0=i - 1 | 0,i=i$0,param=tl$0;
            continue}
          return a}}
      return [0]}
    var
     concat$1=caml_array_concat,
     include$2=
      [0,
       make_float,
       init$2,
       create_matrix,
       create_matrix,
       append$0,
       concat$1,
       sub$1,
       copy$1,
       fill$0,
       blit$1,
       to_list$1,
       of_list,
       iter$5,
       iteri$2,
       map$5,
       mapi$2,
       fold_left$1,
       fold_right$0,
       iter2$0,
       map2$0,
       for_all$0,
       exists$0,
       mem$0,
       memq$0,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$4,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(736,include$2,"Stdlib__array");
    var zero=0.,one=1.,minus_one=-1.;
    function is_finite(x){return x - x == 0.?1:0}
    function is_infinite(x){return 1. / x == 0.?1:0}
    function is_nan(x){return x != x?1:0}
    var pi=3.14159265358979312;
    function is_integer(x)
     {var _xi_=x == runtime.caml_trunc_float(x)?1:0;
      return _xi_?is_finite(x):_xi_}
    function succ$0(x){return caml_nextafter_float(x,infinity)}
    function pred$0(x){return caml_nextafter_float(x,neg_infinity)}
    function equal$7(x,y){return 0 === caml_float_compare(x,y)?1:0}
    function min$1(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return x != x?x:y}
      return y != y?y:x}
    function max$1(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return y != y?y:x}
      return x != x?x:y}
    function min_max(x,y)
     {if(x == x && y == y)
       {if(! (x < y))
         {var switch$0=0;
          if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
          if(switch$0)return [0,y,x]}
        return [0,x,y]}
      return [0,nan,nan]}
    function min_num(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return y != y?x:y}
      return x != x?y:x}
    function max_num(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return x != x?y:x}
      return y != y?x:y}
    function min_max_num(x,y)
     {if(x != x)return [0,y,y];
      if(y != y)return [0,x,x];
      if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return [0,y,x]}
      return [0,x,y]}
    function hash$0(x){return caml_hash(10,100,0,x)}
    function unsafe_fill(a,ofs,len,v)
     {var _xg_=(ofs + len | 0) - 1 | 0;
      if(! (_xg_ < ofs))
       {var i=ofs;
        for(;;)
         {a[1 + i] = v;
          var _xh_=i + 1 | 0;
          if(_xg_ !== i){var i=_xh_;continue}
          break}}
      return 0}
    function unsafe_blit(src,sofs,dst,dofs,len)
     {var _xe_=len - 1 | 0,_xd_=0;
      if(! (_xe_ < 0))
       {var i=_xd_;
        for(;;)
         {dst[1 + (dofs + i | 0)] = src[1 + (sofs + i | 0)];
          var _xf_=i + 1 | 0;
          if(_xe_ !== i){var i=_xf_;continue}
          break}}
      return 0}
    function check(a,ofs,len,msg)
     {var _w$_=ofs < 0?1:0;
      if(_w$_)
       var _xa_=_w$_;
      else
       {var _xb_=len < 0?1:0;
        if(_xb_)
         var _xa_=_xb_;
        else
         var
          _xc_=(ofs + len | 0) < 0?1:0,
          _xa_=_xc_ || (a.length - 1 < (ofs + len | 0)?1:0)}
      return _xa_?invalid_arg(msg):_xa_}
    function make$1(n,v)
     {var result=caml_floatarray_create(n);
      unsafe_fill(result,0,n,v);
      return result}
    function init$3(l,f)
     {if(0 <= l)
       {var res=caml_floatarray_create(l),_w9_=l - 1 | 0,_w8_=0;
        if(! (_w9_ < 0))
         {var i=_w8_;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _w__=i + 1 | 0;
            if(_w9_ !== i){var i=_w__;continue}
            break}}
        return res}
      return invalid_arg(cst_Float_Array_init)}
    function append$1(a1,a2)
     {var
       l1=a1.length - 1,
       l2=a2.length - 1,
       result=caml_floatarray_create(l1 + l2 | 0);
      unsafe_blit(a1,0,result,0,l1);
      unsafe_blit(a2,0,result,l1,l2);
      return result}
    function concat$2(l)
     {var acc=0,param=l;
      for(;;)
       {if(param)
         {var
           tl=param[2],
           hd=param[1],
           x=hd.length - 1 + acc | 0,
           acc$0=acc <= x?x:invalid_arg(cst_Float_Array_concat),
           acc=acc$0,
           param=tl;
          continue}
        var result=caml_floatarray_create(acc),l$0=l,i=0;
        for(;;)
         {if(l$0)
           {var tl$0=l$0[2],hd$0=l$0[1],hlen=hd$0.length - 1;
            unsafe_blit(hd$0,0,result,i,hlen);
            var i$0=i + hlen | 0,l$0=tl$0,i=i$0;
            continue}
          if(i === acc)return result;
          throw [0,Assert_failure,_u_]}}}
    function sub$2(a,ofs,len)
     {check(a,ofs,len,cst_Float_Array_sub);
      var result=caml_floatarray_create(len);
      unsafe_blit(a,ofs,result,0,len);
      return result}
    function copy$2(a)
     {var l=a.length - 1,result=caml_floatarray_create(l);
      unsafe_blit(a,0,result,0,l);
      return result}
    function fill$1(a,ofs,len,v)
     {check(a,ofs,len,cst_Float_Array_fill);return unsafe_fill(a,ofs,len,v)}
    function blit$2(src,sofs,dst,dofs,len)
     {check(src,sofs,len,cst_Float_array_blit);
      check(dst,dofs,len,cst_Float_array_blit$0);
      return unsafe_blit(src,sofs,dst,dofs,len)}
    function to_list$2(a)
     {return init(a.length - 1,function(_w7_){return a[1 + _w7_]})}
    function of_list$0(l)
     {var result=caml_floatarray_create(length(l)),i=0,l$0=l;
      for(;;)
       {if(l$0)
         {var t=l$0[2],h=l$0[1];
          result[1 + i] = h;
          var i$0=i + 1 | 0,i=i$0,l$0=t;
          continue}
        return result}}
    function iter$6(f,a)
     {var _w5_=a.length - 1 - 1 | 0,_w4_=0;
      if(! (_w5_ < 0))
       {var i=_w4_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _w6_=i + 1 | 0;
          if(_w5_ !== i){var i=_w6_;continue}
          break}}
      return 0}
    function iter2$1(f,a,b)
     {if(a.length - 1 !== b.length - 1)
       return invalid_arg(cst_Float_Array_iter2_arrays_m);
      var _w2_=a.length - 1 - 1 | 0,_w1_=0;
      if(! (_w2_ < 0))
       {var i=_w1_;
        for(;;)
         {caml_call2(f,a[1 + i],b[1 + i]);
          var _w3_=i + 1 | 0;
          if(_w2_ !== i){var i=_w3_;continue}
          break}}
      return 0}
    function map$6(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_wZ_=l - 1 | 0,_wY_=0;
      if(! (_wZ_ < 0))
       {var i=_wY_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _w0_=i + 1 | 0;
          if(_wZ_ !== i){var i=_w0_;continue}
          break}}
      return r}
    function map2$1(f,a,b)
     {var la=a.length - 1,lb=b.length - 1;
      if(la !== lb)return invalid_arg(cst_Float_Array_map2_arrays_mu);
      var r=caml_floatarray_create(la),_wW_=la - 1 | 0,_wV_=0;
      if(! (_wW_ < 0))
       {var i=_wV_;
        for(;;)
         {r[1 + i] = caml_call2(f,a[1 + i],b[1 + i]);
          var _wX_=i + 1 | 0;
          if(_wW_ !== i){var i=_wX_;continue}
          break}}
      return r}
    function iteri$3(f,a)
     {var _wT_=a.length - 1 - 1 | 0,_wS_=0;
      if(! (_wT_ < 0))
       {var i=_wS_;
        for(;;)
         {caml_call2(f,i,a[1 + i]);
          var _wU_=i + 1 | 0;
          if(_wT_ !== i){var i=_wU_;continue}
          break}}
      return 0}
    function mapi$3(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_wQ_=l - 1 | 0,_wP_=0;
      if(! (_wQ_ < 0))
       {var i=_wP_;
        for(;;)
         {r[1 + i] = caml_call2(f,i,a[1 + i]);
          var _wR_=i + 1 | 0;
          if(_wQ_ !== i){var i=_wR_;continue}
          break}}
      return r}
    function fold_left$2(f,x,a)
     {var r=[0,x],_wN_=a.length - 1 - 1 | 0,_wM_=0;
      if(! (_wN_ < 0))
       {var i=_wM_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[1 + i]);
          var _wO_=i + 1 | 0;
          if(_wN_ !== i){var i=_wO_;continue}
          break}}
      return r[1]}
    function fold_right$1(f,a,x)
     {var r=[0,x],_wK_=a.length - 1 - 1 | 0;
      if(! (_wK_ < 0))
       {var i=_wK_;
        for(;;)
         {r[1] = caml_call2(f,a[1 + i],r[1]);
          var _wL_=i - 1 | 0;
          if(0 !== i){var i=_wL_;continue}
          break}}
      return r[1]}
    function exists$1(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,a[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function for_all$1(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 1;
        if(caml_call1(p,a[1 + i])){var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function mem$1(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(0 === caml_float_compare(a[1 + i],x))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function mem_ieee(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(x == a[1 + i])return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    var Bottom$0=[248,cst_Stdlib_Float_Array_Bottom,caml_fresh_oo_id(0)];
    function sort$0(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {if
           (caml_call2
             (cmp,caml_array_get(a,i31),caml_array_get(a,i31 + 1 | 0))
            <
            0)
           x[1] = i31 + 1 | 0;
          if
           (caml_call2
             (cmp,caml_array_get(a,x[1]),caml_array_get(a,i31 + 2 | 0))
            <
            0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if
         ((i31 + 1 | 0)
          <
          l
          &&
          !
          (0
           <=
           caml_call2(cmp,caml_array_get(a,i31),caml_array_get(a,i31 + 1 | 0))))
         return i31 + 1 | 0;
        if(i31 < l)return i31;
        throw [0,Bottom$0,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_call2(cmp,caml_array_get(a,j),e))
           {caml_array_set(a,i$0,caml_array_get(a,j));var i$0=j;continue}
          return caml_array_set(a,i$0,e)}}
      function trickle(l,i,e)
       {try
         {var _wJ_=trickledown(l,i,e);return _wJ_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom$0)
           {var i$0=exn[2];return caml_array_set(a,i$0,e)}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0);
          caml_array_set(a,i$0,caml_array_get(a,i$1));
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _wI_=bubbledown(l,i);return _wI_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom$0){var i$0=exn[2];return i$0}
          throw exn}}
      var l=a.length - 1,_wC_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_wC_ < 0))
       {var i$2=_wC_;
        for(;;)
         {trickle(l,i$2,caml_array_get(a,i$2));
          var _wH_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_wH_;continue}
          break}}
      var _wD_=l - 1 | 0;
      if(! (_wD_ < 2))
       {var i$0=_wD_;
        a:
        for(;;)
         {var e$0=caml_array_get(a,i$0);
          caml_array_set(a,i$0,caml_array_get(a,0));
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_v_];
            if(0 <= caml_call2(cmp,caml_array_get(a,father),e$0))
             caml_array_set(a,i,e$0);
            else
             {caml_array_set(a,i,caml_array_get(a,father));
              if(0 < father){var i=father;continue}
              caml_array_set(a,0,e$0)}
            var _wG_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_wG_;continue a}
            break}
          break}}
      var _wE_=1 < l?1:0;
      if(_wE_)
       {var e=caml_array_get(a,1);
        caml_array_set(a,1,caml_array_get(a,0));
        var _wF_=caml_array_set(a,0,e)}
      else
       var _wF_=_wE_;
      return _wF_}
    function stable_sort(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_array_get(src2,src2ofs),
         s1$1=caml_array_get(a,src1ofs),
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_array_set(dst,d,s2);
            var i2$0=i2 + 1 | 0;
            if(i2$0 < src2r)
             {var
               d$0=d + 1 | 0,
               s2$0=caml_array_get(src2,i2$0),
               i2=i2$0,
               s2=s2$0,
               d=d$0;
              continue}
            return blit$2(a,i1,dst,d + 1 | 0,src1r - i1 | 0)}
          caml_array_set(dst,d,s1);
          var i1$0=i1 + 1 | 0;
          if(i1$0 < src1r)
           {var
             d$1=d + 1 | 0,
             s1$0=caml_array_get(a,i1$0),
             i1=i1$0,
             s1=s1$0,
             d=d$1;
            continue}
          return blit$2(src2,i2,dst,d + 1 | 0,src2r - i2 | 0)}}
      function isortto(srcofs,dst,dstofs,len)
       {var _wA_=len - 1 | 0,_wz_=0;
        if(! (_wA_ < 0))
         {var i=_wz_;
          a:
          for(;;)
           {var
             e=caml_array_get(a,srcofs + i | 0),
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if
               (dstofs
                <=
                j[1]
                &&
                0
                <
                caml_call2(cmp,caml_array_get(dst,j[1]),e))
               {caml_array_set(dst,j[1] + 1 | 0,caml_array_get(dst,j[1]));
                j[1] += -1;
                continue}
              caml_array_set(dst,j[1] + 1 | 0,e);
              var _wB_=i + 1 | 0;
              if(_wA_ !== i){var i=_wB_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var l1=l / 2 | 0,l2=l - l1 | 0,t=caml_floatarray_create(l2);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    function to_seq$5(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_wx_=i + 1 | 0;
          return [0,x,function(_wy_){return aux(_wx_,_wy_)}]}
        return 0}
      var _wv_=0;
      return function(_ww_){return aux(_wv_,_ww_)}}
    function to_seqi$2(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_wt_=i + 1 | 0;
          return [0,[0,i,x],function(_wu_){return aux(_wt_,_wu_)}]}
        return 0}
      var _wr_=0;
      return function(_ws_){return aux(_wr_,_ws_)}}
    function of_seq$3(i$2)
     {var
       _wq_=0,
       param$0=fold_left(function(acc,x){return [0,x,acc]},_wq_,i$2),
       len=length(param$0),
       a=caml_floatarray_create(len),
       i$1=len - 1 | 0,
       i=i$1,
       param=param$0;
      for(;;)
       {if(param)
         {var tl=param[2],hd=param[1];
          a[1 + i] = hd;
          var i$0=i - 1 | 0,i=i$0,param=tl;
          continue}
        return a}}
    function map_to_array(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_wo_=l - 1 | 0,_wn_=1;
      if(! (_wo_ < 1))
       {var i=_wn_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _wp_=i + 1 | 0;
          if(_wo_ !== i){var i=_wp_;continue}
          break}}
      return r}
    function map_from_array(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_wl_=l - 1 | 0,_wk_=0;
      if(! (_wl_ < 0))
       {var i=_wk_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _wm_=i + 1 | 0;
          if(_wl_ !== i){var i=_wm_;continue}
          break}}
      return r}
    var
     _w_=caml_floatarray_create,
     _x_=caml_array_set,
     _y_=caml_array_get,
     _z_=
      [0,
       function(_wj_){return _wj_.length - 1},
       _y_,
       _x_,
       make$1,
       _w_,
       init$3,
       append$1,
       concat$2,
       sub$2,
       copy$2,
       fill$1,
       blit$2,
       to_list$2,
       of_list$0,
       iter$6,
       iteri$3,
       map$6,
       mapi$3,
       fold_left$2,
       fold_right$1,
       iter2$1,
       map2$1,
       for_all$1,
       exists$1,
       mem$1,
       mem_ieee,
       sort$0,
       stable_sort,
       stable_sort,
       to_seq$5,
       to_seqi$2,
       of_seq$3,
       map_to_array,
       map_from_array],
     _A_=caml_floatarray_create,
     _B_=caml_array_set,
     _C_=caml_array_get,
     Stdlib_float=
      [0,
       zero,
       one,
       minus_one,
       succ$0,
       pred$0,
       infinity,
       neg_infinity,
       nan,
       pi,
       max_float,
       min_float,
       epsilon,
       is_finite,
       is_infinite,
       is_nan,
       is_integer,
       of_string_opt,
       to_string,
       caml_float_compare,
       equal$7,
       min$1,
       max$1,
       min_max,
       min_num,
       max_num,
       min_max_num,
       hash$0,
       [0,
        function(_wi_){return _wi_.length - 1},
        _C_,
        _B_,
        make$1,
        _A_,
        init$3,
        append$1,
        concat$2,
        sub$2,
        copy$2,
        fill$1,
        blit$2,
        to_list$2,
        of_list$0,
        iter$6,
        iteri$3,
        map$6,
        mapi$3,
        fold_left$2,
        fold_right$1,
        iter2$1,
        map2$1,
        for_all$1,
        exists$1,
        mem$1,
        mem_ieee,
        sort$0,
        stable_sort,
        stable_sort,
        to_seq$5,
        to_seqi$2,
        of_seq$3,
        map_to_array,
        map_from_array],
       _z_];
    caml_register_global(737,Stdlib_float,"Stdlib__float");
    var zero$0=0,one$0=1,minus_one$0=-1;
    function abs$0(x){return 0 <= x?x:- x | 0}
    var max_int$0=2147483647,min_int$0=-2147483648;
    function lognot(x){return x ^ -1}
    function equal$8(_wh_,_wg_){return _wh_ === _wg_?1:0}
    var compare$7=caml_int_compare;
    function to_string$3(x){return caml_string_of_jsbytes("" + x)}
    var
     Stdlib_int=
      [0,
       zero$0,
       one$0,
       minus_one$0,
       abs$0,
       max_int$0,
       min_int$0,
       lognot,
       equal$8,
       compare$7,
       to_string$3];
    caml_register_global(738,Stdlib_int,"Stdlib__int");
    var zero$1=0,one$1=1,minus_one$1=-1;
    function succ$1(n){return n + 1 | 0}
    function pred$1(n){return n - 1 | 0}
    function abs$1(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$1=-2147483648,max_int$1=2147483647;
    function lognot$0(n){return n ^ -1}
    function unsigned_to_int(n)
     {if
       (!
        (0 < caml_int_compare(0,n))
        &&
        !
        (0 < caml_int_compare(n,2147483647)))
       return [0,n];
      return 0}
    function to_string$4(n){return caml_format_int(cst_d,n)}
    function of_string_opt$0(s)
     {try
       {var _we_=[0,caml_int_of_string(s)];return _we_}
      catch(_wf_)
       {_wf_ = caml_wrap_exception(_wf_);
        if(_wf_[1] === Failure)return 0;
        throw _wf_}}
    var compare$8=caml_int_compare;
    function equal$9(x,y){return 0 === caml_int_compare(x,y)?1:0}
    function unsigned_compare(n,m)
     {return caml_int_compare(n + 2147483648 | 0,m + 2147483648 | 0)}
    function unsigned_div(n,d)
     {if(caml_lessthan(d,0))return 0 <= unsigned_compare(n,d)?one$1:zero$1;
      var q=caml_div(n >>> 1 | 0,d) << 1,r=n - caml_mul(q,d) | 0;
      return 0 <= unsigned_compare(r,d)?q + 1 | 0:q}
    function unsigned_rem(n,d){return n - caml_mul(unsigned_div(n,d),d) | 0}
    var
     Stdlib_int32=
      [0,
       zero$1,
       one$1,
       minus_one$1,
       unsigned_div,
       unsigned_rem,
       succ$1,
       pred$1,
       abs$1,
       max_int$1,
       min_int$1,
       lognot$0,
       unsigned_to_int,
       of_string_opt$0,
       to_string$4,
       compare$8,
       unsigned_compare,
       equal$9];
    caml_register_global(739,Stdlib_int32,"Stdlib__int32");
    function succ$2(n){return caml_int64_add(n,_D_)}
    function pred$2(n){return caml_int64_sub(n,_E_)}
    function abs$2(n)
     {return caml_greaterequal(n,_F_)?n:runtime.caml_int64_neg(n)}
    function lognot$1(n){return runtime.caml_int64_xor(n,_G_)}
    var max_int$3=caml_int64_of_int32(2147483647);
    function unsigned_to_int$0(n)
     {if
       (!
        (0 < caml_int64_compare(zero$2,n))
        &&
        !
        (0 < caml_int64_compare(n,max_int$3)))
       return [0,runtime.caml_int64_to_int32(n)];
      return 0}
    function to_string$5(n){return caml_int64_format(cst_d$0,n)}
    function of_string_opt$1(s)
     {try
       {var _wc_=[0,caml_int64_of_string(s)];return _wc_}
      catch(_wd_)
       {_wd_ = caml_wrap_exception(_wd_);
        if(_wd_[1] === Failure)return 0;
        throw _wd_}}
    function compare$9(x,y){return caml_int64_compare(x,y)}
    function equal$10(x,y){return 0 === caml_int64_compare(x,y)?1:0}
    function unsigned_compare$0(n,m)
     {return caml_int64_compare
              (caml_int64_sub(n,min_int$2),caml_int64_sub(m,min_int$2))}
    function unsigned_div$0(n,d)
     {if(caml_lessthan(d,zero$2))
       return 0 <= unsigned_compare$0(n,d)?one$2:zero$2;
      var
       q=
        caml_int64_shift_left
         (runtime.caml_int64_div
           (runtime.caml_int64_shift_right_unsigned(n,1),d),
          1),
       r=caml_int64_sub(n,caml_int64_mul(q,d));
      return 0 <= unsigned_compare$0(r,d)?succ$2(q):q}
    function unsigned_rem$0(n,d)
     {return caml_int64_sub(n,caml_int64_mul(unsigned_div$0(n,d),d))}
    var
     Stdlib_int64=
      [0,
       zero$2,
       one$2,
       minus_one$2,
       unsigned_div$0,
       unsigned_rem$0,
       succ$2,
       pred$2,
       abs$2,
       max_int$2,
       min_int$2,
       lognot$1,
       unsigned_to_int$0,
       of_string_opt$1,
       to_string$5,
       compare$9,
       unsigned_compare$0,
       equal$10];
    caml_register_global(740,Stdlib_int64,"Stdlib__int64");
    var zero$3=0,one$3=1,minus_one$3=-1;
    function succ$3(n){return n + 1 | 0}
    function pred$3(n){return n - 1 | 0}
    function abs$3(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$3=-2147483648,max_int$4=2147483647;
    function lognot$2(n){return n ^ -1}
    function unsigned_to_int$1(n)
     {if
       (!
        (0 < caml_int_compare(0,n))
        &&
        !
        (0 < caml_int_compare(n,2147483647)))
       return [0,n];
      return 0}
    function to_string$6(n){return caml_format_int(cst_d$1,n)}
    function of_string_opt$2(s)
     {try
       {var _wa_=[0,caml_int_of_string(s)];return _wa_}
      catch(_wb_)
       {_wb_ = caml_wrap_exception(_wb_);
        if(_wb_[1] === Failure)return 0;
        throw _wb_}}
    var compare$10=caml_int_compare;
    function equal$11(x,y){return 0 === caml_int_compare(x,y)?1:0}
    function unsigned_compare$1(n,m)
     {return caml_int_compare(n + 2147483648 | 0,m + 2147483648 | 0)}
    function unsigned_div$1(n,d)
     {if(caml_lessthan(d,0))return 0 <= unsigned_compare$1(n,d)?one$3:zero$3;
      var q=caml_div(n >>> 1 | 0,d) << 1,r=n - caml_mul(q,d) | 0;
      return 0 <= unsigned_compare$1(r,d)?q + 1 | 0:q}
    function unsigned_rem$1(n,d)
     {return n - caml_mul(unsigned_div$1(n,d),d) | 0}
    var
     Stdlib_nativeint=
      [0,
       zero$3,
       one$3,
       minus_one$3,
       unsigned_div$1,
       unsigned_rem$1,
       succ$3,
       pred$3,
       abs$3,
       match$1,
       max_int$4,
       min_int$3,
       lognot$2,
       unsigned_to_int$1,
       of_string_opt$2,
       to_string$6,
       compare$10,
       unsigned_compare$1,
       equal$11];
    caml_register_global(741,Stdlib_nativeint,"Stdlib__nativeint");
    function engine(tbl,state,buf)
     {var
       result=runtime.caml_lex_engine(tbl,state,buf),
       _v9_=0 <= result?1:0,
       _v__=_v9_?buf[12] !== dummy_pos?1:0:_v9_;
      if(_v__)
       {buf[11] = buf[12];
        var _v$_=buf[12];
        buf[12] = [0,_v$_[1],_v$_[2],_v$_[3],buf[4] + buf[6] | 0]}
      return result}
    function new_engine(tbl,state,buf)
     {var
       result=runtime.caml_new_lex_engine(tbl,state,buf),
       _v6_=0 <= result?1:0,
       _v7_=_v6_?buf[12] !== dummy_pos?1:0:_v6_;
      if(_v7_)
       {buf[11] = buf[12];
        var _v8_=buf[12];
        buf[12] = [0,_v8_[1],_v8_[2],_v8_[3],buf[4] + buf[6] | 0]}
      return result}
    function from_function(opt,f)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _vS_=with_positions?zero_pos:dummy_pos,
       _vT_=with_positions?zero_pos:dummy_pos,
       aux_buffer=caml_create_bytes(512),
       _vU_=[0],
       _vV_=0,
       _vW_=0,
       _vX_=0,
       _vY_=0,
       _vZ_=0,
       _v0_=0,
       _v1_=0,
       _v2_=caml_create_bytes(1024);
      return [0,
              function(lexbuf)
               {var
                 read=
                  caml_call2(f,aux_buffer,caml_ml_bytes_length(aux_buffer)),
                 n=0 < read?read:(lexbuf[9] = 1,0);
                if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0))
                 {if
                   (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
                    <=
                    caml_ml_bytes_length(lexbuf[2]))
                   blit
                    (lexbuf[2],lexbuf[5],lexbuf[2],0,lexbuf[3] - lexbuf[5] | 0);
                  else
                   {var
                     newlen=
                      min
                       (2 * caml_ml_bytes_length(lexbuf[2]) | 0,max_string_length);
                    if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0))
                     failwith(cst_Lexing_lex_refill_cannot_g);
                    var newbuf=caml_create_bytes(newlen);
                    blit(lexbuf[2],lexbuf[5],newbuf,0,lexbuf[3] - lexbuf[5] | 0);
                    lexbuf[2] = newbuf}
                  var s=lexbuf[5];
                  lexbuf[4] = lexbuf[4] + s | 0;
                  lexbuf[6] = lexbuf[6] - s | 0;
                  lexbuf[5] = 0;
                  lexbuf[7] = lexbuf[7] - s | 0;
                  lexbuf[3] = lexbuf[3] - s | 0;
                  var t=lexbuf[10],_v4_=t.length - 1 - 1 | 0,_v3_=0;
                  if(! (_v4_ < 0))
                   {var i=_v3_;
                    for(;;)
                     {var v=caml_check_bound(t,i)[1 + i];
                      if(0 <= v)caml_check_bound(t,i)[1 + i] = v - s | 0;
                      var _v5_=i + 1 | 0;
                      if(_v4_ !== i){var i=_v5_;continue}
                      break}}}
                blit(aux_buffer,0,lexbuf[2],lexbuf[3],n);
                lexbuf[3] = lexbuf[3] + n | 0;
                return 0},
              _v2_,
              _v1_,
              _v0_,
              _vZ_,
              _vY_,
              _vX_,
              _vW_,
              _vV_,
              _vU_,
              _vT_,
              _vS_]}
    function from_channel(with_positions,ic)
     {return from_function
              (with_positions,function(buf,n){return input(ic,buf,0,n)})}
    function from_string$0(opt,s)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _vH_=with_positions?zero_pos:dummy_pos,
       _vI_=with_positions?zero_pos:dummy_pos,
       _vJ_=[0],
       _vK_=1,
       _vL_=0,
       _vM_=0,
       _vN_=0,
       _vO_=0,
       _vP_=0,
       _vQ_=caml_ml_string_length(s),
       _vR_=of_string(s);
      return [0,
              function(lexbuf){lexbuf[9] = 1;return 0},
              _vR_,
              _vQ_,
              _vP_,
              _vO_,
              _vN_,
              _vM_,
              _vL_,
              _vK_,
              _vJ_,
              _vI_,
              _vH_]}
    function with_positions(lexbuf){return lexbuf[12] !== dummy_pos?1:0}
    function lexeme(lexbuf)
     {var len=lexbuf[6] - lexbuf[5] | 0;
      return sub_string(lexbuf[2],lexbuf[5],len)}
    function sub_lexeme(lexbuf,i1,i2)
     {var len=i2 - i1 | 0;return sub_string(lexbuf[2],i1,len)}
    function sub_lexeme_opt(lexbuf,i1,i2)
     {if(0 <= i1){var len=i2 - i1 | 0;return [0,sub_string(lexbuf[2],i1,len)]}
      return 0}
    function sub_lexeme_char(lexbuf,i){return caml_bytes_get(lexbuf[2],i)}
    function sub_lexeme_char_opt(lexbuf,i)
     {return 0 <= i?[0,caml_bytes_get(lexbuf[2],i)]:0}
    function lexeme_char(lexbuf,i)
     {return caml_bytes_get(lexbuf[2],lexbuf[5] + i | 0)}
    function lexeme_start(lexbuf){return lexbuf[11][4]}
    function lexeme_end(lexbuf){return lexbuf[12][4]}
    function lexeme_start_p(lexbuf){return lexbuf[11]}
    function lexeme_end_p(lexbuf){return lexbuf[12]}
    function new_line(lexbuf)
     {var
       lcp=lexbuf[12],
       _vF_=lcp !== dummy_pos?1:0,
       _vG_=_vF_?(lexbuf[12] = [0,lcp[1],lcp[2] + 1 | 0,lcp[4],lcp[4]],0):_vF_;
      return _vG_}
    function flush_input(lb)
     {lb[6] = 0;
      lb[4] = 0;
      var lcp=lb[12];
      if(lcp !== dummy_pos)
       lb[12] = [0,lcp[1],zero_pos[2],zero_pos[3],zero_pos[4]];
      lb[3] = 0;
      return 0}
    var
     Stdlib_lexing=
      [0,
       dummy_pos,
       from_channel,
       from_string$0,
       from_function,
       with_positions,
       lexeme,
       lexeme_char,
       lexeme_start,
       lexeme_end,
       lexeme_start_p,
       lexeme_end_p,
       new_line,
       flush_input,
       sub_lexeme,
       sub_lexeme_opt,
       sub_lexeme_char,
       sub_lexeme_char_opt,
       engine,
       new_engine];
    caml_register_global(742,Stdlib_lexing,"Stdlib__lexing");
    var
     YYexit=[248,cst_Stdlib_Parsing_YYexit,caml_fresh_oo_id(0)],
     Parse_error=[248,cst_Stdlib_Parsing_Parse_error,caml_fresh_oo_id(0)],
     env=
      [0,
       caml_make_vect(100,0),
       caml_make_vect(100,0),
       caml_make_vect(100,dummy_pos),
       caml_make_vect(100,dummy_pos),
       100,
       0,
       0,
       0,
       dummy_pos,
       dummy_pos,
       0,
       0,
       0,
       0,
       0,
       0];
    function grow_stacks(param)
     {var
       oldsize=env[5],
       newsize=oldsize * 2 | 0,
       new_s=caml_make_vect(newsize,0),
       new_v=caml_make_vect(newsize,0),
       new_start=caml_make_vect(newsize,dummy_pos),
       new_end=caml_make_vect(newsize,dummy_pos);
      blit$1(env[1],0,new_s,0,oldsize);
      env[1] = new_s;
      blit$1(env[2],0,new_v,0,oldsize);
      env[2] = new_v;
      blit$1(env[3],0,new_start,0,oldsize);
      env[3] = new_start;
      blit$1(env[4],0,new_end,0,oldsize);
      env[4] = new_end;
      env[5] = newsize;
      return 0}
    function clear_parser(param)
     {fill$0(env[2],0,env[5],0);env[8] = 0;return 0}
    var current_lookahead_fun=[0,function(param){return 0}];
    function yyparse(tables,start,lexer,lexbuf)
     {var
       init_asp=env[11],
       init_sp=env[14],
       init_stackbase=env[6],
       init_state=env[15],
       init_curr_char=env[7],
       init_lval=env[8],
       init_errflag=env[16];
      env[6] = env[14] + 1 | 0;
      env[7] = start;
      env[10] = lexbuf[12];
      try
       {var cmd=0,arg=0;
        for(;;)
         {var match=runtime.caml_parse_engine(tables,env,cmd,arg);
          switch(match)
           {case 0:
             var arg$0=caml_call1(lexer,lexbuf);
             env[9] = lexbuf[11];
             env[10] = lexbuf[12];
             var cmd=1,arg=arg$0;
             continue;
            case 1:throw Parse_error;
            case 2:grow_stacks(0);var cmd=2,arg=0;continue;
            case 3:grow_stacks(0);var cmd=3,arg=0;continue;
            case 4:
             try
              {var
                _vz_=env[13],
                _vA_=
                 caml_call1(caml_check_bound(tables[1],_vz_)[1 + _vz_],env),
                _vB_=4,
                cmd$0=_vB_,
                arg$1=_vA_}
             catch(_vE_)
              {_vE_ = caml_wrap_exception(_vE_);
               if(_vE_ !== Parse_error)throw _vE_;
               var cmd$0=5,arg$1=0,_vC_=_vE_}
             var cmd=cmd$0,arg=arg$1;
             continue;
            default:
             caml_call1(tables[14],cst_syntax_error);var cmd=5,arg=0;continue}}}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var curr_char=env[7];
        env[11] = init_asp;
        env[14] = init_sp;
        env[6] = init_stackbase;
        env[15] = init_state;
        env[7] = init_curr_char;
        env[8] = init_lval;
        env[16] = init_errflag;
        if(exn[1] === YYexit){var v=exn[2];return v}
        current_lookahead_fun[1]
        =
        function(tok)
         {if(is_block(tok))
           {var _vD_=caml_obj_tag(tok);
            return caml_check_bound(tables[3],_vD_)[1 + _vD_] === curr_char
                    ?1
                    :0}
          return caml_check_bound(tables[2],tok)[1 + tok] === curr_char?1:0};
        throw exn}}
    function peek_val(env,n)
     {var _vy_=env[11] - n | 0;return caml_check_bound(env[2],_vy_)[1 + _vy_]}
    function symbol_start_pos(param)
     {var i=env[12];
      for(;;)
       {if(0 < i)
         {var
           _vv_=(env[11] - i | 0) + 1 | 0,
           st=caml_check_bound(env[3],_vv_)[1 + _vv_],
           _vw_=(env[11] - i | 0) + 1 | 0,
           en=caml_check_bound(env[4],_vw_)[1 + _vw_];
          if(caml_notequal(st,en))return st;
          var i$0=i - 1 | 0,i=i$0;
          continue}
        var _vx_=env[11];
        return caml_check_bound(env[4],_vx_)[1 + _vx_]}}
    function symbol_end_pos(param)
     {var _vu_=env[11];return caml_check_bound(env[4],_vu_)[1 + _vu_]}
    function rhs_start_pos(n)
     {var _vt_=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[3],_vt_)[1 + _vt_]}
    function rhs_end_pos(n)
     {var _vs_=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[4],_vs_)[1 + _vs_]}
    function symbol_start(param){return symbol_start_pos(0)[4]}
    function symbol_end(param){return symbol_end_pos(0)[4]}
    function rhs_start(n){return rhs_start_pos(n)[4]}
    function rhs_end(n){return rhs_end_pos(n)[4]}
    function is_current_lookahead(tok)
     {return caml_call1(current_lookahead_fun[1],tok)}
    function parse_error(param){return 0}
    var
     Stdlib_parsing=
      [0,
       symbol_start,
       symbol_end,
       rhs_start,
       rhs_end,
       symbol_start_pos,
       symbol_end_pos,
       rhs_start_pos,
       rhs_end_pos,
       clear_parser,
       Parse_error,
       function(_vr_){return runtime.caml_set_parser_trace(_vr_)},
       YYexit,
       yyparse,
       peek_val,
       is_current_lookahead,
       parse_error];
    caml_register_global(743,Stdlib_parsing,"Stdlib__parsing");
    var
     Stdlib_set=
      [0,
       function(Ord)
        {function height(param){if(param){var h=param[4];return h}return 0}
         function create(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           var _vq_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_vq_]}
         function bal(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[3],lv=l[2],ll=l[1],_vl_=height(lr);
               if(_vl_ <= height(ll))return create(ll,lv,create(lr,v,r));
               if(lr)
                {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_vm_=create(lrr,v,r);
                 return create(create(ll,lv,lrl),lrv,_vm_)}
               return invalid_arg(cst_Set_bal)}
             return invalid_arg(cst_Set_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[3],rv=r[2],rl=r[1],_vn_=height(rl);
               if(_vn_ <= height(rr))return create(create(l,v,rl),rv,rr);
               if(rl)
                {var rlr=rl[3],rlv=rl[2],rll=rl[1],_vo_=create(rlr,rv,rr);
                 return create(create(l,v,rll),rlv,_vo_)}
               return invalid_arg(cst_Set_bal$1)}
             return invalid_arg(cst_Set_bal$2)}
           var _vp_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_vp_]}
         function add(x,t)
          {if(t)
            {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return t;
             if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
             var ll=add(x,l);
             return l === ll?t:bal(ll,v,r)}
           return [0,0,x,0,1]}
         function singleton(x){return [0,0,x,0,1]}
         function add_min_element(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1];
             return bal(add_min_element(x,l),v,r)}
           return singleton(x)}
         function add_max_element(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1];
             return bal(l,v,add_max_element(x,r))}
           return singleton(x)}
         function join(l,v,r)
          {if(l)
            {if(r)
              {var
                rh=r[4],
                rr=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[4],
                lr=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?bal(ll,lv,join(lr,v,r))
                       :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
             return add_max_element(v,l)}
           return add_min_element(v,r)}
         function min_elt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _vk_=param$0[1];
               if(_vk_){var param$0=_vk_;continue}
               var v=param$0[2];
               return v}
             throw Not_found}}
         function min_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _vj_=param$0[1];
               if(_vj_){var param$0=_vj_;continue}
               var v=param$0[2];
               return [0,v]}
             return 0}}
         function max_elt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _vh_=param$0[3],_vi_=param$0[2];
               if(_vh_){var param$0=_vh_;continue}
               return _vi_}
             throw Not_found}}
         function max_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _vf_=param$0[3],_vg_=param$0[2];
               if(_vf_){var param$0=_vf_;continue}
               return [0,_vg_]}
             return 0}}
         function remove_min_elt(param)
          {if(param)
            {var _ve_=param[1];
             if(_ve_)
              {var r=param[3],v=param[2];return bal(remove_min_elt(_ve_),v,r)}
             var r$0=param[3];
             return r$0}
           return invalid_arg(cst_Set_remove_min_elt)}
         function concat(t,match)
          {if(t)
            {if(match)
              {var _vd_=remove_min_elt(match);
               return join(t,min_elt(match),_vd_)}
             return t}
           return match}
         function split(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,l,1,r];
             if(0 <= c)
              {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,join(l,v,lr),pres,rr]}
             var
              match$0=split(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,join(rl,v,r)]}
           return _H_}
         var empty=0;
         function is_empty(param){return param?0:1}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v),
                _vc_=0 === c?1:0;
               if(_vc_)return _vc_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function remove(x,t)
          {if(t)
            {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)
              {if(l)
                {if(r)
                  {var _vb_=remove_min_elt(r);return bal(l,min_elt(r),_vb_)}
                 return l}
               return r}
             if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
             var ll=remove(x,l);
             return l === ll?t:bal(ll,v,r)}
           return 0}
         function union(t1,match)
          {if(t1)
            {if(match)
              {var
                h2=match[4],
                r2=match[3],
                v2=match[2],
                l2=match[1],
                h1=t1[4],
                r1=t1[3],
                v1=t1[2],
                l1=t1[1];
               if(h2 <= h1)
                {if(1 === h2)return add(v2,t1);
                 var
                  match$0=split(v1,match),
                  r2$0=match$0[3],
                  l2$0=match$0[1],
                  _u$_=union(r1,r2$0);
                 return join(union(l1,l2$0),v1,_u$_)}
               if(1 === h1)return add(v1,match);
               var
                match$1=split(v2,t1),
                r1$0=match$1[3],
                l1$0=match$1[1],
                _va_=union(r1$0,r2);
               return join(union(l1$0,l2),v2,_va_)}
             return t1}
           return match}
         function inter(s1,match)
          {if(s1)
            {if(match)
              {var
                r1=s1[3],
                v1=s1[2],
                l1=s1[1],
                _u7_=split(v1,match),
                _u8_=_u7_[1];
               if(0 === _u7_[2])
                {var r2=_u7_[3],_u9_=inter(r1,r2);
                 return concat(inter(l1,_u8_),_u9_)}
               var r2$0=_u7_[3],_u__=inter(r1,r2$0);
               return join(inter(l1,_u8_),v1,_u__)}
             return 0}
           return 0}
         function split_bis(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return 0;
             if(0 <= c)
              {var match=split_bis(x,r);
               if(match)
                {var rr=match[2],lr=match[1];return [0,join(l,v,lr),rr]}
               return 0}
             var match$0=split_bis(x,l);
             if(match$0)
              {var rl=match$0[2],ll=match$0[1];
               return [0,
                       ll,
                       function(param){return join(caml_call1(rl,0),v,r)}]}
             return 0}
           return [0,0,function(param){return 0}]}
         function disjoint(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(s1$0 && s2$0)
              {var r1=s1$0[3],v1=s1$0[2],l1=s1$0[1];
               if(s1$0 === s2$0)return 0;
               var match=split_bis(v1,s2$0);
               if(match)
                {var r2=match[2],l2=match[1],_u6_=disjoint(l1,l2);
                 if(_u6_)
                  {var s2$1=caml_call1(r2,0),s1$0=r1,s2$0=s2$1;continue}
                 return _u6_}
               return 0}
             return 1}}
         function diff(t1,match)
          {if(t1)
            {if(match)
              {var
                r1=t1[3],
                v1=t1[2],
                l1=t1[1],
                _u2_=split(v1,match),
                _u3_=_u2_[1];
               if(0 === _u2_[2])
                {var r2=_u2_[3],_u4_=diff(r1,r2);
                 return join(diff(l1,_u3_),v1,_u4_)}
               var r2$0=_u2_[3],_u5_=diff(r1,r2$0);
               return concat(diff(l1,_u3_),_u5_)}
             return t1}
           return 0}
         function cons_enum(s,e)
          {var s$0=s,e$0=e;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                s$1=s$0[1],
                e$1=[0,v,r,e$0],
                s$0=s$1,
                e$0=e$1;
               continue}
             return e$0}}
         function compare(s1,s2)
          {var e2$2=cons_enum(s2,0),e1$2=cons_enum(s1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[3],
                  r2=e2[2],
                  v2=e2[1],
                  e1$0=e1[3],
                  r1=e1[2],
                  v1=e1[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var
                    e2$1=cons_enum(r2,e2$0),
                    e1$1=cons_enum(r1,e1$0),
                    e1=e1$1,
                    e2=e2$1;
                   continue}
                 return c}
               return 1}
             return e2?-1:0}}
         function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
         function subset(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(s1$0)
              {if(s2$0)
                {var
                  r2=s2$0[3],
                  v2=s2$0[2],
                  l2=s2$0[1],
                  r1=s1$0[3],
                  v1=s1$0[2],
                  l1=s1$0[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var _uZ_=subset(l1,l2);
                   if(_uZ_){var s1$0=r1,s2$0=r2;continue}
                   return _uZ_}
                 if(0 <= c)
                  {var _u0_=subset([0,0,v1,r1,0],r2);
                   if(_u0_){var s1$0=l1;continue}
                   return _u0_}
                 var _u1_=subset([0,l1,v1,0,0],l2);
                 if(_u1_){var s1$0=r1;continue}
                 return _u1_}
               return 0}
             return 1}}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[3],v=param$0[2],l=param$0[1];
               iter(f,l);
               caml_call1(f,v);
               var param$0=r;
               continue}
             return 0}}
         function fold(f,s,accu)
          {var s$0=s,accu$0=accu;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                l=s$0[1],
                accu$1=caml_call2(f,v,fold(f,l,accu$0)),
                s$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _uW_=caml_call1(p,v);
               if(_uW_)
                {var _uX_=for_all(p,l);
                 if(_uX_){var param$0=r;continue}
                 var _uY_=_uX_}
               else
                var _uY_=_uW_;
               return _uY_}
             return 1}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _uT_=caml_call1(p,v);
               if(_uT_)
                var _uU_=_uT_;
               else
                {var _uV_=exists(p,l);
                 if(! _uV_){var param$0=r;continue}
                 var _uU_=_uV_}
               return _uU_}
             return 0}}
         function filter(p,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              l$0=filter(p,l),
              pv=caml_call1(p,v),
              r$0=filter(p,r);
             if(pv){if(l === l$0 && r === r$0)return t;return join(l$0,v,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function partition(p,param)
          {if(param)
            {var
              r=param[3],
              v=param[2],
              l=param[1],
              match=partition(p,l),
              lf=match[2],
              lt=match[1],
              pv=caml_call1(p,v),
              match$0=partition(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pv){var _uR_=concat(lf,rf);return [0,join(lt,v,rt),_uR_]}
             var _uS_=join(lf,v,rf);
             return [0,concat(lt,rt),_uS_]}
           return _I_}
         function cardinal(param)
          {if(param)
            {var r=param[3],l=param[1],_uQ_=cardinal(r);
             return (cardinal(l) + 1 | 0) + _uQ_ | 0}
           return 0}
         function elements_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,v,elements_aux(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         function elements(s){return elements_aux(0,s)}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return v;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=l;continue}
                     var param=r;
                     continue}
                   return v0}}
               var param$1=r$0;
               continue}
             throw Not_found}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=l;continue}
                     var param=r;
                     continue}
                   return [0,v0]}}
               var param$1=r$0;
               continue}
             return 0}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=r;continue}
                     var param=l;
                     continue}
                   return v0}}
               var param$1=l$0;
               continue}
             throw Not_found}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=r;continue}
                     var param=l;
                     continue}
                   return [0,v0]}}
               var param$1=l$0;
               continue}
             return 0}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return [0,v];
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function map(f,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              l$0=map(f,l),
              v$0=caml_call1(f,v),
              r$0=map(f,r);
             if(l === l$0 && v === v$0 && r === r$0)return t;
             var switch$0=0;
             if(0 !== l$0)
              {var _uP_=max_elt(l$0);
               if(0 <= caml_call2(Ord[1],_uP_,v$0))switch$0 = 1}
             if(! switch$0)
              {var switch$1=0;
               if(0 !== r$0)
                {var _uO_=min_elt(r$0);
                 if(0 <= caml_call2(Ord[1],v$0,_uO_))switch$1 = 1}
               if(! switch$1)return join(l$0,v$0,r$0)}
             return union(l$0,add(v$0,r$0))}
           return 0}
         function of_list(l)
          {if(l)
            {var _uD_=l[2],_uE_=l[1];
             if(_uD_)
              {var _uF_=_uD_[2],_uG_=_uD_[1];
               if(_uF_)
                {var _uH_=_uF_[2],_uI_=_uF_[1];
                 if(_uH_)
                  {var _uJ_=_uH_[2],_uK_=_uH_[1];
                   if(_uJ_)
                    {if(_uJ_[2])
                      {var
                        l$0=sort_uniq(Ord[1],l),
                        sub=
                         function(n,l)
                          {if(! (3 < n >>> 0))
                            switch(n)
                             {case 0:return [0,0,l];
                              case 1:
                               if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                               break;
                              case 2:
                               if(l)
                                {var _uL_=l[2];
                                 if(_uL_)
                                  {var l$4=_uL_[2],x1=_uL_[1],x0$0=l[1];
                                   return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                               break;
                              default:
                               if(l)
                                {var _uM_=l[2];
                                 if(_uM_)
                                  {var _uN_=_uM_[2];
                                   if(_uN_)
                                    {var l$5=_uN_[2],x2=_uN_[1],x1$0=_uM_[1],x0$1=l[1];
                                     return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                           var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                           if(l$0)
                            {var
                              l$1=l$0[2],
                              mid=l$0[1],
                              match$0=sub((n - nl | 0) - 1 | 0,l$1),
                              l$2=match$0[2],
                              right=match$0[1];
                             return [0,create(left,mid,right),l$2]}
                           throw [0,Assert_failure,_J_]};
                       return sub(length(l$0),l$0)[1]}
                     var x4=_uJ_[1];
                     return add(x4,add(_uK_,add(_uI_,add(_uG_,singleton(_uE_)))))}
                   return add(_uK_,add(_uI_,add(_uG_,singleton(_uE_))))}
                 return add(_uI_,add(_uG_,singleton(_uE_)))}
               return add(_uG_,singleton(_uE_))}
             return singleton(_uE_)}
           return empty}
         function add_seq(i,m)
          {return fold_left(function(s,x){return add(x,s)},m,i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(c)
            {var rest=c[3],t=c[2],x=c[1],_uB_=cons_enum(t,rest);
             return [0,x,function(_uC_){return seq_of_enum(_uB_,_uC_)}]}
           return 0}
         function to_seq(c)
          {var _uz_=cons_enum(c,0);
           return function(_uA_){return seq_of_enum(_uz_,_uA_)}}
         function to_seq_from(low,s)
          {var s$0=s,c=0;
           for(;;)
            {if(s$0)
              {var r=s$0[3],v=s$0[2],l=s$0[1],n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,r,c],s$0=l,c=c$0;continue}
                 var s$0=r;
                 continue}
               var _ux_=[0,v,r,c]}
             else
              var _ux_=c;
             return function(_uy_){return seq_of_enum(_ux_,_uy_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 singleton,
                 remove,
                 union,
                 inter,
                 disjoint,
                 diff,
                 compare,
                 equal,
                 subset,
                 iter,
                 map,
                 fold,
                 for_all,
                 exists,
                 filter,
                 partition,
                 cardinal,
                 elements,
                 min_elt,
                 min_elt_opt,
                 max_elt,
                 max_elt_opt,
                 min_elt,
                 min_elt_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 of_list,
                 to_seq_from,
                 to_seq,
                 add_seq,
                 of_seq]}];
    caml_register_global(744,Stdlib_set,"Stdlib__set");
    var
     Stdlib_map=
      [0,
       function(Ord)
        {function height(param){if(param){var h=param[5];return h}return 0}
         function create(l,x,d,r)
          {var hl=height(l),hr=height(r),_uw_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_uw_]}
         function singleton(x,d){return [0,0,x,d,0,1]}
         function bal(l,x,d,r)
          {if(l)var h=l[5],hl=h;else var hl=0;
           if(r)var h$0=r[5],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_ur_=height(lr);
               if(_ur_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
               if(lr)
                {var
                  lrr=lr[4],
                  lrd=lr[3],
                  lrv=lr[2],
                  lrl=lr[1],
                  _us_=create(lrr,x,d,r);
                 return create(create(ll,lv,ld,lrl),lrv,lrd,_us_)}
               return invalid_arg(cst_Map_bal)}
             return invalid_arg(cst_Map_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_ut_=height(rl);
               if(_ut_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
               if(rl)
                {var
                  rlr=rl[4],
                  rld=rl[3],
                  rlv=rl[2],
                  rll=rl[1],
                  _uu_=create(rlr,rv,rd,rr);
                 return create(create(l,x,d,rll),rlv,rld,_uu_)}
               return invalid_arg(cst_Map_bal$1)}
             return invalid_arg(cst_Map_bal$2)}
           var _uv_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_uv_]}
         var empty=0;
         function is_empty(param){return param?0:1}
         function add(x,data,m)
          {if(m)
            {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return d === data?m:[0,l,x,data,r,h];
             if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=add(x,data,l);
             return l === ll?m:bal(ll,v,d,r)}
           return [0,0,x,data,0,1]}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return d;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                     var param=r;
                     continue}
                   return [0,v0,d0]}}
               var param$1=r$0;
               continue}
             throw Not_found}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                     var param=r;
                     continue}
                   return [0,[0,v0,d0]]}}
               var param$1=r$0;
               continue}
             return 0}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                     var param=l;
                     continue}
                   return [0,v0,d0]}}
               var param$1=l$0;
               continue}
             throw Not_found}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                     var param=l;
                     continue}
                   return [0,[0,v0,d0]]}}
               var param$1=l$0;
               continue}
             return 0}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return [0,d];
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v),
                _uq_=0 === c?1:0;
               if(_uq_)return _uq_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function min_binding(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _up_=param$0[1];
               if(_up_){var param$0=_up_;continue}
               var d=param$0[3],v=param$0[2];
               return [0,v,d]}
             throw Not_found}}
         function min_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _uo_=param$0[1];
               if(_uo_){var param$0=_uo_;continue}
               var d=param$0[3],v=param$0[2];
               return [0,[0,v,d]]}
             return 0}}
         function max_binding(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _ul_=param$0[4],_um_=param$0[3],_un_=param$0[2];
               if(_ul_){var param$0=_ul_;continue}
               return [0,_un_,_um_]}
             throw Not_found}}
         function max_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _ui_=param$0[4],_uj_=param$0[3],_uk_=param$0[2];
               if(_ui_){var param$0=_ui_;continue}
               return [0,[0,_uk_,_uj_]]}
             return 0}}
         function remove_min_binding(param)
          {if(param)
            {var _uh_=param[1];
             if(_uh_)
              {var r=param[4],d=param[3],v=param[2];
               return bal(remove_min_binding(_uh_),v,d,r)}
             var r$0=param[4];
             return r$0}
           return invalid_arg(cst_Map_remove_min_elt)}
         function _tW_(t,match)
          {if(t)
            {if(match)
              {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
               return bal(t,x,d,remove_min_binding(match))}
             return t}
           return match}
         function remove(x,m)
          {if(m)
            {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return _tW_(l,r);
             if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=remove(x,l);
             return l === ll?m:bal(ll,v,d,r)}
           return 0}
         function update(x,f,m)
          {if(m)
            {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)
              {var match=caml_call1(f,[0,d]);
               if(match)
                {var data=match[1];return d === data?m:[0,l,x,data,r,h]}
               return _tW_(l,r)}
             if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=update(x,f,l);
             return l === ll?m:bal(ll,v,d,r)}
           var match$0=caml_call1(f,0);
           if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
           return 0}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
               iter(f,l);
               caml_call2(f,v,d);
               var param$0=r;
               continue}
             return 0}}
         function map(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=map(f,l),
              d$0=caml_call1(f,d),
              r$0=map(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function mapi(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=mapi(f,l),
              d$0=caml_call2(f,v,d),
              r$0=mapi(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function fold(f,m,accu)
          {var m$0=m,accu$0=accu;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
                m$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _ue_=caml_call2(p,v,d);
               if(_ue_)
                {var _uf_=for_all(p,l);
                 if(_uf_){var param$0=r;continue}
                 var _ug_=_uf_}
               else
                var _ug_=_ue_;
               return _ug_}
             return 1}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _ub_=caml_call2(p,v,d);
               if(_ub_)
                var _uc_=_ub_;
               else
                {var _ud_=exists(p,l);
                 if(! _ud_){var param$0=r;continue}
                 var _uc_=_ud_}
               return _uc_}
             return 0}}
         function add_min_binding(k,x,param)
          {if(param)
            {var r=param[4],d=param[3],v=param[2],l=param[1];
             return bal(add_min_binding(k,x,l),v,d,r)}
           return singleton(k,x)}
         function add_max_binding(k,x,param)
          {if(param)
            {var r=param[4],d=param[3],v=param[2],l=param[1];
             return bal(l,v,d,add_max_binding(k,x,r))}
           return singleton(k,x)}
         function join(l,v,d,r)
          {if(l)
            {if(r)
              {var
                rh=r[5],
                rr=r[4],
                rd=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[5],
                lr=l[4],
                ld=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?bal(ll,lv,ld,join(lr,v,d,r))
                       :(lh + 2 | 0) < rh
                         ?bal(join(l,v,d,rl),rv,rd,rr)
                         :create(l,v,d,r)}
             return add_max_binding(v,d,l)}
           return add_min_binding(v,d,r)}
         function concat(t,match)
          {if(t)
            {if(match)
              {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
               return join(t,x,d,remove_min_binding(match))}
             return t}
           return match}
         function concat_or_join(t1,v,d,t2)
          {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
         function split(x,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,l,[0,d],r];
             if(0 <= c)
              {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,join(l,v,d,lr),pres,rr]}
             var
              match$0=split(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,join(rl,v,d,r)]}
           return _K_}
         function merge(f,s1,s2)
          {if(s1)
            {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
             if(height(s2) <= h1)
              {var
                match=split(v1,s2),
                r2=match[3],
                d2=match[2],
                l2=match[1],
                _t9_=merge(f,r1,r2),
                _t__=caml_call3(f,v1,[0,d1],d2);
               return concat_or_join(merge(f,l1,l2),v1,_t__,_t9_)}}
           else
            if(! s2)return 0;
           if(s2)
            {var
              r2$0=s2[4],
              d2$0=s2[3],
              v2=s2[2],
              l2$0=s2[1],
              match$0=split(v2,s1),
              r1$0=match$0[3],
              d1$0=match$0[2],
              l1$0=match$0[1],
              _t$_=merge(f,r1$0,r2$0),
              _ua_=caml_call3(f,v2,d1$0,[0,d2$0]);
             return concat_or_join(merge(f,l1$0,l2$0),v2,_ua_,_t$_)}
           throw [0,Assert_failure,_L_]}
         function union(f,s1,s2)
          {if(s1)
            {if(s2)
              {var
                h2=s2[5],
                r2=s2[4],
                d2=s2[3],
                v2=s2[2],
                l2=s2[1],
                h1=s1[5],
                r1=s1[4],
                d1=s1[3],
                v1=s1[2],
                l1=s1[1];
               if(h2 <= h1)
                {var
                  match=split(v1,s2),
                  r2$0=match[3],
                  d2$0=match[2],
                  l2$0=match[1],
                  l=union(f,l1,l2$0),
                  r=union(f,r1,r2$0);
                 if(d2$0)
                  {var d2$1=d2$0[1];
                   return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
                 return join(l,v1,d1,r)}
               var
                match$0=split(v2,s1),
                r1$0=match$0[3],
                d1$0=match$0[2],
                l1$0=match$0[1],
                l$0=union(f,l1$0,l2),
                r$0=union(f,r1$0,r2);
               if(d1$0)
                {var d1$1=d1$0[1];
                 return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
               return join(l$0,v2,d2,r$0)}
             var s=s1}
           else
            var s=s2;
           return s}
         function filter(p,m)
          {if(m)
            {var
              r=m[4],
              d=m[3],
              v=m[2],
              l=m[1],
              l$0=filter(p,l),
              pvd=caml_call2(p,v,d),
              r$0=filter(p,r);
             if(pvd)
              {if(l === l$0 && r === r$0)return m;return join(l$0,v,d,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function partition(p,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              match=partition(p,l),
              lf=match[2],
              lt=match[1],
              pvd=caml_call2(p,v,d),
              match$0=partition(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pvd){var _t7_=concat(lf,rf);return [0,join(lt,v,d,rt),_t7_]}
             var _t8_=join(lf,v,d,rf);
             return [0,concat(lt,rt),_t8_]}
           return _M_}
         function cons_enum(m,e)
          {var m$0=m,e$0=e;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                m$1=m$0[1],
                e$1=[0,v,d,r,e$0],
                m$0=m$1,
                e$0=e$1;
               continue}
             return e$0}}
         function compare(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var c$0=caml_call2(cmp,d1,d2);
                   if(0 === c$0)
                    {var
                      e2$1=cons_enum(r2,e2$0),
                      e1$1=cons_enum(r1,e1$0),
                      e1=e1$1,
                      e2=e2$1;
                     continue}
                   return c$0}
                 return c}
               return 1}
             return e2?-1:0}}
         function equal(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  _t4_=0 === caml_call2(Ord[1],v1,v2)?1:0;
                 if(_t4_)
                  {var _t5_=caml_call2(cmp,d1,d2);
                   if(_t5_)
                    {var
                      e2$1=cons_enum(r2,e2$0),
                      e1$1=cons_enum(r1,e1$0),
                      e1=e1$1,
                      e2=e2$1;
                     continue}
                   var _t6_=_t5_}
                 else
                  var _t6_=_t4_;
                 return _t6_}
               return 0}
             return e2?0:1}}
         function cardinal(param)
          {if(param)
            {var r=param[4],l=param[1],_t3_=cardinal(r);
             return (cardinal(l) + 1 | 0) + _t3_ | 0}
           return 0}
         function bindings_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         function bindings(s){return bindings_aux(0,s)}
         function add_seq(i,m)
          {return fold_left
                   (function(m,param)
                     {var v=param[2],k=param[1];return add(k,v,m)},
                    m,
                    i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(c)
            {var rest=c[4],t=c[3],v=c[2],k=c[1],_t1_=cons_enum(t,rest);
             return [0,[0,k,v],function(_t2_){return seq_of_enum(_t1_,_t2_)}]}
           return 0}
         function to_seq(m)
          {var _tZ_=cons_enum(m,0);
           return function(_t0_){return seq_of_enum(_tZ_,_t0_)}}
         function to_seq_from(low,m)
          {var m$0=m,c=0;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
                 var m$0=r;
                 continue}
               var _tX_=[0,v,d,r,c]}
             else
              var _tX_=c;
             return function(_tY_){return seq_of_enum(_tX_,_tY_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 update,
                 singleton,
                 remove,
                 merge,
                 union,
                 compare,
                 equal,
                 iter,
                 fold,
                 for_all,
                 exists,
                 filter,
                 partition,
                 cardinal,
                 bindings,
                 min_binding,
                 min_binding_opt,
                 max_binding,
                 max_binding_opt,
                 min_binding,
                 min_binding_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 map,
                 mapi,
                 to_seq,
                 to_seq_from,
                 add_seq,
                 of_seq]}];
    caml_register_global(745,Stdlib_map,"Stdlib__map");
    var Empty=[248,cst_Stdlib_Stack_Empty,caml_fresh_oo_id(0)];
    function create$0(param){return [0,0,0]}
    function clear(s){s[1] = 0;s[2] = 0;return 0}
    function copy$3(s){return [0,s[1],s[2]]}
    function push(x,s){s[1] = [0,x,s[1]];s[2] = s[2] + 1 | 0;return 0}
    function pop(s)
     {var _tV_=s[1];
      if(_tV_)
       {var tl=_tV_[2],hd=_tV_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return hd}
      throw Empty}
    function pop_opt(s)
     {var _tU_=s[1];
      if(_tU_)
       {var tl=_tU_[2],hd=_tU_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return [0,hd]}
      return 0}
    function top(s)
     {var _tT_=s[1];if(_tT_){var hd=_tT_[1];return hd}throw Empty}
    function top_opt(s)
     {var _tS_=s[1];if(_tS_){var hd=_tS_[1];return [0,hd]}return 0}
    function is_empty(s){return 0 === s[1]?1:0}
    function length$1(s){return s[2]}
    function iter$7(f,s){return iter$2(f,s[1])}
    function fold$1(f,acc,s){return fold_left$0(f,acc,s[1])}
    function to_seq$6(s){return to_seq$1(s[1])}
    function add_seq(q,i){return iter(function(x){return push(x,q)},i)}
    function of_seq$4(g){var s=create$0(0);add_seq(s,g);return s}
    var
     Stdlib_stack=
      [0,
       Empty,
       create$0,
       push,
       pop,
       pop_opt,
       top,
       top_opt,
       clear,
       copy$3,
       is_empty,
       length$1,
       iter$7,
       fold$1,
       to_seq$6,
       add_seq,
       of_seq$4];
    caml_register_global(746,Stdlib_stack,"Stdlib__stack");
    var Empty$0=[248,cst_Stdlib_Queue_Empty,caml_fresh_oo_id(0)];
    function create$1(param){return [0,0,0,0]}
    function clear$0(q){q[1] = 0;q[2] = 0;q[3] = 0;return 0}
    function add(x,q)
     {var cell=[0,x,0],_tR_=q[3];
      return _tR_
              ?(q[1] = q[1] + 1 | 0,_tR_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    function peek(q)
     {var _tQ_=q[2];if(_tQ_){var content=_tQ_[1];return content}throw Empty$0}
    function peek_opt(q)
     {var _tP_=q[2];if(_tP_){var content=_tP_[1];return [0,content]}return 0}
    function take(q)
     {var _tM_=q[2];
      if(_tM_)
       {var _tN_=_tM_[1],_tO_=_tM_[2];
        return _tO_?(q[1] = q[1] - 1 | 0,q[2] = _tO_,_tN_):(clear$0(q),_tN_)}
      throw Empty$0}
    function take_opt(q)
     {var _tJ_=q[2];
      if(_tJ_)
       {var _tK_=_tJ_[1],_tL_=_tJ_[2];
        return _tL_
                ?(q[1] = q[1] - 1 | 0,q[2] = _tL_,[0,_tK_])
                :(clear$0(q),[0,_tK_])}
      return 0}
    function copy$4(q)
     {var q_res=[0,q[1],0,0],prev=0,cell=q[2];
      for(;;)
       {if(cell)
         {var content=cell[1],next=cell[2],res=[0,content,0];
          if(prev)prev[2] = res;else q_res[2] = res;
          var prev=res,cell=next;
          continue}
        q_res[3] = prev;
        return q_res}}
    function is_empty$0(q){return 0 === q[1]?1:0}
    function length$2(q){return q[1]}
    function iter$8(f,q)
     {var cell=q[2];
      for(;;)
       {if(cell)
         {var content=cell[1],next=cell[2];
          caml_call1(f,content);
          var cell=next;
          continue}
        return 0}}
    function fold$2(f,accu$1,q)
     {var accu=accu$1,cell=q[2];
      for(;;)
       {if(cell)
         {var
           content=cell[1],
           next=cell[2],
           accu$0=caml_call2(f,accu,content),
           accu=accu$0,
           cell=next;
          continue}
        return accu}}
    function transfer(q1,q2)
     {var _tH_=0 < q1[1]?1:0;
      if(_tH_)
       {var _tI_=q2[3];
        return _tI_
                ?(q2[1]
                  =
                  q2[1]
                  +
                  q1[1]
                  |
                  0,
                  _tI_[2]
                  =
                  q1[2],
                  q2[3]
                  =
                  q1[3],
                  clear$0(q1))
                :(q2[1] = q1[1],q2[2] = q1[2],q2[3] = q1[3],clear$0(q1))}
      return _tH_}
    function to_seq$7(q)
     {function aux(c,param)
       {if(c)
         {var x=c[1],next=c[2];
          return [0,x,function(_tG_){return aux(next,_tG_)}]}
        return 0}
      var _tE_=q[2];
      return function(_tF_){return aux(_tE_,_tF_)}}
    function add_seq$0(q,i){return iter(function(x){return add(x,q)},i)}
    function of_seq$5(g){var q=create$1(0);add_seq$0(q,g);return q}
    var
     Stdlib_queue=
      [0,
       Empty$0,
       create$1,
       add,
       add,
       take,
       take_opt,
       take,
       peek,
       peek_opt,
       peek,
       clear$0,
       copy$4,
       is_empty$0,
       length$2,
       iter$8,
       fold$2,
       transfer,
       to_seq$7,
       add_seq$0,
       of_seq$5];
    caml_register_global(747,Stdlib_queue,"Stdlib__queue");
    var Undefined=[248,cst_CamlinternalLazy_Undefined,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        caml_obj_make_forward(blk,result);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function force_val_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      var result=caml_call1(closure,0);
      caml_obj_make_forward(blk,result);
      return result}
    function force(lzv)
     {var t=caml_obj_tag(lzv);
      return t === 250?lzv[1]:t !== 246?lzv:force_lazy_block(lzv)}
    function force_val(lzv)
     {var t=caml_obj_tag(lzv);
      return t === 250?lzv[1]:t !== 246?lzv:force_val_lazy_block(lzv)}
    var
     CamlinternalLazy=
      [0,Undefined,force_lazy_block,force_val_lazy_block,force,force_val];
    caml_register_global(748,CamlinternalLazy,"CamlinternalLazy");
    function from_fun(f){var x=caml_obj_block(246,1);x[1] = f;return x}
    function from_val(v)
     {var t=caml_obj_tag(v);
      if(t !== 250 && t !== 246 && t !== 253)return v;
      return runtime.caml_lazy_make_forward(v)}
    function is_val(l){return caml_obj_tag(l) !== 246?1:0}
    var
     Stdlib_lazy=
      [0,
       Undefined,
       force_val,
       from_fun,
       from_val,
       is_val,
       from_fun,
       from_val,
       is_val];
    caml_register_global(749,Stdlib_lazy,"Stdlib__lazy");
    var
     Failure$0=[248,cst_Stdlib_Stream_Failure,caml_fresh_oo_id(0)],
     Error=[248,cst_Stdlib_Stream_Error,caml_fresh_oo_id(0)];
    function count(param)
     {if(param){var match=param[1],count=match[1];return count}return 0}
    function data(param)
     {if(param){var match=param[1],data=match[2];return data}return 0}
    function fill_buff(b)
     {b[3] = input(b[1],b[2],0,caml_ml_bytes_length(b[2]));b[4] = 0;return 0}
    function get_data(count,d)
     {var d$0=d;
      for(;;)
       {if(typeof d$0 !== "number")
         switch(d$0[0])
          {case 1:
            var d2=d$0[2],d1=d$0[1],match=get_data(count,d1);
            if(typeof match === "number")
             {var d$0=d2;continue}
            else
             {if(0 === match[0])
               {var d11=match[2],a=match[1];return [0,a,[1,d11,d2]]}
              throw [0,Assert_failure,_N_]}
           case 2:
            var
             f=d$0[1],
             _tA_=caml_obj_tag(f),
             d$1=250 === _tA_?f[1]:246 === _tA_?force_lazy_block(f):f,
             d$0=d$1;
            continue;
           case 3:
            var _tB_=d$0[1],_tC_=_tB_[1];
            if(_tC_)
             {var _tD_=_tC_[1];
              if(_tD_){var a$0=_tD_[1];_tB_[1] = 0;return [0,a$0,d$0]}
              return 0}
            var match$0=caml_call1(_tB_[2],count);
            if(match$0){var a$1=match$0[1];return [0,a$1,d$0]}
            _tB_[1] = _O_;
            return 0;
           case 4:
            var b=d$0[1];
            if(b[3] <= b[4])fill_buff(b);
            if(0 === b[3])return 0;
            var r=caml_bytes_unsafe_get(b[2],b[4]);
            b[4] = b[4] + 1 | 0;
            return [0,r,d$0]
           }
        return d$0}}
    function peek_data(s)
     {for(;;)
       {var _tv_=s[2];
        if(typeof _tv_ === "number")
         return 0;
        else
         switch(_tv_[0])
          {case 0:var a=_tv_[1];return [0,a];
           case 1:
            var d=get_data(s[1],s[2]);
            if(typeof d === "number")
             return 0;
            else
             {if(0 === d[0]){var a$0=d[1];s[2] = d;return [0,a$0]}
              throw [0,Assert_failure,_P_]}
           case 2:
            var
             f=_tv_[1],
             _tw_=caml_obj_tag(f),
             _tx_=250 === _tw_?f[1]:246 === _tw_?force_lazy_block(f):f;
            s[2] = _tx_;
            continue;
           case 3:
            var _ty_=_tv_[1],_tz_=_ty_[1];
            if(_tz_){var a$1=_tz_[1];return a$1}
            var x=caml_call1(_ty_[2],s[1]);
            _ty_[1] = [0,x];
            return x;
           default:
            var b=_tv_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :[0,caml_bytes_unsafe_get(b[2],b[4])]}}}
    function peek$0(param)
     {if(param){var s=param[1];return peek_data(s)}return 0}
    function junk_data(s)
     {for(;;)
       {var _tt_=s[2];
        if(typeof _tt_ !== "number")
         switch(_tt_[0])
          {case 0:var d=_tt_[2];s[1] = s[1] + 1 | 0;s[2] = d;return 0;
           case 3:
            var _tu_=_tt_[1];
            if(_tu_[1]){s[1] = s[1] + 1 | 0;_tu_[1] = 0;return 0}
            break;
           case 4:
            var b=_tt_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :(s[1] = s[1] + 1 | 0,b[4] = b[4] + 1 | 0,0)
           }
        var match=peek_data(s);
        if(match)continue;
        return 0}}
    function junk(param)
     {if(param){var data=param[1];return junk_data(data)}return 0}
    function nget_data(n,s)
     {if(0 < n)
       {var match=peek_data(s);
        if(match)
         {var a=match[1];
          junk_data(s);
          var
           match$0=nget_data(n - 1 | 0,s),
           k=match$0[3],
           d=match$0[2],
           al=match$0[1];
          return [0,[0,a,al],[0,a,d],k + 1 | 0]}
        return [0,0,s[2],0]}
      return [0,0,s[2],0]}
    function npeek(n,param)
     {if(param)
       {var
         d$0=param[1],
         match=nget_data(n,d$0),
         len=match[3],
         d=match[2],
         al=match[1];
        d$0[1] = d$0[1] - len | 0;
        d$0[2] = d;
        return al}
      return 0}
    function next(s)
     {var match=peek$0(s);
      if(match){var a=match[1];junk(s);return a}
      throw Failure$0}
    function empty$1(s){var match=peek$0(s);if(match)throw Failure$0;return 0}
    function iter$9(f,strm)
     {for(;;)
       {var match=peek$0(strm);
        if(match){var a=match[1];junk(strm);caml_call1(f,a);continue}
        return 0}}
    function from(f){return [0,[0,0,[3,[0,0,f]]]]}
    function of_list$1(l)
     {var _ts_=0;
      return [0,[0,0,fold_right(function(x,l){return [0,x,l]},l,_ts_)]]}
    function of_string$0(s)
     {var count=[0,0];
      return from
              (function(param)
                {var c=count[1];
                 return c < caml_ml_string_length(s)
                         ?(count[1]++,[0,caml_string_get(s,c)])
                         :0})}
    function of_bytes(s)
     {var count=[0,0];
      return from
              (function(param)
                {var c=count[1];
                 return c < caml_ml_bytes_length(s)
                         ?(count[1]++,[0,caml_bytes_get(s,c)])
                         :0})}
    function of_channel(ic)
     {return [0,[0,0,[4,[0,ic,caml_create_bytes(4096),0,0]]]]}
    function iapp(i,s){var _tr_=data(s);return [0,[0,0,[1,data(i),_tr_]]]}
    function icons(i,s){return [0,[0,0,[0,i,data(s)]]]}
    function ising(i){return [0,[0,0,[0,i,0]]]}
    function lapp(f,s)
     {return [0,
              [0,
               0,
               [2,
                [246,
                 function(_tp_)
                  {var _tq_=data(s);return [1,data(caml_call1(f,0)),_tq_]}]]]]}
    function lcons(f,s)
     {return [0,
              [0,
               0,
               [2,
                [246,
                 function(_tn_)
                  {var _to_=data(s);return [0,caml_call1(f,0),_to_]}]]]]}
    function lsing(f)
     {return [0,[0,0,[2,[246,function(_tm_){return [0,caml_call1(f,0),0]}]]]]}
    var sempty=0;
    function slazy(f)
     {return [0,[0,0,[2,[246,function(_tl_){return data(caml_call1(f,0))}]]]]}
    function dump(f,s)
     {print_string(cst_count);
      print_int(count(s));
      print_string(cst_data);
      dump_data(f,data(s));
      print_string(cst$6);
      return print_newline(0)}
    function dump_data(f,param)
     {if(typeof param === "number")
       return print_string(cst_Sempty);
      else
       switch(param[0])
        {case 0:
          var d=param[2],a=param[1];
          print_string(cst_Scons);
          caml_call1(f,a);
          print_string(cst$7);
          dump_data(f,d);
          return print_string(cst$8);
         case 1:
          var d2=param[2],d1=param[1];
          print_string(cst_Sapp);
          dump_data(f,d1);
          print_string(cst$9);
          dump_data(f,d2);
          return print_string(cst$10);
         case 2:return print_string(cst_Slazy);
         case 3:return print_string(cst_Sgen);
         default:return print_string(cst_Sbuffio)}}
    var
     Stdlib_stream=
      [0,
       Failure$0,
       Error,
       from,
       of_list$1,
       of_string$0,
       of_bytes,
       of_channel,
       iter$9,
       next,
       empty$1,
       peek$0,
       junk,
       count,
       npeek,
       iapp,
       icons,
       ising,
       lapp,
       lcons,
       lsing,
       sempty,
       slazy,
       dump];
    caml_register_global(750,Stdlib_stream,"Stdlib__stream");
    function create$2(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function to_bytes(b){return sub(b[1],0,b[2])}
    function sub$3(b,ofs,len)
     {if(0 <= ofs && 0 <= len && ! ((b[2] - len | 0) < ofs))
       return sub_string(b[1],ofs,len);
      return invalid_arg(cst_Buffer_sub)}
    function blit$3(src,srcoff,dst,dstoff,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        srcoff
        &&
        !
        ((src[2] - len | 0) < srcoff)
        &&
        0
        <=
        dstoff
        &&
        !
        ((caml_ml_bytes_length(dst) - len | 0) < dstoff))
       return caml_blit_bytes(src[1],srcoff,dst,dstoff,len);
      return invalid_arg(cst_Buffer_blit)}
    function nth$0(b,ofs)
     {if(0 <= ofs && ! (b[2] <= ofs))return caml_bytes_unsafe_get(b[1],ofs);
      return invalid_arg(cst_Buffer_nth)}
    function length$3(b){return b[2]}
    function clear$1(b){b[2] = 0;return 0}
    function reset(b)
     {b[2] = 0;b[1] = b[4];b[3] = caml_ml_bytes_length(b[1]);return 0}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(cst_Buffer_add_cannot_grow_buf);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_Q_]}
        throw [0,Assert_failure,_R_]}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos)resize(b,1);
      caml_bytes_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function add_utf_8_uchar(b,u)
     {if(0 <= u)
       {if(127 < u)
         {if(2047 < u)
           {if(65535 < u)
             {if(1114111 < u)throw [0,Assert_failure,_S_];
              var pos=b[2];
              if(b[3] < (pos + 4 | 0))resize(b,4);
              caml_bytes_unsafe_set(b[1],pos,240 | u >>> 18 | 0);
              caml_bytes_unsafe_set
               (b[1],pos + 1 | 0,128 | (u >>> 12 | 0) & 63);
              caml_bytes_unsafe_set(b[1],pos + 2 | 0,128 | (u >>> 6 | 0) & 63);
              caml_bytes_unsafe_set(b[1],pos + 3 | 0,128 | u & 63);
              b[2] = pos + 4 | 0;
              return 0}
            var pos$0=b[2];
            if(b[3] < (pos$0 + 3 | 0))resize(b,3);
            caml_bytes_unsafe_set(b[1],pos$0,224 | u >>> 12 | 0);
            caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,128 | (u >>> 6 | 0) & 63);
            caml_bytes_unsafe_set(b[1],pos$0 + 2 | 0,128 | u & 63);
            b[2] = pos$0 + 3 | 0;
            return 0}
          var pos$1=b[2];
          if(b[3] < (pos$1 + 2 | 0))resize(b,2);
          caml_bytes_unsafe_set(b[1],pos$1,192 | u >>> 6 | 0);
          caml_bytes_unsafe_set(b[1],pos$1 + 1 | 0,128 | u & 63);
          b[2] = pos$1 + 2 | 0;
          return 0}
        return add_char(b,u)}
      throw [0,Assert_failure,_T_]}
    function add_utf_16be_uchar(b,u)
     {if(0 <= u)
       {if(65535 < u)
         {if(1114111 < u)throw [0,Assert_failure,_U_];
          var
           u$0=u - 65536 | 0,
           hi=55296 | u$0 >>> 10 | 0,
           lo=56320 | u$0 & 1023,
           pos=b[2];
          if(b[3] < (pos + 4 | 0))resize(b,4);
          caml_bytes_unsafe_set(b[1],pos,hi >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 1 | 0,hi & 255);
          caml_bytes_unsafe_set(b[1],pos + 2 | 0,lo >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 3 | 0,lo & 255);
          b[2] = pos + 4 | 0;
          return 0}
        var pos$0=b[2];
        if(b[3] < (pos$0 + 2 | 0))resize(b,2);
        caml_bytes_unsafe_set(b[1],pos$0,u >>> 8 | 0);
        caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,u & 255);
        b[2] = pos$0 + 2 | 0;
        return 0}
      throw [0,Assert_failure,_V_]}
    function add_utf_16le_uchar(b,u)
     {if(0 <= u)
       {if(65535 < u)
         {if(1114111 < u)throw [0,Assert_failure,_W_];
          var
           u$0=u - 65536 | 0,
           hi=55296 | u$0 >>> 10 | 0,
           lo=56320 | u$0 & 1023,
           pos=b[2];
          if(b[3] < (pos + 4 | 0))resize(b,4);
          caml_bytes_unsafe_set(b[1],pos,hi & 255);
          caml_bytes_unsafe_set(b[1],pos + 1 | 0,hi >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 2 | 0,lo & 255);
          caml_bytes_unsafe_set(b[1],pos + 3 | 0,lo >>> 8 | 0);
          b[2] = pos + 4 | 0;
          return 0}
        var pos$0=b[2];
        if(b[3] < (pos$0 + 2 | 0))resize(b,2);
        caml_bytes_unsafe_set(b[1],pos$0,u & 255);
        caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,u >>> 8 | 0);
        b[2] = pos$0 + 2 | 0;
        return 0}
      throw [0,Assert_failure,_X_]}
    function add_substring(b,s,offset,len)
     {var _ti_=offset < 0?1:0;
      if(_ti_)
       var _tj_=_ti_;
      else
       var
        _tk_=len < 0?1:0,
        _tj_=_tk_ || ((caml_ml_string_length(s) - len | 0) < offset?1:0);
      if(_tj_)invalid_arg(cst_Buffer_add_substring_add_s);
      var new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,offset,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_subbytes(b,s,offset,len)
     {return add_substring(b,caml_string_of_bytes(s),offset,len)}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_bytes(b,s){return add_string(b,caml_string_of_bytes(s))}
    function add_buffer(b,bs){return add_subbytes(b,bs[1],0,bs[2])}
    function add_channel(b,ic,len)
     {var _tg_=len < 0?1:0,_th_=_tg_ || (max_string_length < len?1:0);
      if(_th_)invalid_arg(cst_Buffer_add_channel);
      if(b[3] < (b[2] + len | 0))resize(b,len);
      var already_read=0,ofs=b[2],to_read=len,_tf_=b[1];
      for(;;)
       {if(0 !== to_read)
         {var r=input(ic,_tf_,ofs,to_read);
          if(0 !== r)
           {var
             already_read$0=already_read + r | 0,
             ofs$0=ofs + r | 0,
             to_read$0=to_read - r | 0,
             already_read=already_read$0,
             ofs=ofs$0,
             to_read=to_read$0;
            continue}}
        if((b[2] + already_read | 0) <= b[3])
         {b[2] = b[2] + already_read | 0;
          if(already_read < len)throw End_of_file;
          return 0}
        throw [0,Assert_failure,_Y_]}}
    function output_buffer(oc,b){return output(oc,b[1],0,b[2])}
    function add_substitute(b,f,s)
     {var lim$1=caml_ml_string_length(s),previous=32,i$7=0;
      for(;;)
       {if(i$7 < lim$1)
         {var current=caml_string_get(s,i$7);
          if(36 === current)
           {if(92 === previous)
             {add_char(b,current);
              var i$8=i$7 + 1 | 0,previous=32,i$7=i$8;
              continue}
            var start=i$7 + 1 | 0;
            if(lim$1 <= start)throw Not_found;
            var opening=caml_string_get(s,start),switch$0=0;
            if(40 !== opening && 123 !== opening)
             {var i$6=start + 1 | 0,lim$0=caml_ml_string_length(s),i$3=i$6;
              for(;;)
               {if(lim$0 <= i$3)
                 var stop=lim$0;
                else
                 {var match=caml_string_get(s,i$3),switch$1=0;
                  if(91 <= match)
                   {if(97 <= match)
                     {if(! (123 <= match))switch$1 = 1}
                    else
                     if(95 === match)switch$1 = 1}
                  else
                   if(58 <= match)
                    {if(65 <= match)switch$1 = 1}
                   else
                    if(48 <= match)switch$1 = 1;
                  if(switch$1){var i$4=i$3 + 1 | 0,i$3=i$4;continue}
                  var stop=i$3}
                var match$0=[0,sub$0(s,start,stop - start | 0),stop];
                switch$0 = 1;
                break}}
            if(! switch$0)
             {var i$5=start + 1 | 0,k$2=0;
              if(40 === opening)
               var _td_=41;
              else
               {if(123 !== opening)throw [0,Assert_failure,_Z_];var _td_=125}
              var lim=caml_ml_string_length(s),k=k$2,i=i$5;
              for(;;)
               {if(lim <= i)throw Not_found;
                if(caml_string_get(s,i) === opening)
                 {var i$0=i + 1 | 0,k$0=k + 1 | 0,k=k$0,i=i$0;continue}
                if(caml_string_get(s,i) !== _td_)
                 {var i$2=i + 1 | 0,i=i$2;continue}
                if(0 !== k)
                 {var i$1=i + 1 | 0,k$1=k - 1 | 0,k=k$1,i=i$1;continue}
                var
                 match$0=
                  [0,sub$0(s,i$5,(i - start | 0) - 1 | 0),i + 1 | 0];
                break}}
            var next_i=match$0[2],ident=match$0[1];
            add_string(b,caml_call1(f,ident));
            var previous=32,i$7=next_i;
            continue}
          if(92 === previous)
           {add_char(b,92);
            add_char(b,current);
            var i$9=i$7 + 1 | 0,previous=32,i$7=i$9;
            continue}
          if(92 === current)
           {var i$10=i$7 + 1 | 0,previous=current,i$7=i$10;continue}
          add_char(b,current);
          var i$11=i$7 + 1 | 0,previous=current,i$7=i$11;
          continue}
        var _te_=92 === previous?1:0;
        return _te_?add_char(b,previous):_te_}}
    function truncate(b,len)
     {if(0 <= len && ! (b[2] < len)){b[2] = len;return 0}
      return invalid_arg(cst_Buffer_truncate)}
    function to_seq$8(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_unsafe_get(b[1],i),_tb_=i + 1 | 0;
        return [0,x,function(_tc_){return aux(_tb_,_tc_)}]}
      var _s$_=0;
      return function(_ta_){return aux(_s$_,_ta_)}}
    function to_seqi$3(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_unsafe_get(b[1],i),_s9_=i + 1 | 0;
        return [0,[0,i,x],function(_s__){return aux(_s9_,_s__)}]}
      var _s7_=0;
      return function(_s8_){return aux(_s7_,_s8_)}}
    function add_seq$1(b,seq)
     {return iter(function(_s6_){return add_char(b,_s6_)},seq)}
    function of_seq$6(i){var b=create$2(32);add_seq$1(b,i);return b}
    function add_int8(b,x)
     {var new_position=b[2] + 1 | 0;
      if(b[3] < new_position)resize(b,1);
      caml_bytes_unsafe_set(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int16_ne(b,x)
     {var new_position=b[2] + 2 | 0;
      if(b[3] < new_position)resize(b,2);
      caml_bytes_set16(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int32_ne(b,x)
     {var new_position=b[2] + 4 | 0;
      if(b[3] < new_position)resize(b,4);
      caml_bytes_set32(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int64_ne(b,x)
     {var new_position=b[2] + 8 | 0;
      if(b[3] < new_position)resize(b,8);
      caml_bytes_set64(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int16_le(b,x){return add_int16_ne(b,x)}
    function add_int16_be(b,x)
     {var x$0=caml_bswap16(x);return add_int16_ne(b,x$0)}
    function add_int32_le(b,x){return add_int32_ne(b,x)}
    function add_int32_be(b,x)
     {var x$0=caml_int32_bswap(x);return add_int32_ne(b,x$0)}
    function add_int64_le(b,x){return add_int64_ne(b,x)}
    function add_int64_be(b,x)
     {var x$0=caml_int64_bswap(x);return add_int64_ne(b,x$0)}
    var
     Stdlib_buffer=
      [0,
       create$2,
       contents,
       to_bytes,
       sub$3,
       blit$3,
       nth$0,
       length$3,
       clear$1,
       reset,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       output_buffer,
       truncate,
       to_seq$8,
       to_seqi$3,
       add_seq$1,
       of_seq$6,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
    caml_register_global(751,Stdlib_buffer,"Stdlib__buffer");
    function create_char_set(param){return make(32,0)}
    function add_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return caml_bytes_set
              (char_set,
               str_ind,
               char_of_int(caml_bytes_get(char_set,str_ind) | mask))}
    function freeze_char_set(char_set){return to_string$1(char_set)}
    function rev_char_set(char_set)
     {var char_set$0=create_char_set(0),i=0;
      for(;;)
       {caml_bytes_set
         (char_set$0,i,char_of_int(caml_string_get(char_set,i) ^ 255));
        var _s5_=i + 1 | 0;
        if(31 !== i){var i=_s5_;continue}
        return caml_string_of_bytes(char_set$0)}}
    function is_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return 0 !== (caml_string_get(char_set,str_ind) & mask)?1:0}
    function pad_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return [0,1,width]}return 0}
    function param_format_of_ignored_format(ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return [0,[0,fmt]];
         case 1:return [0,[1,fmt]];
         case 2:return [0,[19,fmt]];
         default:return [0,[22,fmt]]}
      else
       switch(ign[0])
        {case 0:var pad_opt=ign[1];return [0,[2,pad_of_pad_opt(pad_opt),fmt]];
         case 1:
          var pad_opt$0=ign[1];return [0,[3,pad_of_pad_opt(pad_opt$0),fmt]];
         case 2:
          var pad_opt$1=ign[2],iconv=ign[1];
          return [0,[4,iconv,pad_of_pad_opt(pad_opt$1),0,fmt]];
         case 3:
          var pad_opt$2=ign[2],iconv$0=ign[1];
          return [0,[5,iconv$0,pad_of_pad_opt(pad_opt$2),0,fmt]];
         case 4:
          var pad_opt$3=ign[2],iconv$1=ign[1];
          return [0,[6,iconv$1,pad_of_pad_opt(pad_opt$3),0,fmt]];
         case 5:
          var pad_opt$4=ign[2],iconv$2=ign[1];
          return [0,[7,iconv$2,pad_of_pad_opt(pad_opt$4),0,fmt]];
         case 6:
          var prec_opt=ign[2],pad_opt$5=ign[1];
          if(prec_opt)var ndec=prec_opt[1],_s4_=[0,ndec];else var _s4_=0;
          return [0,[8,___,pad_of_pad_opt(pad_opt$5),_s4_,fmt]];
         case 7:
          var pad_opt$6=ign[1];return [0,[9,pad_of_pad_opt(pad_opt$6),fmt]];
         case 8:
          var fmtty=ign[2],pad_opt$7=ign[1];
          return [0,[13,pad_opt$7,fmtty,fmt]];
         case 9:
          var fmtty$0=ign[2],pad_opt$8=ign[1];
          return [0,[14,pad_opt$8,fmtty$0,fmt]];
         case 10:
          var char_set=ign[2],width_opt=ign[1];
          return [0,[20,width_opt,char_set,fmt]];
         default:var counter=ign[1];return [0,[21,counter,fmt]]}}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _s2_=len < min_len?1:0;
      if(_s2_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _s3_=0}
      else
       var _s3_=_s2_;
      return _s3_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function char_of_iconv(iconv)
     {switch(iconv)
       {case 6:
        case 7:return 120;
        case 8:
        case 9:return 88;
        case 10:
        case 11:return 111;
        case 12:
        case 15:return 117;
        case 0:
        case 1:
        case 2:
        case 13:return 100;
        default:return 105}}
    function char_of_fconv(opt,fconv)
     {if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:return 102;
        case 1:return 101;
        case 2:return 69;
        case 3:return 103;
        case 4:return 71;
        case 5:return cF;
        case 6:return 104;
        default:return 72}}
    function bprint_padty(buf,padty)
     {switch(padty)
       {case 0:return buffer_add_char(buf,45);
        case 1:return 0;
        default:return buffer_add_char(buf,48)}}
    function bprint_ignored_flag(buf,ign_flag)
     {return ign_flag?buffer_add_char(buf,95):ign_flag}
    function bprint_pad_opt(buf,pad_opt)
     {if(pad_opt)
       {var width=pad_opt[1];
        return buffer_add_string(buf,caml_string_of_jsbytes("" + width))}
      return 0}
    function bprint_padding(buf,pad)
     {if(typeof pad === "number")
       return 0;
      else
       {if(0 === pad[0])
         {var n=pad[2],padty=pad[1];
          bprint_padty(buf,padty);
          return buffer_add_string(buf,caml_string_of_jsbytes("" + n))}
        var padty$0=pad[1];
        bprint_padty(buf,padty$0);
        return buffer_add_char(buf,42)}}
    function bprint_precision(buf,prec)
     {if(typeof prec === "number")
       return 0 === prec?0:buffer_add_string(buf,cst$11);
      var n=prec[1];
      buffer_add_char(buf,46);
      return buffer_add_string(buf,caml_string_of_jsbytes("" + n))}
    function bprint_iconv_flag(buf,iconv)
     {switch(iconv)
       {case 1:
        case 4:return buffer_add_char(buf,43);
        case 2:
        case 5:return buffer_add_char(buf,32);
        case 7:
        case 9:
        case 11:
        case 13:
        case 14:
        case 15:return buffer_add_char(buf,35);
        default:return 0}}
    function bprint_altint_fmt(buf,ign_flag,iconv,pad,prec,c)
     {buffer_add_char(buf,37);
      bprint_ignored_flag(buf,ign_flag);
      bprint_iconv_flag(buf,iconv);
      bprint_padding(buf,pad);
      bprint_precision(buf,prec);
      buffer_add_char(buf,c);
      return buffer_add_char(buf,char_of_iconv(iconv))}
    function bprint_fconv_flag(buf,fconv)
     {switch(fconv[1])
       {case 0:return 0;
        case 1:return buffer_add_char(buf,43);
        default:return buffer_add_char(buf,32)}}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return cst$12;
         case 1:return cst$13;
         case 2:return cst$14;
         case 3:return cst$15;
         case 4:return cst$16;
         case 5:return cst$17;
         default:return cst$18}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return symbol(cst$19,make$0(1,c))}}
    function string_of_formatting_gen(formatting_gen)
     {if(0 === formatting_gen[0])
       {var match=formatting_gen[1],str=match[2];return str}
      var match$0=formatting_gen[1],str$0=match$0[2];
      return str$0}
    function bprint_char_literal(buf,chr)
     {return 37 === chr?buffer_add_string(buf,cst$20):buffer_add_char(buf,chr)}
    function bprint_string_literal(buf,str)
     {var _s0_=caml_ml_string_length(str) - 1 | 0,_sZ_=0;
      if(! (_s0_ < 0))
       {var i=_sZ_;
        for(;;)
         {bprint_char_literal(buf,caml_string_get(str,i));
          var _s1_=i + 1 | 0;
          if(_s0_ !== i){var i=_s1_;continue}
          break}}
      return 0}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,cst_c);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,cst_s);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,cst_i);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,cst_li);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,cst_ni);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,cst_Li);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,cst_f);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,cst_B);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,cst$21);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,cst$22);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,cst$23);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,cst$24);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,cst_a);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,cst_t$0);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,cst$25);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,cst_r$0);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,cst_r$1);
           var fmtty$0=rest$13;
           continue}}
    function int_of_custom_arity(param)
     {if(param){var x=param[1];return 1 + int_of_custom_arity(x) | 0}return 0}
    function string_of_fmt(fmt$1)
     {var buf=buffer_create(16),fmt=fmt$1,ign_flag=0;
      a:
      for(;;)
       if(typeof fmt === "number")
        return buffer_contents(buf);
       else
        switch(fmt[0])
         {case 0:
           var rest=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,99);
           var fmt=rest,ign_flag=0;
           continue;
          case 1:
           var rest$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,67);
           var fmt=rest$0,ign_flag=0;
           continue;
          case 2:
           var rest$1=fmt[2],pad=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad);
           buffer_add_char(buf,115);
           var fmt=rest$1,ign_flag=0;
           continue;
          case 3:
           var rest$2=fmt[2],pad$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad$0);
           buffer_add_char(buf,83);
           var fmt=rest$2,ign_flag=0;
           continue;
          case 4:
           var rest$3=fmt[4],prec=fmt[3],pad$1=fmt[2],iconv=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_iconv_flag(buf,iconv);
           bprint_padding(buf,pad$1);
           bprint_precision(buf,prec);
           buffer_add_char(buf,char_of_iconv(iconv));
           var fmt=rest$3,ign_flag=0;
           continue;
          case 5:
           var rest$4=fmt[4],prec$0=fmt[3],pad$2=fmt[2],iconv$0=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$0,pad$2,prec$0,108);
           var fmt=rest$4,ign_flag=0;
           continue;
          case 6:
           var rest$5=fmt[4],prec$1=fmt[3],pad$3=fmt[2],iconv$1=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$1,pad$3,prec$1,110);
           var fmt=rest$5,ign_flag=0;
           continue;
          case 7:
           var rest$6=fmt[4],prec$2=fmt[3],pad$4=fmt[2],iconv$2=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$2,pad$4,prec$2,76);
           var fmt=rest$6,ign_flag=0;
           continue;
          case 8:
           var rest$7=fmt[4],prec$3=fmt[3],pad$5=fmt[2],fconv=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_fconv_flag(buf,fconv);
           bprint_padding(buf,pad$5);
           bprint_precision(buf,prec$3);
           buffer_add_char(buf,char_of_fconv(0,fconv));
           var fmt=rest$7,ign_flag=0;
           continue;
          case 9:
           var rest$8=fmt[2],pad$6=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad$6);
           buffer_add_char(buf,66);
           var fmt=rest$8,ign_flag=0;
           continue;
          case 10:
           var rest$9=fmt[1];
           buffer_add_string(buf,cst$26);
           var fmt=rest$9;
           continue;
          case 11:
           var rest$10=fmt[2],str=fmt[1];
           bprint_string_literal(buf,str);
           var fmt=rest$10;
           continue;
          case 12:
           var rest$11=fmt[2],chr$0=fmt[1];
           bprint_char_literal(buf,chr$0);
           var fmt=rest$11;
           continue;
          case 13:
           var rest$12=fmt[3],fmtty=fmt[2],pad_opt=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,pad_opt);
           buffer_add_char(buf,123);
           bprint_fmtty(buf,fmtty);
           buffer_add_char(buf,37);
           buffer_add_char(buf,125);
           var fmt=rest$12,ign_flag=0;
           continue;
          case 14:
           var rest$13=fmt[3],fmtty$0=fmt[2],pad_opt$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,pad_opt$0);
           buffer_add_char(buf,40);
           bprint_fmtty(buf,fmtty$0);
           buffer_add_char(buf,37);
           buffer_add_char(buf,41);
           var fmt=rest$13,ign_flag=0;
           continue;
          case 15:
           var rest$14=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,97);
           var fmt=rest$14,ign_flag=0;
           continue;
          case 16:
           var rest$15=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,116);
           var fmt=rest$15,ign_flag=0;
           continue;
          case 17:
           var rest$16=fmt[2],fmting_lit=fmt[1];
           bprint_string_literal(buf,string_of_formatting_lit(fmting_lit));
           var fmt=rest$16;
           continue;
          case 18:
           var rest$17=fmt[2],fmting_gen=fmt[1];
           bprint_string_literal(buf,cst$27);
           bprint_string_literal(buf,string_of_formatting_gen(fmting_gen));
           var fmt=rest$17;
           continue;
          case 19:
           var rest$18=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,114);
           var fmt=rest$18,ign_flag=0;
           continue;
          case 20:
           var rest$19=fmt[3],char_set=fmt[2],width_opt=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,width_opt);
           var
            print_char=
             function(buf,i)
              {var c=char_of_int(i);
               return 37 === c
                       ?(buffer_add_char(buf,37),buffer_add_char(buf,37))
                       :64 === c
                         ?(buffer_add_char(buf,37),buffer_add_char(buf,64))
                         :buffer_add_char(buf,c)};
           buffer_add_char(buf,91);
           var
            _sP_=
             is_in_char_set(char_set,0)
              ?(buffer_add_char(buf,94),rev_char_set(char_set))
              :char_set,
            is_alone$0=
             function(_sU_)
              {function is_alone(c)
                {var
                  after=chr(c + 1 | 0),
                  before=chr(c - 1 | 0),
                  _sV_=is_in_char_set(_sU_,c);
                 if(_sV_)
                  var
                   _sW_=is_in_char_set(_sU_,before),
                   _sX_=_sW_?is_in_char_set(_sU_,after):_sW_,
                   _sY_=1 - _sX_;
                 else
                  var _sY_=_sV_;
                 return _sY_}
               return is_alone},
            is_alone=is_alone$0(_sP_);
           if(is_alone(93))buffer_add_char(buf,93);
           var i=1;
           b:
           for(;;)
            {if(i < 256)
              {if(! is_in_char_set(_sP_,char_of_int(i)))
                {var i$0=i + 1 | 0,i=i$0;continue}
               var match=char_of_int(i),switcher=match - 45 | 0,switch$0=0;
               if(48 < switcher >>> 0)
                if(210 <= switcher)print_char(buf,255);else switch$0 = 1;
               else
                {var switcher$0=switcher - 1 | 0;
                 if(46 < switcher$0 >>> 0){var i$2=i + 1 | 0,i=i$2;continue}
                 switch$0 = 1}
               if(switch$0)
                {var i$1=i + 1 | 0;
                 if(! is_in_char_set(_sP_,char_of_int(i$1)))
                  {print_char(buf,i$1 - 1 | 0);
                   var i$6=i$1 + 1 | 0,i=i$6;
                   continue}
                 var
                  match$0=char_of_int(i$1),
                  switcher$1=match$0 - 45 | 0,
                  switch$1=0;
                 if(48 < switcher$1 >>> 0)
                  if(210 <= switcher$1)
                   {print_char(buf,254);print_char(buf,255)}
                  else
                   switch$1 = 1;
                 else
                  {var switcher$2=switcher$1 - 1 | 0;
                   if(46 < switcher$2 >>> 0)
                    {if(! is_in_char_set(_sP_,char_of_int(i$1 + 1 | 0)))
                      {print_char(buf,i$1 - 1 | 0);
                       var i$5=i$1 + 1 | 0,i=i$5;
                       continue}
                     switch$1 = 1}
                   else
                    switch$1 = 1}
                 if(switch$1)
                  {if(! is_in_char_set(_sP_,char_of_int(i$1 + 1 | 0)))
                    {print_char(buf,i$1 - 1 | 0);
                     print_char(buf,i$1);
                     var i$4=i$1 + 2 | 0,i=i$4;
                     continue}
                   var j=i$1 + 2 | 0,i$3=i$1 - 1 | 0,j$0=j;
                   for(;;)
                    {if(256 !== j$0 && is_in_char_set(_sP_,char_of_int(j$0)))
                      {var j$1=j$0 + 1 | 0,j$0=j$1;continue}
                     print_char(buf,i$3);
                     print_char(buf,45);
                     print_char(buf,j$0 - 1 | 0);
                     if(j$0 < 256){var i$7=j$0 + 1 | 0,i=i$7;continue b}
                     break}}}}
             if(is_alone(45))buffer_add_char(buf,45);
             buffer_add_char(buf,93);
             var fmt=rest$19,ign_flag=0;
             continue a}
          case 21:
           var rest$20=fmt[2],counter=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           switch(counter)
            {case 0:var _sQ_=108;break;
             case 1:var _sQ_=110;break;
             default:var _sQ_=78}
           buffer_add_char(buf,_sQ_);
           var fmt=rest$20,ign_flag=0;
           continue;
          case 22:
           var rest$21=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_string_literal(buf,cst_0c);
           var fmt=rest$21,ign_flag=0;
           continue;
          case 23:
           var
            rest$22=fmt[2],
            ign=fmt[1],
            match$1=param_format_of_ignored_format(ign,rest$22),
            fmt$0=match$1[1],
            fmt=fmt$0,
            ign_flag=1;
           continue;
          default:
           var
            rest$23=fmt[3],
            arity=fmt[1],
            _sS_=int_of_custom_arity(arity),
            _sR_=1;
           if(! (_sS_ < 1))
            {var i$8=_sR_;
             for(;;)
              {buffer_add_char(buf,37);
               bprint_ignored_flag(buf,ign_flag);
               buffer_add_char(buf,63);
               var _sT_=i$8 + 1 | 0;
               if(_sS_ !== i$8){var i$8=_sT_;continue}
               break}}
           var fmt=rest$23,ign_flag=0;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _sr_=function(param){return 0},
         _ss_=function(param){return 0},
         _st_=function(param){return 0};
        return [0,function(param){return 0},_st_,_ss_,_sr_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _su_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_su_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _sv_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _sv_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _sw_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _sw_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _sx_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _sx_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _sy_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _sy_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _sz_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _sz_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _sA_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _sA_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _sB_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _sB_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _sC_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _sC_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _sD_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _sE_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _sF_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _sF_,
                  _sE_,
                  _sD_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _sG_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _sG_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _sH_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _sH_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _sI_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _sI_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _sJ_=function(param){caml_call1(de$12,0);return 0},
           _sK_=function(param){caml_call1(ed$12,0);return 0},
           _sL_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _sL_,
                  _sK_,
                  _sJ_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _sM_=function(param){caml_call1(de$13,0);return 0},
           _sN_=function(param){caml_call1(ed$13,0);return 0},
           _sO_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _sO_,
                  _sN_,
                  _sM_]}}
    function trans(ty1,match)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_$_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_r__=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_r__,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_r$_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_r$_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_sa_=ty1[1];
          if(typeof match === "number")
           switch$3 = 1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_sa_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_sb_=ty1[1];
          if(typeof match === "number")
           switch$4 = 1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_sb_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_sc_=ty1[1];
          if(typeof match === "number")
           switch$5 = 1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_sc_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_sd_=ty1[1];
          if(typeof match === "number")
           switch$6 = 1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_sd_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_se_=ty1[1];
          if(typeof match === "number")
           switch$7 = 1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_se_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_sf_=ty1[1];
          if(typeof match === "number")
           switch$8 = 1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_sf_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_sg_=ty1[2],_sh_=ty1[1];
          if(typeof match === "number")
           switch$9 = 1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_si_=trans(_sg_,rest2$7);
              return [8,trans(_sh_,ty2),_si_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_ai_];
          break;
         case 9:
          var switch$10=0,_sj_=ty1[3],_sk_=ty1[2],_sl_=ty1[1];
          if(typeof match === "number")
           switch$10 = 1;
          else
           switch(match[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_sk_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_sl_,ty22,trans(_sj_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_aj_];
          break;
         case 10:
          var _sm_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_sm_,rest2$9)]}
          throw [0,Assert_failure,_ak_];
         case 11:
          var switch$11=0,_sn_=ty1[1];
          if(typeof match === "number")
           switch$11 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:var rest2$10=match[1];return [11,trans(_sn_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_al_];
          break;
         case 12:
          var switch$12=0,_so_=ty1[1];
          if(typeof match === "number")
           switch$12 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=match[1];return [12,trans(_so_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_am_];
          break;
         case 13:
          var switch$13=0,_sp_=ty1[1];
          if(typeof match === "number")
           switch$13 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=match[1];return [13,trans(_sp_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_an_];
          break;
         default:
          var switch$14=0,_sq_=ty1[1];
          if(typeof match === "number")
           switch$14 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=match[1];return [14,trans(_sq_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_ao_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ac_];
        case 1:throw [0,Assert_failure,_ad_];
        case 2:throw [0,Assert_failure,_ae_];
        case 3:throw [0,Assert_failure,_af_];
        case 4:throw [0,Assert_failure,_ag_];
        case 5:throw [0,Assert_failure,_aa_];
        case 6:throw [0,Assert_failure,_ab_];
        default:throw [0,Assert_failure,_ah_]}}
    function fmtty_of_padding_fmtty(pad,fmtty)
     {return typeof pad === "number"?fmtty:0 === pad[0]?fmtty:[2,fmtty]}
    function fmtty_of_custom(arity,fmtty)
     {if(arity)
       {var arity$0=arity[1];return [12,fmtty_of_custom(arity$0,fmtty)]}
      return fmtty}
    function fmtty_of_fmt(fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:var rest=fmtty$0[1];return [0,fmtty_of_fmt(rest)];
          case 1:var rest$0=fmtty$0[1];return [0,fmtty_of_fmt(rest$0)];
          case 2:
           var rest$1=fmtty$0[2],pad=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad,[1,fmtty_of_fmt(rest$1)]);
          case 3:
           var rest$2=fmtty$0[2],pad$0=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$0,[1,fmtty_of_fmt(rest$2)]);
          case 4:
           var
            rest$3=fmtty$0[4],
            prec=fmtty$0[3],
            pad$1=fmtty$0[2],
            ty_rest=fmtty_of_fmt(rest$3),
            prec_ty=fmtty_of_precision_fmtty(prec,[2,ty_rest]);
           return fmtty_of_padding_fmtty(pad$1,prec_ty);
          case 5:
           var
            rest$4=fmtty$0[4],
            prec$0=fmtty$0[3],
            pad$2=fmtty$0[2],
            ty_rest$0=fmtty_of_fmt(rest$4),
            prec_ty$0=fmtty_of_precision_fmtty(prec$0,[3,ty_rest$0]);
           return fmtty_of_padding_fmtty(pad$2,prec_ty$0);
          case 6:
           var
            rest$5=fmtty$0[4],
            prec$1=fmtty$0[3],
            pad$3=fmtty$0[2],
            ty_rest$1=fmtty_of_fmt(rest$5),
            prec_ty$1=fmtty_of_precision_fmtty(prec$1,[4,ty_rest$1]);
           return fmtty_of_padding_fmtty(pad$3,prec_ty$1);
          case 7:
           var
            rest$6=fmtty$0[4],
            prec$2=fmtty$0[3],
            pad$4=fmtty$0[2],
            ty_rest$2=fmtty_of_fmt(rest$6),
            prec_ty$2=fmtty_of_precision_fmtty(prec$2,[5,ty_rest$2]);
           return fmtty_of_padding_fmtty(pad$4,prec_ty$2);
          case 8:
           var
            rest$7=fmtty$0[4],
            prec$3=fmtty$0[3],
            pad$5=fmtty$0[2],
            ty_rest$3=fmtty_of_fmt(rest$7),
            prec_ty$3=fmtty_of_precision_fmtty(prec$3,[6,ty_rest$3]);
           return fmtty_of_padding_fmtty(pad$5,prec_ty$3);
          case 9:
           var rest$8=fmtty$0[2],pad$6=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$6,[7,fmtty_of_fmt(rest$8)]);
          case 10:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 11:var fmtty$2=fmtty$0[2],fmtty$0=fmtty$2;continue;
          case 12:var fmtty$3=fmtty$0[2],fmtty$0=fmtty$3;continue;
          case 13:
           var rest$9=fmtty$0[3],ty=fmtty$0[2];
           return [8,ty,fmtty_of_fmt(rest$9)];
          case 14:
           var rest$10=fmtty$0[3],ty$0=fmtty$0[2];
           return [9,ty$0,ty$0,fmtty_of_fmt(rest$10)];
          case 15:var rest$11=fmtty$0[1];return [10,fmtty_of_fmt(rest$11)];
          case 16:var rest$12=fmtty$0[1];return [11,fmtty_of_fmt(rest$12)];
          case 17:var fmtty$4=fmtty$0[2],fmtty$0=fmtty$4;continue;
          case 18:
           var
            rest$13=fmtty$0[2],
            fmting_gen=fmtty$0[1],
            _r8_=fmtty_of_fmt(rest$13);
           if(0 === fmting_gen[0])
            var match=fmting_gen[1],fmt=match[1],_r9_=fmtty_of_fmt(fmt);
           else
            var
             match$0=fmting_gen[1],
             fmt$0=match$0[1],
             _r9_=fmtty_of_fmt(fmt$0);
           return concat_fmtty(_r9_,_r8_);
          case 19:var rest$14=fmtty$0[1];return [13,fmtty_of_fmt(rest$14)];
          case 20:var rest$15=fmtty$0[3];return [1,fmtty_of_fmt(rest$15)];
          case 21:var rest$16=fmtty$0[2];return [2,fmtty_of_fmt(rest$16)];
          case 22:var rest$17=fmtty$0[1];return [0,fmtty_of_fmt(rest$17)];
          case 23:
           var rest$18=fmtty$0[2],ign=fmtty$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:return [14,fmtty_of_fmt(rest$18)];
              default:var fmtty$0=rest$18;continue}
           else
            switch(ign[0])
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:var fmtty$0=rest$18;continue;
              case 3:var fmtty$0=rest$18;continue;
              case 4:var fmtty$0=rest$18;continue;
              case 5:var fmtty$0=rest$18;continue;
              case 6:var fmtty$0=rest$18;continue;
              case 7:var fmtty$0=rest$18;continue;
              case 8:var fmtty$0=rest$18;continue;
              case 9:
               var fmtty$5=ign[2];
               return concat_fmtty(fmtty$5,fmtty_of_fmt(rest$18));
              case 10:var fmtty$0=rest$18;continue;
              default:var fmtty$0=rest$18;continue}
          default:
           var rest$19=fmtty$0[3],arity=fmtty$0[1];
           return fmtty_of_custom(arity,fmtty_of_fmt(rest$19))}}
    function fmtty_of_precision_fmtty(prec,fmtty)
     {return typeof prec === "number"?0 === prec?fmtty:[2,fmtty]:fmtty}
    var
     Type_mismatch=
      [248,cst_CamlinternalFormat_Type_mi,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _r7_=match[2];
        if(typeof _r7_ !== "number" && 2 === _r7_[0])
         {var rest$0=_r7_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_format(fmt,fmtty)
     {var _r6_=type_format_gen(fmt,fmtty);
      if(typeof _r6_[2] === "number"){var fmt$0=_r6_[1];return fmt$0}
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _rB_=type_padding(pad,fmtty),
           _rC_=_rB_[2],
           _rD_=_rB_[1];
          if(typeof _rC_ !== "number" && 1 === _rC_[0])
           {var
             fmtty_rest$1=_rC_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_rD_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _rE_=type_padding(pad$0,fmtty),
           _rF_=_rE_[2],
           _rG_=_rE_[1];
          if(typeof _rF_ !== "number" && 1 === _rF_[0])
           {var
             fmtty_rest$2=_rF_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_rG_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _rH_=type_padprec(pad$1,prec,fmtty),
           _rI_=_rH_[3],
           _rJ_=_rH_[2],
           _rK_=_rH_[1];
          if(typeof _rI_ !== "number" && 2 === _rI_[0])
           {var
             fmtty_rest$3=_rI_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_rK_,_rJ_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _rL_=type_padprec(pad$2,prec$0,fmtty),
           _rM_=_rL_[3],
           _rN_=_rL_[2],
           _rO_=_rL_[1];
          if(typeof _rM_ !== "number" && 3 === _rM_[0])
           {var
             fmtty_rest$4=_rM_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_rO_,_rN_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _rP_=type_padprec(pad$3,prec$1,fmtty),
           _rQ_=_rP_[3],
           _rR_=_rP_[2],
           _rS_=_rP_[1];
          if(typeof _rQ_ !== "number" && 4 === _rQ_[0])
           {var
             fmtty_rest$5=_rQ_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_rS_,_rR_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _rT_=type_padprec(pad$4,prec$2,fmtty),
           _rU_=_rT_[3],
           _rV_=_rT_[2],
           _rW_=_rT_[1];
          if(typeof _rU_ !== "number" && 5 === _rU_[0])
           {var
             fmtty_rest$6=_rU_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_rW_,_rV_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _rX_=type_padprec(pad$5,prec$3,fmtty),
           _rY_=_rX_[3],
           _rZ_=_rX_[2],
           _r0_=_rX_[1];
          if(typeof _rY_ !== "number" && 6 === _rY_[0])
           {var
             fmtty_rest$7=_rY_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_r0_,_rZ_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           _r1_=type_padding(pad$6,fmtty),
           _r2_=_r1_[2],
           _r3_=_r1_[1];
          if(typeof _r2_ !== "number" && 7 === _r2_[0])
           {var
             fmtty_rest$8=_r2_[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,_r3_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _r4_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_r4_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _r5_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$27=_r5_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_r5_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substituti(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _rz_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_rz_))
             throw Type_mismatch;
            var _rA_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_rA_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function recast(fmt,fmtty){return type_format(fmt,erase_rel(symm(fmtty)))}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _ry_=2 === padty$0?48:32,res=make(width$0,_ry_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                if
                 (120
                  ===
                  caml_string_get(str,1)
                  ||
                  88
                  ===
                  caml_string_get(str,1))
                 switch$2 = 1;
                if(switch$2)
                 {var res$1=make(prec$0 + 2 | 0,48);
                  caml_bytes_set(res$1,1,caml_string_get(str,1));
                  blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                  return caml_string_of_bytes(res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var
       str$0=escaped$1(str),
       l=caml_ml_string_length(str$0),
       res=make(l + 2 | 0,34);
      caml_blit_string(str$0,0,res,1,l);
      return caml_string_of_bytes(res)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_rt_=caml_ml_string_length(s) - 1 | 0,_rs_=0;
        if(! (_rt_ < 0))
         {var i$0=_rs_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _rx_=i$0 + 1 | 0;
            if(_rt_ !== i$0){var i$0=_rx_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _rv_=caml_ml_string_length(s) - 1 | 0,
         _ru_=0;
        if(! (_rv_ < 0))
         {var i=_ru_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _rw_=i + 1 | 0;
            if(_rv_ !== i){var i=_rw_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _rr_=cst_d$3;break;
        case 2:var _rr_=cst_d$4;break;
        case 4:var _rr_=cst_i$1;break;
        case 5:var _rr_=cst_i$2;break;
        case 6:var _rr_=cst_x;break;
        case 7:var _rr_=cst_x$0;break;
        case 8:var _rr_=cst_X$0;break;
        case 9:var _rr_=cst_X$1;break;
        case 10:var _rr_=cst_o;break;
        case 11:var _rr_=cst_o$0;break;
        case 0:
        case 13:var _rr_=cst_d$2;break;
        case 3:
        case 14:var _rr_=cst_i$0;break;
        default:var _rr_=cst_u}
      return transform_int_alt(iconv,caml_format_int(_rr_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _rq_=cst_ld$0;break;
        case 2:var _rq_=cst_ld$1;break;
        case 4:var _rq_=cst_li$1;break;
        case 5:var _rq_=cst_li$2;break;
        case 6:var _rq_=cst_lx;break;
        case 7:var _rq_=cst_lx$0;break;
        case 8:var _rq_=cst_lX;break;
        case 9:var _rq_=cst_lX$0;break;
        case 10:var _rq_=cst_lo;break;
        case 11:var _rq_=cst_lo$0;break;
        case 0:
        case 13:var _rq_=cst_ld;break;
        case 3:
        case 14:var _rq_=cst_li$0;break;
        default:var _rq_=cst_lu}
      return transform_int_alt(iconv,caml_format_int(_rq_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _rp_=cst_nd$0;break;
        case 2:var _rp_=cst_nd$1;break;
        case 4:var _rp_=cst_ni$1;break;
        case 5:var _rp_=cst_ni$2;break;
        case 6:var _rp_=cst_nx;break;
        case 7:var _rp_=cst_nx$0;break;
        case 8:var _rp_=cst_nX;break;
        case 9:var _rp_=cst_nX$0;break;
        case 10:var _rp_=cst_no;break;
        case 11:var _rp_=cst_no$0;break;
        case 0:
        case 13:var _rp_=cst_nd;break;
        case 3:
        case 14:var _rp_=cst_ni$0;break;
        default:var _rp_=cst_nu}
      return transform_int_alt(iconv,caml_format_int(_rp_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _ro_=cst_Ld$0;break;
        case 2:var _ro_=cst_Ld$1;break;
        case 4:var _ro_=cst_Li$1;break;
        case 5:var _ro_=cst_Li$2;break;
        case 6:var _ro_=cst_Lx;break;
        case 7:var _ro_=cst_Lx$0;break;
        case 8:var _ro_=cst_LX;break;
        case 9:var _ro_=cst_LX$0;break;
        case 10:var _ro_=cst_Lo;break;
        case 11:var _ro_=cst_Lo$0;break;
        case 0:
        case 13:var _ro_=cst_Ld;break;
        case 3:
        case 14:var _ro_=cst_Li$0;break;
        default:var _ro_=cst_Lu}
      return transform_int_alt(iconv,caml_int64_format(_ro_,n))}
    function convert_float(fconv,prec$0,x)
     {if(6 <= fconv[2])
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        var str=runtime.caml_hexstring_of_float(x,prec$0,sign);
        return 7 <= fconv[2]?uppercase_ascii$1(str):str}
      var
       prec=abs(prec$0),
       symb=char_of_fconv(_ap_,fconv),
       buf=buffer_create(16);
      buffer_add_char(buf,37);
      bprint_fconv_flag(buf,fconv);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec));
      buffer_add_char(buf,symb);
      var str$0=caml_format_float(buffer_contents(buf),x);
      if(5 === fconv[2])
       {var
         len=caml_ml_string_length(str$0),
         match$0=runtime.caml_classify_float(x);
        if(3 === match$0)return x < 0.?cst_neg_infinity:cst_infinity;
        if(4 <= match$0)return cst_nan;
        var i=0;
        for(;;)
         {if(i === len)
           var _rn_=0;
          else
           {var match=caml_string_get(str$0,i),_rm_=match - 46 | 0,switch$0=0;
            if(23 < _rm_ >>> 0)
             {if(55 === _rm_)switch$0 = 1}
            else
             if(21 < (_rm_ - 1 | 0) >>> 0)switch$0 = 1;
            if(! switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            var _rn_=1}
          return _rn_?str$0:symbol(str$0,cst$28)}}
      return str$0}
    function string_of_fmtty(fmtty)
     {var buf=buffer_create(16);
      bprint_fmtty(buf,fmtty);
      return buffer_contents(buf)}
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _rj_=pad[2],_rk_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_rk_,_rj_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_rk_,_rj_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_rk_,_rj_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _rl_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_rl_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_rl_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_rl_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var
              str=escaped(c),
              l=caml_ml_string_length(str),
              res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _rg_=pad$5[2],_rh_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_rh_,_rg_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_rh_,_rg_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_rh_,_rg_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _ri_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_ri_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_ri_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_ri_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var
            rest$9=fmt$0[3],
            sub_fmtty=fmt$0[2],
            ty=string_of_fmtty(sub_fmtty);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_printf
                     (k$0,acc$0,concat_fmt(recast(fmt,fmtty),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _re_=fmt$0[1];
           if(0 === _re_[0])
            {var
              rest$13=fmt$0[2],
              match=_re_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_re_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_aq_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,cst_Printf_bad_conversion];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(cst_u$0,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return make_ignored_param$0(counter$1,k$0,acc$0,ign,rest$18)}
           return caml_trampoline_return
                   (make_ignored_param$0,[0,k$0,acc$0,ign,rest$18]);
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _rf_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_rf_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_rf_])}}
    function make_ignored_param$0(counter,k,acc,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return make_invalid_arg(counter$0,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return make_invalid_arg(counter$1,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:throw [0,Assert_failure,_ar_];
         default:
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return make_invalid_arg(counter$2,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(ign[0])
        {case 0:
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return make_invalid_arg(counter$3,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return make_invalid_arg(counter$4,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return make_invalid_arg(counter$5,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 3:
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return make_invalid_arg(counter$6,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 4:
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return make_invalid_arg(counter$7,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 5:
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return make_invalid_arg(counter$8,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 6:
          if(counter < 50)
           {var counter$9=counter + 1 | 0;
            return make_invalid_arg(counter$9,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 7:
          if(counter < 50)
           {var counter$10=counter + 1 | 0;
            return make_invalid_arg(counter$10,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 8:
          if(counter < 50)
           {var counter$11=counter + 1 | 0;
            return make_invalid_arg(counter$11,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 9:
          var fmtty=ign[2];
          if(counter < 50)
           {var counter$14=counter + 1 | 0;
            return make_from_fmtty$0(counter$14,k,acc,fmtty,fmt)}
          return caml_trampoline_return(make_from_fmtty$0,[0,k,acc,fmtty,fmt]);
         case 10:
          if(counter < 50)
           {var counter$12=counter + 1 | 0;
            return make_invalid_arg(counter$12,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         default:
          if(counter < 50)
           {var counter$13=counter + 1 | 0;
            return make_invalid_arg(counter$13,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_rd_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_as_];
         default:throw [0,Assert_failure,_at_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _rc_=[8,acc,cst_Printf_bad_conversion$0];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_rc_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_rc_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _rb_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_rb_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_rb_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_ignored_param(k,acc,ign,fmt)
     {return caml_trampoline(make_ignored_param$0(0,k,acc,ign,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function fn_of_padding_precision(k,o,fmt,pad,prec)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(0 === prec)
           {var _qJ_=make_iprintf(k,o,fmt);return function(_q1_){return _qJ_}}
          var _qK_=make_iprintf(k,o,fmt),_qL_=function(_q0_){return _qK_};
          return function(_qZ_){return _qL_}}
        var _qM_=make_iprintf(k,o,fmt);
        return function(_qY_){return _qM_}}
      else
       {if(0 === pad[0])
         {if(typeof prec === "number")
           {if(0 === prec)
             {var _qN_=make_iprintf(k,o,fmt);
              return function(_ra_){return _qN_}}
            var _qO_=make_iprintf(k,o,fmt),_qP_=function(_q$_){return _qO_};
            return function(_q__){return _qP_}}
          var _qQ_=make_iprintf(k,o,fmt);
          return function(_q9_){return _qQ_}}
        if(typeof prec === "number")
         {if(0 === prec)
           {var _qR_=make_iprintf(k,o,fmt),_qS_=function(_q8_){return _qR_};
            return function(_q7_){return _qS_}}
          var
           _qT_=make_iprintf(k,o,fmt),
           _qU_=function(_q6_){return _qT_},
           _qV_=function(_q5_){return _qU_};
          return function(_q4_){return _qV_}}
        var _qW_=make_iprintf(k,o,fmt),_qX_=function(_q3_){return _qW_};
        return function(_q2_){return _qX_}}}
    function make_iprintf$0(counter,k,o,fmt)
     {var k$0=k,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,o);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1],_p0_=make_iprintf(k$0,o,rest);
           return function(_qI_){return _p0_};
          case 1:
           var rest$0=fmt$0[1],_p1_=make_iprintf(k$0,o,rest$0);
           return function(_qH_){return _p1_};
          case 2:
           var _p2_=fmt$0[1];
           if(typeof _p2_ === "number")
            {var rest$1=fmt$0[2],_p3_=make_iprintf(k$0,o,rest$1);
             return function(_qD_){return _p3_}}
           else
            {if(0 === _p2_[0])
              {var rest$2=fmt$0[2],_p4_=make_iprintf(k$0,o,rest$2);
               return function(_qG_){return _p4_}}
             var
              rest$3=fmt$0[2],
              _p5_=make_iprintf(k$0,o,rest$3),
              _p6_=function(_qF_){return _p5_};
             return function(_qE_){return _p6_}}
          case 3:
           var _p7_=fmt$0[1];
           if(typeof _p7_ === "number")
            {var rest$4=fmt$0[2],_p8_=make_iprintf(k$0,o,rest$4);
             return function(_qz_){return _p8_}}
           else
            {if(0 === _p7_[0])
              {var rest$5=fmt$0[2],_p9_=make_iprintf(k$0,o,rest$5);
               return function(_qC_){return _p9_}}
             var
              rest$6=fmt$0[2],
              _p__=make_iprintf(k$0,o,rest$6),
              _p$_=function(_qB_){return _p__};
             return function(_qA_){return _p$_}}
          case 4:
           var rest$7=fmt$0[4],prec=fmt$0[3],pad=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$7,pad,prec);
          case 5:
           var rest$8=fmt$0[4],prec$0=fmt$0[3],pad$0=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$8,pad$0,prec$0);
          case 6:
           var rest$9=fmt$0[4],prec$1=fmt$0[3],pad$1=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$9,pad$1,prec$1);
          case 7:
           var rest$10=fmt$0[4],prec$2=fmt$0[3],pad$2=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$10,pad$2,prec$2);
          case 8:
           var rest$11=fmt$0[4],prec$3=fmt$0[3],pad$3=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$11,pad$3,prec$3);
          case 9:
           var _qa_=fmt$0[1];
           if(typeof _qa_ === "number")
            {var rest$12=fmt$0[2],_qb_=make_iprintf(k$0,o,rest$12);
             return function(_qv_){return _qb_}}
           else
            {if(0 === _qa_[0])
              {var rest$13=fmt$0[2],_qc_=make_iprintf(k$0,o,rest$13);
               return function(_qy_){return _qc_}}
             var
              rest$14=fmt$0[2],
              _qd_=make_iprintf(k$0,o,rest$14),
              _qe_=function(_qx_){return _qd_};
             return function(_qw_){return _qe_}}
          case 10:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 11:var fmt$2=fmt$0[2],fmt$0=fmt$2;continue;
          case 12:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 13:
           var rest$15=fmt$0[3],_qf_=make_iprintf(k$0,o,rest$15);
           return function(_qu_){return _qf_};
          case 14:
           var rest$16=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_iprintf(k$0,o,concat_fmt(recast(fmt,fmtty),rest$16))};
          case 15:
           var
            rest$17=fmt$0[1],
            _qg_=make_iprintf(k$0,o,rest$17),
            _qh_=function(_qt_){return _qg_};
           return function(_qs_){return _qh_};
          case 16:
           var rest$18=fmt$0[1],_qi_=make_iprintf(k$0,o,rest$18);
           return function(_qr_){return _qi_};
          case 17:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 18:
           var _qj_=fmt$0[1];
           if(0 === _qj_[0])
            {var
              rest$19=fmt$0[2],
              match=_qj_[1],
              fmt$5=match[1],
              k$3=
               function(k,rest)
                {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
              k$1=k$3(k$0,rest$19),
              k$0=k$1,
              fmt$0=fmt$5;
             continue}
           var
            rest$20=fmt$0[2],
            match$0=_qj_[1],
            fmt$6=match$0[1],
            k$4=
             function(k,rest)
              {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
            k$2=k$4(k$0,rest$20),
            k$0=k$2,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_au_];
          case 20:
           var rest$21=fmt$0[3],_qk_=make_iprintf(k$0,o,rest$21);
           return function(_qq_){return _qk_};
          case 21:
           var rest$22=fmt$0[2],_ql_=make_iprintf(k$0,o,rest$22);
           return function(_qp_){return _ql_};
          case 22:
           var rest$23=fmt$0[1],_qm_=make_iprintf(k$0,o,rest$23);
           return function(_qo_){return _qm_};
          case 23:
           var rest$24=fmt$0[2],ign=fmt$0[1],_qn_=0;
           return make_ignored_param
                   (function(param){return caml_call1(k$0,o)},_qn_,ign,rest$24);
          default:
           var rest$25=fmt$0[3],arity=fmt$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return fn_of_custom_arity$0(counter$0,k$0,o,rest$25,arity)}
           return caml_trampoline_return
                   (fn_of_custom_arity$0,[0,k$0,o,rest$25,arity])}}
    function fn_of_custom_arity$0(counter,k,o,fmt,param)
     {if(param)
       {var arity=param[1],_pY_=fn_of_custom_arity(k,o,fmt,arity);
        return function(_pZ_){return _pY_}}
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_iprintf$0(counter$0,k,o,fmt)}
      return caml_trampoline_return(make_iprintf$0,[0,k,o,fmt])}
    function make_iprintf(k,o,fmt)
     {return caml_trampoline(make_iprintf$0(0,k,o,fmt))}
    function fn_of_custom_arity(k,o,fmt,param)
     {return caml_trampoline(fn_of_custom_arity$0(0,k,o,fmt,param))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _pW_=acc$0[2],_pX_=acc$0[1];
           if(0 === _pW_[0])
            {var acc$1=_pW_[1];
             output_acc(o,_pX_);
             output_string(o,cst$29);
             var acc$0=acc$1;
             continue}
           var acc$2=_pW_[1];
           output_acc(o,_pX_);
           output_string(o,cst$30);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function bufput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           bufput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _pU_=acc$0[2],_pV_=acc$0[1];
           if(0 === _pU_[0])
            {var acc$1=_pU_[1];
             bufput_acc(b,_pV_);
             add_string(b,cst$31);
             var acc$0=acc$1;
             continue}
           var acc$2=_pU_[1];
           bufput_acc(b,_pV_);
           add_string(b,cst$32);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           bufput_acc(b,p$2);
           return caml_call1(f,b);
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           bufput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           bufput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];bufput_acc(b,p$1);return add_char(b,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _pS_=acc$0[2],_pT_=acc$0[1];
           if(0 === _pS_[0])
            {var acc$1=_pS_[1];
             strput_acc(b,_pT_);
             add_string(b,cst$33);
             var acc$0=acc$1;
             continue}
           var acc$2=_pS_[1];
           strput_acc(b,_pT_);
           add_string(b,cst$34);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function failwith_message(param)
     {var fmt=param[1],buf=create$2(256);
      function k(acc){strput_acc(buf,acc);return failwith(contents(buf))}
      return make_printf(k,0,fmt)}
    function open_box_of_string(str)
     {if(caml_string_equal(str,cst$35))return _av_;
      var len=caml_ml_string_length(str);
      function invalid_box(param)
       {return caml_call1(failwith_message(_aw_),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match && 32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switcher=match - 97 | 0;
          if(25 < switcher >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switch$0=0;
          if(48 <= match)
           {if(! (58 <= match))switch$0 = 1}
          else
           if(45 === match)switch$0 = 1;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=sub$0(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _pQ_=caml_int_of_string(sub$0(str,nstart,nend - nstart | 0)),
          indent=_pQ_}
       catch(_pR_)
        {_pR_ = caml_wrap_exception(_pR_);
         if(_pR_[1] !== Failure)throw _pR_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      var switch$0=0;
      if
       (caml_string_notequal(box_name,cst$36)
        &&
        caml_string_notequal(box_name,cst_b$0))
       var
        box_type=
         caml_string_notequal(box_name,cst_h)
          ?caml_string_notequal(box_name,cst_hov)
            ?caml_string_notequal(box_name,cst_hv)
              ?caml_string_notequal(box_name,cst_v)?invalid_box(0):1
              :2
            :3
          :0;
      else
       switch$0 = 1;
      if(switch$0)var box_type=4;
      return [0,indent,box_type]}
    function make_padding_fmt_ebb(pad,fmt)
     {if(typeof pad === "number")
       return [0,0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],fmt]}}
    function make_padprec_fmt_ebb(pad,prec,fmt)
     {if(typeof prec === "number")
       var match=0 === prec?[0,0,fmt]:[0,1,fmt];
      else
       var p=prec[1],match=[0,[0,p],fmt];
      var prec$0=match[1];
      if(typeof pad === "number")
       return [0,0,prec$0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],prec$0,fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],prec$0,fmt]}}
    function fmt_ebb_of_string(legacy_behavior,str)
     {if(legacy_behavior)
       var flag=legacy_behavior[1],legacy_behavior$0=flag;
      else
       var legacy_behavior$0=1;
      function invalid_format_message(str_ind,msg)
       {return caml_call3(failwith_message(_ax_),str,str_ind,msg)}
      function unexpected_end_of_format(end_ind)
       {return invalid_format_message(end_ind,cst_unexpected_end_of_format)}
      function invalid_format_without(str_ind,c,s)
       {return caml_call4(failwith_message(_ay_),str,str_ind,c,s)}
      function expected_character(str_ind,expected,read)
       {return caml_call4(failwith_message(_az_),str,str_ind,expected,read)}
      function add_literal(lit_start,str_ind,fmt)
       {var size=str_ind - lit_start | 0;
        return 0 === size
                ?[0,fmt]
                :1 === size
                  ?[0,[12,caml_string_get(str,lit_start),fmt]]
                  :[0,[11,sub$0(str,lit_start,size),fmt]]}
      function parse(lit_start,end_ind)
       {var str_ind=lit_start;
        for(;;)
         {if(str_ind === end_ind)return add_literal(lit_start,str_ind,0);
          var match=caml_string_get(str,str_ind);
          if(37 === match)
           {var str_ind$2=str_ind + 1 | 0;
            if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
            var
             match$1=caml_string_get(str,str_ind$2),
             _pP_=
              95 === match$1
               ?parse_flags(str_ind,str_ind$2 + 1 | 0,end_ind,1)
               :parse_flags(str_ind,str_ind$2,end_ind,0),
             fmt_rest=_pP_[1];
            return add_literal(lit_start,str_ind,fmt_rest)}
          if(64 === match)
           {var str_ind$0=str_ind + 1 | 0;
            if(str_ind$0 === end_ind)
             var match$0=_aL_;
            else
             {var c=caml_string_get(str,str_ind$0),switch$0=0;
              if(65 <= c)
               if(94 <= c)
                {var switcher=c - 123 | 0;
                 if(2 < switcher >>> 0)
                  switch$0 = 1;
                 else
                  switch(switcher)
                   {case 0:
                     var match$0=parse_tag(1,str_ind$0 + 1 | 0,end_ind);break;
                    case 1:switch$0 = 1;break;
                    default:
                     var
                      match$3=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$2=match$3[1],
                      match$0=[0,[17,1,fmt_rest$2]]}}
               else
                if(91 <= c)
                 {var switcher$0=c - 91 | 0;
                  switch(switcher$0)
                   {case 0:
                     var match$0=parse_tag(0,str_ind$0 + 1 | 0,end_ind);break;
                    case 1:switch$0 = 1;break;
                    default:
                     var
                      match$4=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$3=match$4[1],
                      match$0=[0,[17,0,fmt_rest$3]]}}
                else
                 switch$0 = 1;
              else
               if(10 === c)
                var
                 match$5=parse(str_ind$0 + 1 | 0,end_ind),
                 fmt_rest$4=match$5[1],
                 match$0=[0,[17,3,fmt_rest$4]];
               else
                if(32 <= c)
                 {var switcher$1=c - 32 | 0;
                  switch(switcher$1)
                   {case 0:
                     var
                      match$6=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$5=match$6[1],
                      match$0=[0,[17,_aM_,fmt_rest$5]];
                     break;
                    case 5:
                     var switch$1=0;
                     if
                      ((str_ind$0 + 1 | 0)
                       <
                       end_ind
                       &&
                       37
                       ===
                       caml_string_get(str,str_ind$0 + 1 | 0))
                      {var
                        match$7=parse(str_ind$0 + 2 | 0,end_ind),
                        fmt_rest$6=match$7[1],
                        match$0=[0,[17,6,fmt_rest$6]];
                       switch$1 = 1}
                     if(! switch$1)
                      var
                       match$8=parse(str_ind$0,end_ind),
                       fmt_rest$7=match$8[1],
                       match$0=[0,[12,64,fmt_rest$7]];
                     break;
                    case 12:
                     var
                      match$9=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$8=match$9[1],
                      match$0=[0,[17,_aN_,fmt_rest$8]];
                     break;
                    case 14:
                     var
                      match$10=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$9=match$10[1],
                      match$0=[0,[17,4,fmt_rest$9]];
                     break;
                    case 27:
                     var match$0=parse_good_break(str_ind$0 + 1 | 0,end_ind);
                     break;
                    case 28:
                     var match$0=parse_magic_size(str_ind$0 + 1 | 0,end_ind);
                     break;
                    case 31:
                     var
                      match$11=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$10=match$11[1],
                      match$0=[0,[17,2,fmt_rest$10]];
                     break;
                    case 32:
                     var
                      match$12=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$11=match$12[1],
                      match$0=[0,[17,5,fmt_rest$11]];
                     break;
                    default:switch$0 = 1}}
                else
                 switch$0 = 1;
              if(switch$0)
               var
                match$2=parse(str_ind$0 + 1 | 0,end_ind),
                fmt_rest$1=match$2[1],
                match$0=[0,[17,[2,c],fmt_rest$1]]}
            var fmt_rest$0=match$0[1];
            return add_literal(lit_start,str_ind,fmt_rest$0)}
          var str_ind$1=str_ind + 1 | 0,str_ind=str_ind$1;
          continue}}
      function parse_conversion
       (pct_ind,str_ind,end_ind,plus,hash,space,ign,pad,prec,padprec,symb)
       {var
         plus_used=[0,0],
         hash_used=[0,0],
         space_used=[0,0],
         ign_used=[0,0],
         pad_used=[0,0],
         prec_used=[0,0];
        function get_plus(param){plus_used[1] = 1;return plus}
        function get_hash(param){hash_used[1] = 1;return hash}
        function get_space(param){space_used[1] = 1;return space}
        function get_ign(param){ign_used[1] = 1;return ign}
        function get_pad(param){pad_used[1] = 1;return pad}
        function get_prec(param){prec_used[1] = 1;return prec}
        function get_padprec(param){pad_used[1] = 1;return padprec}
        function get_int_pad(param)
         {var pad=get_pad(0),match=get_prec(0);
          if(typeof match === "number" && 0 === match)return pad;
          if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var n=pad[2];
                return legacy_behavior$0
                        ?[0,1,n]
                        :incompatible_flag(pct_ind,str_ind,48,cst_precision$0)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_aF_
                      :incompatible_flag(pct_ind,str_ind,48,cst_precision$1)
                    :pad}}
        function check_no_0(symb,pad)
         {if(typeof pad === "number")
           return pad;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var width=pad[2];
                return legacy_behavior$0
                        ?[0,1,width]
                        :incompatible_flag(pct_ind,str_ind,symb,cst_0$0)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_aG_
                      :incompatible_flag(pct_ind,str_ind,symb,cst_0$1)
                    :pad}}
        function opt_of_pad(c,pad)
         {if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             switch(pad[1])
              {case 0:
                var width=pad[2];
                return legacy_behavior$0
                        ?[0,width]
                        :incompatible_flag(pct_ind,str_ind,c,cst$37);
               case 1:var width$0=pad[2];return [0,width$0];
               default:
                var width$1=pad[2];
                return legacy_behavior$0
                        ?[0,width$1]
                        :incompatible_flag(pct_ind,str_ind,c,cst_0$2)}
            return incompatible_flag(pct_ind,str_ind,c,cst$38)}}
        function get_pad_opt(c){return opt_of_pad(c,get_pad(0))}
        function get_padprec_opt(c){return opt_of_pad(c,get_padprec(0))}
        var switch$0=0;
        if(124 <= symb)
         switch$0 = 1;
        else
         switch(symb)
          {case 33:
            var
             match$6=parse(str_ind,end_ind),
             fmt_rest$5=match$6[1],
             fmt_result=[0,[10,fmt_rest$5]];
            break;
           case 40:
            var
             sub_end=search_subformat_end(str_ind,end_ind,41),
             match$8=parse(sub_end + 2 | 0,end_ind),
             fmt_rest$7=match$8[1],
             match$9=parse(str_ind,sub_end),
             sub_fmt=match$9[1],
             sub_fmtty=fmtty_of_fmt(sub_fmt);
            if(get_ign(0))
             var
              ignored$2=[9,get_pad_opt(95),sub_fmtty],
              _pm_=[0,[23,ignored$2,fmt_rest$7]];
            else
             var _pm_=[0,[14,get_pad_opt(40),sub_fmtty,fmt_rest$7]];
            var fmt_result=_pm_;
            break;
           case 44:var fmt_result=parse(str_ind,end_ind);break;
           case 67:
            var
             match$12=parse(str_ind,end_ind),
             fmt_rest$10=match$12[1],
             _po_=get_ign(0)?[0,[23,1,fmt_rest$10]]:[0,[1,fmt_rest$10]],
             fmt_result=_po_;
            break;
           case 78:
            var
             match$16=parse(str_ind,end_ind),
             fmt_rest$14=match$16[1],
             counter$0=2;
            if(get_ign(0))
             var ignored$6=[11,counter$0],_pu_=[0,[23,ignored$6,fmt_rest$14]];
            else
             var _pu_=[0,[21,counter$0,fmt_rest$14]];
            var fmt_result=_pu_;
            break;
           case 83:
            var
             pad$6=check_no_0(symb,get_padprec(0)),
             match$17=parse(str_ind,end_ind),
             fmt_rest$15=match$17[1];
            if(get_ign(0))
             var
              ignored$7=[1,get_padprec_opt(95)],
              _pv_=[0,[23,ignored$7,fmt_rest$15]];
            else
             var
              match$18=make_padding_fmt_ebb(pad$6,fmt_rest$15),
              fmt_rest$16=match$18[2],
              pad$7=match$18[1],
              _pv_=[0,[3,pad$7,fmt_rest$16]];
            var fmt_result=_pv_;
            break;
           case 91:
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var
             char_set=create_char_set(0),
             add_char=function(c){return add_in_char_set(char_set,c)},
             add_range=
              function(c$0,c)
               {if(! (c < c$0))
                 {var i=c$0;
                  for(;;)
                   {add_in_char_set(char_set,char_of_int(i));
                    var _pO_=i + 1 | 0;
                    if(c !== i){var i=_pO_;continue}
                    break}}
                return 0},
             fail_single_percent=
              function(str_ind)
               {return caml_call2(failwith_message(_aP_),str,str_ind)},
             parse_char_set_content=
              function(counter,str_ind,end_ind)
               {var str_ind$0=str_ind;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c=caml_string_get(str,str_ind$0);
                  if(45 === c)
                   {add_char(45);
                    var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
                    continue}
                  if(93 === c)return str_ind$0 + 1 | 0;
                  var _pN_=str_ind$0 + 1 | 0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return parse_char_set_after_char$0(counter$0,_pN_,end_ind,c)}
                  return caml_trampoline_return
                          (parse_char_set_after_char$0,[0,_pN_,end_ind,c])}},
             parse_char_set_after_char$0=
              function(counter,str_ind,end_ind,c)
               {var str_ind$0=str_ind,c$0=c;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c$1=caml_string_get(str,str_ind$0),switch$0=0;
                  if(46 <= c$1)
                   {if(64 === c$1)
                     switch$0 = 1;
                    else
                     if(93 === c$1){add_char(c$0);return str_ind$0 + 1 | 0}}
                  else
                   if(37 === c$1)
                    switch$0 = 1;
                   else
                    if(45 <= c$1)
                     {var str_ind$2=str_ind$0 + 1 | 0;
                      if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
                      var c$2=caml_string_get(str,str_ind$2);
                      if(37 === c$2)
                       {if((str_ind$2 + 1 | 0) === end_ind)
                         unexpected_end_of_format(end_ind);
                        var c$3=caml_string_get(str,str_ind$2 + 1 | 0);
                        if(37 !== c$3 && 64 !== c$3)
                         return fail_single_percent(str_ind$2);
                        add_range(c$0,c$3);
                        var _pL_=str_ind$2 + 2 | 0;
                        if(counter < 50)
                         {var counter$2=counter + 1 | 0;
                          return parse_char_set_content(counter$2,_pL_,end_ind)}
                        return caml_trampoline_return
                                (parse_char_set_content,[0,_pL_,end_ind])}
                      if(93 === c$2)
                       {add_char(c$0);add_char(45);return str_ind$2 + 1 | 0}
                      add_range(c$0,c$2);
                      var _pM_=str_ind$2 + 1 | 0;
                      if(counter < 50)
                       {var counter$1=counter + 1 | 0;
                        return parse_char_set_content(counter$1,_pM_,end_ind)}
                      return caml_trampoline_return
                              (parse_char_set_content,[0,_pM_,end_ind])}
                  if(switch$0 && 37 === c$0)
                   {add_char(c$1);
                    var _pK_=str_ind$0 + 1 | 0;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return parse_char_set_content(counter$0,_pK_,end_ind)}
                    return caml_trampoline_return
                            (parse_char_set_content,[0,_pK_,end_ind])}
                  if(37 === c$0)fail_single_percent(str_ind$0);
                  add_char(c$0);
                  var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,c$0=c$1;
                  continue}},
             parse_char_set_after_char=
              function(str_ind,end_ind,c)
               {return caml_trampoline
                        (parse_char_set_after_char$0(0,str_ind,end_ind,c))};
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var match$31=caml_string_get(str,str_ind);
            if(94 === match$31)
             var str_ind$0=str_ind + 1 | 0,str_ind$1=str_ind$0,reverse=1;
            else
             var str_ind$1=str_ind,reverse=0;
            if(str_ind$1 === end_ind)unexpected_end_of_format(end_ind);
            var
             c=caml_string_get(str,str_ind$1),
             next_ind=parse_char_set_after_char(str_ind$1 + 1 | 0,end_ind,c),
             char_set$0=freeze_char_set(char_set),
             char_set$1=reverse?rev_char_set(char_set$0):char_set$0,
             match$21=parse(next_ind,end_ind),
             fmt_rest$19=match$21[1];
            if(get_ign(0))
             var
              ignored$9=[10,get_pad_opt(95),char_set$1],
              _pA_=[0,[23,ignored$9,fmt_rest$19]];
            else
             var _pA_=[0,[20,get_pad_opt(91),char_set$1,fmt_rest$19]];
            var fmt_result=_pA_;
            break;
           case 97:
            var
             match$22=parse(str_ind,end_ind),
             fmt_rest$20=match$22[1],
             fmt_result=[0,[15,fmt_rest$20]];
            break;
           case 99:
            var
             char_format=
              function(fmt_rest)
               {return get_ign(0)?[0,[23,0,fmt_rest]]:[0,[0,fmt_rest]]},
             match$23=parse(str_ind,end_ind),
             fmt_rest$21=match$23[1],
             match$24=get_pad_opt(99);
            if(match$24)
             {if(0 === match$24[1])
               var
                _pB_=get_ign(0)?[0,[23,3,fmt_rest$21]]:[0,[22,fmt_rest$21]],
                _pC_=_pB_;
              else
               var
                _pC_=
                 legacy_behavior$0
                  ?char_format(fmt_rest$21)
                  :invalid_format_message
                    (str_ind,cst_non_zero_widths_are_unsupp);
              var _pD_=_pC_}
            else
             var _pD_=char_format(fmt_rest$21);
            var fmt_result=_pD_;
            break;
           case 114:
            var
             match$25=parse(str_ind,end_ind),
             fmt_rest$22=match$25[1],
             _pE_=get_ign(0)?[0,[23,2,fmt_rest$22]]:[0,[19,fmt_rest$22]],
             fmt_result=_pE_;
            break;
           case 115:
            var
             pad$9=check_no_0(symb,get_padprec(0)),
             match$26=parse(str_ind,end_ind),
             fmt_rest$23=match$26[1];
            if(get_ign(0))
             var
              ignored$10=[0,get_padprec_opt(95)],
              _pF_=[0,[23,ignored$10,fmt_rest$23]];
            else
             var
              match$27=make_padding_fmt_ebb(pad$9,fmt_rest$23),
              fmt_rest$24=match$27[2],
              pad$10=match$27[1],
              _pF_=[0,[2,pad$10,fmt_rest$24]];
            var fmt_result=_pF_;
            break;
           case 116:
            var
             match$28=parse(str_ind,end_ind),
             fmt_rest$25=match$28[1],
             fmt_result=[0,[16,fmt_rest$25]];
            break;
           case 123:
            var
             sub_end$0=search_subformat_end(str_ind,end_ind,125),
             match$29=parse(str_ind,sub_end$0),
             sub_fmt$0=match$29[1],
             match$30=parse(sub_end$0 + 2 | 0,end_ind),
             fmt_rest$26=match$30[1],
             sub_fmtty$0=fmtty_of_fmt(sub_fmt$0);
            if(get_ign(0))
             var
              ignored$11=[8,get_pad_opt(95),sub_fmtty$0],
              _pG_=[0,[23,ignored$11,fmt_rest$26]];
            else
             var _pG_=[0,[13,get_pad_opt(123),sub_fmtty$0,fmt_rest$26]];
            var fmt_result=_pG_;
            break;
           case 66:
           case 98:
            var
             pad$3=check_no_0(symb,get_padprec(0)),
             match$10=parse(str_ind,end_ind),
             fmt_rest$8=match$10[1];
            if(get_ign(0))
             var
              ignored$3=[7,get_padprec_opt(95)],
              _pn_=[0,[23,ignored$3,fmt_rest$8]];
            else
             var
              match$11=make_padding_fmt_ebb(pad$3,fmt_rest$8),
              fmt_rest$9=match$11[2],
              pad$4=match$11[1],
              _pn_=[0,[9,pad$4,fmt_rest$9]];
            var fmt_result=_pn_;
            break;
           case 37:
           case 64:
            var
             match$7=parse(str_ind,end_ind),
             fmt_rest$6=match$7[1],
             fmt_result=[0,[12,symb,fmt_rest$6]];
            break;
           case 76:
           case 108:
           case 110:
            var switch$1=0;
            if(str_ind !== end_ind)
             {var
               symb$0=caml_string_get(str,str_ind),
               _pH_=symb$0 - 88 | 0,
               switch$2=0;
              if(! (32 < _pH_ >>> 0))
               switch(_pH_)
                {case 0:
                 case 12:
                 case 17:
                 case 23:
                 case 29:
                 case 32:var _pt_=1;switch$2 = 1;break
                 }
              if(! switch$2)var _pt_=0;
              if(_pt_){switch$0 = 1;switch$1 = 1}}
            if(! switch$1)
             {var
               match$15=parse(str_ind,end_ind),
               fmt_rest$13=match$15[1],
               switch$3=0;
              if(108 <= symb)
               {if(! (111 <= symb))
                 {var switcher$0=symb - 108 | 0;
                  switch(switcher$0)
                   {case 0:var counter=0;switch$3 = 1;break;
                    case 1:break;
                    default:var counter=1;switch$3 = 1}}}
              else
               if(76 === symb){var counter=2;switch$3 = 1}
              if(! switch$3)throw [0,Assert_failure,_aT_];
              if(get_ign(0))
               var ignored$5=[11,counter],_ps_=[0,[23,ignored$5,fmt_rest$13]];
              else
               var _ps_=[0,[21,counter,fmt_rest$13]];
              var fmt_result=_ps_}
            break;
           case 32:
           case 35:
           case 43:
           case 45:
           case 95:
            var
             fmt_result=
              caml_call3(failwith_message(_aK_),str,pct_ind,symb);
            break;
           case 88:
           case 100:
           case 105:
           case 111:
           case 117:
           case 120:
            var
             _pw_=get_space(0),
             _px_=get_hash(0),
             iconv$2=
              compute_int_conv(pct_ind,str_ind,get_plus(0),_px_,_pw_,symb),
             match$19=parse(str_ind,end_ind),
             fmt_rest$17=match$19[1];
            if(get_ign(0))
             var
              ignored$8=[2,iconv$2,get_pad_opt(95)],
              _py_=[0,[23,ignored$8,fmt_rest$17]];
            else
             var
              _pz_=get_prec(0),
              match$20=make_padprec_fmt_ebb(get_int_pad(0),_pz_,fmt_rest$17),
              fmt_rest$18=match$20[3],
              prec$4=match$20[2],
              pad$8=match$20[1],
              _py_=[0,[4,iconv$2,pad$8,prec$4,fmt_rest$18]];
            var fmt_result=_py_;
            break;
           case 69:
           case 70:
           case 71:
           case 72:
           case 101:
           case 102:
           case 103:
           case 104:
            var
             space$1=get_space(0),
             plus$2=get_plus(0),
             flag=
              0 === plus$2
               ?0 === space$1?0:2
               :0 === space$1
                 ?1
                 :legacy_behavior$0
                   ?1
                   :incompatible_flag(pct_ind,str_ind,32,cst$49),
             switch$4=0;
            if(73 <= symb)
             {var switcher$1=symb - 101 | 0;
              if(! (3 < switcher$1 >>> 0))
               {switch(switcher$1)
                 {case 0:var _pI_=1;break;
                  case 1:var _pI_=0;break;
                  case 2:var _pI_=3;break;
                  default:var _pI_=6}
                var kind=_pI_;
                switch$4 = 1}}
            else
             if(69 <= symb)
              {var switcher$2=symb - 69 | 0;
               switch(switcher$2)
                {case 0:var _pJ_=2;break;
                 case 1:var _pJ_=5;break;
                 case 2:var _pJ_=4;break;
                 default:var _pJ_=7}
               var kind=_pJ_;
               switch$4 = 1}
            if(! switch$4)throw [0,Assert_failure,_aV_];
            var
             fconv=[0,flag,kind],
             match$13=parse(str_ind,end_ind),
             fmt_rest$11=match$13[1];
            if(get_ign(0))
             {var match=get_prec(0);
              if(typeof match === "number")
               var
                _pp_=
                 0 === match?0:incompatible_flag(pct_ind,str_ind,95,cst$39);
              else
               var ndec=match[1],_pp_=[0,ndec];
              var
               ignored$4=[6,get_pad_opt(95),_pp_],
               _pq_=[0,[23,ignored$4,fmt_rest$11]]}
            else
             var
              _pr_=get_prec(0),
              match$14=make_padprec_fmt_ebb(get_pad(0),_pr_,fmt_rest$11),
              fmt_rest$12=match$14[3],
              prec$3=match$14[2],
              pad$5=match$14[1],
              _pq_=[0,[8,fconv,pad$5,prec$3,fmt_rest$12]];
            var fmt_result=_pq_;
            break;
           default:switch$0 = 1}
        if(switch$0)
         {var switch$5=0;
          if(108 <= symb)
           if(111 <= symb)
            switch$5 = 1;
           else
            {var switcher=symb - 108 | 0,switch$6=0;
             switch(switcher)
              {case 0:
                var
                 _o8_=caml_string_get(str,str_ind),
                 _o9_=get_space(0),
                 _o__=get_hash(0),
                 iconv=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_o__,_o9_,_o8_),
                 match$0=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest=match$0[1];
                if(get_ign(0))
                 var
                  ignored=[3,iconv,get_pad_opt(95)],
                  _o$_=[0,[23,ignored,fmt_rest]];
                else
                 var
                  _pb_=get_prec(0),
                  match$1=make_padprec_fmt_ebb(get_int_pad(0),_pb_,fmt_rest),
                  fmt_rest$0=match$1[3],
                  prec$0=match$1[2],
                  pad$0=match$1[1],
                  _o$_=[0,[5,iconv,pad$0,prec$0,fmt_rest$0]];
                var _pa_=_o$_;
                break;
               case 1:switch$5 = 1;switch$6 = 1;break;
               default:
                var
                 _pc_=caml_string_get(str,str_ind),
                 _pd_=get_space(0),
                 _pe_=get_hash(0),
                 iconv$0=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_pe_,_pd_,_pc_),
                 match$2=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest$1=match$2[1];
                if(get_ign(0))
                 var
                  ignored$0=[4,iconv$0,get_pad_opt(95)],
                  _pf_=[0,[23,ignored$0,fmt_rest$1]];
                else
                 var
                  _pg_=get_prec(0),
                  match$3=make_padprec_fmt_ebb(get_int_pad(0),_pg_,fmt_rest$1),
                  fmt_rest$2=match$3[3],
                  prec$1=match$3[2],
                  pad$1=match$3[1],
                  _pf_=[0,[6,iconv$0,pad$1,prec$1,fmt_rest$2]];
                var _pa_=_pf_}
             if(! switch$6)var fmt_result=_pa_}
          else
           if(76 === symb)
            {var
              _ph_=caml_string_get(str,str_ind),
              _pi_=get_space(0),
              _pj_=get_hash(0),
              iconv$1=
               compute_int_conv
                (pct_ind,str_ind + 1 | 0,get_plus(0),_pj_,_pi_,_ph_),
              match$4=parse(str_ind + 1 | 0,end_ind),
              fmt_rest$3=match$4[1];
             if(get_ign(0))
              var
               ignored$1=[5,iconv$1,get_pad_opt(95)],
               _pk_=[0,[23,ignored$1,fmt_rest$3]];
             else
              var
               _pl_=get_prec(0),
               match$5=make_padprec_fmt_ebb(get_int_pad(0),_pl_,fmt_rest$3),
               fmt_rest$4=match$5[3],
               prec$2=match$5[2],
               pad$2=match$5[1],
               _pk_=[0,[7,iconv$1,pad$2,prec$2,fmt_rest$4]];
             var fmt_result=_pk_}
           else
            switch$5 = 1;
          if(switch$5)
           var
            fmt_result=
             caml_call3(failwith_message(_aH_),str,str_ind - 1 | 0,symb)}
        if(1 - legacy_behavior$0)
         {var _oZ_=1 - plus_used[1],plus$0=_oZ_?plus:_oZ_;
          if(plus$0)incompatible_flag(pct_ind,str_ind,symb,cst$40);
          var _o0_=1 - hash_used[1],hash$0=_o0_?hash:_o0_;
          if(hash$0)incompatible_flag(pct_ind,str_ind,symb,cst$41);
          var _o1_=1 - space_used[1],space$0=_o1_?space:_o1_;
          if(space$0)incompatible_flag(pct_ind,str_ind,symb,cst$42);
          var _o2_=1 - pad_used[1],_o3_=_o2_?caml_notequal([0,pad],_aI_):_o2_;
          if(_o3_)incompatible_flag(pct_ind,str_ind,symb,cst_padding$0);
          var
           _o4_=1 - prec_used[1],
           _o5_=_o4_?caml_notequal([0,prec],_aJ_):_o4_;
          if(_o5_)
           {var _o6_=ign?95:symb;
            incompatible_flag(pct_ind,str_ind,_o6_,cst_precision$2)}
          var plus$1=ign?plus:ign;
          if(plus$1)incompatible_flag(pct_ind,str_ind,95,cst$43)}
        var _o7_=1 - ign_used[1],ign$0=_o7_?ign:_o7_;
        if(ign$0)
         {var switch$7=0;
          if(38 <= symb)
           {if(44 !== symb && 64 !== symb)switch$7 = 1}
          else
           if(33 !== symb && ! (37 <= symb))switch$7 = 1;
          var switch$8=0;
          if(switch$7 || ! legacy_behavior$0)switch$8 = 1;
          if(switch$8)incompatible_flag(pct_ind,str_ind,symb,cst$44)}
        return fmt_result}
      function parse_after_precision
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad,match)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        function parse_conv(padprec)
         {return parse_conversion
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   match,
                   padprec,
                   caml_string_get(str,str_ind))}
        if(typeof pad === "number")
         {if(typeof match === "number" && 0 === match)return parse_conv(0);
          if(0 === minus)
           {if(typeof match === "number")return parse_conv(_aD_);
            var n=match[1];
            return parse_conv([0,1,n])}
          if(typeof match === "number")return parse_conv(_aE_);
          var n$0=match[1];
          return parse_conv([0,0,n$0])}
        return parse_conv(pad)}
      function parse_after_padding
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var symb=caml_string_get(str,str_ind);
        if(46 === symb)
         {var str_ind$0=str_ind + 1 | 0;
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           parse_literal=
            function(minus,str_ind)
             {var
               match=parse_positive(str_ind,end_ind,0),
               prec=match[2],
               new_ind=match[1];
              return parse_after_precision
                      (pct_ind,
                       new_ind,
                       end_ind,
                       minus,
                       plus,
                       hash,
                       space,
                       ign,
                       pad,
                       [0,prec])},
           symb$0=caml_string_get(str,str_ind$0);
          if(48 <= symb$0)
           {if(! (58 <= symb$0))return parse_literal(minus,str_ind$0)}
          else
           if(42 <= symb$0)
            {var switcher=symb$0 - 42 | 0;
             switch(switcher)
              {case 0:
                return parse_after_precision
                        (pct_ind,
                         str_ind$0 + 1 | 0,
                         end_ind,
                         minus,
                         plus,
                         hash,
                         space,
                         ign,
                         pad,
                         1);
               case 1:
               case 3:
                if(legacy_behavior$0)
                 {var
                   _oY_=str_ind$0 + 1 | 0,
                   minus$0=minus || (45 === symb$0?1:0);
                  return parse_literal(minus$0,_oY_)}
                break
               }}
          return legacy_behavior$0
                  ?parse_after_precision
                    (pct_ind,
                     str_ind$0,
                     end_ind,
                     minus,
                     plus,
                     hash,
                     space,
                     ign,
                     pad,
                     _aC_)
                  :invalid_format_without(str_ind$0 - 1 | 0,46,cst_precision)}
        return parse_conversion
                (pct_ind,
                 str_ind + 1 | 0,
                 end_ind,
                 plus,
                 hash,
                 space,
                 ign,
                 pad,
                 0,
                 pad,
                 symb)}
      function parse_flags(pct_ind,str_ind,end_ind,ign)
       {var zero=[0,0],minus=[0,0],plus=[0,0],space=[0,0],hash=[0,0];
        function set_flag(str_ind,flag)
         {var _oV_=flag[1],_oW_=_oV_?1 - legacy_behavior$0:_oV_;
          if(_oW_)
           {var _oX_=caml_string_get(str,str_ind);
            caml_call3(failwith_message(_aA_),str,str_ind,_oX_)}
          flag[1] = 1;
          return 0}
        var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var match=caml_string_get(str,str_ind$0),switcher=match - 32 | 0;
          if(! (16 < switcher >>> 0))
           switch(switcher)
            {case 0:
              set_flag(str_ind$0,space);
              var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
              continue;
             case 3:
              set_flag(str_ind$0,hash);
              var str_ind$2=str_ind$0 + 1 | 0,str_ind$0=str_ind$2;
              continue;
             case 11:
              set_flag(str_ind$0,plus);
              var str_ind$3=str_ind$0 + 1 | 0,str_ind$0=str_ind$3;
              continue;
             case 13:
              set_flag(str_ind$0,minus);
              var str_ind$4=str_ind$0 + 1 | 0,str_ind$0=str_ind$4;
              continue;
             case 16:
              set_flag(str_ind$0,zero);
              var str_ind$5=str_ind$0 + 1 | 0,str_ind$0=str_ind$5;
              continue
             }
          var
           _oQ_=space[1],
           _oR_=hash[1],
           _oS_=plus[1],
           _oT_=minus[1],
           _oU_=zero[1];
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           padty=
            0 === _oU_
             ?0 === _oT_?1:0
             :0 === _oT_
               ?2
               :legacy_behavior$0
                 ?0
                 :incompatible_flag(pct_ind,str_ind$0,45,cst_0),
           match$0=caml_string_get(str,str_ind$0);
          if(48 <= match$0)
           {if(! (58 <= match$0))
             {var
               match$1=parse_positive(str_ind$0,end_ind,0),
               width=match$1[2],
               new_ind=match$1[1];
              return parse_after_padding
                      (pct_ind,
                       new_ind,
                       end_ind,
                       _oT_,
                       _oS_,
                       _oR_,
                       _oQ_,
                       ign,
                       [0,padty,width])}}
          else
           if(42 === match$0)
            return parse_after_padding
                    (pct_ind,
                     str_ind$0 + 1 | 0,
                     end_ind,
                     _oT_,
                     _oS_,
                     _oR_,
                     _oQ_,
                     ign,
                     [1,padty]);
          switch(padty)
           {case 0:
             if(1 - legacy_behavior$0)
              invalid_format_without(str_ind$0 - 1 | 0,45,cst_padding);
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_oT_,_oS_,_oR_,_oQ_,ign,0);
            case 1:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_oT_,_oS_,_oR_,_oQ_,ign,0);
            default:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_oT_,_oS_,_oR_,_oQ_,ign,_aB_)}}}
      function parse_tag(is_open_tag,str_ind,end_ind)
       {try
         {if(str_ind === end_ind)throw Not_found;
          var match$0=caml_string_get(str,str_ind);
          if(60 === match$0)
           {var ind=index_from$0(str,str_ind + 1 | 0,62);
            if(end_ind <= ind)throw Not_found;
            var
             sub_str=sub$0(str,str_ind,(ind - str_ind | 0) + 1 | 0),
             match$1=parse(ind + 1 | 0,end_ind),
             fmt_rest$0=match$1[1],
             match$2=parse(str_ind,ind + 1 | 0),
             sub_fmt=match$2[1],
             sub_format$0=[0,sub_fmt,sub_str];
            if(is_open_tag)
             var formatting$0=[0,sub_format$0];
            else
             {var switch$0=0;
              if
               (typeof sub_fmt
                !==
                "number"
                &&
                11
                ===
                sub_fmt[0]
                &&
                typeof sub_fmt[2]
                ===
                "number")
               {var str$0=sub_fmt[1];
                try
                 {var switch$1=0;open_box_of_string(str$0)}
                catch(_oP_)
                 {_oP_ = caml_wrap_exception(_oP_);
                  if(_oP_[1] !== Failure)throw _oP_;
                  switch$0 = 1;
                  switch$1 = 1}
                if(! switch$1)switch$0 = 1}
              var formatting$0=[1,sub_format$0]}
            var _oN_=[0,[18,formatting$0,fmt_rest$0]];
            return _oN_}
          throw Not_found}
        catch(_oO_)
         {_oO_ = caml_wrap_exception(_oO_);
          if(_oO_ === Not_found)
           {var
             match=parse(str_ind,end_ind),
             fmt_rest=match[1],
             formatting=is_open_tag?[0,sub_format]:[1,sub_format];
            return [0,[18,formatting,fmt_rest]]}
          throw _oO_}}
      function parse_good_break(str_ind,end_ind)
       {try
         {var
           _oG_=str_ind === end_ind?1:0,
           _oH_=_oG_ || (60 !== caml_string_get(str,str_ind)?1:0);
          if(_oH_)throw Not_found;
          var
           str_ind_1=parse_spaces(str_ind + 1 | 0,end_ind),
           match$0=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$0)
           {if(! (58 <= match$0))switch$0 = 1}
          else
           if(45 === match$0)switch$0 = 1;
          if(! switch$0)throw Not_found;
          var
           match$1=parse_integer(str_ind_1,end_ind),
           width=match$1[2],
           str_ind_2=match$1[1],
           str_ind_3=parse_spaces(str_ind_2,end_ind),
           match$2=caml_string_get(str,str_ind_3),
           switcher=match$2 - 45 | 0,
           switch$1=0;
          if(12 < switcher >>> 0)
           if(17 === switcher)
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _oI_=[0,s,width,0],
             _oJ_=str_ind_3 + 1 | 0,
             next_ind=_oJ_,
             formatting_lit$0=_oI_;
           else
            switch$1 = 1;
          else
           {var switcher$0=switcher - 1 | 0;
            if(1 < switcher$0 >>> 0)
             {var
               match$3=parse_integer(str_ind_3,end_ind),
               offset=match$3[2],
               str_ind_4=match$3[1],
               str_ind_5=parse_spaces(str_ind_4,end_ind);
              if(62 !== caml_string_get(str,str_ind_5))throw Not_found;
              var
               s$0=
                sub$0(str,str_ind - 2 | 0,(str_ind_5 - str_ind | 0) + 3 | 0),
               _oK_=[0,s$0,width,offset],
               _oL_=str_ind_5 + 1 | 0,
               next_ind=_oL_,
               formatting_lit$0=_oK_}
            else
             switch$1 = 1}
          if(switch$1)throw Not_found}
        catch(_oM_)
         {_oM_ = caml_wrap_exception(_oM_);
          if(_oM_ !== Not_found && _oM_[1] !== Failure)throw _oM_;
          var next_ind=str_ind,formatting_lit$0=formatting_lit}
        var match=parse(next_ind,end_ind),fmt_rest=match[1];
        return [0,[17,formatting_lit$0,fmt_rest]]}
      function parse_magic_size(str_ind,end_ind)
       {try
         {var
           str_ind_1=parse_spaces(str_ind,end_ind),
           match$2=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$2)
           {if(! (58 <= match$2))switch$0 = 1}
          else
           if(45 === match$2)switch$0 = 1;
          if(switch$0)
           {var
             match$3=parse_integer(str_ind_1,end_ind),
             size=match$3[2],
             str_ind_2=match$3[1],
             str_ind_3=parse_spaces(str_ind_2,end_ind);
            if(62 !== caml_string_get(str,str_ind_3))throw Not_found;
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _oE_=[0,[0,str_ind_3 + 1 | 0,[1,s,size]]]}
          else
           var _oE_=0;
          var _oD_=_oE_}
        catch(_oF_)
         {_oF_ = caml_wrap_exception(_oF_);
          if(_oF_ !== Not_found && _oF_[1] !== Failure)throw _oF_;
          var _oD_=0}
        if(_oD_)
         {var
           match=_oD_[1],
           formatting_lit=match[2],
           next_ind=match[1],
           match$0=parse(next_ind,end_ind),
           fmt_rest=match$0[1];
          return [0,[17,formatting_lit,fmt_rest]]}
        var match$1=parse(str_ind,end_ind),fmt_rest$0=match$1[1];
        return [0,[17,_aO_,fmt_rest$0]]}
      function parse_spaces(str_ind,end_ind)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          if(32 === caml_string_get(str,str_ind$0))
           {var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;continue}
          return str_ind$0}}
      function parse_positive(str_ind,end_ind,acc)
       {var str_ind$0=str_ind,acc$0=acc;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var c=caml_string_get(str,str_ind$0),switcher=c - 48 | 0;
          if(9 < switcher >>> 0)return [0,str_ind$0,acc$0];
          var acc$1=(acc$0 * 10 | 0) + (c - 48 | 0) | 0;
          if(max_string_length < acc$1)
           return caml_call3
                   (failwith_message(_aQ_),str,acc$1,max_string_length);
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,acc$0=acc$1;
          continue}}
      function parse_integer(str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        if(48 <= match)
         {if(! (58 <= match))return parse_positive(str_ind,end_ind,0)}
        else
         if(45 === match)
          {if((str_ind + 1 | 0) === end_ind)unexpected_end_of_format(end_ind);
           var c=caml_string_get(str,str_ind + 1 | 0),switcher=c - 48 | 0;
           if(9 < switcher >>> 0)
            return expected_character(str_ind + 1 | 0,cst_digit,c);
           var
            match$0=parse_positive(str_ind + 1 | 0,end_ind,0),
            n=match$0[2],
            next_ind=match$0[1];
           return [0,next_ind,- n | 0]}
        throw [0,Assert_failure,_aR_]}
      function search_subformat_end(str_ind,end_ind,c)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)
           caml_call3(failwith_message(_aS_),str,c,end_ind);
          var match=caml_string_get(str,str_ind$0);
          if(37 === match)
           {if((str_ind$0 + 1 | 0) === end_ind)
             unexpected_end_of_format(end_ind);
            if(caml_string_get(str,str_ind$0 + 1 | 0) === c)return str_ind$0;
            var match$0=caml_string_get(str,str_ind$0 + 1 | 0);
            if(95 <= match$0)
             {if(123 <= match$0)
               {if(! (126 <= match$0))
                 {var switcher=match$0 - 123 | 0;
                  switch(switcher)
                   {case 0:
                     var
                      sub_end=search_subformat_end(str_ind$0 + 2 | 0,end_ind,125),
                      str_ind$2=sub_end + 2 | 0,
                      str_ind$0=str_ind$2;
                     continue;
                    case 1:break;
                    default:
                     return expected_character
                             (str_ind$0 + 1 | 0,cst_character,125)}}}
              else
               if(! (96 <= match$0))
                {if((str_ind$0 + 2 | 0) === end_ind)
                  unexpected_end_of_format(end_ind);
                 var match$1=caml_string_get(str,str_ind$0 + 2 | 0);
                 if(40 === match$1)
                  {var
                    sub_end$0=search_subformat_end(str_ind$0 + 3 | 0,end_ind,41),
                    str_ind$3=sub_end$0 + 2 | 0,
                    str_ind$0=str_ind$3;
                   continue}
                 if(123 === match$1)
                  {var
                    sub_end$1=
                     search_subformat_end(str_ind$0 + 3 | 0,end_ind,125),
                    str_ind$4=sub_end$1 + 2 | 0,
                    str_ind$0=str_ind$4;
                   continue}
                 var str_ind$5=str_ind$0 + 3 | 0,str_ind$0=str_ind$5;
                 continue}}
            else
             {if(40 === match$0)
               {var
                 sub_end$2=search_subformat_end(str_ind$0 + 2 | 0,end_ind,41),
                 str_ind$6=sub_end$2 + 2 | 0,
                 str_ind$0=str_ind$6;
                continue}
              if(41 === match$0)
               return expected_character(str_ind$0 + 1 | 0,cst_character$0,41)}
            var str_ind$1=str_ind$0 + 2 | 0,str_ind$0=str_ind$1;
            continue}
          var str_ind$7=str_ind$0 + 1 | 0,str_ind$0=str_ind$7;
          continue}}
      function incompatible_flag(pct_ind,str_ind,symb,option)
       {var subfmt=sub$0(str,pct_ind,str_ind - pct_ind | 0);
        return caml_call5
                (failwith_message(_aW_),str,pct_ind,option,symb,subfmt)}
      function compute_int_conv(pct_ind,str_ind,plus,hash,space,symb)
       {var plus$0=plus,hash$0=hash,space$0=space;
        for(;;)
         {var switch$0=0;
          if(0 === plus$0)
           if(0 === hash$0)
            if(0 === space$0)
             {var switcher=symb - 88 | 0;
              if(! (32 < switcher >>> 0))
               switch(switcher)
                {case 0:return 8;
                 case 12:return 0;
                 case 17:return 3;
                 case 23:return 10;
                 case 29:return 12;
                 case 32:return 6
                 }}
            else
             {if(100 === symb)return 2;if(105 === symb)return 5}
           else
            if(0 === space$0)
             {var switcher$0=symb - 88 | 0;
              if(32 < switcher$0 >>> 0)
               switch$0 = 1;
              else
               switch(switcher$0)
                {case 0:return 9;
                 case 12:return 13;
                 case 17:return 14;
                 case 23:return 11;
                 case 29:return 15;
                 case 32:return 7;
                 default:switch$0 = 1}}
            else
             switch$0 = 1;
          else
           if(0 === hash$0)
            {if(0 === space$0)
              {if(100 === symb)return 1;if(105 === symb)return 4}}
           else
            switch$0 = 1;
          if(switch$0)
           {var switcher$1=symb - 88 | 0;
            if(! (32 < switcher$1 >>> 0))
             switch(switcher$1)
              {case 0:if(legacy_behavior$0)return 9;break;
               case 23:if(legacy_behavior$0)return 11;break;
               case 32:if(legacy_behavior$0)return 7;break;
               case 12:
               case 17:
               case 29:
                if(legacy_behavior$0){var hash$0=0;continue}
                return incompatible_flag(pct_ind,str_ind,symb,cst$48)
               }}
          if(0 === plus$0)
           {if(0 === space$0)throw [0,Assert_failure,_aU_];
            if(legacy_behavior$0){var space$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$45)}
          if(0 === space$0)
           {if(legacy_behavior$0){var plus$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$46)}
          if(legacy_behavior$0){var space$0=0;continue}
          return incompatible_flag(pct_ind,str_ind,32,cst$47)}}
      return parse(0,caml_ml_string_length(str))}
    function format_of_string_fmtty(str,fmtty)
     {var match=fmt_ebb_of_string(0,str),fmt=match[1];
      try
       {var _oB_=[0,type_format(fmt,fmtty),str];return _oB_}
      catch(_oC_)
       {_oC_ = caml_wrap_exception(_oC_);
        if(_oC_ === Type_mismatch)
         {var _oA_=string_of_fmtty(fmtty);
          return caml_call2(failwith_message(_aX_),str,_oA_)}
        throw _oC_}}
    function format_of_string_format(str,param)
     {var
       str$0=param[2],
       fmt=param[1],
       match=fmt_ebb_of_string(0,str),
       fmt$0=match[1];
      try
       {var _oy_=[0,type_format(fmt$0,fmtty_of_fmt(fmt)),str];return _oy_}
      catch(_oz_)
       {_oz_ = caml_wrap_exception(_oz_);
        if(_oz_ === Type_mismatch)
         return caml_call2(failwith_message(_aY_),str,str$0);
        throw _oz_}}
    var
     CamlinternalFormat=
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_formatting_gen,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
    caml_register_global(752,CamlinternalFormat,"CamlinternalFormat");
    function kfprintf(k,o,param)
     {var fmt=param[1],_ox_=0;
      return make_printf
              (function(acc){output_acc(o,acc);return caml_call1(k,o)},
               _ox_,
               fmt)}
    function kbprintf(k,b,param)
     {var fmt=param[1],_ow_=0;
      return make_printf
              (function(acc){bufput_acc(b,acc);return caml_call1(k,b)},
               _ow_,
               fmt)}
    function ikfprintf(k,oc,param)
     {var fmt=param[1];return make_iprintf(k,oc,fmt)}
    function fprintf(oc,fmt){return kfprintf(function(_ov_){return 0},oc,fmt)}
    function bprintf(b,fmt){return kbprintf(function(_ou_){return 0},b,fmt)}
    function ifprintf(oc,fmt)
     {return ikfprintf(function(_ot_){return 0},oc,fmt)}
    function printf(fmt){return fprintf(stdout,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(acc)
       {var buf=create$2(64);
        strput_acc(buf,acc);
        return caml_call1(k,contents(buf))}
      return make_printf(k$0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var
     Stdlib_printf=
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ksprintf];
    caml_register_global(753,Stdlib_printf,"Stdlib__printf");
    var
     Bad=[248,cst_Stdlib_Arg_Bad,caml_fresh_oo_id(0)],
     Help=[248,cst_Stdlib_Arg_Help,caml_fresh_oo_id(0)],
     Stop=[248,cst_Stdlib_Arg_Stop,caml_fresh_oo_id(0)];
    function assoc3(x,l)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var t=l$0[2],match=l$0[1],y2=match[2],y1=match[1];
          if(caml_equal(y1,x))return y2;
          var l$0=t;
          continue}
        throw Not_found}}
    function split$0(s)
     {var
       i=index$0(s,61),
       len=caml_ml_string_length(s),
       _os_=sub$0(s,i + 1 | 0,len - (i + 1 | 0) | 0);
      return [0,sub$0(s,0,i),_os_]}
    function make_symlist(prefix,sep,suffix,l)
     {if(l)
       {var t=l[2],h=l[1],_or_=symbol(prefix,h);
        return symbol
                (fold_left$0
                  (function(x,y){return symbol(x,symbol(sep,y))},_or_,t),
                 suffix)}
      return cst_none}
    function help_action(param){throw [0,Stop,_a1_]}
    function add_help(speclist)
     {try
       {assoc3(cst_help$2,speclist);var _oo_=0,_om_=_oo_}
      catch(_oq_)
       {_oq_ = caml_wrap_exception(_oq_);
        if(_oq_ !== Not_found)throw _oq_;
        var
         _om_=
          [0,[0,cst_help,[0,help_action],cst_Display_this_list_of_optio],0]}
      try
       {assoc3(cst_help$1,speclist);var _on_=0,add2=_on_}
      catch(_op_)
       {_op_ = caml_wrap_exception(_op_);
        if(_op_ !== Not_found)throw _op_;
        var
         add2=
          [0,
           [0,cst_help$0,[0,help_action],cst_Display_this_list_of_optio$0],
           0]}
      return append(speclist,append(_om_,add2))}
    function usage_b(buf,speclist,errmsg)
     {caml_call1(bprintf(buf,_a2_),errmsg);
      var _oj_=add_help(speclist);
      return iter$2
              (function(param)
                {var
                  doc=param[3],
                  spec=param[2],
                  key=param[1],
                  _ok_=0 < caml_ml_string_length(doc)?1:0;
                 if(_ok_)
                  {if(11 === spec[0])
                    {var l=spec[1],_ol_=make_symlist(cst$52,cst$51,cst$50,l);
                     return caml_call3(bprintf(buf,_a0_),key,_ol_,doc)}
                   return caml_call2(bprintf(buf,_aZ_),key,doc)}
                 return _ok_},
               _oj_)}
    function usage_string(speclist,errmsg)
     {var b=create$2(200);usage_b(b,speclist,errmsg);return contents(b)}
    function usage(speclist,errmsg)
     {var _oi_=usage_string(speclist,errmsg);
      return caml_call1(eprintf(_a3_),_oi_)}
    var current=[0,0];
    function bool_of_string_opt$0(x)
     {try
       {var _og_=[0,bool_of_string(x)];return _og_}
      catch(_oh_)
       {_oh_ = caml_wrap_exception(_oh_);
        if(_oh_[1] === Invalid_argument)return 0;
        throw _oh_}}
    function int_of_string_opt$0(x)
     {try
       {var _oe_=[0,caml_int_of_string(x)];return _oe_}
      catch(_of_)
       {_of_ = caml_wrap_exception(_of_);
        if(_of_[1] === Failure)return 0;
        throw _of_}}
    function float_of_string_opt(x)
     {try
       {var _oc_=[0,caml_float_of_string(x)];return _oc_}
      catch(_od_)
       {_od_ = caml_wrap_exception(_od_);
        if(_od_[1] === Failure)return 0;
        throw _od_}}
    function parse_and_expand_argv_dynamic_
     (allow_expand,current,argv,speclist,anonfun,errmsg)
     {var initpos=current[1];
      function convert_error(error)
       {var
         b=create$2(200),
         progname=
          initpos < argv[1].length - 1
           ?caml_check_bound(argv[1],initpos)[1 + initpos]
           :cst$53;
        switch(error[0])
         {case 0:
           var _ob_=error[1];
           if
            (caml_string_notequal(_ob_,cst_help$3)
             &&
             caml_string_notequal(_ob_,cst_help$4))
            caml_call2(bprintf(b,_a4_),progname,_ob_);
           break;
          case 1:
           var expected=error[3],arg=error[2],opt=error[1];
           caml_call4(bprintf(b,_a7_),progname,arg,opt,expected);
           break;
          case 2:var s=error[1];caml_call2(bprintf(b,_a8_),progname,s);break;
          default:var s$0=error[1];caml_call2(bprintf(b,_a9_),progname,s$0)}
        usage_b(b,speclist[1],errmsg);
        if(! caml_equal(error,_a5_) && ! caml_equal(error,_a6_))
         return [0,Bad,contents(b)];
        return [0,Help,contents(b)]}
      current[1]++;
      for(;;)
       {if(current[1] < argv[1].length - 1)
         {try
           {var
             _n4_=current[1],
             s=caml_check_bound(argv[1],_n4_)[1 + _n4_],
             switch$0=0;
            if(1 <= caml_ml_string_length(s) && 45 === caml_string_get(s,0))
             {try
               {var
                 follow$1=0,
                 _n6_=assoc3(s,speclist[1]),
                 action=_n6_,
                 follow$0=follow$1}
              catch(_n$_)
               {_n$_ = caml_wrap_exception(_n$_);
                if(_n$_ !== Not_found)throw _n$_;
                try
                 {var
                   match=split$0(s),
                   arg=match[2],
                   keyword=match[1],
                   follow=[0,arg],
                   _n5_=assoc3(keyword,speclist[1])}
                catch(_oa_)
                 {_oa_ = caml_wrap_exception(_oa_);
                  if(_oa_ === Not_found)throw [0,Stop,[0,s]];
                  throw _oa_;
                  var _n7_=_oa_}
                var action=_n5_,follow$0=follow,_n8_=_n$_}
              var
               no_arg$0=
                function(s,follow)
                 {function no_arg(param)
                   {if(follow)
                     {var arg=follow[1];throw [0,Stop,[1,s,arg,cst_no_argument]]}
                    return 0}
                  return no_arg},
               no_arg=no_arg$0(s,follow$0),
               get_arg$0=
                function(s,follow)
                 {function get_arg(param)
                   {if(follow){var arg=follow[1];return arg}
                    if((current[1] + 1 | 0) < argv[1].length - 1)
                     {var _n__=current[1] + 1 | 0;
                      return caml_check_bound(argv[1],_n__)[1 + _n__]}
                    throw [0,Stop,[2,s]]}
                  return get_arg},
               get_arg=get_arg$0(s,follow$0),
               consume_arg$0=
                function(follow)
                 {function consume_arg(param)
                   {return follow?0:(current[1]++,0)}
                  return consume_arg},
               consume_arg=consume_arg$0(follow$0),
               treat_action$0=
                function(s,no_arg,get_arg,consume_arg)
                 {function treat_action(param)
                   {switch(param[0])
                     {case 0:var f=param[1];no_arg(0);return caml_call1(f,0);
                      case 1:
                       var
                        f$0=param[1],
                        arg=get_arg(0),
                        match=bool_of_string_opt$0(arg);
                       if(match)
                        {var s$0=match[1];caml_call1(f$0,s$0);return consume_arg(0)}
                       throw [0,Stop,[1,s,arg,cst_a_boolean]];
                      case 2:var r=param[1];no_arg(0);r[1] = 1;return 0;
                      case 3:var r$0=param[1];no_arg(0);r$0[1] = 0;return 0;
                      case 4:
                       var f$1=param[1],arg$0=get_arg(0);
                       caml_call1(f$1,arg$0);
                       return consume_arg(0);
                      case 5:
                       var r$1=param[1];r$1[1] = get_arg(0);return consume_arg(0);
                      case 6:
                       var
                        f$2=param[1],
                        arg$1=get_arg(0),
                        match$0=int_of_string_opt$0(arg$1);
                       if(match$0)
                        {var x=match$0[1];caml_call1(f$2,x);return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$1,cst_an_integer]];
                      case 7:
                       var
                        r$2=param[1],
                        arg$2=get_arg(0),
                        match$1=int_of_string_opt$0(arg$2);
                       if(match$1)
                        {var x$0=match$1[1];r$2[1] = x$0;return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$2,cst_an_integer$0]];
                      case 8:
                       var
                        f$3=param[1],
                        arg$3=get_arg(0),
                        match$2=float_of_string_opt(arg$3);
                       if(match$2)
                        {var x$1=match$2[1];
                         caml_call1(f$3,x$1);
                         return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$3,cst_a_float]];
                      case 9:
                       var
                        r$3=param[1],
                        arg$4=get_arg(0),
                        match$3=float_of_string_opt(arg$4);
                       if(match$3)
                        {var x$2=match$3[1];r$3[1] = x$2;return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$4,cst_a_float$0]];
                      case 10:
                       var specs=param[1];
                       no_arg(0);
                       return iter$2(treat_action,specs);
                      case 11:
                       var f$4=param[2],symb=param[1],arg$5=get_arg(0);
                       if(mem(arg$5,symb))
                        {caml_call1(f$4,arg$5);return consume_arg(0)}
                       throw [0,
                              Stop,
                              [1,
                               s,
                               arg$5,
                               symbol(cst_one_of,make_symlist(cst$56,cst$55,cst$54,symb))]];
                      case 12:
                       var f$5=param[1];
                       no_arg(0);
                       for(;;)
                        {if(current[1] < (argv[1].length - 1 - 1 | 0))
                          {var _n9_=current[1] + 1 | 0;
                           caml_call1(f$5,caml_check_bound(argv[1],_n9_)[1 + _n9_]);
                           consume_arg(0);
                           continue}
                         return 0}
                      default:
                       var f$6=param[1];
                       if(1 - allow_expand)
                        throw [0,Invalid_argument,cst_Arg_Expand_is_is_only_allo];
                       var arg$6=get_arg(0),newarg=caml_call1(f$6,arg$6);
                       consume_arg(0);
                       var
                        before=sub$1(argv[1],0,current[1] + 1 | 0),
                        after=
                         sub$1
                          (argv[1],
                           current[1] + 1 | 0,
                           (argv[1].length - 1 - current[1] | 0) - 1 | 0);
                       argv[1]
                       =
                       caml_array_concat([0,before,[0,newarg,[0,after,0]]]);
                       return 0}}
                  return treat_action},
               treat_action=treat_action$0(s,no_arg,get_arg,consume_arg);
              treat_action(action);
              switch$0 = 1}
            if(! switch$0)caml_call1(anonfun,s)}
          catch(exn$0)
           {exn$0 = caml_wrap_exception(exn$0);
            if(exn$0[1] === Bad){var m=exn$0[2];throw convert_error([3,m])}
            if(exn$0[1] === Stop){var e=exn$0[2];throw convert_error(e)}
            throw exn$0;
            var exn=exn$0}
          current[1]++;
          continue}
        return 0}}
    function parse_and_expand_argv_dynamic
     (current,argv,speclist,anonfun,errmsg)
     {return parse_and_expand_argv_dynamic_
              (1,current,argv,speclist,anonfun,errmsg)}
    function parse_argv_dynamic(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_and_expand_argv_dynamic_
              (0,current$0,[0,argv],speclist,anonfun,errmsg)}
    function parse_argv(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_argv_dynamic
              ([0,current$0],argv,[0,speclist],anonfun,errmsg)}
    function parse(l,f,msg)
     {try
       {var _n3_=parse_argv(0,caml_sys_argv(0),l,f,msg);return _n3_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_a__),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_a$_),msg$1);return exit(0)}
        throw exn}}
    function parse_dynamic(l,f,msg)
     {try
       {var _n2_=parse_argv_dynamic(0,caml_sys_argv(0),l,f,msg);return _n2_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_ba_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_bb_),msg$1);return exit(0)}
        throw exn}}
    function parse_expand(l,f,msg)
     {try
       {var
         argv=[0,caml_sys_argv(0)],
         spec=[0,l],
         current$0=[0,current[1]],
         _n1_=parse_and_expand_argv_dynamic(current$0,argv,spec,f,msg);
        return _n1_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_bc_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_bd_),msg$1);return exit(0)}
        throw exn}}
    function second_word(s)
     {var len=caml_ml_string_length(s);
      function loop(n)
       {var n$0=n;
        for(;;)
         {if(len <= n$0)return len;
          if(32 === caml_string_get(s,n$0))
           {var n$1=n$0 + 1 | 0,n$0=n$1;continue}
          return n$0}}
      try
       {var n$0=index$0(s,9)}
      catch(_nZ_)
       {_nZ_ = caml_wrap_exception(_nZ_);
        if(_nZ_ === Not_found)
         {try
           {var n=index$0(s,32)}
          catch(_n0_)
           {_n0_ = caml_wrap_exception(_n0_);
            if(_n0_ === Not_found)return len;
            throw _n0_}
          return loop(n + 1 | 0)}
        throw _nZ_}
      return loop(n$0 + 1 | 0)}
    function max_arg_len(cur,param)
     {var doc=param[3],spec=param[2],kwd=param[1];
      return 11 === spec[0]
              ?max(cur,caml_ml_string_length(kwd))
              :max(cur,caml_ml_string_length(kwd) + second_word(doc) | 0)}
    function replace_leading_tab(s)
     {var seen=[0,0];
      return map$4
              (function(c)
                {if(9 === c && ! seen[1]){seen[1] = 1;return 32}return c},
               s)}
    function align(opt,speclist)
     {if(opt)var sth=opt[1],limit=sth;else var limit=max_int;
      var
       completed=add_help(speclist),
       len=fold_left$0(max_arg_len,0,completed),
       len$0=min(len,limit);
      return map$2
              (function(ksd)
                {var _nX_=ksd[2],_nY_=ksd[1];
                 if(caml_string_notequal(ksd[3],cst$57))
                  {if(11 === _nX_[0])
                    {var
                      msg$0=ksd[3],
                      cutcol$0=second_word(msg$0),
                      spaces$0=make$0(max(0,len$0 - cutcol$0 | 0) + 3 | 0,32);
                     return [0,
                             _nY_,
                             _nX_,
                             symbol(cst$58,symbol(spaces$0,replace_leading_tab(msg$0)))]}
                   var
                    msg=ksd[3],
                    cutcol=second_word(msg),
                    kwd_len=caml_ml_string_length(_nY_),
                    diff=(len$0 - kwd_len | 0) - cutcol | 0;
                   if(0 < diff)
                    {var
                      spaces=make$0(diff,32),
                      prefix=sub$0(replace_leading_tab(msg),0,cutcol),
                      suffix=
                       sub$0(msg,cutcol,caml_ml_string_length(msg) - cutcol | 0);
                     return [0,_nY_,_nX_,symbol(prefix,symbol(spaces,suffix))]}
                   return [0,_nY_,_nX_,replace_leading_tab(msg)]}
                 return ksd},
               completed)}
    function read_aux(trim,sep,file)
     {var ic=open_in_bin(file),buf=create$2(200),words=[0,0];
      function stash(param)
       {var s=contents(buf);
        if(trim)
         {var len=caml_ml_string_length(s),switch$0=0;
          if(0 < len && 13 === caml_string_get(s,len - 1 | 0))
           {var _nW_=sub$0(s,0,len - 1 | 0);switch$0 = 1}
          if(! switch$0)var _nW_=s;
          var word=_nW_}
        else
         var word=s;
        words[1] = [0,word,words[1]];
        return clear$1(buf)}
      try
       {for(;;)
         {var c=caml_ml_input_char(ic);
          if(c === sep)stash(0);else add_char(buf,c);
          continue}}
      catch(_nV_)
       {_nV_ = caml_wrap_exception(_nV_);
        if(_nV_ === End_of_file)
         {if(0 < buf[2])stash(0);
          caml_ml_close_channel(ic);
          return of_list(rev(words[1]))}
        throw _nV_}}
    var _be_=10,_bf_=1;
    function read_arg(_nU_){return read_aux(_bf_,_be_,_nU_)}
    var _bg_=0,_bh_=0;
    function read_arg0(_nT_){return read_aux(_bh_,_bg_,_nT_)}
    function write_aux(sep,file,args)
     {var oc=open_out_bin(file);
      iter$5(function(s){return caml_call2(fprintf(oc,_bi_),s,sep)},args);
      return close_out(oc)}
    var _bj_=10;
    function write_arg(_nR_,_nS_){return write_aux(_bj_,_nR_,_nS_)}
    var _bk_=0;
    function write_arg0(_nP_,_nQ_){return write_aux(_bk_,_nP_,_nQ_)}
    var
     Stdlib_arg=
      [0,
       parse,
       parse_dynamic,
       parse_argv,
       parse_argv_dynamic,
       parse_and_expand_argv_dynamic,
       parse_expand,
       Help,
       Bad,
       usage,
       usage_string,
       align,
       current,
       read_arg,
       read_arg0,
       write_arg,
       write_arg0];
    caml_register_global(754,Stdlib_arg,"Stdlib__arg");
    var printers=[0,0];
    function field(x,i)
     {var f=x[1 + i];
      return is_block(f)
              ?caml_obj_tag(f) === 252
                ?caml_call1(sprintf(_bl_),f)
                :caml_obj_tag(f) === 253?to_string(f):cst$59
              :caml_call1(sprintf(_bm_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return cst$60;
      var _nN_=other_fields(x,i + 1 | 0),_nO_=field(x,i);
      return caml_call2(sprintf(_bn_),_nO_,_nN_)}
    function use_printers(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var switch$0=0,val=caml_call1(hd,x);switch$0 = 1}
            catch(_nM_){}
            if(switch$0 && val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      return conv(printers[1])}
    function to_string_default(x)
     {if(x === Out_of_memory)return cst_Out_of_memory;
      if(x === Stack_overflow)return cst_Stack_overflow;
      if(x[1] === Match_failure)
       {var match$0=x[2],char$0=match$0[3],line=match$0[2],file=match$0[1];
        return caml_call5
                (sprintf(locfmt),
                 file,
                 line,
                 char$0,
                 char$0 + 5 | 0,
                 cst_Pattern_matching_failed)}
      if(x[1] === Assert_failure)
       {var
         match$1=x[2],
         char$1=match$1[3],
         line$0=match$1[2],
         file$0=match$1[1];
        return caml_call5
                (sprintf(locfmt),
                 file$0,
                 line$0,
                 char$1,
                 char$1 + 6 | 0,
                 cst_Assertion_failed)}
      if(x[1] === Undefined_recursive_module)
       {var
         match$2=x[2],
         char$2=match$2[3],
         line$1=match$2[2],
         file$1=match$2[1];
        return caml_call5
                (sprintf(locfmt),
                 file$1,
                 line$1,
                 char$2,
                 char$2 + 6 | 0,
                 cst_Undefined_recursive_module)}
      if(0 === caml_obj_tag(x))
       {var constructor=x[1][1],match=x.length - 1;
        if(2 < match >>> 0)
         var
          _nI_=other_fields(x,2),
          _nJ_=field(x,1),
          _nL_=caml_call2(sprintf(_bo_),_nJ_,_nI_);
        else
         switch(match)
          {case 0:var _nL_=cst$61;break;
           case 1:var _nL_=cst$62;break;
           default:var _nK_=field(x,1),_nL_=caml_call1(sprintf(_bp_),_nK_)}
        return symbol(constructor,_nL_)}
      return x[1]}
    function to_string$7(e)
     {var match=use_printers(e);
      if(match){var s=match[1];return s}
      return to_string_default(e)}
    function print(fct,arg)
     {try
       {var _nH_=caml_call1(fct,arg);return _nH_}
      catch(x)
       {x = caml_wrap_exception(x);
        var _nG_=to_string$7(x);
        caml_call1(eprintf(_bq_),_nG_);
        caml_ml_flush(stderr);
        throw x}}
    function catch$0(fct,arg)
     {try
       {var _nF_=caml_call1(fct,arg);return _nF_}
      catch(x)
       {x = caml_wrap_exception(x);
        caml_ml_flush(stdout);
        var _nE_=to_string$7(x);
        caml_call1(eprintf(_br_),_nE_);
        return exit(2)}}
    function convert_raw_backtrace(bt)
     {return [0,runtime.caml_convert_raw_backtrace(bt)]}
    function format_backtrace_slot(pos,slot)
     {function info(is_raise)
       {return is_raise
                ?0 === pos?cst_Raised_at:cst_Re_raised_at
                :0 === pos?cst_Raised_by_primitive_operat:cst_Called_from}
      if(0 === slot[0])
       {var
         _nx_=slot[5],
         _ny_=slot[4],
         _nz_=slot[3],
         _nA_=slot[6]?cst_inlined:cst$63,
         _nB_=slot[2],
         _nC_=info(slot[1]);
        return [0,caml_call6(sprintf(_bs_),_nC_,_nB_,_nA_,_nz_,_ny_,_nx_)]}
      if(slot[1])return 0;
      var _nD_=info(0);
      return [0,caml_call1(sprintf(_bt_),_nD_)]}
    function print_raw_backtrace(outchan,raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],_nv_=a.length - 1 - 1 | 0,_nu_=0;
        if(! (_nv_ < 0))
         {var i=_nu_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
            if(match){var str=match[1];caml_call1(fprintf(outchan,_bu_),str)}
            var _nw_=i + 1 | 0;
            if(_nv_ !== i){var i=_nw_;continue}
            break}}
        return 0}
      return fprintf(outchan,_bv_)}
    function print_backtrace(outchan)
     {return print_raw_backtrace(outchan,caml_get_exception_raw_backtra(0))}
    function raw_backtrace_to_string(raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],b=create$2(1024),_ns_=a.length - 1 - 1 | 0,_nr_=0;
        if(! (_ns_ < 0))
         {var i=_nr_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
            if(match){var str=match[1];caml_call1(bprintf(b,_bw_),str)}
            var _nt_=i + 1 | 0;
            if(_ns_ !== i){var i=_nt_;continue}
            break}}
        return contents(b)}
      return cst_Program_not_linked_with_g_}
    function backtrace_slot_is_raise(param)
     {return 0 === param[0]?param[1]:param[1]}
    function backtrace_slot_is_inline(param){return 0 === param[0]?param[6]:0}
    function backtrace_slot_location(param)
     {return 0 === param[0]?[0,[0,param[2],param[3],param[4],param[5]]]:0}
    function backtrace_slots(raw_backtrace)
     {var match=convert_raw_backtrace(raw_backtrace);
      if(match)
       {var backtrace=match[1],i$1=backtrace.length - 1 - 1 | 0,i=i$1;
        for(;;)
         {if(-1 === i)
           var _nq_=0;
          else
           {var
             param=caml_check_bound(backtrace,i)[1 + i],
             _np_=0 === param[0]?1:0;
            if(! _np_){var i$0=i - 1 | 0,i=i$0;continue}
            var _nq_=_np_}
          return _nq_?[0,backtrace]:0}}
      return 0}
    function get_backtrace(param)
     {return raw_backtrace_to_string(caml_get_exception_raw_backtra(0))}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function exn_slot(x){return 0 === caml_obj_tag(x)?x[1]:x}
    function exn_slot_id(x){var slot=exn_slot(x);return slot[2]}
    function exn_slot_name(x){var slot=exn_slot(x);return slot[1]}
    var uncaught_exception_handler=[0,0];
    function set_uncaught_exception_handler(fn)
     {uncaught_exception_handler[1] = [0,fn];return 0}
    function _bx_(_no_){return runtime.caml_raw_backtrace_next_slot(_no_)}
    function _by_(_nn_){return runtime.caml_convert_raw_backtrace_slot(_nn_)}
    function _bz_(_nm_,_nl_)
     {return runtime.caml_raw_backtrace_slot(_nm_,_nl_)}
    function _bA_(_nk_){return runtime.caml_raw_backtrace_length(_nk_)}
    var
     _bB_=
      [0,
       backtrace_slot_is_raise,
       backtrace_slot_is_inline,
       backtrace_slot_location,
       format_backtrace_slot];
    function _bC_(_nj_){return runtime.caml_get_current_callstack(_nj_)}
    function _bD_(_ni_){return caml_get_exception_raw_backtra(_ni_)}
    function _bE_(_nh_){return runtime.caml_backtrace_status(_nh_)}
    var
     Stdlib_printexc=
      [0,
       to_string$7,
       to_string_default,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       function(_ng_){return runtime.caml_record_backtrace(_ng_)},
       _bE_,
       register_printer,
       use_printers,
       _bD_,
       print_raw_backtrace,
       raw_backtrace_to_string,
       _bC_,
       set_uncaught_exception_handler,
       backtrace_slots,
       _bB_,
       _bA_,
       _bz_,
       _by_,
       _bx_,
       exn_slot_id,
       exn_slot_name];
    caml_register_global(755,Stdlib_printexc,"Stdlib__printexc");
    function const$0(c,param){return c}
    function flip(f,x,y){return caml_call2(f,y,x)}
    function negate(p,v){return 1 - caml_call1(p,v)}
    var
     Finally_raised=
      [248,cst_Stdlib_Fun_Finally_raised,caml_fresh_oo_id(0)];
    function protect(finally$0,work)
     {function finally_no_exn(param)
       {try
         {var _nf_=caml_call1(finally$0,0);return _nf_}
        catch(e)
         {e = caml_wrap_exception(e);
          var bt=caml_get_exception_raw_backtra(0),exn=[0,Finally_raised,e];
          caml_restore_raw_backtrace(exn,bt);
          throw exn}}
      try
       {var result=caml_call1(work,0)}
      catch(work_exn)
       {work_exn = caml_wrap_exception(work_exn);
        var work_bt=caml_get_exception_raw_backtra(0);
        finally_no_exn(0);
        caml_restore_raw_backtrace(work_exn,work_bt);
        throw work_exn}
      finally_no_exn(0);
      return result}
    var Stdlib_fun=[0,const$0,flip,negate,protect,Finally_raised];
    caml_register_global(756,Stdlib_fun,"Stdlib__fun");
    function print_stat(c)
     {var st=runtime.caml_gc_stat(0),_m0_=st[4];
      caml_call1(fprintf(c,_bF_),_m0_);
      var _m1_=st[5];
      caml_call1(fprintf(c,_bG_),_m1_);
      var _m2_=st[14];
      caml_call1(fprintf(c,_bH_),_m2_);
      fprintf(c,_bI_);
      var
       _m3_=st[1],
       l1=caml_ml_string_length(caml_call1(sprintf(_bJ_),_m3_)),
       _m4_=st[1];
      caml_call2(fprintf(c,_bK_),l1,_m4_);
      var _m5_=st[2];
      caml_call2(fprintf(c,_bL_),l1,_m5_);
      var _m6_=st[3];
      caml_call2(fprintf(c,_bM_),l1,_m6_);
      fprintf(c,_bN_);
      var
       _m7_=st[15],
       l2=caml_ml_string_length(caml_call1(sprintf(_bO_),_m7_)),
       _m8_=st[15];
      caml_call2(fprintf(c,_bP_),l2,_m8_);
      var _m9_=st[6];
      caml_call2(fprintf(c,_bQ_),l2,_m9_);
      var _m__=st[8];
      caml_call2(fprintf(c,_bR_),l2,_m__);
      var _m$_=st[10];
      caml_call2(fprintf(c,_bS_),l2,_m$_);
      var _na_=st[12];
      caml_call2(fprintf(c,_bT_),l2,_na_);
      var _nb_=st[13];
      caml_call2(fprintf(c,_bU_),l2,_nb_);
      fprintf(c,_bV_);
      var _nc_=st[9];
      caml_call1(fprintf(c,_bW_),_nc_);
      var _nd_=st[11];
      caml_call1(fprintf(c,_bX_),_nd_);
      var _ne_=st[7];
      return caml_call1(fprintf(c,_bY_),_ne_)}
    function allocated_bytes(param)
     {var
       match=runtime.caml_gc_counters(0),
       ma=match[3],
       pro=match[2],
       mi=match[1];
      return (mi + ma - pro) * 4}
    function create_alarm(f){return [0,1]}
    function delete_alarm(a){a[1] = 0;return 0}
    function _bZ_(_mZ_){return runtime.caml_final_release(_mZ_)}
    function _b0_(_mY_,_mX_)
     {return runtime.caml_final_register_called_without_value(_mY_,_mX_)}
    var
     Stdlib_gc=
      [0,
       print_stat,
       allocated_bytes,
       function(_mW_,_mV_){return runtime.caml_final_register(_mW_,_mV_)},
       _b0_,
       _bZ_,
       create_alarm,
       delete_alarm];
    caml_register_global(757,Stdlib_gc,"Stdlib__gc");
    function string(str)
     {return caml_md5_string(str,0,caml_ml_string_length(str))}
    function bytes(b){return string(caml_string_of_bytes(b))}
    function substring(str,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_string_length(str) - len | 0) < ofs))
       return caml_md5_string(str,ofs,len);
      return invalid_arg(cst_Digest_substring)}
    function subbytes(b,ofs,len)
     {return substring(caml_string_of_bytes(b),ofs,len)}
    function file(filename)
     {var ic=open_in_bin(filename);
      try
       {var d=runtime.caml_md5_chan(ic,-1)}
      catch(e){e = caml_wrap_exception(e);caml_ml_close_channel(ic);throw e}
      caml_ml_close_channel(ic);
      return d}
    function output$0(chan,digest){return output_string(chan,digest)}
    function input$0(chan){return really_input_string(chan,16)}
    function char_hex(n){var _mU_=10 <= n?87:48;return n + _mU_ | 0}
    function to_hex(d)
     {if(16 !== caml_ml_string_length(d))invalid_arg(cst_Digest_to_hex);
      var result=caml_create_bytes(32),i=0;
      for(;;)
       {var x=caml_string_get(d,i);
        caml_bytes_unsafe_set(result,i * 2 | 0,char_hex(x >>> 4 | 0));
        caml_bytes_unsafe_set(result,(i * 2 | 0) + 1 | 0,char_hex(x & 15));
        var _mT_=i + 1 | 0;
        if(15 !== i){var i=_mT_;continue}
        return caml_string_of_bytes(result)}}
    function from_hex(s)
     {if(32 !== caml_ml_string_length(s))invalid_arg(cst_Digest_from_hex);
      function digit(c)
       {if(65 <= c)
         {if(97 <= c)
           {if(! (103 <= c))return (c - 97 | 0) + 10 | 0}
          else
           if(! (71 <= c))return (c - 65 | 0) + 10 | 0}
        else
         {var switcher=c - 48 | 0;if(! (9 < switcher >>> 0))return c - 48 | 0}
        throw [0,Invalid_argument,cst_Digest_from_hex$0]}
      var result=caml_create_bytes(16),i=0;
      for(;;)
       {var i$0=2 * i | 0,_mR_=digit(caml_string_get(s,i$0 + 1 | 0));
        caml_bytes_set
         (result,i,chr((digit(caml_string_get(s,i$0)) << 4) + _mR_ | 0));
        var _mS_=i + 1 | 0;
        if(15 !== i){var i=_mS_;continue}
        return caml_string_of_bytes(result)}}
    var
     Stdlib_digest=
      [0,
       compare$5,
       equal$5,
       string,
       bytes,
       substring,
       subbytes,
       file,
       output$0,
       input$0,
       to_hex,
       from_hex];
    caml_register_global(758,Stdlib_digest,"Stdlib__digest");
    function new_state(param){return [0,caml_make_vect(55,0),0]}
    function assign(st1,st2)
     {blit$1(st2[1],0,st1[1],0,55);st1[2] = st2[2];return 0}
    function full_init(s,seed)
     {var seed$0=0 === seed.length - 1?[0,0]:seed,l=seed$0.length - 1,i$0=0;
      for(;;)
       {caml_check_bound(s[1],i$0)[1 + i$0] = i$0;
        var _mQ_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_mQ_;continue}
        var accu=[0,cst_x$1],_mM_=54 + max(55,l) | 0,_mL_=0;
        if(! (_mM_ < 0))
         {var i=_mL_;
          for(;;)
           {var
             j=i % 55 | 0,
             k=caml_mod(i,l),
             x=caml_check_bound(seed$0,k)[1 + k];
            accu[1] = string(symbol(accu[1],caml_string_of_jsbytes("" + x)));
            var
             _mN_=accu[1],
             _mH_=caml_string_get(_mN_,3) << 24,
             _mI_=caml_string_get(_mN_,2) << 16,
             _mJ_=caml_string_get(_mN_,1) << 8,
             _mK_=((caml_string_get(_mN_,0) + _mJ_ | 0) + _mI_ | 0) + _mH_ | 0,
             _mO_=(caml_check_bound(s[1],j)[1 + j] ^ _mK_) & 1073741823;
            caml_check_bound(s[1],j)[1 + j] = _mO_;
            var _mP_=i + 1 | 0;
            if(_mM_ !== i){var i=_mP_;continue}
            break}}
        s[2] = 0;
        return 0}}
    function make$2(seed)
     {var result=new_state(0);full_init(result,seed);return result}
    function make_self_init(param){return make$2(caml_sys_random_seed(0))}
    function copy$5(s){var result=new_state(0);assign(result,s);return result}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _mE_=s[2],
       curval=caml_check_bound(s[1],_mE_)[1 + _mE_],
       _mF_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_mF_)[1 + _mF_]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _mG_=s[2];
      caml_check_bound(s[1],_mG_)[1 + _mG_] = newval30;
      return newval30}
    function int$0(s,bound)
     {if(! (1073741823 < bound) && 0 < bound)
       for(;;)
        {var r=bits(s),v=caml_mod(r,bound);
         if(((1073741823 - bound | 0) + 1 | 0) < (r - v | 0))continue;
         return v}
      return invalid_arg(cst_Random_int)}
    function int32(s,bound)
     {if(caml_lessequal(bound,0))return invalid_arg(cst_Random_int32);
      for(;;)
       {var b1=bits(s),b2=(bits(s) & 1) << 30,r=b1 | b2,v=caml_mod(r,bound);
        if(caml_greaterthan(r - v | 0,(2147483647 - bound | 0) + 1 | 0))
         continue;
        return v}}
    function int64(s,bound)
     {if(caml_lessequal(bound,_b2_))return invalid_arg(cst_Random_int64);
      for(;;)
       {var
         b1=caml_int64_of_int32(bits(s)),
         b2=caml_int64_shift_left(caml_int64_of_int32(bits(s)),30),
         b3=caml_int64_shift_left(caml_int64_of_int32(bits(s) & 7),60),
         r=caml_int64_or(b1,caml_int64_or(b2,b3)),
         v=runtime.caml_int64_mod(r,bound);
        if
         (caml_greaterthan
           (caml_int64_sub(r,v),
            caml_int64_add(caml_int64_sub(max_int$2,bound),_b1_)))
         continue;
        return v}}
    function nativeint(s,bound){return int32(s,bound)}
    function float$0(s,bound)
     {var r1=bits(s),r2=bits(s);
      return (r1 / 1073741824. + r2) / 1073741824. * bound}
    function bool(s){return 0 === (bits(s) & 1)?1:0}
    var default$0=[0,_b3_.slice(),0];
    function bits$0(param){return bits(default$0)}
    function int$1(bound){return int$0(default$0,bound)}
    function int32$0(bound){return int32(default$0,bound)}
    function nativeint$0(bound){return nativeint(default$0,bound)}
    function int64$0(bound){return int64(default$0,bound)}
    function float$1(scale){return float$0(default$0,scale)}
    function bool$0(param){return bool(default$0)}
    function full_init$0(seed){return full_init(default$0,seed)}
    function init$4(seed){return full_init(default$0,[0,seed])}
    function self_init(param){return full_init$0(caml_sys_random_seed(0))}
    function get_state(param){return copy$5(default$0)}
    function set_state(s){return assign(default$0,s)}
    var
     _b4_=
      [0,
       make$2,
       make_self_init,
       copy$5,
       bits,
       int$0,
       int32,
       nativeint,
       int64,
       float$0,
       bool],
     Stdlib_random=
      [0,
       init$4,
       full_init$0,
       self_init,
       bits$0,
       int$1,
       int32$0,
       nativeint$0,
       int64$0,
       float$1,
       bool$0,
       _b4_,
       get_state,
       set_state];
    caml_register_global(759,Stdlib_random,"Stdlib__random");
    function hash$1(x){return caml_hash(10,100,0,x)}
    function hash_param(n1,n2,x){return caml_hash(n1,n2,0,x)}
    function seeded_hash(seed,x){return caml_hash(10,100,seed,x)}
    function ongoing_traversal(h)
     {var _mC_=h.length - 1 < 4?1:0,_mD_=_mC_ || (h[4] < 0?1:0);return _mD_}
    function flip_ongoing_traversal(h){h[4] = - h[4] | 0;return 0}
    try
     {var _cK_=caml_sys_getenv(cst_OCAMLRUNPARAM),params=_cK_}
    catch(_mA_)
     {_mA_ = caml_wrap_exception(_mA_);
      if(_mA_ !== Not_found)throw _mA_;
      try
       {var _cJ_=caml_sys_getenv(cst_CAMLRUNPARAM),_b5_=_cJ_}
      catch(_mB_)
       {_mB_ = caml_wrap_exception(_mB_);
        if(_mB_ !== Not_found)throw _mB_;
        var _b5_=cst$64}
      var params=_b5_}
    var
     randomized_default=contains$0(params,82),
     randomized=[0,randomized_default];
    function randomize(param){randomized[1] = 1;return 0}
    function is_randomized(param){return randomized[1]}
    var prng=[246,function(_mz_){return caml_call1(_b4_[2],0)}];
    function create$3(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized[1];
      var x=16;
      for(;;)
       {if(! (initial_size <= x) && ! (max_array_length < (x * 2 | 0)))
         {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         var
          _mx_=caml_obj_tag(prng),
          _my_=250 === _mx_?prng[1]:246 === _mx_?force_lazy_block(prng):prng,
          seed=caml_call1(_b4_[4],_my_);
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function clear$2(h)
     {h[1] = 0;
      var len=h[2].length - 1,_mv_=len - 1 | 0,_mu_=0;
      if(! (_mv_ < 0))
       {var i=_mu_;
        for(;;)
         {caml_check_bound(h[2],i)[1 + i] = 0;
          var _mw_=i + 1 | 0;
          if(_mv_ !== i){var i=_mw_;continue}
          break}}
      return 0}
    function reset$0(h)
     {var len=h[2].length - 1;
      if(4 <= h.length - 1 && len !== abs(h[4]))
       {h[1] = 0;h[2] = caml_make_vect(abs(h[4]),0);return 0}
      return clear$2(h)}
    function copy_bucketlist(param)
     {if(param)
       {var
         key=param[1],
         data=param[2],
         next=param[3],
         prec$0=[0,key,data,next],
         prec=prec$0,
         param$0=next;
        for(;;)
         {if(param$0)
           {var
             key$0=param$0[1],
             data$0=param$0[2],
             next$0=param$0[3],
             r=[0,key$0,data$0,next$0];
            if(prec){prec[3] = r;var prec=r,param$0=next$0;continue}
            throw [0,Assert_failure,_b6_]}
          return prec$0}}
      return 0}
    function copy$6(init)
     {var _mr_=init[4],_ms_=init[3],_mt_=map$5(copy_bucketlist,init[2]);
      return [0,init[1],_mt_,_ms_,_mr_]}
    function length$4(h){return h[1]}
    function resize$0(indexfun,h)
     {var
       odata=h[2],
       osize=odata.length - 1,
       nsize=osize * 2 | 0,
       _mi_=nsize < max_array_length?1:0;
      if(_mi_)
       {var
         ndata=caml_make_vect(nsize,0),
         ndata_tail=caml_make_vect(nsize,0),
         inplace=1 - ongoing_traversal(h);
        h[2] = ndata;
        var _mk_=osize - 1 | 0,_mj_=0;
        if(! (_mk_ < 0))
         {var i$0=_mj_;
          a:
          for(;;)
           {var cell$1=caml_check_bound(odata,i$0)[1 + i$0],cell=cell$1;
            for(;;)
             {if(cell)
               {var
                 key=cell[1],
                 data=cell[2],
                 next=cell[3],
                 cell$0=inplace?cell:[0,key,data,0],
                 nidx=caml_call2(indexfun,h,key),
                 match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
                if(match)
                 match[3] = cell$0;
                else
                 caml_check_bound(ndata,nidx)[1 + nidx] = cell$0;
                caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$0;
                var cell=next;
                continue}
              var _mq_=i$0 + 1 | 0;
              if(_mk_ !== i$0){var i$0=_mq_;continue a}
              break}
            break}}
        if(inplace)
         {var _mm_=nsize - 1 | 0,_ml_=0;
          if(! (_mm_ < 0))
           {var i=_ml_;
            for(;;)
             {var match$0=caml_check_bound(ndata_tail,i)[1 + i];
              if(match$0)match$0[3] = 0;
              var _mp_=i + 1 | 0;
              if(_mm_ !== i){var i=_mp_;continue}
              break}}
          var _mn_=0}
        else
         var _mn_=inplace;
        var _mo_=_mn_}
      else
       var _mo_=_mi_;
      return _mo_}
    function key_index(h,key)
     {return 3 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :caml_mod
                (runtime.caml_hash_univ_param(10,100,key),h[2].length - 1)}
    function add$0(h,key,data)
     {var
       i=key_index(h,key),
       bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
      caml_check_bound(h[2],i)[1 + i] = bucket;
      h[1] = h[1] + 1 | 0;
      var _mh_=h[2].length - 1 << 1 < h[1]?1:0;
      return _mh_?resize$0(key_index,h):_mh_}
    function remove(h,key)
     {var i=key_index(h,key),c$0=caml_check_bound(h[2],i)[1 + i],prec=0,c=c$0;
      for(;;)
       {if(c)
         {var k=c[1],next=c[3];
          if(0 === caml_compare(k,key))
           {h[1] = h[1] - 1 | 0;
            return prec
                    ?(prec[3] = next,0)
                    :(caml_check_bound(h[2],i)[1 + i] = next,0)}
          var prec=c,c=next;
          continue}
        return 0}}
    function find$0(h,key)
     {var _mg_=key_index(h,key),match=caml_check_bound(h[2],_mg_)[1 + _mg_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return d3;
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return data;
                var param=next;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function find_opt$0(h,key)
     {var _mf_=key_index(h,key),match=caml_check_bound(h[2],_mf_)[1 + _mf_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return [0,d1];
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return [0,d2];
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return [0,d3];
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return [0,data];
                var param=next;
                continue}
              return 0}}
          return 0}
        return 0}
      return 0}
    function find_all$0(h,key)
     {function find_in_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var k=param$0[1],data=param$0[2],next=param$0[3];
            if(0 === caml_compare(k,key))return [0,data,find_in_bucket(next)];
            var param$0=next;
            continue}
          return 0}}
      var _me_=key_index(h,key);
      return find_in_bucket(caml_check_bound(h[2],_me_)[1 + _me_])}
    function replace(h,key,data)
     {var
       i=key_index(h,key),
       param$0=caml_check_bound(h[2],i)[1 + i],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3];
          if(0 !== caml_compare(k,key)){var param=next;continue}
          param[1] = key;
          param[2] = data;
          var _mb_=0}
        else
         var _mb_=1;
        if(_mb_)
         {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
          h[1] = h[1] + 1 | 0;
          var _mc_=h[2].length - 1 << 1 < h[1]?1:0;
          if(_mc_)return resize$0(key_index,h);
          var _md_=_mc_}
        else
         var _md_=_mb_;
        return _md_}}
    function mem$2(h,key)
     {var
       _ma_=key_index(h,key),
       param$0=caml_check_bound(h[2],_ma_)[1 + _ma_],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3],_l$_=0 === caml_compare(k,key)?1:0;
          if(_l$_)return _l$_;
          var param=next;
          continue}
        return 0}}
    function iter$10(f,h)
     {function do_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var key=param$0[1],data=param$0[2],next=param$0[3];
            caml_call2(f,key,data);
            var param$0=next;
            continue}
          return 0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],_l7_=d.length - 1 - 1 | 0,_l6_=0;
        if(! (_l7_ < 0))
         {var i=_l6_;
          for(;;)
           {do_bucket(caml_check_bound(d,i)[1 + i]);
            var _l__=i + 1 | 0;
            if(_l7_ !== i){var i=_l__;continue}
            break}}
        var _l8_=1 - old_trav,_l9_=_l8_?flip_ongoing_traversal(h):_l8_;
        return _l9_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function filter_map_inplace_bucket(f,h,i,prec,slot)
     {var prec$0=prec,slot$0=slot;
      for(;;)
       {if(slot$0)
         {var
           key=slot$0[1],
           data=slot$0[2],
           next=slot$0[3],
           match=caml_call2(f,key,data);
          if(match)
           {var data$0=match[1];
            if(prec$0)
             prec$0[3] = slot$0;
            else
             caml_check_bound(h[2],i)[1 + i] = slot$0;
            slot$0[2] = data$0;
            var prec$0=slot$0,slot$0=next;
            continue}
          h[1] = h[1] - 1 | 0;
          var slot$0=next;
          continue}
        return prec$0
                ?(prec$0[3] = 0,0)
                :(caml_check_bound(h[2],i)[1 + i] = 0,0)}}
    function filter_map_inplace(f,h)
     {var d=h[2],old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var _l3_=d.length - 1 - 1 | 0,_l2_=0;
        if(! (_l3_ < 0))
         {var i=_l2_;
          for(;;)
           {filter_map_inplace_bucket(f,h,i,0,caml_check_bound(h[2],i)[1 + i]);
            var _l5_=i + 1 | 0;
            if(_l3_ !== i){var i=_l5_;continue}
            break}}
        var _l4_=0;
        return _l4_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function fold$3(f,h,init)
     {function do_bucket(b,accu)
       {var b$0=b,accu$0=accu;
        for(;;)
         {if(b$0)
           {var
             key=b$0[1],
             data=b$0[2],
             next=b$0[3],
             accu$1=caml_call3(f,key,data,accu$0),
             b$0=next,
             accu$0=accu$1;
            continue}
          return accu$0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],accu=[0,init],_lY_=d.length - 1 - 1 | 0,_lX_=0;
        if(! (_lY_ < 0))
         {var i=_lX_;
          for(;;)
           {var _l0_=accu[1];
            accu[1] = do_bucket(caml_check_bound(d,i)[1 + i],_l0_);
            var _l1_=i + 1 | 0;
            if(_lY_ !== i){var i=_l1_;continue}
            break}}
        if(1 - old_trav)flip_ongoing_traversal(h);
        var _lZ_=accu[1];
        return _lZ_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function bucket_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[3],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function stats(h)
     {var
       _lU_=h[2],
       _lV_=0,
       mbl=
        fold_left$1(function(m,b){return max(m,bucket_length(0,b))},_lV_,_lU_),
       histo=caml_make_vect(mbl + 1 | 0,0),
       _lW_=h[2];
      iter$5
       (function(b)
         {var l=bucket_length(0,b);
          histo[1 + l] = caml_check_bound(histo,l)[1 + l] + 1 | 0;
          return 0},
        _lW_);
      return [0,h[1],h[2].length - 1,mbl,histo]}
    function to_seq$9(tbl)
     {var tbl_data=tbl[2];
      function aux(i,buck,param)
       {var i$0=i,buck$0=buck;
        for(;;)
         {if(buck$0)
           {var key=buck$0[1],data=buck$0[2],next=buck$0[3];
            return [0,[0,key,data],function(_lT_){return aux(i$0,next,_lT_)}]}
          if(i$0 === tbl_data.length - 1)return 0;
          var
           buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           buck$0=buck$1;
          continue}}
      var _lQ_=0,_lR_=0;
      return function(_lS_){return aux(_lR_,_lQ_,_lS_)}}
    function to_seq_keys(m)
     {var _lM_=to_seq$9(m);
      function _lN_(_lP_){return _lP_[1]}
      return function(_lO_){return map(_lN_,_lM_,_lO_)}}
    function to_seq_values(m)
     {var _lI_=to_seq$9(m);
      function _lJ_(_lL_){return _lL_[2]}
      return function(_lK_){return map(_lJ_,_lI_,_lK_)}}
    function add_seq$2(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return add$0(tbl,k,v)},
               i)}
    function replace_seq(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return replace(tbl,k,v)},
               i)}
    function of_seq$7(i){var tbl=create$3(0,16);replace_seq(tbl,i);return tbl}
    function MakeSeeded(H)
     {function key_index(h,key)
       {var _lH_=h[2].length - 1 - 1 | 0;
        return caml_call2(H[2],h[3],key) & _lH_}
      function add(h,key,data)
       {var
         i=key_index(h,key),
         bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
        caml_check_bound(h[2],i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _lG_=h[2].length - 1 << 1 < h[1]?1:0;
        return _lG_?resize$0(key_index,h):_lG_}
      function remove(h,key)
       {var
         i=key_index(h,key),
         c$0=caml_check_bound(h[2],i)[1 + i],
         prec=0,
         c=c$0;
        for(;;)
         {if(c)
           {var k=c[1],next=c[3];
            if(caml_call2(H[1],k,key))
             {h[1] = h[1] - 1 | 0;
              return prec
                      ?(prec[3] = next,0)
                      :(caml_check_bound(h[2],i)[1 + i] = next,0)}
            var prec=c,c=next;
            continue}
          return 0}}
      function find(h,key)
       {var _lF_=key_index(h,key),match=caml_check_bound(h[2],_lF_)[1 + _lF_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(H[1],key,k1))return d1;
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(H[1],key,k2))return d2;
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(H[1],key,k3))return d3;
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(H[1],key,k))return data;
                  var param=next;
                  continue}
                throw Not_found}}
            throw Not_found}
          throw Not_found}
        throw Not_found}
      function find_opt(h,key)
       {var _lE_=key_index(h,key),match=caml_check_bound(h[2],_lE_)[1 + _lE_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(H[1],key,k1))return [0,d1];
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(H[1],key,k2))return [0,d2];
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(H[1],key,k3))return [0,d3];
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(H[1],key,k))return [0,data];
                  var param=next;
                  continue}
                return 0}}
            return 0}
          return 0}
        return 0}
      function find_all(h,key)
       {function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var k=param$0[1],d=param$0[2],next=param$0[3];
              if(caml_call2(H[1],k,key))return [0,d,find_in_bucket(next)];
              var param$0=next;
              continue}
            return 0}}
        var _lD_=key_index(h,key);
        return find_in_bucket(caml_check_bound(h[2],_lD_)[1 + _lD_])}
      function replace(h,key,data)
       {var
         i=key_index(h,key),
         param$0=caml_check_bound(h[2],i)[1 + i],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3];
            if(! caml_call2(H[1],k,key)){var param=next;continue}
            param[1] = key;
            param[2] = data;
            var _lA_=0}
          else
           var _lA_=1;
          if(_lA_)
           {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
            h[1] = h[1] + 1 | 0;
            var _lB_=h[2].length - 1 << 1 < h[1]?1:0;
            if(_lB_)return resize$0(key_index,h);
            var _lC_=_lB_}
          else
           var _lC_=_lA_;
          return _lC_}}
      function mem(h,key)
       {var
         _lz_=key_index(h,key),
         param$0=caml_check_bound(h[2],_lz_)[1 + _lz_],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3],_ly_=caml_call2(H[1],k,key);
            if(_ly_)return _ly_;
            var param=next;
            continue}
          return 0}}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i){var tbl=create$3(0,16);replace_seq(tbl,i);return tbl}
      return [0,
              create$3,
              clear$2,
              reset$0,
              copy$6,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$10,
              filter_map_inplace,
              fold$3,
              length$4,
              stats,
              to_seq$9,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function Make(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       _lx_=include[1];
      function create(sz){return caml_call2(_lx_,_b7_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    var
     Stdlib_hashtbl=
      [0,
       create$3,
       clear$2,
       reset$0,
       copy$6,
       add$0,
       find$0,
       find_opt$0,
       find_all$0,
       mem$2,
       remove,
       replace,
       iter$10,
       filter_map_inplace,
       fold$3,
       length$4,
       randomize,
       is_randomized,
       stats,
       to_seq$9,
       to_seq_keys,
       to_seq_values,
       add_seq$2,
       replace_seq,
       of_seq$7,
       Make,
       MakeSeeded,
       hash$1,
       seeded_hash,
       hash_param,
       caml_hash];
    caml_register_global(760,Stdlib_hashtbl,"Stdlib__hashtbl");
    function weak_create(l)
     {var _lv_=0 <= l?1:0,_lw_=_lv_?l <= _s_[15]?1:0:_lv_;
      if(1 - _lw_)invalid_arg(cst_Weak_create);
      return runtime.caml_weak_create(l)}
    function length$5(x){return x.length - 1 - 2 | 0}
    function raise_if_invalid_offset$0(e,o,msg)
     {var _ls_=0 <= o?1:0,_lt_=_ls_?o < length$5(e)?1:0:_ls_,_lu_=1 - _lt_;
      return _lu_?invalid_arg(msg):_lu_}
    function set(e,o,x)
     {raise_if_invalid_offset$0(e,o,cst_Weak_set);
      if(x){var x$0=x[1];return caml_ephe_set_key(e,o,x$0)}
      return caml_ephe_unset_key(e,o)}
    function get$0(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_get);
      return runtime.caml_weak_get(e,o)}
    function get_copy(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_get_copy);
      return runtime.caml_weak_get_copy(e,o)}
    function check$0(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_check);
      return runtime.caml_weak_check(e,o)}
    function blit$4(e1,o1,e2,o2,l)
     {if
       (0
        <=
        l
        &&
        0
        <=
        o1
        &&
        !
        ((length$5(e1) - l | 0) < o1)
        &&
        0
        <=
        o2
        &&
        !
        ((length$5(e2) - l | 0) < o2))
       {var
         _lq_=0 !== l?1:0,
         _lr_=_lq_?runtime.caml_weak_blit(e1,o1,e2,o2,l):_lq_;
        return _lr_}
      return invalid_arg(cst_Weak_blit)}
    function fill$2(ar,ofs,len,x)
     {if(0 <= ofs && 0 <= len && ! ((length$5(ar) - len | 0) < ofs))
       {var _lo_=(ofs + len | 0) - 1 | 0;
        if(! (_lo_ < ofs))
         {var i=ofs;
          for(;;)
           {set(ar,i,x);
            var _lp_=i + 1 | 0;
            if(_lo_ !== i){var i=_lp_;continue}
            break}}
        return 0}
      throw [0,Invalid_argument,cst_Weak_fill]}
    function Make$0(H)
     {var emptybucket=weak_create(0);
      function get_index(t,h){return caml_mod(h & 2147483647,t[1].length - 1)}
      var limit=7;
      function create(sz)
       {var
         sz$0=7 <= sz?sz:7,
         sz$1=max_array_length < sz$0?max_array_length:sz$0;
        return [0,
                caml_make_vect(sz$1,emptybucket),
                caml_make_vect(sz$1,[0]),
                limit,
                0,
                0]}
      function clear(t)
       {var _lm_=t[1].length - 1 - 1 | 0,_ll_=0;
        if(! (_lm_ < 0))
         {var i=_ll_;
          for(;;)
           {caml_check_bound(t[1],i)[1 + i] = emptybucket;
            caml_check_bound(t[2],i)[1 + i] = [0];
            var _ln_=i + 1 | 0;
            if(_lm_ !== i){var i=_ln_;continue}
            break}}
        t[3] = limit;
        t[4] = 0;
        return 0}
      function fold(f,t,init)
       {var _lk_=t[1],i=0;
        return fold_right$0
                (function(b,accu$1)
                  {var i$0=i,accu=accu$1;
                   for(;;)
                    {if(length$5(b) <= i$0)return accu;
                     var match=get$0(b,i$0);
                     if(match)
                      {var
                        v=match[1],
                        accu$0=caml_call2(f,v,accu),
                        i$1=i$0 + 1 | 0,
                        i$0=i$1,
                        accu=accu$0;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2;
                     continue}},
                 _lk_,
                 init)}
      function iter(f,t)
       {var _lj_=t[1],i=0;
        return iter$5
                (function(b)
                  {var i$0=i;
                   for(;;)
                    {if(length$5(b) <= i$0)return 0;
                     var match=get$0(b,i$0);
                     if(match)
                      {var v=match[1];
                       caml_call1(f,v);
                       var i$1=i$0 + 1 | 0,i$0=i$1;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2;
                     continue}},
                 _lj_)}
      function count_bucket(i,b,accu)
       {var i$0=i,accu$0=accu;
        for(;;)
         {if(length$5(b) <= i$0)return accu$0;
          var
           _li_=check$0(b,i$0)?1:0,
           accu$1=accu$0 + _li_ | 0,
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           accu$0=accu$1;
          continue}}
      function count(t)
       {var _ld_=0,_le_=t[1],_lf_=0;
        return fold_right$0
                (function(_lg_,_lh_){return count_bucket(_lf_,_lg_,_lh_)},
                 _le_,
                 _ld_)}
      function add_aux(t,setter,d,h,index)
       {var
         bucket$0=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket$0),
         i$3=0;
        for(;;)
         {if(sz <= i$3)
           {var
             newsz=
              min(((3 * sz | 0) / 2 | 0) + 3 | 0,max_array_length - 2 | 0);
            if(newsz <= sz)failwith(cst_Weak_Make_hash_bucket_cann);
            var
             newbucket$0=weak_create(newsz),
             newhashes=caml_make_vect(newsz,0);
            blit$4(bucket$0,0,newbucket$0,0,sz);
            blit$1(hashes,0,newhashes,0,sz);
            caml_call3(setter,newbucket$0,sz,d);
            caml_check_bound(newhashes,sz)[1 + sz] = h;
            caml_check_bound(t[1],index)[1 + index] = newbucket$0;
            caml_check_bound(t[2],index)[1 + index] = newhashes;
            var _k$_=sz <= t[3]?1:0,_la_=_k$_?t[3] < newsz?1:0:_k$_;
            if(_la_)
             {t[4] = t[4] + 1 | 0;
              var i$4=0;
              for(;;)
               {var
                 _k1_=t[5],
                 bucket=caml_check_bound(t[1],_k1_)[1 + _k1_],
                 _k2_=t[5],
                 hbucket=caml_check_bound(t[2],_k2_)[1 + _k2_],
                 n=length$5(bucket),
                 prev_len=(((n - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
                 live=count_bucket(0,bucket,0);
                if(live <= prev_len)
                 {var j$2=length$5(bucket) - 1 | 0,i$0=0,j=j$2;
                  for(;;)
                   {if(prev_len <= j)
                     {if(check$0(bucket,i$0))
                       {var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                      if(check$0(bucket,j))
                       {blit$4(bucket,j,bucket,i$0,1);
                        var _k3_=caml_check_bound(hbucket,j)[1 + j];
                        caml_check_bound(hbucket,i$0)[1 + i$0] = _k3_;
                        var j$0=j - 1 | 0,i$2=i$0 + 1 | 0,i$0=i$2,j=j$0;
                        continue}
                      var j$1=j - 1 | 0,j=j$1;
                      continue}
                    if(0 === prev_len)
                     {var _k4_=t[5];
                      caml_check_bound(t[1],_k4_)[1 + _k4_] = emptybucket;
                      var _k5_=t[5];
                      caml_check_bound(t[2],_k5_)[1 + _k5_] = [0]}
                    else
                     {var newbucket=weak_create(prev_len);
                      blit$4(bucket,0,newbucket,0,prev_len);
                      var _k8_=t[5];
                      caml_check_bound(t[1],_k8_)[1 + _k8_] = newbucket;
                      var _k9_=sub$1(hbucket,0,prev_len),_k__=t[5];
                      caml_check_bound(t[2],_k__)[1 + _k__] = _k9_}
                    var _k6_=t[3] < n?1:0,_k7_=_k6_?prev_len <= t[3]?1:0:_k6_;
                    if(_k7_)t[4] = t[4] - 1 | 0;
                    break}}
                t[5] = caml_mod(t[5] + 1 | 0,t[1].length - 1);
                var _lc_=i$4 + 1 | 0;
                if(2 !== i$4){var i$4=_lc_;continue}
                break}}
            var _lb_=((t[1].length - 1) / 2 | 0) < t[4]?1:0;
            if(_lb_)
             {var
               n$0=t[1].length - 1,
               newlen=min(((3 * n$0 | 0) / 2 | 0) + 3 | 0,max_array_length);
              if(n$0 < newlen)
               {var newt=create(newlen),_k0_=t[1],i=0;
                iteri$2
                 (function(j,ob)
                   {var i$0=i;
                    for(;;)
                     {if(length$5(ob) <= i$0)return 0;
                      var match=check$0(ob,i$0);
                      if(0 === match){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                      var
                       oh=caml_check_bound(t[2],j)[1 + j],
                       setter$0=
                        function(i)
                         {function setter(nb,ni,param){return blit$4(ob,i,nb,ni,1)}
                          return setter},
                       setter=setter$0(i$0),
                       h=caml_check_bound(oh,i$0)[1 + i$0];
                      add_aux(newt,setter,0,h,get_index(newt,h));
                      var i$2=i$0 + 1 | 0,i$0=i$2;
                      continue}},
                  _k0_);
                t[1] = newt[1];
                t[2] = newt[2];
                t[3] = newt[3];
                t[4] = newt[4];
                t[5] = caml_mod(t[5],newt[1].length - 1);
                return 0}
              t[3] = max_int;
              t[4] = 0;
              return 0}
            return _lb_}
          if(check$0(bucket$0,i$3)){var i$5=i$3 + 1 | 0,i$3=i$5;continue}
          caml_call3(setter,bucket$0,i$3,d);
          caml_check_bound(hashes,i$3)[1 + i$3] = h;
          return 0}}
      function add(t,d)
       {var h=caml_call1(H[2],d);return add_aux(t,set,[0,d],h,get_index(t,h))}
      function find_or(t,d,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return caml_call2(ifnotfound,h,index);
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var match$0=get$0(bucket,i);
                if(match$0){var v$0=match$0[1];return v$0}
                var i$0=i + 1 | 0,i=i$0;
                continue}}
            var i$1=i + 1 | 0,i=i$1;
            continue}
          var i$2=i + 1 | 0,i=i$2;
          continue}}
      function merge(t,d)
       {return find_or
                (t,d,function(h,index){add_aux(t,set,[0,d],h,index);return d})}
      function find(t,d)
       {return find_or(t,d,function(h,index){throw Not_found})}
      function find_opt(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return 0;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var v$0=get$0(bucket,i);
                if(v$0)return v$0;
                var i$0=i + 1 | 0,i=i$0;
                continue}}
            var i$1=i + 1 | 0,i=i$1;
            continue}
          var i$2=i + 1 | 0,i=i$2;
          continue}}
      function find_shadow(t,d,iffound,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return ifnotfound;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))return caml_call2(iffound,bucket,i)}
            var i$0=i + 1 | 0,i=i$0;
            continue}
          var i$1=i + 1 | 0,i=i$1;
          continue}}
      function remove(t,d)
       {var _kZ_=0;
        return find_shadow(t,d,function(w,i){return set(w,i,0)},_kZ_)}
      function mem(t,d)
       {var _kY_=0;return find_shadow(t,d,function(w,i){return 1},_kY_)}
      function find_all(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0,
         accu=0;
        for(;;)
         {if(sz <= i)return accu;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var match$0=get$0(bucket,i);
                if(match$0)
                 {var
                   v$0=match$0[1],
                   accu$0=[0,v$0,accu],
                   i$0=i + 1 | 0,
                   i=i$0,
                   accu=accu$0;
                  continue}
                var i$1=i + 1 | 0,i=i$1;
                continue}}
            var i$2=i + 1 | 0,i=i$2;
            continue}
          var i$3=i + 1 | 0,i=i$3;
          continue}}
      function stats(t)
       {var len=t[1].length - 1,lens=map$5(length$5,t[1]);
        sort(caml_int_compare,lens);
        var
         _kQ_=0,
         totlen=
          fold_left$1(function(_kX_,_kW_){return _kX_ + _kW_ | 0},_kQ_,lens),
         _kR_=len - 1 | 0,
         _kT_=len / 2 | 0,
         _kS_=caml_check_bound(lens,_kR_)[1 + _kR_],
         _kU_=caml_check_bound(lens,_kT_)[1 + _kT_],
         _kV_=caml_check_bound(lens,0)[1];
        return [0,len,count(t),totlen,_kV_,_kU_,_kS_]}
      return [0,
              create,
              clear,
              merge,
              add,
              remove,
              find,
              find_opt,
              find_all,
              mem,
              iter,
              fold,
              count,
              stats]}
    var
     Stdlib_weak=
      [0,weak_create,length$5,set,get$0,get_copy,check$0,fill$2,blit$4,Make$0];
    caml_register_global(761,Stdlib_weak,"Stdlib__weak");
    function id$0(x){return x}
    var
     String_tag=[248,cst_Stdlib_Format_String_tag,caml_fresh_oo_id(0)],
     size=0,
     unknown=-1;
    function pp_enqueue(state,token)
     {state[13] = state[13] + token[3] | 0;return add(token,state[28])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function format_pp_text(state,size,text)
     {state[9] = state[9] - size | 0;
      pp_output_string(state,text);
      state[11] = 0;
      return 0}
    function format_string(state,s)
     {var _kP_=caml_string_notequal(s,cst$65);
      return _kP_?format_pp_text(state,caml_ml_string_length(s),s):_kP_}
    function break_new_line(state,param,width)
     {var after=param[3],offset=param[2],before=param[1];
      format_string(state,before);
      pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      caml_call1(state[21],state[10]);
      return format_string(state,after)}
    function break_line(state,width){return break_new_line(state,_b8_,width)}
    function break_same_line(state,param)
     {var after=param[3],width=param[2],before=param[1];
      format_string(state,before);
      state[9] = state[9] - width | 0;
      caml_call1(state[20],width);
      return format_string(state,after)}
    function advance_left(state)
     {for(;;)
       {var match$12=peek_opt(state[28]);
        if(match$12)
         {var
           match$13=match$12[1],
           size$0=match$13[1],
           length$0=match$13[3],
           token=match$13[2],
           pending_count=state[13] - state[12] | 0,
           _kN_=0 <= size$0?1:0,
           _kO_=_kN_ || (state[9] <= pending_count?1:0);
          if(_kO_)
           {take(state[28]);
            var size$1=0 <= size$0?size$0:pp_infinity;
            if(typeof token === "number")
             switch(token)
              {case 0:
                var match$3=top_opt(state[3]);
                if(match$3)
                 {var
                   match$4=match$3[1],
                   tabs=match$4[1],
                   add_tab=
                    function(n,ls)
                     {if(ls)
                       {var l=ls[2],x=ls[1];
                        return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                      return [0,n,0]};
                  tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1])}
                break;
               case 1:pop_opt(state[2]);break;
               case 2:pop_opt(state[3]);break;
               case 3:
                var match$5=top_opt(state[2]);
                if(match$5)
                 {var match$6=match$5[1],width$0=match$6[2];
                  break_line(state,width$0)}
                else
                 pp_output_newline(state);
                break;
               case 4:
                if(state[10] !== (state[6] - state[9] | 0))
                 {var match$1=take_opt(state[28]);
                  if(match$1)
                   {var match$2=match$1[1],size=match$2[1],length=match$2[3];
                    state[12] = state[12] - length | 0;
                    state[9] = state[9] + size | 0}}
                break;
               default:
                var match$7=pop_opt(state[5]);
                if(match$7)
                 {var
                   tag_name=match$7[1],
                   marker=caml_call1(state[25],tag_name);
                  pp_output_string(state,marker)}}
            else
             switch(token[0])
              {case 0:var s=token[1];format_pp_text(state,size$1,s);break;
               case 1:
                var
                 breaks=token[2],
                 fits=token[1],
                 off=breaks[2],
                 before=breaks[1],
                 match$8=top_opt(state[2]);
                if(match$8)
                 {var
                   match$9=match$8[1],
                   width$1=match$9[2],
                   box_type$0=match$9[1];
                  switch(box_type$0)
                   {case 0:break_same_line(state,fits);break;
                    case 1:break_new_line(state,breaks,width$1);break;
                    case 2:break_new_line(state,breaks,width$1);break;
                    case 3:
                     if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                      break_new_line(state,breaks,width$1);
                     else
                      break_same_line(state,fits);
                     break;
                    case 4:
                     if(state[11])
                      break_same_line(state,fits);
                     else
                      if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                       break_new_line(state,breaks,width$1);
                      else
                       if(((state[6] - width$1 | 0) + off | 0) < state[10])
                        break_new_line(state,breaks,width$1);
                       else
                        break_same_line(state,fits);
                     break;
                    default:break_same_line(state,fits)}}
                break;
               case 2:
                var
                 off$0=token[2],
                 n=token[1],
                 insertion_point=state[6] - state[9] | 0,
                 match$10=top_opt(state[3]);
                if(match$10)
                 {var match$11=match$10[1],tabs$0=match$11[1],_kL_=tabs$0[1];
                  if(_kL_)
                   {var first=_kL_[1],param=tabs$0[1];
                    for(;;)
                     {if(param)
                       {var tail=param[2],head=param[1];
                        if(! (insertion_point <= head)){var param=tail;continue}
                        var _kM_=head}
                      else
                       var _kM_=first;
                      var tab=_kM_;
                      break}}
                  else
                   var tab=insertion_point;
                  var offset=tab - insertion_point | 0;
                  if(0 <= offset)
                   break_same_line(state,[0,cst$67,offset + n | 0,cst$66]);
                  else
                   break_new_line
                    (state,[0,cst$69,tab + off$0 | 0,cst$68],state[6])}
                break;
               case 3:
                var
                 ty=token[2],
                 off$1=token[1],
                 insertion_point$0=state[6] - state[9] | 0;
                if(state[8] < insertion_point$0)
                 {var match=top_opt(state[2]);
                  if(match)
                   {var match$0=match[1],width=match$0[2],box_type=match$0[1];
                    if(state[9] < width)
                     {var switcher=box_type - 1 | 0;
                      if(! (3 < switcher >>> 0))break_line(state,width)}}
                  else
                   pp_output_newline(state)}
                var
                 width$2=state[9] - off$1 | 0,
                 box_type$1=1 === ty?1:state[9] < size$1?ty:5;
                push([0,box_type$1,width$2],state[2]);
                break;
               case 4:var tbox=token[1];push(tbox,state[3]);break;
               default:
                var
                 tag_name$0=token[1],
                 marker$0=caml_call1(state[24],tag_name$0);
                pp_output_string(state,marker$0);
                push(tag_name$0,state[5])}
            state[12] = length$0 + state[12] | 0;
            continue}
          return _kO_}
        return 0}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    function initialize_scan_stack(stack)
     {clear(stack);
      var queue_elem=[0,unknown,_b9_,0];
      return push([0,-1,queue_elem],stack)}
    function set_size(state,ty)
     {var match=top_opt(state[1]);
      if(match)
       {var
         match$0=match[1],
         queue_elem=match$0[2],
         left_total=match$0[1],
         _kI_=queue_elem[1];
        if(left_total < state[12])return initialize_scan_stack(state[1]);
        var _kJ_=queue_elem[2];
        if(typeof _kJ_ !== "number")
         switch(_kJ_[0])
          {case 3:
            var _kK_=1 - ty;
            return _kK_
                    ?(queue_elem[1] = state[13] + _kI_ | 0,pop_opt(state[1]),0)
                    :_kK_;
           case 1:
           case 2:
            return ty
                    ?(queue_elem[1] = state[13] + _kI_ | 0,pop_opt(state[1]),0)
                    :ty
           }
        return 0}
      return 0}
    function scan_push(state,b,token)
     {pp_enqueue(state,token);
      if(b)set_size(state,1);
      var elem=[0,state[13],token];
      return push(elem,state[1])}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var size=- state[13] | 0,elem=[0,size,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _kG_=state[14] === state[15]?1:0;
      if(_kG_)
       {var _kH_=state[16];
        return enqueue_string_as(state,caml_ml_string_length(_kH_),_kH_)}
      return _kG_}
    function pp_close_box(state,param)
     {var _kE_=1 < state[14]?1:0;
      if(_kE_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,size,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _kF_=0}
      else
       var _kF_=_kE_;
      return _kF_}
    function pp_open_stag(state,tag_name)
     {if(state[22]){push(tag_name,state[4]);caml_call1(state[26],tag_name)}
      var _kD_=state[23];
      if(_kD_)
       {var token=[5,tag_name];return pp_enqueue(state,[0,size,token,0])}
      return _kD_}
    function pp_close_stag(state,param)
     {if(state[23])pp_enqueue(state,[0,size,5,0]);
      var _kB_=state[22];
      if(_kB_)
       {var match=pop_opt(state[4]);
        if(match){var tag_name=match[1];return caml_call1(state[27],tag_name)}
        var _kC_=0}
      else
       var _kC_=_kB_;
      return _kC_}
    function pp_open_tag(state,s){return pp_open_stag(state,[0,String_tag,s])}
    function pp_close_tag(state,param){return pp_close_stag(state,0)}
    function pp_set_print_tags(state,b){state[22] = b;return 0}
    function pp_set_mark_tags(state,b){state[23] = b;return 0}
    function pp_get_print_tags(state,param){return state[22]}
    function pp_get_mark_tags(state,param){return state[23]}
    function pp_set_tags(state,b)
     {pp_set_print_tags(state,b);return pp_set_mark_tags(state,b)}
    function pp_get_formatter_stag_function(state,param)
     {return [0,state[24],state[25],state[26],state[27]]}
    function pp_set_formatter_stag_function(state,param)
     {var pct=param[4],pot=param[3],mct=param[2],mot=param[1];
      state[24] = mot;
      state[25] = mct;
      state[26] = pot;
      state[27] = pct;
      return 0}
    function pp_rinit(state)
     {state[12] = 1;
      state[13] = 1;
      clear$0(state[28]);
      initialize_scan_stack(state[1]);
      clear(state[2]);
      clear(state[3]);
      clear(state[4]);
      clear(state[5]);
      state[10] = 0;
      state[14] = 0;
      state[9] = state[6];
      return pp_open_box_gen(state,0,3)}
    function pp_flush_queue(state,b)
     {var _kA_=state[4];
      iter$7(function(param){return pp_close_tag(state,0)},_kA_);
      for(;;)
       {if(1 < state[14]){pp_close_box(state,0);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        return pp_rinit(state)}}
    function pp_print_as_size(state,size,s)
     {var _kz_=state[14] < state[15]?1:0;
      return _kz_?enqueue_string_as(state,size,s):_kz_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp_print_string(state,s)
     {return pp_print_as(state,caml_ml_string_length(s),s)}
    function pp_print_int(state,i)
     {return pp_print_string(state,caml_string_of_jsbytes("" + i))}
    function pp_print_float(state,f)
     {return pp_print_string(state,to_string(f))}
    function pp_print_bool(state,b)
     {return pp_print_string(state,string_of_bool(b))}
    function pp_print_char(state,c){return pp_print_as(state,1,make$0(1,c))}
    function pp_open_hbox(state,param){return pp_open_box_gen(state,0,0)}
    function pp_open_vbox(state,indent)
     {return pp_open_box_gen(state,indent,1)}
    function pp_open_hvbox(state,indent)
     {return pp_open_box_gen(state,indent,2)}
    function pp_open_hovbox(state,indent)
     {return pp_open_box_gen(state,indent,3)}
    function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
    function pp_print_newline(state,param)
     {pp_flush_queue(state,1);return caml_call1(state[18],0)}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    function pp_force_newline(state,param)
     {var _ky_=state[14] < state[15]?1:0;
      return _ky_?enqueue_advance(state,[0,size,3,0]):_ky_}
    function pp_print_if_newline(state,param)
     {var _kx_=state[14] < state[15]?1:0;
      return _kx_?enqueue_advance(state,[0,size,4,0]):_kx_}
    function pp_print_custom_break(state,fits,breaks)
     {var
       after=fits[3],
       width=fits[2],
       before=fits[1],
       _kw_=state[14] < state[15]?1:0;
      if(_kw_)
       {var
         size=- state[13] | 0,
         token=[1,fits,breaks],
         length=
          (caml_ml_string_length(before) + width | 0)
          +
          caml_ml_string_length(after)
          |
          0,
         elem=[0,size,token,length];
        return scan_push(state,1,elem)}
      return _kw_}
    function pp_print_break(state,width,offset)
     {return pp_print_custom_break
              (state,[0,cst$73,width,cst$72],[0,cst$71,offset,cst$70])}
    function pp_print_space(state,param){return pp_print_break(state,1,0)}
    function pp_print_cut(state,param){return pp_print_break(state,0,0)}
    function pp_open_tbox(state,param)
     {state[14] = state[14] + 1 | 0;
      var _kv_=state[14] < state[15]?1:0;
      if(_kv_)
       {var elem=[0,size,[4,[0,[0,0]]],0];return enqueue_advance(state,elem)}
      return _kv_}
    function pp_close_tbox(state,param)
     {var _ks_=1 < state[14]?1:0;
      if(_ks_)
       {var _kt_=state[14] < state[15]?1:0;
        if(_kt_)
         {var elem=[0,size,2,0];
          enqueue_advance(state,elem);
          state[14] = state[14] - 1 | 0;
          var _ku_=0}
        else
         var _ku_=_kt_}
      else
       var _ku_=_ks_;
      return _ku_}
    function pp_print_tbreak(state,width,offset)
     {var _kr_=state[14] < state[15]?1:0;
      if(_kr_)
       {var size=- state[13] | 0,elem=[0,size,[2,width,offset],width];
        return scan_push(state,1,elem)}
      return _kr_}
    function pp_print_tab(state,param){return pp_print_tbreak(state,0,0)}
    function pp_set_tab(state,param)
     {var _kq_=state[14] < state[15]?1:0;
      if(_kq_){var elem=[0,size,0,0];return enqueue_advance(state,elem)}
      return _kq_}
    function pp_set_max_boxes(state,n)
     {var _ko_=1 < n?1:0,_kp_=_ko_?(state[15] = n,0):_ko_;return _kp_}
    function pp_get_max_boxes(state,param){return state[15]}
    function pp_over_max_boxes(state,param)
     {return state[14] === state[15]?1:0}
    function pp_set_ellipsis_text(state,s){state[16] = s;return 0}
    function pp_get_ellipsis_text(state,param){return state[16]}
    function pp_limit(n){return n < 1000000010?n:1000000009}
    function pp_set_max_indent(state,n$0)
     {var _kn_=1 < n$0?1:0;
      if(_kn_)
       {var n$1=state[6] - n$0 | 0,_km_=1 <= n$1?1:0;
        if(_km_)
         {var n=pp_limit(n$1);
          state[7] = n;
          state[8] = state[6] - state[7] | 0;
          return pp_rinit(state)}
        return _km_}
      return _kn_}
    function pp_get_max_indent(state,param){return state[8]}
    function pp_set_margin(state,n)
     {var _kl_=1 <= n?1:0;
      if(_kl_)
       {var n$0=pp_limit(n);
        state[6] = n$0;
        var
         new_max_indent=
          state[8] <= state[6]
           ?state[8]
           :max(max(state[6] - state[7] | 0,state[6] / 2 | 0),1);
        return pp_set_max_indent(state,new_max_indent)}
      return _kl_}
    function check_geometry(geometry)
     {var
       _kj_=1 < geometry[1]?1:0,
       _kk_=_kj_?geometry[1] < geometry[2]?1:0:_kj_;
      return _kk_}
    function pp_get_margin(state,param){return state[6]}
    function pp_set_geometry(state,max_indent,margin)
     {if(2 <= max_indent)
       {if(margin <= max_indent)
         throw [0,Invalid_argument,cst_Format_pp_set_geometry_mar];
        pp_set_margin(state,margin);
        return pp_set_max_indent(state,max_indent)}
      throw [0,Invalid_argument,cst_Format_pp_set_geometry_max]}
    function pp_safe_set_geometry(state,max_indent,margin)
     {return check_geometry([0,max_indent,margin])
              ?pp_set_geometry(state,max_indent,margin)
              :0}
    function pp_get_geometry(state,param){return [0,state[8],state[6]]}
    function pp_set_formatter_out_functions(state,param)
     {var j=param[5],i=param[4],h=param[3],g=param[2],f=param[1];
      state[17] = f;
      state[18] = g;
      state[19] = h;
      state[20] = i;
      state[21] = j;
      return 0}
    function pp_get_formatter_out_functions(state,param)
     {return [0,state[17],state[18],state[19],state[20],state[21]]}
    function pp_set_formatter_output_functi(state,f,g)
     {state[17] = f;state[18] = g;return 0}
    function pp_get_formatter_output_functi(state,param)
     {return [0,state[17],state[18]]}
    function display_newline(state,param)
     {return caml_call3(state[17],cst$74,0,1)}
    var blank_line=make$0(80,32);
    function display_indent(state,n)
     {var n$0=n;
      for(;;)
       {var _ki_=0 < n$0?1:0;
        if(_ki_)
         {if(80 < n$0)
           {caml_call3(state[17],blank_line,0,80);
            var n$1=n$0 - 80 | 0,n$0=n$1;
            continue}
          return caml_call3(state[17],blank_line,0,n$0)}
        return _ki_}}
    function pp_set_formatter_out_channel(state,oc)
     {state[17]
      =
      function(_kf_,_kg_,_kh_){return output_substring(oc,_kf_,_kg_,_kh_)};
      state[18] = function(param){return caml_ml_flush(oc)};
      state[19] = function(_ke_){return display_newline(state,_ke_)};
      state[20] = function(_kd_){return display_indent(state,_kd_)};
      state[21] = function(_kc_){return display_indent(state,_kc_)};
      return 0}
    function default_pp_mark_open_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(cst$76,symbol(s,cst$75))}
      return cst$77}
    function default_pp_mark_close_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(cst$79,symbol(s,cst$78))}
      return cst$80}
    function default_pp_print_open_tag(_kb_){return 0}
    function default_pp_print_close_tag(_ka_){return 0}
    function pp_make_formatter(f,g,h,i,j)
     {var pp_queue=create$1(0),sys_tok=[0,unknown,_b__,0];
      add(sys_tok,pp_queue);
      var scan_stack=create$0(0);
      initialize_scan_stack(scan_stack);
      push([0,1,sys_tok],scan_stack);
      var _j9_=create$0(0),_j__=create$0(0),_j$_=create$0(0);
      return [0,
              scan_stack,
              create$0(0),
              _j$_,
              _j__,
              _j9_,
              78,
              10,
              68,
              78,
              0,
              1,
              1,
              1,
              1,
              max_int,
              cst$81,
              f,
              g,
              h,
              i,
              j,
              0,
              0,
              default_pp_mark_open_tag,
              default_pp_mark_close_tag,
              default_pp_print_open_tag,
              default_pp_print_close_tag,
              pp_queue]}
    function formatter_of_out_functions(out_funs)
     {return pp_make_formatter
              (out_funs[1],out_funs[2],out_funs[3],out_funs[4],out_funs[5])}
    function make_formatter(output,flush)
     {function _j1_(_j8_){return 0}
      function _j2_(_j7_){return 0}
      var
       ppf=
        pp_make_formatter(output,flush,function(_j6_){return 0},_j2_,_j1_);
      ppf[19] = function(_j5_){return display_newline(ppf,_j5_)};
      ppf[20] = function(_j4_){return display_indent(ppf,_j4_)};
      ppf[21] = function(_j3_){return display_indent(ppf,_j3_)};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _jX_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(_jY_,_jZ_,_j0_)
                {return output_substring(oc,_jY_,_jZ_,_j0_)},
               _jX_)}
    function formatter_of_buffer(b)
     {function _jS_(_jW_){return 0}
      return make_formatter
              (function(_jT_,_jU_,_jV_)
                {return add_substring(b,_jT_,_jU_,_jV_)},
               _jS_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create$2(pp_buffer_size)}
    var
     stdbuf=pp_make_buffer(0),
     std_formatter=formatter_of_out_channel(stdout),
     err_formatter=formatter_of_out_channel(stderr),
     str_formatter=formatter_of_buffer(stdbuf);
    function flush_buffer_formatter(buf,ppf)
     {pp_flush_queue(ppf,0);var s=contents(buf);reset(buf);return s}
    function flush_str_formatter(param)
     {return flush_buffer_formatter(stdbuf,str_formatter)}
    function make_symbolic_output_buffer(param){return [0,0]}
    function clear_symbolic_output_buffer(sob){sob[1] = 0;return 0}
    function get_symbolic_output_buffer(sob){return rev(sob[1])}
    function flush_symbolic_output_buffer(sob)
     {var items=get_symbolic_output_buffer(sob);
      clear_symbolic_output_buffer(sob);
      return items}
    function add_symbolic_output_item(sob,item)
     {sob[1] = [0,item,sob[1]];return 0}
    function formatter_of_symbolic_output_b(sob)
     {function f(s,i,n){return add_symbolic_output_item(sob,[0,sub$0(s,i,n)])}
      function g(_jR_){return add_symbolic_output_item(sob,0)}
      function h(_jQ_){return add_symbolic_output_item(sob,1)}
      function i(n){return add_symbolic_output_item(sob,[1,n])}
      function j(n){return add_symbolic_output_item(sob,[2,n])}
      return pp_make_formatter(f,g,h,i,j)}
    function open_hbox(_jP_){return pp_open_hbox(std_formatter,_jP_)}
    function open_vbox(_jO_){return pp_open_vbox(std_formatter,_jO_)}
    function open_hvbox(_jN_){return pp_open_hvbox(std_formatter,_jN_)}
    function open_hovbox(_jM_){return pp_open_hovbox(std_formatter,_jM_)}
    function open_box(_jL_){return pp_open_box(std_formatter,_jL_)}
    function close_box(_jK_){return pp_close_box(std_formatter,_jK_)}
    function open_tag(_jJ_){return pp_open_tag(std_formatter,_jJ_)}
    function close_tag(_jI_){return pp_close_tag(std_formatter,_jI_)}
    function open_stag(_jH_){return pp_open_stag(std_formatter,_jH_)}
    function close_stag(_jG_){return pp_close_stag(std_formatter,_jG_)}
    function print_as(_jE_,_jF_){return pp_print_as(std_formatter,_jE_,_jF_)}
    function print_string$0(_jD_){return pp_print_string(std_formatter,_jD_)}
    function print_int$0(_jC_){return pp_print_int(std_formatter,_jC_)}
    function print_float$0(_jB_){return pp_print_float(std_formatter,_jB_)}
    function print_char$0(_jA_){return pp_print_char(std_formatter,_jA_)}
    function print_bool(_jz_){return pp_print_bool(std_formatter,_jz_)}
    function print_break(_jx_,_jy_)
     {return pp_print_break(std_formatter,_jx_,_jy_)}
    function print_cut(_jw_){return pp_print_cut(std_formatter,_jw_)}
    function print_space(_jv_){return pp_print_space(std_formatter,_jv_)}
    function force_newline(_ju_){return pp_force_newline(std_formatter,_ju_)}
    function print_flush(_jt_){return pp_print_flush(std_formatter,_jt_)}
    function print_newline$0(_js_)
     {return pp_print_newline(std_formatter,_js_)}
    function print_if_newline(_jr_)
     {return pp_print_if_newline(std_formatter,_jr_)}
    function open_tbox(_jq_){return pp_open_tbox(std_formatter,_jq_)}
    function close_tbox(_jp_){return pp_close_tbox(std_formatter,_jp_)}
    function print_tbreak(_jn_,_jo_)
     {return pp_print_tbreak(std_formatter,_jn_,_jo_)}
    function set_tab(_jm_){return pp_set_tab(std_formatter,_jm_)}
    function print_tab(_jl_){return pp_print_tab(std_formatter,_jl_)}
    function set_margin(_jk_){return pp_set_margin(std_formatter,_jk_)}
    function get_margin(_jj_){return std_formatter[6]}
    function set_max_indent(_ji_)
     {return pp_set_max_indent(std_formatter,_ji_)}
    function get_max_indent(_jh_){return std_formatter[8]}
    function set_geometry(_jf_,_jg_)
     {return pp_set_geometry(std_formatter,_jf_,_jg_)}
    function safe_set_geometry(_jd_,_je_)
     {return pp_safe_set_geometry(std_formatter,_jd_,_je_)}
    function get_geometry(_jc_){return pp_get_geometry(std_formatter,_jc_)}
    function set_max_boxes(_jb_){return pp_set_max_boxes(std_formatter,_jb_)}
    function get_max_boxes(_ja_){return std_formatter[15]}
    function over_max_boxes(_i$_)
     {return pp_over_max_boxes(std_formatter,_i$_)}
    function set_ellipsis_text(_i__)
     {return pp_set_ellipsis_text(std_formatter,_i__)}
    function get_ellipsis_text(_i9_){return std_formatter[16]}
    function set_formatter_out_channel(_i8_)
     {return pp_set_formatter_out_channel(std_formatter,_i8_)}
    function set_formatter_out_functions(_i7_)
     {return pp_set_formatter_out_functions(std_formatter,_i7_)}
    function get_formatter_out_functions(_i6_)
     {return pp_get_formatter_out_functions(std_formatter,_i6_)}
    function set_formatter_output_functions(_i4_,_i5_)
     {return pp_set_formatter_output_functi(std_formatter,_i4_,_i5_)}
    function get_formatter_output_functions(_i3_)
     {return pp_get_formatter_output_functi(std_formatter,_i3_)}
    function set_formatter_stag_functions(_i2_)
     {return pp_set_formatter_stag_function(std_formatter,_i2_)}
    function get_formatter_stag_functions(_i1_)
     {return pp_get_formatter_stag_function(std_formatter,_i1_)}
    function set_print_tags(_i0_)
     {return pp_set_print_tags(std_formatter,_i0_)}
    function get_print_tags(_iZ_){return std_formatter[22]}
    function set_mark_tags(_iY_){return pp_set_mark_tags(std_formatter,_iY_)}
    function get_mark_tags(_iX_){return std_formatter[23]}
    function set_tags(_iW_){return pp_set_tags(std_formatter,_iW_)}
    function pp_print_list(opt,pp_v,ppf,param)
     {var opt$0=opt,param$0=param;
      for(;;)
       {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=pp_print_cut;
        if(param$0)
         {var _iU_=param$0[2],_iV_=param$0[1];
          if(_iU_)
           {caml_call2(pp_v,ppf,_iV_);
            caml_call2(pp_sep,ppf,0);
            var opt$1=[0,pp_sep],opt$0=opt$1,param$0=_iU_;
            continue}
          return caml_call2(pp_v,ppf,_iV_)}
        return 0}}
    function pp_print_text(ppf,s)
     {var len=caml_ml_string_length(s),left=[0,0],right=[0,0];
      function flush(param)
       {pp_print_string(ppf,sub$0(s,left[1],right[1] - left[1] | 0));
        right[1]++;
        left[1] = right[1];
        return 0}
      for(;;)
       {if(right[1] !== len)
         {var match=caml_string_get(s,right[1]);
          if(10 === match)
           {flush(0);pp_force_newline(ppf,0)}
          else
           if(32 === match){flush(0);pp_print_space(ppf,0)}else right[1]++;
          continue}
        var _iT_=left[1] !== len?1:0;
        return _iT_?flush(0):_iT_}}
    function pp_print_option(opt,pp_v,ppf,param)
     {if(opt)
       var sth=opt[1],none=sth;
      else
       var none=function(param,_iS_){return 0};
      if(param){var v=param[1];return caml_call2(pp_v,ppf,v)}
      return caml_call2(none,ppf,0)}
    function pp_print_result(ok,error,ppf,param)
     {if(0 === param[0]){var v=param[1];return caml_call2(ok,ppf,v)}
      var e=param[1];
      return caml_call2(error,ppf,e)}
    function compute_tag(output,tag_acc)
     {var buf=create$2(16),ppf=formatter_of_buffer(buf);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=buf[2];
      return 2 <= len?sub$3(buf,1,len - 2 | 0):contents(buf)}
    function output_formatting_lit(ppf,fmting_lit)
     {if(typeof fmting_lit === "number")
       switch(fmting_lit)
        {case 0:return pp_close_box(ppf,0);
         case 1:return pp_close_tag(ppf,0);
         case 2:return pp_print_flush(ppf,0);
         case 3:return pp_force_newline(ppf,0);
         case 4:return pp_print_newline(ppf,0);
         case 5:return pp_print_char(ppf,64);
         default:return pp_print_char(ppf,37)}
      else
       switch(fmting_lit[0])
        {case 0:
          var offset=fmting_lit[3],width=fmting_lit[2];
          return pp_print_break(ppf,width,offset);
         case 1:return 0;
         default:
          var c=fmting_lit[1];
          pp_print_char(ppf,64);
          return pp_print_char(ppf,c)}}
    function output_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _iI_=acc[2],_iJ_=acc[1];
          if(0 === _iI_[0])
           {var acc$0=_iI_[1];
            output_acc$0(ppf,_iJ_);
            return pp_open_stag
                    (ppf,[0,String_tag,compute_tag(output_acc$0,acc$0)])}
          var acc$1=_iI_[1];
          output_acc$0(ppf,_iJ_);
          var
           match=open_box_of_string(compute_tag(output_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _iK_=acc[1],switch$1=0;
          if(typeof _iK_ !== "number" && 0 === _iK_[0])
           {var _iL_=_iK_[2],switch$2=0;
            if(typeof _iL_ !== "number" && 1 === _iL_[0])
             {var p$1=_iK_[1],size=_iL_[2],s$0=acc[2];
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var p$0=_iK_,s=acc[2];switch$0 = 2}
          break;
         case 3:
          var _iM_=acc[1],switch$3=0;
          if(typeof _iM_ !== "number" && 0 === _iM_[0])
           {var _iN_=_iM_[2],switch$4=0;
            if(typeof _iN_ !== "number" && 1 === _iN_[0])
             {var p$3=_iM_[1],size$0=_iN_[2],c$0=acc[2];
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var p$2=_iM_,c=acc[2];switch$0 = 3}
          break;
         case 4:
          var _iO_=acc[1],switch$5=0;
          if(typeof _iO_ !== "number" && 0 === _iO_[0])
           {var _iP_=_iO_[2],switch$6=0;
            if(typeof _iP_ !== "number" && 1 === _iP_[0])
             {var p$1=_iO_[1],size=_iP_[2],s$0=acc[2];
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var p$0=_iO_,s=acc[2];switch$0 = 2}
          break;
         case 5:
          var _iQ_=acc[1],switch$7=0;
          if(typeof _iQ_ === "number" || ! (0 === _iQ_[0]))
           switch$7 = 1;
          else
           {var _iR_=_iQ_[2],switch$8=0;
            if(typeof _iR_ !== "number" && 1 === _iR_[0])
             {var p$3=_iQ_[1],size$0=_iR_[2],c$0=acc[2];
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var p$2=_iQ_,c=acc[2];switch$0 = 3}
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc$0(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         output_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$0));
        case 2:output_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:output_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function strput_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          strput_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _iw_=acc[2],_ix_=acc[1];
          if(0 === _iw_[0])
           {var acc$0=_iw_[1];
            strput_acc$0(ppf,_ix_);
            return pp_open_stag
                    (ppf,[0,String_tag,compute_tag(strput_acc$0,acc$0)])}
          var acc$1=_iw_[1];
          strput_acc$0(ppf,_ix_);
          var
           match=open_box_of_string(compute_tag(strput_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _iy_=acc[1],switch$1=0;
          if(typeof _iy_ !== "number" && 0 === _iy_[0])
           {var _iz_=_iy_[2],switch$2=0;
            if(typeof _iz_ !== "number" && 1 === _iz_[0])
             {var p$1=_iy_[1],size=_iz_[2],s$0=acc[2];
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var p$0=_iy_,s=acc[2];switch$0 = 2}
          break;
         case 3:
          var _iA_=acc[1],switch$3=0;
          if(typeof _iA_ !== "number" && 0 === _iA_[0])
           {var _iB_=_iA_[2],switch$4=0;
            if(typeof _iB_ !== "number" && 1 === _iB_[0])
             {var p$3=_iA_[1],size$0=_iB_[2],c$0=acc[2];
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var p$2=_iA_,c=acc[2];switch$0 = 3}
          break;
         case 4:
          var _iC_=acc[1],switch$5=0;
          if(typeof _iC_ !== "number" && 0 === _iC_[0])
           {var _iD_=_iC_[2],switch$6=0;
            if(typeof _iD_ !== "number" && 1 === _iD_[0])
             {var p$1=_iC_[1],size=_iD_[2],s$0=acc[2];
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var p$0=_iC_,s=acc[2];switch$0 = 2}
          break;
         case 5:
          var _iE_=acc[1],switch$7=0;
          if(typeof _iE_ === "number" || ! (0 === _iE_[0]))
           switch$7 = 1;
          else
           {var _iF_=_iE_[2],switch$8=0;
            if(typeof _iF_ !== "number" && 1 === _iF_[0])
             {var p$3=_iE_[1],size$0=_iF_[2],c$0=acc[2];
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var p$2=_iE_,c=acc[2];switch$0 = 3}
          break;
         case 6:
          var _iG_=acc[1];
          if(typeof _iG_ !== "number" && 0 === _iG_[0])
           {var _iH_=_iG_[2];
            if(typeof _iH_ !== "number" && 1 === _iH_[0])
             {var f$1=acc[2],size$1=_iH_[2],p$4=_iG_[1];
              strput_acc$0(ppf,p$4);
              return pp_print_as_size(ppf,size$1,caml_call1(f$1,0))}}
          var f$0=acc[2];
          strput_acc$0(ppf,_iG_);
          return pp_print_string(ppf,caml_call1(f$0,0));
         case 7:
          var p$5=acc[1];strput_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          strput_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:strput_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         strput_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$0));
        case 2:strput_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:strput_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function kfprintf$0(k,ppf,param)
     {var fmt=param[1],_iv_=0;
      return make_printf
              (function(acc){output_acc$0(ppf,acc);return caml_call1(k,ppf)},
               _iv_,
               fmt)}
    function ikfprintf$0(k,ppf,param)
     {var fmt=param[1];return make_iprintf(k,ppf,fmt)}
    function ifprintf$0(ppf,param)
     {var fmt=param[1],_it_=0;
      return make_iprintf(function(_iu_){return 0},_it_,fmt)}
    function fprintf$0(ppf)
     {function _iq_(_is_){return 0}
      return function(_ir_){return kfprintf$0(_iq_,ppf,_ir_)}}
    function printf$0(fmt){return caml_call1(fprintf$0(std_formatter),fmt)}
    function eprintf$0(fmt){return caml_call1(fprintf$0(err_formatter),fmt)}
    function kdprintf(k,param)
     {var fmt=param[1],_ip_=0;
      return make_printf
              (function(acc)
                {return caml_call1
                         (k,function(ppf){return output_acc$0(ppf,acc)})},
               _ip_,
               fmt)}
    function dprintf(fmt){return kdprintf(function(i){return i},fmt)}
    function kprintf(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(acc)
       {strput_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function sprintf$0(fmt){return kprintf(id$0,fmt)}
    function kasprintf(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(acc)
       {output_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function asprintf(fmt){return kasprintf(id$0,fmt)}
    function flush_standard_formatters(param)
     {pp_print_flush(std_formatter,0);return pp_print_flush(err_formatter,0)}
    at_exit(flush_standard_formatters);
    function pp_set_all_formatter_output_fu(state,f,g,h,i)
     {pp_set_formatter_output_functi(state,f,g);
      state[19] = h;
      state[20] = i;
      return 0}
    function pp_get_all_formatter_output_fu(state,param)
     {return [0,state[17],state[18],state[19],state[20]]}
    function set_all_formatter_output_funct(_il_,_im_,_in_,_io_)
     {return pp_set_all_formatter_output_fu(std_formatter,_il_,_im_,_in_,_io_)}
    function get_all_formatter_output_funct(_ik_)
     {return pp_get_all_formatter_output_fu(std_formatter,_ik_)}
    function bprintf$0(b,param)
     {var fmt=param[1],ppf=formatter_of_buffer(b);
      function k(acc){output_acc$0(ppf,acc);return pp_flush_queue(ppf,0)}
      return make_printf(k,0,fmt)}
    function pp_set_formatter_tag_functions(state,param)
     {var pct=param[4],pot=param[3],mct=param[2],mot=param[1];
      function stringify(f,e,param)
       {if(param[1] === String_tag){var s=param[2];return caml_call1(f,s)}
        return e}
      state[24] = function(_ij_){return stringify(mot,cst$82,_ij_)};
      state[25] = function(_ii_){return stringify(mct,cst$83,_ii_)};
      var _ie_=0;
      state[26] = function(_ih_){return stringify(pot,_ie_,_ih_)};
      var _if_=0;
      state[27] = function(_ig_){return stringify(pct,_if_,_ig_)};
      return 0}
    function pp_get_formatter_tag_functions(fmt,param)
     {var funs=pp_get_formatter_stag_function(fmt,0);
      function mark_open_tag(s){return caml_call1(funs[1],[0,String_tag,s])}
      function mark_close_tag(s){return caml_call1(funs[2],[0,String_tag,s])}
      function print_open_tag(s){return caml_call1(funs[3],[0,String_tag,s])}
      function print_close_tag(s){return caml_call1(funs[4],[0,String_tag,s])}
      return [0,mark_open_tag,mark_close_tag,print_open_tag,print_close_tag]}
    function set_formatter_tag_functions(_id_)
     {return pp_set_formatter_tag_functions(std_formatter,_id_)}
    function get_formatter_tag_functions(_ic_)
     {return pp_get_formatter_tag_functions(std_formatter,_ic_)}
    var
     Stdlib_format=
      [0,
       pp_open_box,
       open_box,
       pp_close_box,
       close_box,
       pp_open_hbox,
       open_hbox,
       pp_open_vbox,
       open_vbox,
       pp_open_hvbox,
       open_hvbox,
       pp_open_hovbox,
       open_hovbox,
       pp_print_string,
       print_string$0,
       pp_print_as,
       print_as,
       pp_print_int,
       print_int$0,
       pp_print_float,
       print_float$0,
       pp_print_char,
       print_char$0,
       pp_print_bool,
       print_bool,
       pp_print_space,
       print_space,
       pp_print_cut,
       print_cut,
       pp_print_break,
       print_break,
       pp_print_custom_break,
       pp_force_newline,
       force_newline,
       pp_print_if_newline,
       print_if_newline,
       pp_print_flush,
       print_flush,
       pp_print_newline,
       print_newline$0,
       pp_set_margin,
       set_margin,
       pp_get_margin,
       get_margin,
       pp_set_max_indent,
       set_max_indent,
       pp_get_max_indent,
       get_max_indent,
       check_geometry,
       pp_set_geometry,
       set_geometry,
       pp_safe_set_geometry,
       safe_set_geometry,
       pp_get_geometry,
       get_geometry,
       pp_set_max_boxes,
       set_max_boxes,
       pp_get_max_boxes,
       get_max_boxes,
       pp_over_max_boxes,
       over_max_boxes,
       pp_open_tbox,
       open_tbox,
       pp_close_tbox,
       close_tbox,
       pp_set_tab,
       set_tab,
       pp_print_tab,
       print_tab,
       pp_print_tbreak,
       print_tbreak,
       pp_set_ellipsis_text,
       set_ellipsis_text,
       pp_get_ellipsis_text,
       get_ellipsis_text,
       String_tag,
       pp_open_stag,
       open_stag,
       pp_close_stag,
       close_stag,
       pp_set_tags,
       set_tags,
       pp_set_print_tags,
       set_print_tags,
       pp_set_mark_tags,
       set_mark_tags,
       pp_get_print_tags,
       get_print_tags,
       pp_get_mark_tags,
       get_mark_tags,
       pp_set_formatter_out_channel,
       set_formatter_out_channel,
       pp_set_formatter_output_functi,
       set_formatter_output_functions,
       pp_get_formatter_output_functi,
       get_formatter_output_functions,
       pp_set_formatter_out_functions,
       set_formatter_out_functions,
       pp_get_formatter_out_functions,
       get_formatter_out_functions,
       pp_set_formatter_stag_function,
       set_formatter_stag_functions,
       pp_get_formatter_stag_function,
       get_formatter_stag_functions,
       formatter_of_out_channel,
       std_formatter,
       err_formatter,
       formatter_of_buffer,
       stdbuf,
       str_formatter,
       flush_str_formatter,
       make_formatter,
       formatter_of_out_functions,
       make_symbolic_output_buffer,
       clear_symbolic_output_buffer,
       get_symbolic_output_buffer,
       flush_symbolic_output_buffer,
       add_symbolic_output_item,
       formatter_of_symbolic_output_b,
       pp_print_list,
       pp_print_text,
       pp_print_option,
       pp_print_result,
       fprintf$0,
       printf$0,
       eprintf$0,
       sprintf$0,
       asprintf,
       dprintf,
       ifprintf$0,
       kfprintf$0,
       kdprintf,
       ikfprintf$0,
       kprintf,
       kasprintf,
       bprintf$0,
       kprintf,
       set_all_formatter_output_funct,
       get_all_formatter_output_funct,
       pp_set_all_formatter_output_fu,
       pp_get_all_formatter_output_fu,
       pp_open_tag,
       open_tag,
       pp_close_tag,
       close_tag,
       pp_set_formatter_tag_functions,
       set_formatter_tag_functions,
       pp_get_formatter_tag_functions,
       get_formatter_tag_functions];
    caml_register_global(762,Stdlib_format,"Stdlib__format");
    var null_char=0;
    function next_char(ib)
     {try
       {var c=caml_call1(ib[7],0);
        ib[2] = c;
        ib[3] = 1;
        ib[4] = ib[4] + 1 | 0;
        if(10 === c)ib[5] = ib[5] + 1 | 0;
        return c}
      catch(_ib_)
       {_ib_ = caml_wrap_exception(_ib_);
        if(_ib_ === End_of_file)
         {ib[2] = null_char;ib[3] = 0;ib[1] = 1;return null_char}
        throw _ib_}}
    function peek_char(ib){return ib[3]?ib[2]:next_char(ib)}
    function checked_peek_char(ib)
     {var c=peek_char(ib);if(ib[1])throw End_of_file;return c}
    function end_of_input(ib){peek_char(ib);return ib[1]}
    function beginning_of_input(ib){return 0 === ib[4]?1:0}
    function name_of_input(ib)
     {var _ia_=ib[9];
      if(typeof _ia_ === "number")
       return 0 === _ia_?cst_unnamed_function:cst_unnamed_character_string;
      else
       {if(0 === _ia_[0])return cst_unnamed_Stdlib_input_chann;
        var fname=_ia_[1];
        return fname}}
    function char_count(ib){return ib[3]?ib[4] - 1 | 0:ib[4]}
    function reset_token(ib){return reset(ib[8])}
    function invalidate_current_char(ib){ib[3] = 0;return 0}
    function token_string(ib)
     {var token_buffer=ib[8],tok=contents(token_buffer);
      clear$1(token_buffer);
      ib[6] = ib[6] + 1 | 0;
      return tok}
    function skip_char(width,ib){invalidate_current_char(ib);return width}
    function ignore_char(width,ib){return skip_char(width - 1 | 0,ib)}
    function store_char(width,ib,c)
     {add_char(ib[8],c);return ignore_char(width,ib)}
    var default_token_buffer_size=1024;
    function create$4(iname,next)
     {return [0,
              0,
              null_char,
              0,
              0,
              0,
              0,
              next,
              create$2(default_token_buffer_size),
              iname]}
    function from_string$1(s)
     {var i=[0,0],len=caml_ml_string_length(s);
      function next(param)
       {if(len <= i[1])throw End_of_file;
        var c=caml_string_get(s,i[1]);
        i[1]++;
        return c}
      return create$4(1,next)}
    var _b$_=0;
    function from_function$0(_h$_){return create$4(_b$_,_h$_)}
    var len=1024;
    function scan_close_at_end(ic)
     {caml_ml_close_channel(ic);throw End_of_file}
    function scan_raise_at_end(ic){throw End_of_file}
    function from_ic(scan_close_ic,iname,ic)
     {var buf=caml_create_bytes(1024),i=[0,0],lim=[0,0],eof=[0,0];
      function next(param)
       {if(i[1] < lim[1]){var c=caml_bytes_get(buf,i[1]);i[1]++;return c}
        if(eof[1])throw End_of_file;
        lim[1] = input(ic,buf,0,len);
        return 0 === lim[1]
                ?(eof[1] = 1,caml_call1(scan_close_ic,ic))
                :(i[1] = 1,caml_bytes_get(buf,0))}
      return create$4(iname,next)}
    var stdib=from_ic(scan_raise_at_end,[1,cst$84,stdin],stdin);
    function open_in_file(open_in,fname)
     {if(caml_string_notequal(fname,cst$85))
       {var ic=caml_call1(open_in,fname);
        return from_ic(scan_close_at_end,[1,fname,ic],ic)}
      return stdib}
    function from_file(_h__){return open_in_file(open_in,_h__)}
    function from_file_bin(_h9_){return open_in_file(open_in_bin,_h9_)}
    function from_channel$0(ic){return from_ic(scan_raise_at_end,[0,ic],ic)}
    function close_in$0(ib)
     {var _h8_=ib[9];
      if(typeof _h8_ === "number")
       return 0;
      else
       {if(0 === _h8_[0]){var ic=_h8_[1];return caml_ml_close_channel(ic)}
        var ic$0=_h8_[2];
        return caml_ml_close_channel(ic$0)}}
    var memo=[0,0];
    function memo_from_ic(scan_close_ic,ic)
     {try
       {var _h6_=assq(ic,memo[1]);return _h6_}
      catch(_h7_)
       {_h7_ = caml_wrap_exception(_h7_);
        if(_h7_ === Not_found)
         {var ib=from_ic(scan_close_ic,[0,ic],ic);
          memo[1] = [0,[0,ic,ib],memo[1]];
          return ib}
        throw _h7_}}
    function memo_from_channel(_h5_)
     {return memo_from_ic(scan_raise_at_end,_h5_)}
    var Scan_failure=[248,cst_Stdlib_Scanf_Scan_failure,caml_fresh_oo_id(0)];
    function bad_input(s){throw [0,Scan_failure,s]}
    function bad_input_escape(c)
     {return bad_input(caml_call1(sprintf(_ca_),c))}
    function bad_token_length(message)
     {return bad_input(caml_call1(sprintf(_cb_),message))}
    function bad_float(param)
     {return bad_input(cst_no_dot_or_exponent_part_fo)}
    function bad_hex_float(param)
     {return bad_input(cst_not_a_valid_float_in_hexad)}
    function character_mismatch(c,ci)
     {return bad_input(caml_call2(sprintf(_cd_),c,ci))}
    function check_this_char(ib,c)
     {var ci=checked_peek_char(ib);
      return ci === c?invalidate_current_char(ib):character_mismatch(c,ci)}
    function check_char(ib,c$0)
     {if(10 === c$0)
       {var ci=checked_peek_char(ib);
        return 10 === ci
                ?invalidate_current_char(ib)
                :13 === ci
                  ?(invalidate_current_char(ib),check_this_char(ib,10))
                  :character_mismatch(10,ci)}
      if(32 === c$0)
       for(;;)
        {var c=peek_char(ib),_h3_=1 - ib[1];
         if(_h3_)
          {var _h4_=c - 9 | 0,switch$0=0;
           if(4 < _h4_ >>> 0)
            {if(23 === _h4_)switch$0 = 1}
           else
            if(1 < (_h4_ - 2 | 0) >>> 0)switch$0 = 1;
           if(switch$0){invalidate_current_char(ib);continue}
           return 0}
         return _h3_}
      return check_this_char(ib,c$0)}
    function token_char(ib){return caml_string_get(token_string(ib),0)}
    function token_bool(ib)
     {var s=token_string(ib);
      return caml_string_notequal(s,cst_false$3)
              ?caml_string_notequal(s,cst_true$3)
                ?bad_input(caml_call1(sprintf(_ce_),s))
                :1
              :0}
    function integer_conversion_of_char(param)
     {var switcher=param - 88 | 0;
      if(! (32 < switcher >>> 0))
       switch(switcher)
        {case 10:return 0;
         case 12:return 1;
         case 17:return 2;
         case 23:return 3;
         case 29:return 4;
         case 0:
         case 32:return 5
         }
      throw [0,Assert_failure,_cf_]}
    function token_int_literal(conv,ib)
     {switch(conv)
       {case 0:var tok=symbol(cst_0b,token_string(ib));break;
        case 3:var tok=symbol(cst_0o,token_string(ib));break;
        case 4:var tok=symbol(cst_0u,token_string(ib));break;
        case 5:var tok=symbol(cst_0x,token_string(ib));break;
        default:var tok=token_string(ib)}
      var l=caml_ml_string_length(tok);
      if(0 !== l && 43 === caml_string_get(tok,0))
       return sub$0(tok,1,l - 1 | 0);
      return tok}
    function token_float(ib){return caml_float_of_string(token_string(ib))}
    function scan_decimal_digit_star(width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(58 <= c)
         {if(95 === c)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}}
        else
         if(48 <= c)
          {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
        return width$0}}
    function scan_unsigned_decimal_int(width,ib)
     {if(0 === width)return bad_token_length(cst_decimal_digits);
      var c=checked_peek_char(ib),switcher=c - 48 | 0;
      if(9 < switcher >>> 0)return bad_input(caml_call1(sprintf(_cg_),c));
      var width$0=store_char(width,ib,c);
      return scan_decimal_digit_star(width$0,ib)}
    function scan_digit_plus(basis,digitp,width$2,ib)
     {if(0 === width$2)return bad_token_length(cst_digits);
      var c$0=checked_peek_char(ib);
      if(caml_call1(digitp,c$0))
       {var width$3=store_char(width$2,ib,c$0),width=width$3;
        for(;;)
         {if(0 === width)return width;
          var c=peek_char(ib);
          if(ib[1])return width;
          if(caml_call1(digitp,c))
           {var width$0=store_char(width,ib,c),width=width$0;continue}
          if(95 === c)
           {var width$1=ignore_char(width,ib),width=width$1;continue}
          return width}}
      return bad_input(caml_call2(sprintf(_ch_),c$0,basis))}
    function is_binary_digit(param)
     {var switcher=param - 48 | 0;return 1 < switcher >>> 0?0:1}
    function scan_binary_int(_h1_,_h2_)
     {return scan_digit_plus(cst_binary,is_binary_digit,_h1_,_h2_)}
    function is_octal_digit(param)
     {var switcher=param - 48 | 0;return 7 < switcher >>> 0?0:1}
    function scan_octal_int(_hZ_,_h0_)
     {return scan_digit_plus(cst_octal,is_octal_digit,_hZ_,_h0_)}
    function is_hexa_digit(param)
     {var _hY_=param - 48 | 0,switch$0=0;
      if(22 < _hY_ >>> 0)
       {if(! (5 < (_hY_ - 49 | 0) >>> 0))switch$0 = 1}
      else
       if(6 < (_hY_ - 10 | 0) >>> 0)switch$0 = 1;
      return switch$0?1:0}
    function scan_hexadecimal_int(_hW_,_hX_)
     {return scan_digit_plus(cst_hexadecimal,is_hexa_digit,_hW_,_hX_)}
    function scan_sign(width,ib)
     {var c=checked_peek_char(ib),switcher=c - 43 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher)
        {case 0:return store_char(width,ib,c);
         case 1:break;
         default:return store_char(width,ib,c)}
      return width}
    function scan_optionally_signed_decimal(width,ib)
     {var width$0=scan_sign(width,ib);
      return scan_unsigned_decimal_int(width$0,ib)}
    function scan_int_conversion(conv,width$1,ib)
     {switch(conv)
       {case 0:return scan_binary_int(width$1,ib);
        case 1:return scan_optionally_signed_decimal(width$1,ib);
        case 2:
         var width$0=scan_sign(width$1,ib),c=checked_peek_char(ib);
         if(48 === c)
          {var width=store_char(width$0,ib,c);
           if(0 === width)return width;
           var c$0=peek_char(ib);
           if(ib[1])return width;
           var switch$0=0;
           if(99 <= c$0)
            {if(111 === c$0)
              return scan_octal_int(store_char(width,ib,c$0),ib);
             if(120 === c$0)switch$0 = 1}
           else
            if(88 === c$0)
             switch$0 = 1;
            else
             if(98 <= c$0)return scan_binary_int(store_char(width,ib,c$0),ib);
           return switch$0
                   ?scan_hexadecimal_int(store_char(width,ib,c$0),ib)
                   :scan_decimal_digit_star(width,ib)}
         return scan_unsigned_decimal_int(width$0,ib);
        case 3:return scan_octal_int(width$1,ib);
        case 4:return scan_unsigned_decimal_int(width$1,ib);
        default:return scan_hexadecimal_int(width$1,ib)}}
    function scan_fractional_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      var switcher=c - 48 | 0;
      return 9 < switcher >>> 0
              ?width
              :scan_decimal_digit_star(store_char(width,ib,c),ib)}
    function scan_exponent_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      if(69 !== c && 101 !== c)return width;
      return scan_optionally_signed_decimal(store_char(width,ib,c),ib)}
    function scan_float(width$1,precision,ib)
     {var
       width=scan_sign(width$1,ib),
       width$0=scan_decimal_digit_star(width,ib);
      if(0 === width$0)return [0,width$0,precision];
      var c=peek_char(ib);
      if(ib[1])return [0,width$0,precision];
      if(46 === c)
       {var
         width$2=store_char(width$0,ib,c),
         precision$0=min(width$2,precision),
         width$3=
          width$2
          -
          (precision$0 - scan_fractional_part(precision$0,ib) | 0)
          |
          0;
        return [0,scan_exponent_part(width$3,ib),precision$0]}
      return [0,scan_exponent_part(width$0,ib),precision]}
    function check_case_insensitive_string(width,ib,error,str)
     {function lowercase(c)
       {var switcher=c - 65 | 0;
        return 25 < switcher >>> 0?c:char_of_int((c - 65 | 0) + 97 | 0)}
      var
       len=caml_ml_string_length(str),
       width$0=[0,width],
       _hT_=len - 1 | 0,
       _hS_=0;
      if(! (_hT_ < 0))
       {var i=_hS_;
        for(;;)
         {var c=peek_char(ib),_hU_=lowercase(caml_string_get(str,i));
          if(lowercase(c) !== _hU_)caml_call1(error,0);
          if(0 === width$0[1])caml_call1(error,0);
          width$0[1] = store_char(width$0[1],ib,c);
          var _hV_=i + 1 | 0;
          if(_hT_ !== i){var i=_hV_;continue}
          break}}
      return width$0[1]}
    function scan_hex_float(width,precision,ib)
     {var _hF_=0 === width?1:0,_hG_=_hF_ || end_of_input(ib);
      if(_hG_)bad_hex_float(0);
      var
       width$0=scan_sign(width,ib),
       _hH_=0 === width$0?1:0,
       _hI_=_hH_ || end_of_input(ib);
      if(_hI_)bad_hex_float(0);
      var c=peek_char(ib),switch$0=0;
      if(78 <= c)
       {var switcher=c - 79 | 0;
        if(30 < switcher >>> 0)
         {if(! (32 <= switcher))
           {var
             width$1=store_char(width$0,ib,c),
             _hJ_=0 === width$1?1:0,
             _hK_=_hJ_ || end_of_input(ib);
            if(_hK_)bad_hex_float(0);
            return check_case_insensitive_string
                    (width$1,ib,bad_hex_float,cst_an)}}
        else
         if(26 === switcher)switch$0 = 1}
      else
       {if(48 === c)
         {var
           width$3=store_char(width$0,ib,c),
           _hN_=0 === width$3?1:0,
           _hO_=_hN_ || end_of_input(ib);
          if(_hO_)bad_hex_float(0);
          var
           width$4=
            check_case_insensitive_string(width$3,ib,bad_hex_float,cst_x$2);
          if(0 !== width$4 && ! end_of_input(ib))
           {var match=peek_char(ib),_hP_=match - 46 | 0,switch$1=0;
            if(34 < _hP_ >>> 0)
             {if(66 === _hP_)switch$1 = 1}
            else
             if(32 < (_hP_ - 1 | 0) >>> 0)switch$1 = 1;
            var width$5=switch$1?width$4:scan_hexadecimal_int(width$4,ib);
            if(0 !== width$5 && ! end_of_input(ib))
             {var c$0=peek_char(ib);
              if(46 === c$0)
               {var width$6=store_char(width$5,ib,c$0),switch$2=0;
                if(0 !== width$6 && ! end_of_input(ib))
                 {var match$0=peek_char(ib),switch$3=0;
                  if(80 !== match$0 && 112 !== match$0)
                   {var
                     precision$0=min(width$6,precision),
                     width$10=
                      width$6
                      -
                      (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                      |
                      0;
                    switch$3 = 1}
                  if(! switch$3)var width$10=width$6;
                  var width$7=width$10;
                  switch$2 = 1}
                if(! switch$2)var width$7=width$6;
                var width$8=width$7}
              else
               var width$8=width$5;
              if(0 !== width$8 && ! end_of_input(ib))
               {var c$1=peek_char(ib);
                if(80 !== c$1 && 112 !== c$1)return width$8;
                var
                 width$9=store_char(width$8,ib,c$1),
                 _hQ_=0 === width$9?1:0,
                 _hR_=_hQ_ || end_of_input(ib);
                if(_hR_)bad_hex_float(0);
                return scan_optionally_signed_decimal(width$9,ib)}
              return width$8}
            return width$5}
          return width$4}
        if(73 === c)switch$0 = 1}
      if(switch$0)
       {var
         width$2=store_char(width$0,ib,c),
         _hL_=0 === width$2?1:0,
         _hM_=_hL_ || end_of_input(ib);
        if(_hM_)bad_hex_float(0);
        return check_case_insensitive_string
                (width$2,ib,bad_hex_float,cst_nfinity)}
      return bad_hex_float(0)}
    function scan_caml_float_rest(width,precision,ib)
     {var _hB_=0 === width?1:0,_hC_=_hB_ || end_of_input(ib);
      if(_hC_)bad_float(0);
      var
       width$0=scan_decimal_digit_star(width,ib),
       _hD_=0 === width$0?1:0,
       _hE_=_hD_ || end_of_input(ib);
      if(_hE_)bad_float(0);
      var c=peek_char(ib),switcher=c - 69 | 0;
      if(32 < switcher >>> 0)
       {if(-23 === switcher)
         {var
           width$1=store_char(width$0,ib,c),
           precision$0=min(width$1,precision),
           width_precision=scan_fractional_part(precision$0,ib),
           frac_width=precision$0 - width_precision | 0,
           width$2=width$1 - frac_width | 0;
          return scan_exponent_part(width$2,ib)}}
      else
       {var switcher$0=switcher - 1 | 0;
        if(30 < switcher$0 >>> 0)return scan_exponent_part(width$0,ib)}
      return bad_float(0)}
    function scan_caml_float(width,precision,ib)
     {var _hn_=0 === width?1:0,_ho_=_hn_ || end_of_input(ib);
      if(_ho_)bad_float(0);
      var
       width$0=scan_sign(width,ib),
       _hp_=0 === width$0?1:0,
       _hq_=_hp_ || end_of_input(ib);
      if(_hq_)bad_float(0);
      var c=peek_char(ib);
      if(49 <= c)
       {if(! (58 <= c))
         {var
           width$1=store_char(width$0,ib,c),
           _hr_=0 === width$1?1:0,
           _hs_=_hr_ || end_of_input(ib);
          if(_hs_)bad_float(0);
          return scan_caml_float_rest(width$1,precision,ib)}}
      else
       if(48 <= c)
        {var
          width$2=store_char(width$0,ib,c),
          _ht_=0 === width$2?1:0,
          _hu_=_ht_ || end_of_input(ib);
         if(_hu_)bad_float(0);
         var c$0=peek_char(ib);
         if(88 !== c$0 && 120 !== c$0)
          return scan_caml_float_rest(width$2,precision,ib);
         var
          width$3=store_char(width$2,ib,c$0),
          _hv_=0 === width$3?1:0,
          _hw_=_hv_ || end_of_input(ib);
         if(_hw_)bad_float(0);
         var
          width$4=scan_hexadecimal_int(width$3,ib),
          _hx_=0 === width$4?1:0,
          _hy_=_hx_ || end_of_input(ib);
         if(_hy_)bad_float(0);
         var c$1=peek_char(ib),switcher=c$1 - 80 | 0,switch$0=0;
         if(32 < switcher >>> 0)
          if(-34 === switcher)
           {var width$5=store_char(width$4,ib,c$1),switch$1=0;
            if(0 !== width$5 && ! end_of_input(ib))
             {var match=peek_char(ib),switch$2=0;
              if(80 !== match && 112 !== match)
               {var
                 precision$0=min(width$5,precision),
                 width$10=
                  width$5
                  -
                  (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                  |
                  0;
                switch$2 = 1}
              if(! switch$2)var width$10=width$5;
              var width$6=width$10;
              switch$1 = 1}
            if(! switch$1)var width$6=width$5;
            var width$7=width$6}
          else
           switch$0 = 1;
         else
          {var switcher$0=switcher - 1 | 0;
           if(30 < switcher$0 >>> 0)var width$7=width$4;else switch$0 = 1}
         var width$8=switch$0?bad_float(0):width$7;
         if(0 !== width$8 && ! end_of_input(ib))
          {var c$2=peek_char(ib);
           if(80 !== c$2 && 112 !== c$2)return width$8;
           var
            width$9=store_char(width$8,ib,c$2),
            _hz_=0 === width$9?1:0,
            _hA_=_hz_ || end_of_input(ib);
           if(_hA_)bad_hex_float(0);
           return scan_optionally_signed_decimal(width$9,ib)}
         return width$8}
      return bad_float(0)}
    function scan_string(stp,width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(stp)
         {var c$0=stp[1];
          if(c === c$0)return skip_char(width$0,ib);
          var width$1=store_char(width$0,ib,c),width$0=width$1;
          continue}
        var _hm_=c - 9 | 0,switch$0=0;
        if(4 < _hm_ >>> 0)
         {if(23 === _hm_)switch$0 = 1}
        else
         if(1 < (_hm_ - 2 | 0) >>> 0)switch$0 = 1;
        if(switch$0)return width$0;
        var width$2=store_char(width$0,ib,c),width$0=width$2;
        continue}}
    function scan_char(width,ib)
     {return store_char(width,ib,checked_peek_char(ib))}
    function hexadecimal_value_of_char(d)
     {return 97 <= d?d - 87 | 0:65 <= d?d - 55 | 0:d - 48 | 0}
    function check_next_char(message,width,ib)
     {if(0 === width)return bad_token_length(message);
      var c=peek_char(ib);
      return ib[1]?bad_input(caml_call1(sprintf(_cc_),message)):c}
    function check_next_char_for_char(_hk_,_hl_)
     {return check_next_char(cst_a_Char,_hk_,_hl_)}
    function check_next_char_for_string(_hi_,_hj_)
     {return check_next_char(cst_a_String,_hi_,_hj_)}
    function scan_backslash_char(width,ib)
     {var c0=check_next_char_for_char(width,ib),switch$0=0;
      if(40 <= c0)
       {if(58 <= c0)
         {var switcher$0=c0 - 92 | 0;
          if(! (28 < switcher$0 >>> 0))
           switch(switcher$0)
            {case 28:
              var
               get_digit=
                function(param)
                 {var c=next_char(ib),_hh_=c - 48 | 0,switch$0=0;
                  if(22 < _hh_ >>> 0)
                   {if(! (5 < (_hh_ - 49 | 0) >>> 0))switch$0 = 1}
                  else
                   if(6 < (_hh_ - 10 | 0) >>> 0)switch$0 = 1;
                  return switch$0?c:bad_input_escape(c)},
               c1=get_digit(0),
               c2=get_digit(0),
               _hd_=hexadecimal_value_of_char(c2),
               c$0=(16 * hexadecimal_value_of_char(c1) | 0) + _hd_ | 0,
               switch$1=0;
              if(0 <= c$0 && ! (255 < c$0))
               {var _hf_=char_of_int(c$0);switch$1 = 1}
              if(! switch$1)
               var _hf_=bad_input(caml_call2(sprintf(_cj_),c1,c2));
              return store_char(width - 2 | 0,ib,_hf_);
             case 0:
             case 6:
             case 18:
             case 22:
             case 24:switch$0 = 1;break
             }}
        else
         if(48 <= c0)
          {var
            get_digit$0=
             function(param)
              {var c=next_char(ib),switcher=c - 48 | 0;
               return 9 < switcher >>> 0?bad_input_escape(c):c},
            c1$0=get_digit$0(0),
            c2$0=get_digit$0(0),
            c=
             ((100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
             +
             (c2$0 - 48 | 0)
             |
             0,
            switch$2=0;
           if(0 <= c && ! (255 < c)){var _hg_=char_of_int(c);switch$2 = 1}
           if(! switch$2)
            var _hg_=bad_input(caml_call3(sprintf(_ci_),c0,c1$0,c2$0));
           return store_char(width - 2 | 0,ib,_hg_)}}
      else
       if(34 === c0 || 39 <= c0)switch$0 = 1;
      if(switch$0)
       {var switch$3=0;
        if(110 <= c0)
         if(117 <= c0)
          switch$3 = 1;
         else
          {var switcher=c0 - 110 | 0;
           switch(switcher)
            {case 0:var _he_=10;break;
             case 4:var _he_=13;break;
             case 6:var _he_=9;break;
             default:switch$3 = 1}}
        else
         if(98 === c0)var _he_=8;else switch$3 = 1;
        if(switch$3)var _he_=c0;
        return store_char(width,ib,_he_)}
      return bad_input_escape(c0)}
    function scan_caml_char(width,ib)
     {function find_stop(width)
       {var c=check_next_char_for_char(width,ib);
        return 39 === c?ignore_char(width,ib):character_mismatch(39,c)}
      var c=checked_peek_char(ib);
      if(39 === c)
       {var
         width$0=ignore_char(width,ib),
         c$0=check_next_char_for_char(width$0,ib);
        return 92 === c$0
                ?find_stop(scan_backslash_char(ignore_char(width$0,ib),ib))
                :find_stop(store_char(width$0,ib,c$0))}
      return character_mismatch(39,c)}
    function scan_caml_string(width,ib)
     {function find_stop$0(counter,width)
       {var width$0=width;
        for(;;)
         {var c=check_next_char_for_string(width$0,ib);
          if(34 === c)return ignore_char(width$0,ib);
          if(92 === c)
           {var
             width$1=ignore_char(width$0,ib),
             match=check_next_char_for_string(width$1,ib);
            if(10 === match)
             {var _hb_=ignore_char(width$1,ib);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return skip_spaces(counter$0,_hb_)}
              return caml_trampoline_return(skip_spaces,[0,_hb_])}
            if(13 === match)
             {var
               width$3=ignore_char(width$1,ib),
               match$0=check_next_char_for_string(width$3,ib);
              if(10 === match$0)
               {var _hc_=ignore_char(width$3,ib);
                if(counter < 50)
                 {var counter$1=counter + 1 | 0;
                  return skip_spaces(counter$1,_hc_)}
                return caml_trampoline_return(skip_spaces,[0,_hc_])}
              var width$5=store_char(width$3,ib,13),width$0=width$5;
              continue}
            var width$4=scan_backslash_char(width$1,ib),width$0=width$4;
            continue}
          var width$2=store_char(width$0,ib,c),width$0=width$2;
          continue}}
      function skip_spaces(counter,width)
       {var width$0=width;
        for(;;)
         {var match=check_next_char_for_string(width$0,ib);
          if(32 === match)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return find_stop$0(counter$0,width$0)}
          return caml_trampoline_return(find_stop$0,[0,width$0])}}
      function find_stop(width){return caml_trampoline(find_stop$0(0,width))}
      var c=checked_peek_char(ib);
      return 34 === c
              ?find_stop(ignore_char(width,ib))
              :character_mismatch(34,c)}
    function scan_chars_in_char_set(char_set,scan_indic,width,ib)
     {function scan_chars(i,stp)
       {var i$0=i;
        for(;;)
         {var c=peek_char(ib),_g9_=0 < i$0?1:0;
          if(_g9_)
           {var _g__=1 - ib[1];
            if(_g__)
             var _g$_=is_in_char_set(char_set,c),_ha_=_g$_?c !== stp?1:0:_g$_;
            else
             var _ha_=_g__}
          else
           var _ha_=_g9_;
          if(_ha_)
           {store_char(max_int,ib,c);var i$1=i$0 - 1 | 0,i$0=i$1;continue}
          return _ha_}}
      if(scan_indic)
       {var c=scan_indic[1];
        scan_chars(width,c);
        var _g8_=1 - ib[1];
        if(_g8_)
         {var ci=peek_char(ib);
          return c === ci?invalidate_current_char(ib):character_mismatch(c,ci)}
        return _g8_}
      return scan_chars(width,-1)}
    function scanf_bad_input(ib,x)
     {if(x[1] === Scan_failure)
       var s=x[2];
      else
       {if(x[1] !== Failure)throw x;var s=x[2]}
      var i=char_count(ib);
      return bad_input(caml_call2(sprintf(_cl_),i,s))}
    function get_counter(ib,counter)
     {switch(counter)
       {case 0:return ib[5];case 1:return char_count(ib);default:return ib[6]}}
    function width_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return width}return max_int}
    function stopper_of_formatting_lit(fmting)
     {if(6 === fmting)return _cm_;
      var
       str=string_of_formatting_lit(fmting),
       stp=caml_string_get(str,1),
       sub_str=sub$0(str,2,caml_ml_string_length(str) - 2 | 0);
      return [0,stp,sub_str]}
    function take_format_readers$0(counter,k,fmt)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k,0);
       else
        switch(fmt$0[0])
         {case 0:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 1:var fmt$2=fmt$0[1],fmt$0=fmt$2;continue;
          case 2:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 3:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 4:var fmt$5=fmt$0[4],fmt$0=fmt$5;continue;
          case 5:var fmt$6=fmt$0[4],fmt$0=fmt$6;continue;
          case 6:var fmt$7=fmt$0[4],fmt$0=fmt$7;continue;
          case 7:var fmt$8=fmt$0[4],fmt$0=fmt$8;continue;
          case 8:var fmt$9=fmt$0[4],fmt$0=fmt$9;continue;
          case 9:var fmt$10=fmt$0[2],fmt$0=fmt$10;continue;
          case 10:var fmt$11=fmt$0[1],fmt$0=fmt$11;continue;
          case 11:var fmt$12=fmt$0[2],fmt$0=fmt$12;continue;
          case 12:var fmt$13=fmt$0[2],fmt$0=fmt$13;continue;
          case 13:var fmt$14=fmt$0[3],fmt$0=fmt$14;continue;
          case 14:
           var rest=fmt$0[3],fmtty=fmt$0[2],_g6_=erase_rel(symm(fmtty));
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return take_fmtty_format_readers$0(counter$0,k,_g6_,rest)}
           return caml_trampoline_return
                   (take_fmtty_format_readers$0,[0,k,_g6_,rest]);
          case 15:var fmt$15=fmt$0[1],fmt$0=fmt$15;continue;
          case 16:var fmt$16=fmt$0[1],fmt$0=fmt$16;continue;
          case 17:var fmt$17=fmt$0[2],fmt$0=fmt$17;continue;
          case 18:
           var _g7_=fmt$0[1];
           if(0 === _g7_[0])
            {var
              rest$0=fmt$0[2],
              match=_g7_[1],
              fmt$18=match[1],
              fmt$19=concat_fmt(fmt$18,rest$0),
              fmt$0=fmt$19;
             continue}
           var
            rest$1=fmt$0[2],
            match$0=_g7_[1],
            fmt$20=match$0[1],
            fmt$21=concat_fmt(fmt$20,rest$1),
            fmt$0=fmt$21;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_format_readers(new_k,fmt_rest)};
          case 20:var fmt$22=fmt$0[3],fmt$0=fmt$22;continue;
          case 21:var fmt$23=fmt$0[2],fmt$0=fmt$23;continue;
          case 22:var fmt$24=fmt$0[1],fmt$0=fmt$24;continue;
          case 23:
           var rest$2=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:
               return function(reader)
                {function new_k(readers_rest)
                  {return caml_call1(k,[0,reader,readers_rest])}
                 return take_format_readers(new_k,rest$2)};
              default:var fmt$0=rest$2;continue}
           else
            switch(ign[0])
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:var fmt$0=rest$2;continue;
              case 3:var fmt$0=rest$2;continue;
              case 4:var fmt$0=rest$2;continue;
              case 5:var fmt$0=rest$2;continue;
              case 6:var fmt$0=rest$2;continue;
              case 7:var fmt$0=rest$2;continue;
              case 8:var fmt$0=rest$2;continue;
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return take_fmtty_format_readers$0
                         (counter$1,k,fmtty$0,rest$2)}
               return caml_trampoline_return
                       (take_fmtty_format_readers$0,[0,k,fmtty$0,rest$2]);
              case 10:var fmt$0=rest$2;continue;
              default:var fmt$0=rest$2;continue}
          default:var fmt$25=fmt$0[3],fmt$0=fmt$25;continue}}
    function take_fmtty_format_readers$0(counter,k,fmtty,fmt)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return take_format_readers$0(counter$0,k,fmt)}
         return caml_trampoline_return(take_format_readers$0,[0,k,fmt])}
       else
        switch(fmtty$0[0])
         {case 0:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 1:var fmtty$2=fmtty$0[1],fmtty$0=fmtty$2;continue;
          case 2:var fmtty$3=fmtty$0[1],fmtty$0=fmtty$3;continue;
          case 3:var fmtty$4=fmtty$0[1],fmtty$0=fmtty$4;continue;
          case 4:var fmtty$5=fmtty$0[1],fmtty$0=fmtty$5;continue;
          case 5:var fmtty$6=fmtty$0[1],fmtty$0=fmtty$6;continue;
          case 6:var fmtty$7=fmtty$0[1],fmtty$0=fmtty$7;continue;
          case 7:var fmtty$8=fmtty$0[1],fmtty$0=fmtty$8;continue;
          case 8:var fmtty$9=fmtty$0[2],fmtty$0=fmtty$9;continue;
          case 9:
           var
            rest=fmtty$0[3],
            ty2=fmtty$0[2],
            ty1=fmtty$0[1],
            ty=trans(symm(ty1),ty2),
            fmtty$10=concat_fmtty(ty,rest),
            fmtty$0=fmtty$10;
           continue;
          case 10:var fmtty$11=fmtty$0[1],fmtty$0=fmtty$11;continue;
          case 11:var fmtty$12=fmtty$0[1],fmtty$0=fmtty$12;continue;
          case 12:var fmtty$13=fmtty$0[1],fmtty$0=fmtty$13;continue;
          case 13:
           var fmt_rest=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest,fmt)};
          default:
           var fmt_rest$0=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest$0,fmt)}}}
    function take_format_readers(k,fmt)
     {return caml_trampoline(take_format_readers$0(0,k,fmt))}
    function take_fmtty_format_readers(k,fmtty,fmt)
     {return caml_trampoline(take_fmtty_format_readers$0(0,k,fmtty,fmt))}
    function pad_prec_scanf(ib,fmt,readers,pad,prec,scan,token)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(0 === prec)
           {caml_call3(scan,max_int,max_int,ib);
            var x=caml_call1(token,ib);
            return [0,x,make_scanf(ib,fmt,readers)]}
          return invalid_arg(cst_scanf_bad_conversion)}
        var p=prec[1];
        caml_call3(scan,max_int,p,ib);
        var x$0=caml_call1(token,ib);
        return [0,x$0,make_scanf(ib,fmt,readers)]}
      else
       {if(0 === pad[0])
         {if(0 === pad[1])return invalid_arg(cst_scanf_bad_conversion$0);
          var _g5_=pad[2];
          if(typeof prec === "number")
           {if(0 === prec)
             {caml_call3(scan,_g5_,max_int,ib);
              var x$1=caml_call1(token,ib);
              return [0,x$1,make_scanf(ib,fmt,readers)]}
            return invalid_arg(cst_scanf_bad_conversion$1)}
          var p$0=prec[1];
          caml_call3(scan,_g5_,p$0,ib);
          var x$2=caml_call1(token,ib);
          return [0,x$2,make_scanf(ib,fmt,readers)]}
        return invalid_arg(cst_scanf_bad_conversion$2)}}
    function make_scanf(ib,fmt,readers)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return 0;
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           scan_char(0,ib);
           var c=token_char(ib);
           return [0,c,make_scanf(ib,rest,readers)];
          case 1:
           var rest$0=fmt$0[1];
           scan_caml_char(0,ib);
           var c$0=token_char(ib);
           return [0,c$0,make_scanf(ib,rest$0,readers)];
          case 2:
           var _gQ_=fmt$0[2],_gR_=fmt$0[1];
           if(typeof _gQ_ !== "number")
            switch(_gQ_[0])
             {case 17:
               var
                rest$1=_gQ_[2],
                fmting_lit=_gQ_[1],
                match=stopper_of_formatting_lit(fmting_lit),
                str=match[2],
                stp=match[1],
                scan$0=
                 function(width,param,ib)
                  {return scan_string([0,stp],width,ib)},
                str_rest=[11,str,rest$1];
               return pad_prec_scanf
                       (ib,str_rest,readers,_gR_,0,scan$0,token_string);
              case 18:
               var _gS_=_gQ_[1];
               if(0 === _gS_[0])
                {var
                  rest$2=_gQ_[2],
                  match$0=_gS_[1],
                  fmt$1=match$0[1],
                  scan$1=
                   function(width,param,ib){return scan_string(_cn_,width,ib)};
                 return pad_prec_scanf
                         (ib,
                          concat_fmt(fmt$1,rest$2),
                          readers,
                          _gR_,
                          0,
                          scan$1,
                          token_string)}
               var
                rest$3=_gQ_[2],
                match$1=_gS_[1],
                fmt$2=match$1[1],
                scan$2=
                 function(width,param,ib){return scan_string(_co_,width,ib)};
               return pad_prec_scanf
                       (ib,
                        concat_fmt(fmt$2,rest$3),
                        readers,
                        _gR_,
                        0,
                        scan$2,
                        token_string)
              }
           var scan=function(width,param,ib){return scan_string(0,width,ib)};
           return pad_prec_scanf(ib,_gQ_,readers,_gR_,0,scan,token_string);
          case 3:
           var
            rest$4=fmt$0[2],
            pad=fmt$0[1],
            scan$3=function(width,param,ib){return scan_caml_string(width,ib)};
           return pad_prec_scanf(ib,rest$4,readers,pad,0,scan$3,token_string);
          case 4:
           var
            rest$5=fmt$0[4],
            prec=fmt$0[3],
            pad$0=fmt$0[2],
            iconv=fmt$0[1],
            conv=integer_conversion_of_char(char_of_iconv(iconv)),
            scan$4=
             function(width,param,ib)
              {return scan_int_conversion(conv,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$5,
                    readers,
                    pad$0,
                    prec,
                    scan$4,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv,ib))});
          case 5:
           var
            rest$6=fmt$0[4],
            prec$0=fmt$0[3],
            pad$1=fmt$0[2],
            iconv$0=fmt$0[1],
            conv$0=integer_conversion_of_char(char_of_iconv(iconv$0)),
            scan$5=
             function(width,param,ib)
              {return scan_int_conversion(conv$0,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$6,
                    readers,
                    pad$1,
                    prec$0,
                    scan$5,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$0,ib))});
          case 6:
           var
            rest$7=fmt$0[4],
            prec$1=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$1=fmt$0[1],
            conv$1=integer_conversion_of_char(char_of_iconv(iconv$1)),
            scan$6=
             function(width,param,ib)
              {return scan_int_conversion(conv$1,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$7,
                    readers,
                    pad$2,
                    prec$1,
                    scan$6,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$1,ib))});
          case 7:
           var
            rest$8=fmt$0[4],
            prec$2=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$2=fmt$0[1],
            conv$2=integer_conversion_of_char(char_of_iconv(iconv$2)),
            scan$7=
             function(width,param,ib)
              {return scan_int_conversion(conv$2,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$8,
                    readers,
                    pad$3,
                    prec$2,
                    scan$7,
                    function(ib)
                     {return caml_int64_of_string(token_int_literal(conv$2,ib))});
          case 8:
           var _gT_=fmt$0[1][2];
           if(5 === _gT_)
            {var rest$9=fmt$0[4],prec$3=fmt$0[3],pad$4=fmt$0[2];
             return pad_prec_scanf
                     (ib,rest$9,readers,pad$4,prec$3,scan_caml_float,token_float)}
           if(6 <= _gT_)
            {var rest$10=fmt$0[4],prec$4=fmt$0[3],pad$5=fmt$0[2];
             return pad_prec_scanf
                     (ib,rest$10,readers,pad$5,prec$4,scan_hex_float,token_float)}
           var rest$11=fmt$0[4],prec$5=fmt$0[3],pad$6=fmt$0[2];
           return pad_prec_scanf
                   (ib,rest$11,readers,pad$6,prec$5,scan_float,token_float);
          case 9:
           var
            rest$12=fmt$0[2],
            pad$7=fmt$0[1],
            scan$8=
             function(param,_g4_,ib)
              {var
                c=checked_peek_char(ib),
                m=
                 102 === c
                  ?5
                  :116 === c?4:bad_input(caml_call1(sprintf(_ck_),c));
               return scan_string(0,m,ib)};
           return pad_prec_scanf(ib,rest$12,readers,pad$7,0,scan$8,token_bool);
          case 10:
           var rest$13=fmt$0[1];
           if(end_of_input(ib)){var fmt$0=rest$13;continue}
           return bad_input(cst_end_of_input_not_found);
          case 11:
           var rest$14=fmt$0[2],str$0=fmt$0[1];
           iter$4(function(_g3_){return check_char(ib,_g3_)},str$0);
           var fmt$0=rest$14;
           continue;
          case 12:
           var rest$15=fmt$0[2],chr=fmt$0[1];
           check_char(ib,chr);
           var fmt$0=rest$15;
           continue;
          case 13:
           var rest$16=fmt$0[3],fmtty=fmt$0[2],pad_opt=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt),ib);
           var s=token_string(ib);
           try
            {var _gU_=format_of_string_fmtty(s,fmtty),fmt$3=_gU_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var msg=exn[2],fmt$3=bad_input(msg)}
           return [0,fmt$3,make_scanf(ib,rest$16,readers)];
          case 14:
           var rest$17=fmt$0[3],fmtty$0=fmt$0[2],pad_opt$0=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt$0),ib);
           var s$0=token_string(ib);
           try
            {var
              match$2=fmt_ebb_of_string(0,s$0),
              fmt$6=match$2[1],
              match$3=fmt_ebb_of_string(0,s$0),
              fmt$7=match$3[1],
              fmt$8=type_format(fmt$7,erase_rel(symm(fmtty$0))),
              _gW_=type_format(fmt$6,erase_rel(fmtty$0)),
              fmt$5=_gW_,
              fmt$4=fmt$8}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var
              msg$0=exn[2],
              _gV_=bad_input(msg$0),
              fmt$5=_gV_[1],
              fmt$4=_gV_[2]}
           return [0,
                   [0,fmt$5,s$0],
                   make_scanf(ib,concat_fmt(fmt$4,rest$17),readers)];
          case 15:return invalid_arg(cst_scanf_bad_conversion_a);
          case 16:return invalid_arg(cst_scanf_bad_conversion_t);
          case 17:
           var
            rest$18=fmt$0[2],
            formatting_lit=fmt$0[1],
            _gX_=string_of_formatting_lit(formatting_lit);
           iter$4(function(_g2_){return check_char(ib,_g2_)},_gX_);
           var fmt$0=rest$18;
           continue;
          case 18:
           var _gY_=fmt$0[1];
           if(0 === _gY_[0])
            {var rest$19=fmt$0[2],match$4=_gY_[1],fmt$9=match$4[1];
             check_char(ib,64);
             check_char(ib,123);
             var fmt$10=concat_fmt(fmt$9,rest$19),fmt$0=fmt$10;
             continue}
           var rest$20=fmt$0[2],match$5=_gY_[1],fmt$11=match$5[1];
           check_char(ib,64);
           check_char(ib,91);
           var fmt$12=concat_fmt(fmt$11,rest$20),fmt$0=fmt$12;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           if(readers)
            {var
              readers_rest=readers[2],
              reader=readers[1],
              x=caml_call1(reader,ib);
             return [0,x,make_scanf(ib,fmt_rest,readers_rest)]}
           return invalid_arg(cst_scanf_missing_reader);
          case 20:
           var _gZ_=fmt$0[3],_g0_=fmt$0[2],_g1_=fmt$0[1];
           if(typeof _gZ_ !== "number" && 17 === _gZ_[0])
            {var
              rest$21=_gZ_[2],
              fmting_lit$0=_gZ_[1],
              match$6=stopper_of_formatting_lit(fmting_lit$0),
              str$1=match$6[2],
              stp$0=match$6[1],
              width$0=width_of_pad_opt(_g1_);
             scan_chars_in_char_set(_g0_,[0,stp$0],width$0,ib);
             var s$2=token_string(ib),str_rest$0=[11,str$1,rest$21];
             return [0,s$2,make_scanf(ib,str_rest$0,readers)]}
           var width=width_of_pad_opt(_g1_);
           scan_chars_in_char_set(_g0_,0,width,ib);
           var s$1=token_string(ib);
           return [0,s$1,make_scanf(ib,_gZ_,readers)];
          case 21:
           var
            rest$22=fmt$0[2],
            counter=fmt$0[1],
            count=get_counter(ib,counter);
           return [0,count,make_scanf(ib,rest$22,readers)];
          case 22:
           var rest$23=fmt$0[1],c$1=checked_peek_char(ib);
           return [0,c$1,make_scanf(ib,rest$23,readers)];
          case 23:
           var
            rest$24=fmt$0[2],
            ign=fmt$0[1],
            match$7=param_format_of_ignored_format(ign,rest$24),
            fmt$13=match$7[1],
            match$8=make_scanf(ib,fmt$13,readers);
           if(match$8){var arg_rest=match$8[2];return arg_rest}
           throw [0,Assert_failure,_cp_];
          default:return invalid_arg(cst_scanf_bad_conversion_custo)}}
    function kscanf(ib,ef,param)
     {var str=param[2],fmt=param[1];
      function apply(f,args)
       {var f$0=f,args$0=args;
        for(;;)
         {if(args$0)
           {var
             r=args$0[2],
             x=args$0[1],
             f$1=caml_call1(f$0,x),
             f$0=f$1,
             args$0=r;
            continue}
          return f$0}}
      function k(readers,f)
       {reset_token(ib);
        try
         {var _gP_=[0,make_scanf(ib,fmt,readers)],_gO_=_gP_}
        catch(exc)
         {exc = caml_wrap_exception(exc);
          var switch$0=0;
          if
           (exc[1]
            !==
            Scan_failure
            &&
            exc[1]
            !==
            Failure
            &&
            exc
            !==
            End_of_file)
           {if(exc[1] !== Invalid_argument)throw exc;
            var
             msg=exc[2],
             _gN_=
              invalid_arg
               (symbol
                 (msg,symbol(cst_in_format,symbol(escaped$1(str),cst$86))));
            switch$0 = 1}
          if(! switch$0)var _gN_=[1,exc];
          var _gO_=_gN_}
        if(0 === _gO_[0]){var args=_gO_[1];return apply(f,args)}
        var exc=_gO_[1];
        return caml_call2(ef,ib,exc)}
      return take_format_readers(k,fmt)}
    function bscanf(ib,fmt){return kscanf(ib,scanf_bad_input,fmt)}
    function ksscanf(s,ef,fmt){return kscanf(from_string$1(s),ef,fmt)}
    function sscanf(s,fmt)
     {return kscanf(from_string$1(s),scanf_bad_input,fmt)}
    function scanf(fmt){return kscanf(stdib,scanf_bad_input,fmt)}
    function bscanf_format(ib,format,f)
     {scan_caml_string(max_int,ib);
      var str=token_string(ib);
      try
       {var _gM_=format_of_string_format(str,format),fmt=_gM_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== Failure)throw exn;
        var msg=exn[2],fmt=bad_input(msg)}
      return caml_call1(f,fmt)}
    function sscanf_format(s,format,f)
     {return bscanf_format(from_string$1(s),format,f)}
    function format_from_string(s,fmt)
     {function _gL_(x){return x}
      return sscanf_format
              (symbol(cst$88,symbol(escaped$1(s),cst$87)),fmt,_gL_)}
    function unescaped(s)
     {function _gK_(x){return x}
      return caml_call1(sscanf(symbol(cst$90,symbol(s,cst$89)),_cq_),_gK_)}
    function kfscanf(ic,ef,fmt){return kscanf(memo_from_channel(ic),ef,fmt)}
    function fscanf(ic,fmt)
     {return kscanf(memo_from_channel(ic),scanf_bad_input,fmt)}
    var
     Stdlib_scanf=
      [0,
       [0,
        stdib,
        from_file,
        from_file_bin,
        close_in$0,
        from_file,
        from_file_bin,
        from_string$1,
        from_function$0,
        from_channel$0,
        end_of_input,
        beginning_of_input,
        name_of_input,
        stdib],
       Scan_failure,
       bscanf,
       sscanf,
       scanf,
       kscanf,
       ksscanf,
       bscanf_format,
       sscanf_format,
       format_from_string,
       unescaped,
       fscanf,
       kfscanf];
    caml_register_global(763,Stdlib_scanf,"Stdlib__scanf");
    var register=caml_register_named_value;
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var Stdlib_callback=[0,register,register_exception];
    caml_register_global(764,Stdlib_callback,"Stdlib__callback");
    function copy$7(o){var o$0=o.slice();return caml_set_oo_id(o$0)}
    var params$0=[0,1,1,1,3,16],initial_object_size=2,dummy_item=0;
    function public_method_label(s)
     {var accu=[0,0],_gH_=caml_ml_string_length(s) - 1 | 0,_gG_=0;
      if(! (_gH_ < 0))
       {var i=_gG_;
        for(;;)
         {var _gI_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _gI_ | 0;
          var _gJ_=i + 1 | 0;
          if(_gH_ !== i){var i=_gJ_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     compare$11=caml_string_compare,
     Vars=caml_call1(Stdlib_map[1],[0,compare$11]),
     compare$12=caml_string_compare,
     Meths=caml_call1(Stdlib_map[1],[0,compare$12]),
     compare$13=caml_int_compare,
     Labs=caml_call1(Stdlib_map[1],[0,compare$13]),
     dummy_table=[0,0,[0,dummy_item],Meths[1],Labs[1],0,0,Vars[1],0],
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _gA_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _gA_;
      var _gC_=len - 1 | 0,_gB_=0;
      if(! (_gC_ < 0))
       {var i=_gB_;
        for(;;)
         {var
           _gE_=(i * 2 | 0) + 3 | 0,
           _gD_=caml_check_bound(pub_labels,i)[1 + i];
          caml_check_bound(methods,_gE_)[1 + _gE_] = _gD_;
          var _gF_=i + 1 | 0;
          if(_gC_ !== i){var i=_gF_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$1(array,new_size)
     {var old_size=array[2].length - 1,_gy_=old_size < new_size?1:0;
      if(_gy_)
       {var new_buck=caml_make_vect(new_size,dummy_met);
        blit$1(array[2],0,new_buck,0,old_size);
        array[2] = new_buck;
        var _gz_=0}
      else
       var _gz_=_gy_;
      return _gz_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$1(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _gw_=caml_call2(Meths[27],name,table[3]);return _gw_}
      catch(_gx_)
       {_gx_ = caml_wrap_exception(_gx_);
        if(_gx_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _gx_}}
    function get_method_labels(table,names)
     {return map$5(function(_gv_){return get_method_label(table,_gv_)},names)}
    function set_method(table,label,element)
     {method_count[1]++;
      return caml_call2(Labs[27],label,table[4])
              ?(resize$1(table,label + 1 | 0),
                caml_check_bound(table[2],label)[1 + label]
                =
                element,
                0)
              :(table[6] = [0,[0,label,element],table[6]],0)}
    function get_method(table,label)
     {try
       {var _gt_=assoc(label,table[6]);return _gt_}
      catch(_gu_)
       {_gu_ = caml_wrap_exception(_gu_);
        if(_gu_ === Not_found)
         return caml_check_bound(table[2],label)[1 + label];
        throw _gu_}}
    function to_list$3(arr){return 0 === arr?0:to_list$1(arr)}
    function narrow(table,vars,virt_meths,concr_meths)
     {var
       vars$0=to_list$3(vars),
       virt_meths$0=to_list$3(virt_meths),
       concr_meths$0=to_list$3(concr_meths),
       virt_meth_labs=
        map$2
         (function(_gs_){return get_method_label(table,_gs_)},virt_meths$0),
       concr_meth_labs=
        map$2
         (function(_gr_){return get_method_label(table,_gr_)},concr_meths$0);
      table[5]
      =
      [0,
       [0,table[3],table[4],table[6],table[7],virt_meth_labs,vars$0],
       table[5]];
      var _gi_=Vars[1],_gj_=table[7];
      function _gk_(lab,info,tvars)
       {return mem(lab,vars$0)?caml_call3(Vars[4],lab,info,tvars):tvars}
      table[7] = caml_call3(Vars[13],_gk_,_gj_,_gi_);
      var by_name=[0,Meths[1]],by_label=[0,Labs[1]];
      iter2
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          var _gn_=by_label[1];
          try
           {var _gp_=caml_call2(Labs[27],label,table[4]),_go_=_gp_}
          catch(_gq_)
           {_gq_ = caml_wrap_exception(_gq_);
            if(_gq_ !== Not_found)throw _gq_;
            var _go_=1}
          by_label[1] = caml_call3(Labs[4],label,_go_,_gn_);
          return 0},
        concr_meths$0,
        concr_meth_labs);
      iter2
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          by_label[1] = caml_call3(Labs[4],label,0,by_label[1]);
          return 0},
        virt_meths$0,
        virt_meth_labs);
      table[3] = by_name[1];
      table[4] = by_label[1];
      var _gl_=0,_gm_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meth_labs)?hm:[0,met,hm]},
        _gm_,
        _gl_);
      return 0}
    function widen(table)
     {var
       match=hd(table[5]),
       vars=match[6],
       virt_meths=match[5],
       saved_vars=match[4],
       saved_hidden_meths=match[3],
       by_label=match[2],
       by_name=match[1];
      table[5] = tl(table[5]);
      table[7]
      =
      fold_left$0
       (function(s,v)
         {var _gh_=caml_call2(Vars[27],v,table[7]);
          return caml_call3(Vars[4],v,_gh_,s)},
        saved_vars,
        vars);
      table[3] = by_name;
      table[4] = by_label;
      var _gg_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meths)?hm:[0,met,hm]},
        _gg_,
        saved_hidden_meths);
      return 0}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _ge_=caml_call2(Vars[27],name,table[7]);return _ge_}
      catch(_gf_)
       {_gf_ = caml_wrap_exception(_gf_);
        if(_gf_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,cst$91))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _gf_}}
    function to_array(arr){return caml_equal(arr,0)?[0]:arr}
    function new_methods_variables(table,meths,vals)
     {var
       meths$0=to_array(meths),
       nmeths=meths$0.length - 1,
       nvals=vals.length - 1,
       res=caml_make_vect(nmeths + nvals | 0,0),
       _f8_=nmeths - 1 | 0,
       _f7_=0;
      if(! (_f8_ < 0))
       {var i$0=_f7_;
        for(;;)
         {var
           _gc_=
            get_method_label(table,caml_check_bound(meths$0,i$0)[1 + i$0]);
          caml_check_bound(res,i$0)[1 + i$0] = _gc_;
          var _gd_=i$0 + 1 | 0;
          if(_f8_ !== i$0){var i$0=_gd_;continue}
          break}}
      var _f__=nvals - 1 | 0,_f9_=0;
      if(! (_f__ < 0))
       {var i=_f9_;
        for(;;)
         {var
           _ga_=i + nmeths | 0,
           _f$_=new_variable(table,caml_check_bound(vals,i)[1 + i]);
          caml_check_bound(res,_ga_)[1 + _ga_] = _f$_;
          var _gb_=i + 1 | 0;
          if(_f__ !== i){var i=_gb_;continue}
          break}}
      return res}
    function get_variable(table,name)
     {try
       {var _f5_=caml_call2(Vars[27],name,table[7]);return _f5_}
      catch(_f6_)
       {_f6_ = caml_wrap_exception(_f6_);
        if(_f6_ === Not_found)throw [0,Assert_failure,_cr_];
        throw _f6_}}
    function get_variables(table,names)
     {return map$5(function(_f4_){return get_variable(table,_f4_)},names)}
    function add_initializer(table,f){table[8] = [0,f,table[8]];return 0}
    function create_table(public_methods)
     {if(0 === public_methods)return new_table([0]);
      var
       tags=map$5(public_method_label,public_methods),
       table=new_table(tags);
      iteri$2
       (function(i,met)
         {var lab=(i * 2 | 0) + 2 | 0;
          table[3] = caml_call3(Meths[4],met,lab,table[3]);
          table[4] = caml_call3(Labs[4],lab,1,table[4]);
          return 0},
        public_methods);
      return table}
    function init_class(table)
     {inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
      table[8] = rev(table[8]);
      return resize$1
              (table,
               3 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0)}
    function inherits(cla,vals,virt_meths,concr_meths,param,top)
     {var env=param[4],super$0=param[2];
      narrow(cla,vals,virt_meths,concr_meths);
      var init=top?caml_call2(super$0,cla,env):caml_call1(super$0,cla);
      widen(cla);
      var
       _fZ_=0,
       _f0_=to_array(concr_meths),
       _f1_=
        [0,
         map$5
          (function(nm){return get_method(cla,get_method_label(cla,nm))},_f0_),
         _fZ_],
       _f2_=to_array(vals);
      return caml_array_concat
              ([0,
                [0,init],
                [0,
                 map$5(function(_f3_){return get_variable(cla,_f3_)},_f2_),
                 _f1_]])}
    function make_class(pub_meths,class_init)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      return [0,caml_call1(env_init,0),class_init,env_init,0]}
    function make_class_store(pub_meths,class_init,init_table)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      init_table[2] = class_init;
      init_table[1] = env_init;
      return 0}
    function dummy_class(loc)
     {function undef(param){throw [0,Undefined_recursive_module,loc]}
      return [0,undef,undef,undef,0]}
    function create_object(table)
     {var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function create_object_opt(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function iter_f(obj,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],f=param$0[1];
          caml_call1(f,obj);
          var param$0=l;
          continue}
        return 0}}
    function run_initializers(obj,table)
     {var inits=table[8],_fY_=0 !== inits?1:0;
      return _fY_?iter_f(obj,inits):_fY_}
    function run_initializers_opt(obj_0,obj,table)
     {if(obj_0)return obj;
      var inits=table[8];
      if(0 !== inits)iter_f(obj,inits);
      return obj}
    function create_object_and_run_initiali(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=create_object(table);
      run_initializers(obj,table);
      return obj}
    function get_data$0(param)
     {if(param)return param[2];throw [0,Assert_failure,_cv_]}
    function build_path(n,keys,tables)
     {var res=[0,0,0,0],r=[0,res],_fU_=0;
      if(! (n < 0))
       {var i=_fU_;
        for(;;)
         {var _fW_=r[1];
          r[1] = [0,caml_check_bound(keys,i)[1 + i],_fW_,0];
          var _fX_=i + 1 | 0;
          if(n !== i){var i=_fX_;continue}
          break}}
      var _fV_=r[1];
      if(tables){tables[2] = _fV_;return res}
      throw [0,Assert_failure,_cs_]}
    function lookup_tables(root,keys)
     {var tables$2=get_data$0(root);
      if(tables$2)
       {var i$1=keys.length - 1 - 1 | 0,i=i$1,tables=tables$2;
        a:
        for(;;)
         {if(0 <= i)
           {var key=caml_check_bound(keys,i)[1 + i],tables$0=tables;
            for(;;)
             {if(tables$0)
               {if(tables$0[1] === key)
                 {var tables$1=get_data$0(tables$0);
                  if(tables$1)
                   {var i$0=i - 1 | 0,i=i$0,tables=tables$1;continue a}
                  throw [0,Assert_failure,_cx_]}
                if(tables$0)
                 {var _fT_=tables$0[3];
                  if(_fT_){var tables$0=_fT_;continue}
                  var v=[0,key,0,0];
                  if(tables$0)
                   {tables$0[3] = v;return build_path(i - 1 | 0,keys,v)}
                  throw [0,Assert_failure,_ct_]}
                throw [0,Assert_failure,_cw_]}
              throw [0,Assert_failure,_cu_]}}
          return tables}}
      return build_path(keys.length - 1 - 1 | 0,keys,root)}
    function new_cache(table)
     {var n=new_method(table),switch$0=0;
      if
       (0
        !==
        (n % 2 | 0)
        &&
        !
        ((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n))
       {var n$0=new_method(table);switch$0 = 1}
      if(! switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[1 + n$0] = 0;
      return n$0}
    function set_methods(table,methods)
     {var len=methods.length - 1,i=[0,0];
      for(;;)
       {if(i[1] < len)
         {var
           _fN_=i[1],
           label=caml_check_bound(methods,_fN_)[1 + _fN_],
           next=
            function(param)
             {i[1]++;
              var _fS_=i[1];
              return caml_check_bound(methods,_fS_)[1 + _fS_]},
           clo=next(0);
          if(typeof clo === "number")
           switch(clo)
            {case 0:
              var
               x=next(0),
               clo$0=function(x){return function(obj){return x}}(x);
              break;
             case 1:
              var
               n=next(0),
               clo$0=function(n){return function(obj){return obj[1 + n]}}(n);
              break;
             case 2:
              var
               e=next(0),
               n$0=next(0),
               clo$0=
                function(e,n){return function(obj){return obj[1 + e][1 + n]}}
                 (e,n$0);
              break;
             case 3:
              var
               n$1=next(0),
               clo$0=
                function(n)
                  {return function(obj){return caml_call1(obj[1][1 + n],obj)}}
                 (n$1);
              break;
             case 4:
              var
               n$2=next(0),
               clo$0=
                function(n){return function(obj,x){obj[1 + n] = x;return 0}}
                 (n$2);
              break;
             case 5:
              var
               f=next(0),
               x$0=next(0),
               clo$0=
                function(f,x){return function(obj){return caml_call1(f,x)}}
                 (f,x$0);
              break;
             case 6:
              var
               f$0=next(0),
               n$3=next(0),
               clo$0=
                function(f,n)
                  {return function(obj){return caml_call1(f,obj[1 + n])}}
                 (f$0,n$3);
              break;
             case 7:
              var
               f$1=next(0),
               e$0=next(0),
               n$4=next(0),
               clo$0=
                function(f,e,n)
                  {return function(obj)
                    {return caml_call1(f,obj[1 + e][1 + n])}}
                 (f$1,e$0,n$4);
              break;
             case 8:
              var
               f$2=next(0),
               n$5=next(0),
               clo$0=
                function(f,n)
                  {return function(obj)
                    {return caml_call1(f,caml_call1(obj[1][1 + n],obj))}}
                 (f$2,n$5);
              break;
             case 9:
              var
               f$3=next(0),
               x$1=next(0),
               y=next(0),
               clo$0=
                function(f,x,y)
                  {return function(obj){return caml_call2(f,x,y)}}
                 (f$3,x$1,y);
              break;
             case 10:
              var
               f$4=next(0),
               x$2=next(0),
               n$6=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj){return caml_call2(f,x,obj[1 + n])}}
                 (f$4,x$2,n$6);
              break;
             case 11:
              var
               f$5=next(0),
               x$3=next(0),
               e$1=next(0),
               n$7=next(0),
               clo$0=
                function(f,x,e,n)
                  {return function(obj)
                    {return caml_call2(f,x,obj[1 + e][1 + n])}}
                 (f$5,x$3,e$1,n$7);
              break;
             case 12:
              var
               f$6=next(0),
               x$4=next(0),
               n$8=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj)
                    {return caml_call2(f,x,caml_call1(obj[1][1 + n],obj))}}
                 (f$6,x$4,n$8);
              break;
             case 13:
              var
               f$7=next(0),
               n$9=next(0),
               x$5=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj){return caml_call2(f,obj[1 + n],x)}}
                 (f$7,n$9,x$5);
              break;
             case 14:
              var
               f$8=next(0),
               e$2=next(0),
               n$10=next(0),
               x$6=next(0),
               clo$0=
                function(f,e,n,x)
                  {return function(obj)
                    {return caml_call2(f,obj[1 + e][1 + n],x)}}
                 (f$8,e$2,n$10,x$6);
              break;
             case 15:
              var
               f$9=next(0),
               n$11=next(0),
               x$7=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj)
                    {return caml_call2(f,caml_call1(obj[1][1 + n],obj),x)}}
                 (f$9,n$11,x$7);
              break;
             case 16:
              var
               n$12=next(0),
               x$8=next(0),
               clo$0=
                function(n,x)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,x)}}
                 (n$12,x$8);
              break;
             case 17:
              var
               n$13=next(0),
               m=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,obj[1 + m])}}
                 (n$13,m);
              break;
             case 18:
              var
               n$14=next(0),
               e$3=next(0),
               m$0=next(0),
               clo$0=
                function(n,e,m)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,obj[1 + e][1 + m])}}
                 (n$14,e$3,m$0);
              break;
             case 19:
              var
               n$15=next(0),
               m$1=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {var _fQ_=caml_call1(obj[1][1 + m],obj);
                     return caml_call2(obj[1][1 + n],obj,_fQ_)}}
                 (n$15,m$1);
              break;
             case 20:
              var
               m$2=next(0),
               x$9=next(0),
               c=new_cache(table),
               clo$0=
                function(m,x,c)
                  {return function(obj)
                    {return caml_call2(caml_get_public_method(x,m,0),x,c)}}
                 (m$2,x$9,c);
              break;
             case 21:
              var
               m$3=next(0),
               n$16=next(0),
               c$0=new_cache(table),
               clo$0=
                function(m,n,c)
                  {return function(obj)
                    {var _fP_=obj[1 + n];
                     return caml_call2(caml_get_public_method(_fP_,m,0),_fP_,c)}}
                 (m$3,n$16,c$0);
              break;
             case 22:
              var
               m$4=next(0),
               e$4=next(0),
               n$17=next(0),
               c$1=new_cache(table),
               clo$0=
                function(m,e,n,c)
                  {return function(obj)
                    {var _fO_=obj[1 + e][1 + n];
                     return caml_call2(caml_get_public_method(_fO_,m,0),_fO_,c)}}
                 (m$4,e$4,n$17,c$1);
              break;
             default:
              var
               m$5=next(0),
               n$18=next(0),
               c$2=new_cache(table),
               clo$0=
                function(m,n,c)
                  {return function(obj)
                    {var _fR_=caml_call1(obj[1][1 + n],obj);
                     return caml_call2(caml_get_public_method(_fR_,m,0),_fR_,c)}}
                 (m$5,n$18,c$2)}
          else
           var clo$0=clo;
          set_method(table,label,clo$0);
          i[1]++;
          continue}
        return 0}}
    function stats$0(param)
     {return [0,table_count[1],method_count[1],inst_var_count[1]]}
    var
     CamlinternalOO=
      [0,
       public_method_label,
       new_method,
       new_variable,
       new_methods_variables,
       get_variable,
       get_variables,
       get_method_label,
       get_method_labels,
       get_method,
       set_method,
       set_methods,
       narrow,
       widen,
       add_initializer,
       dummy_table,
       create_table,
       init_class,
       inherits,
       make_class,
       make_class_store,
       dummy_class,
       copy$7,
       create_object,
       create_object_opt,
       run_initializers,
       run_initializers_opt,
       create_object_and_run_initiali,
       lookup_tables,
       params$0,
       stats$0];
    caml_register_global(765,CamlinternalOO,"CamlinternalOO");
    var Stdlib_oo=[0,copy$7,public_method_label,public_method_label];
    caml_register_global(766,Stdlib_oo,"Stdlib__oo");
    var
     update_mod=runtime.caml_CamlinternalMod_update_mod,
     init_mod=runtime.caml_CamlinternalMod_init_mod,
     CamlinternalMod=[0,init_mod,update_mod];
    caml_register_global(767,CamlinternalMod,"CamlinternalMod");
    var
     initial_buffer=caml_create_bytes(32),
     buffer=[0,initial_buffer],
     bufpos=[0,0];
    function reset_buffer(param)
     {buffer[1] = initial_buffer;bufpos[1] = 0;return 0}
    function store(c)
     {if(caml_ml_bytes_length(buffer[1]) <= bufpos[1])
       {var newbuffer=caml_create_bytes(2 * bufpos[1] | 0);
        blit(buffer[1],0,newbuffer,0,bufpos[1]);
        buffer[1] = newbuffer}
      caml_bytes_set(buffer[1],bufpos[1],c);
      bufpos[1]++;
      return 0}
    function get_string(param)
     {var s=sub_string(buffer[1],0,bufpos[1]);
      buffer[1] = initial_buffer;
      return s}
    function make_lexer(keywords)
     {var kwd_table=caml_call2(Stdlib_hashtbl[1],0,17);
      iter$2
       (function(s){return caml_call3(Stdlib_hashtbl[5],kwd_table,s,[0,s])},
        keywords);
      function ident_or_keyword(id)
       {try
         {var _fL_=caml_call2(Stdlib_hashtbl[6],kwd_table,id);return _fL_}
        catch(_fM_)
         {_fM_ = caml_wrap_exception(_fM_);
          if(_fM_ === Not_found)return [1,id];
          throw _fM_}}
      function keyword_or_error(c)
       {var s=make$0(1,c);
        try
         {var _fJ_=caml_call2(Stdlib_hashtbl[6],kwd_table,s);return _fJ_}
        catch(_fK_)
         {_fK_ = caml_wrap_exception(_fK_);
          if(_fK_ === Not_found)
           throw [0,Error,symbol(cst_Illegal_character,s)];
          throw _fK_}}
      function end_exponent_part(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fI_=match[1],switcher=_fI_ - 48 | 0;
            if(! (9 < switcher >>> 0)){junk(strm);store(_fI_);continue}}
          return [0,[3,caml_float_of_string(get_string(0))]]}}
      function exponent_part(strm)
       {var match=peek$0(strm);
        if(match)
         {var _fH_=match[1],switch$0=0;
          if(43 !== _fH_ && 45 !== _fH_)switch$0 = 1;
          if(! switch$0)
           {junk(strm);store(_fH_);return end_exponent_part(strm)}}
        return end_exponent_part(strm)}
      function number(s)
       {for(;;)
         {var match=peek$0(s);
          if(match)
           {var _fE_=match[1];
            if(58 <= _fE_)
             {var switch$0=0;
              if(69 === _fE_ || 101 === _fE_)switch$0 = 1;
              if(switch$0){junk(s);store(69);return exponent_part(s)}}
            else
             {if(46 === _fE_)
               {junk(s);
                store(46);
                for(;;)
                 {var match$0=peek$0(s);
                  if(match$0)
                   {var _fF_=match$0[1],_fG_=_fF_ - 69 | 0;
                    if(32 < _fG_ >>> 0)
                     {var switcher=_fG_ + 21 | 0;
                      if(! (9 < switcher >>> 0)){junk(s);store(_fF_);continue}}
                    else
                     {var switcher$0=_fG_ - 1 | 0;
                      if(30 < switcher$0 >>> 0)
                       {junk(s);store(69);return exponent_part(s)}}}
                  return [0,[3,caml_float_of_string(get_string(0))]]}}
              if(48 <= _fE_){junk(s);store(_fE_);continue}}}
          return [0,[2,caml_int_of_string(get_string(0))]]}}
      function ident2(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fC_=match[1],switch$0=0;
            if(94 <= _fC_)
             {var _fD_=_fC_ - 95 | 0;
              if(30 < _fD_ >>> 0)
               {if(! (32 <= _fD_))switch$0 = 1}
              else
               if(29 === _fD_)switch$0 = 1}
            else
             if(65 <= _fC_)
              {if(92 === _fC_)switch$0 = 1}
             else
              if(33 <= _fC_)
               switch(_fC_ - 33 | 0)
                {case 0:
                 case 2:
                 case 3:
                 case 4:
                 case 5:
                 case 9:
                 case 10:
                 case 12:
                 case 14:
                 case 25:
                 case 27:
                 case 28:
                 case 29:
                 case 30:
                 case 31:switch$0 = 1;break
                 }
            if(switch$0){junk(strm);store(_fC_);continue}}
          return [0,ident_or_keyword(get_string(0))]}}
      function neg_number(s)
       {var match=peek$0(s);
        if(match)
         {var _fB_=match[1],switcher=_fB_ - 48 | 0;
          if(! (9 < switcher >>> 0))
           {junk(s);reset_buffer(0);store(45);store(_fB_);return number(s)}}
        reset_buffer(0);
        store(45);
        return ident2(s)}
      function ident(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fz_=match[1],switch$0=0;
            if(91 <= _fz_)
             {var _fA_=_fz_ - 95 | 0;
              if(27 < _fA_ >>> 0)
               {if(97 <= _fA_)switch$0 = 1}
              else
               if(1 !== _fA_)switch$0 = 1}
            else
             if(48 <= _fz_)
              {if(6 < (_fz_ - 58 | 0) >>> 0)switch$0 = 1}
             else
              if(39 === _fz_)switch$0 = 1;
            if(switch$0){junk(strm);store(_fz_);continue}}
          return [0,ident_or_keyword(get_string(0))]}}
      function next_token$0(counter,strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fp_=match[1],switch$0=0;
            if(124 <= _fp_)
             {if(127 <= _fp_)
               {if(192 <= _fp_)switch$0 = 1}
              else
               if(125 !== _fp_)switch$0 = 2}
            else
             {var _fq_=_fp_ - 65 | 0;
              if(57 < _fq_ >>> 0)
               {if(! (58 <= _fq_))
                 {var switcher=_fq_ + 65 | 0;
                  switch(switcher)
                   {case 34:
                     junk(strm);
                     reset_buffer(0);
                     for(;;)
                      {var match$1=peek$0(strm);
                       if(match$1)
                        {var _fs_=match$1[1];
                         if(34 === _fs_){junk(strm);return [0,[4,get_string(0)]]}
                         if(92 === _fs_)
                          {junk(strm);
                           try
                            {var c$0=escape(strm)}
                           catch(_fy_)
                            {_fy_ = caml_wrap_exception(_fy_);
                             if(_fy_ === Failure$0)throw [0,Error,cst$94];
                             throw _fy_;
                             var _fv_=_fy_}
                           store(c$0);
                           continue}
                         junk(strm);
                         store(_fs_);
                         continue}
                       throw Failure$0}
                    case 39:
                     junk(strm);
                     try
                      {var match$2=peek$0(strm);
                       if(! match$2)throw Failure$0;
                       var _ft_=match$2[1];
                       if(92 === _ft_)
                        {junk(strm);
                         try
                          {var _fu_=escape(strm)}
                         catch(_fx_)
                          {_fx_ = caml_wrap_exception(_fx_);
                           if(_fx_ === Failure$0)throw [0,Error,cst$95];
                           throw _fx_}
                         var c=_fu_}
                       else
                        {junk(strm);var c=_ft_}}
                     catch(_fw_)
                      {_fw_ = caml_wrap_exception(_fw_);
                       if(_fw_ === Failure$0)throw [0,Error,cst$92];
                       throw _fw_}
                     var match$0=peek$0(strm);
                     if(match$0 && 39 === match$0[1])
                      {junk(strm);return [0,[5,c]]}
                     throw [0,Error,cst$93];
                    case 40:
                     junk(strm);
                     if(counter < 50)
                      {var counter$0=counter + 1 | 0;
                       return maybe_comment(counter$0,strm)}
                     return caml_trampoline_return(maybe_comment,[0,strm]);
                    case 45:junk(strm);return neg_number(strm);
                    case 9:
                    case 10:
                    case 12:
                    case 13:
                    case 26:
                    case 32:junk(strm);continue;
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                     junk(strm);reset_buffer(0);store(_fp_);return number(strm);
                    case 33:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 42:
                    case 43:
                    case 47:
                    case 58:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:switch$0 = 2;break
                    }}}
              else
               {var _fr_=_fq_ - 26 | 0;
                if(5 < _fr_ >>> 0)
                 switch$0 = 1;
                else
                 switch(_fr_)
                  {case 4:switch$0 = 1;break;case 1:case 3:switch$0 = 2;break}}}
            switch(switch$0)
             {case 0:junk(strm);return [0,keyword_or_error(_fp_)];
              case 1:
               junk(strm);reset_buffer(0);store(_fp_);return ident(strm);
              default:
               junk(strm);reset_buffer(0);store(_fp_);return ident2(strm)}}
          return 0}}
      function maybe_comment(counter,strm)
       {var match=peek$0(strm);
        if(match && 42 === match[1])
         {junk(strm);
          comment(strm);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return next_token$0(counter$0,strm)}
          return caml_trampoline_return(next_token$0,[0,strm])}
        return [0,keyword_or_error(40)]}
      function next_token(strm){return caml_trampoline(next_token$0(0,strm))}
      function escape(strm)
       {var match=peek$0(strm);
        if(match)
         {var _fm_=match[1];
          if(58 <= _fm_)
           {var switcher=_fm_ - 110 | 0;
            if(! (6 < switcher >>> 0))
             switch(switcher)
              {case 0:junk(strm);return 10;
               case 4:junk(strm);return 13;
               case 6:junk(strm);return 9
               }}
          else
           if(48 <= _fm_)
            {junk(strm);
             var match$0=peek$0(strm);
             if(match$0)
              {var _fn_=match$0[1],switcher$0=_fn_ - 48 | 0;
               if(! (9 < switcher$0 >>> 0))
                {junk(strm);
                 var match$1=peek$0(strm);
                 if(match$1)
                  {var _fo_=match$1[1],switcher$1=_fo_ - 48 | 0;
                   if(! (9 < switcher$1 >>> 0))
                    {junk(strm);
                     return chr
                             ((((_fm_ - 48 | 0) * 100 | 0)
                               +
                               ((_fn_ - 48 | 0) * 10 | 0)
                               |
                               0)
                              +
                              (_fo_ - 48 | 0)
                              |
                              0)}}
                 throw [0,Error,cst$97]}}
             throw [0,Error,cst$96]}
          junk(strm);
          return _fm_}
        throw Failure$0}
      function comment(strm)
       {a:
        for(;;)
         {var match=peek$0(strm);
          if(match)
           {var switcher=match[1] - 40 | 0;
            if(! (2 < switcher >>> 0))
             switch(switcher)
              {case 0:
                junk(strm);
                var match$0=peek$0(strm);
                if(match$0)
                 {if(42 === match$0[1]){junk(strm);comment(strm);continue}
                  junk(strm);
                  continue}
                throw Failure$0;
               case 1:break;
               default:
                junk(strm);
                for(;;)
                 {var match$1=peek$0(strm);
                  if(match$1)
                   {var _fl_=match$1[1];
                    if(41 === _fl_){junk(strm);return 0}
                    if(42 === _fl_){junk(strm);continue}
                    junk(strm);
                    continue a}
                  throw Failure$0}}
            junk(strm);
            continue}
          throw Failure$0}}
      return function(input)
       {return from(function(count){return next_token(input)})}}
    var Stdlib_genlex=[0,make_lexer];
    caml_register_global(768,Stdlib_genlex,"Stdlib__genlex");
    function MakeSeeded$0(H)
     {var prng=[246,function(_fk_){return caml_call1(_b4_[2],0)}];
      function create(opt,initial_size)
       {if(opt)
         var sth=opt[1],random=sth;
        else
         var random=caml_call1(Stdlib_hashtbl[17],0);
        var x=16;
        for(;;)
         {if(! (initial_size <= x) && ! (max_array_length < (x * 2 | 0)))
           {var x$0=x * 2 | 0,x=x$0;continue}
          if(random)
           var
            _fi_=caml_obj_tag(prng),
            _fj_=250 === _fi_?prng[1]:246 === _fi_?force_lazy_block(prng):prng,
            seed=caml_call1(_b4_[4],_fj_);
          else
           var seed=0;
          return [0,0,caml_make_vect(x,0),seed,x]}}
      function clear(h)
       {h[1] = 0;
        var len=h[2].length - 1,_fg_=len - 1 | 0,_ff_=0;
        if(! (_fg_ < 0))
         {var i=_ff_;
          for(;;)
           {caml_check_bound(h[2],i)[1 + i] = 0;
            var _fh_=i + 1 | 0;
            if(_fg_ !== i){var i=_fh_;continue}
            break}}
        return 0}
      function reset(h)
       {var len=h[2].length - 1;
        return len === h[4]
                ?clear(h)
                :(h[1] = 0,h[2] = caml_make_vect(h[4],0),0)}
      function copy(init)
       {var _fc_=init[4],_fd_=init[3],_fe_=copy$1(init[2]);
        return [0,init[1],_fe_,_fd_,_fc_]}
      function key_index(h,hkey){return hkey & (h[2].length - 1 - 1 | 0)}
      function clean(h)
       {function do_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var rest=param$0[3],c=param$0[2],hkey=param$0[1];
              if(caml_call1(H[7],c))return [0,hkey,c,do_bucket(rest)];
              h[1] = h[1] - 1 | 0;
              var param$0=rest;
              continue}
            return 0}}
        var d=h[2],_e$_=d.length - 1 - 1 | 0,_e__=0;
        if(! (_e$_ < 0))
         {var i=_e__;
          for(;;)
           {var _fa_=do_bucket(caml_check_bound(d,i)[1 + i]);
            caml_check_bound(d,i)[1 + i] = _fa_;
            var _fb_=i + 1 | 0;
            if(_e$_ !== i){var i=_fb_;continue}
            break}}
        return 0}
      function resize(h)
       {var odata=h[2],osize=odata.length - 1,nsize=osize * 2 | 0;
        clean(h);
        var
         _e4_=nsize < max_array_length?1:0,
         _e5_=_e4_?(osize >>> 1 | 0) <= h[1]?1:0:_e4_;
        if(_e5_)
         {var ndata=caml_make_vect(nsize,0);
          h[2] = ndata;
          var
           insert_bucket=
            function(param)
             {if(param)
               {var rest=param[3],data=param[2],hkey=param[1];
                insert_bucket(rest);
                var nidx=key_index(h,hkey);
                ndata[1 + nidx]
                =
                [0,hkey,data,caml_check_bound(ndata,nidx)[1 + nidx]];
                return 0}
              return 0},
           _e7_=osize - 1 | 0,
           _e6_=0;
          if(! (_e7_ < 0))
           {var i=_e6_;
            for(;;)
             {insert_bucket(caml_check_bound(odata,i)[1 + i]);
              var _e9_=i + 1 | 0;
              if(_e7_ !== i){var i=_e9_;continue}
              break}}
          var _e8_=0}
        else
         var _e8_=_e5_;
        return _e8_}
      function add(h,key,info)
       {var
         hkey=caml_call2(H[2],h[3],key),
         i=key_index(h,hkey),
         container=caml_call2(H[1],key,info),
         bucket=[0,hkey,container,caml_check_bound(h[2],i)[1 + i]];
        caml_check_bound(h[2],i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _e3_=h[2].length - 1 << 1 < h[1]?1:0;
        return _e3_?resize(h):_e3_}
      function remove(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function remove_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var next=param$0[3],c=param$0[2],hk=param$0[1];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                switch(match)
                 {case 0:h[1] = h[1] - 1 | 0;return next;
                  case 1:return [0,hk,c,remove_bucket(next)];
                  default:h[1] = h[1] - 1 | 0;var param$0=next;continue}}
              return [0,hk,c,remove_bucket(next)]}
            return 0}}
        var
         i=key_index(h,hkey),
         _e2_=remove_bucket(caml_check_bound(h[2],i)[1 + i]);
        caml_check_bound(h[2],i)[1 + i] = _e2_;
        return 0}
      function find(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _e1_=key_index(h,hkey),
         param$0=caml_check_bound(h[2],_e1_)[1 + _e1_],
         param=param$0;
        for(;;)
         {if(param)
           {var rest=param[3],c=param[2],hk=param[1];
            if(hkey === hk)
             {var match=caml_call2(H[3],c,key);
              switch(match)
               {case 0:
                 var match$0=caml_call1(H[4],c);
                 if(match$0){var d=match$0[1];return d}
                 var param=rest;
                 continue;
                case 1:var param=rest;continue;
                default:var param=rest;continue}}
            var param=rest;
            continue}
          throw Not_found}}
      function find_opt(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _e0_=key_index(h,hkey),
         param$0=caml_check_bound(h[2],_e0_)[1 + _e0_],
         param=param$0;
        for(;;)
         {if(param)
           {var rest=param[3],c=param[2],hk=param[1];
            if(hkey === hk)
             {var match=caml_call2(H[3],c,key);
              switch(match)
               {case 0:
                 var d=caml_call1(H[4],c);
                 if(d)return d;
                 var param=rest;
                 continue;
                case 1:var param=rest;continue;
                default:var param=rest;continue}}
            var param=rest;
            continue}
          return 0}}
      function find_all(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var rest=param$0[3],c=param$0[2],hk=param$0[1];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                switch(match)
                 {case 0:
                   var match$0=caml_call1(H[4],c);
                   if(match$0)
                    {var d=match$0[1];return [0,d,find_in_bucket(rest)]}
                   var param$0=rest;
                   continue;
                  case 1:var param$0=rest;continue;
                  default:var param$0=rest;continue}}
              var param$0=rest;
              continue}
            return 0}}
        var _eZ_=key_index(h,hkey);
        return find_in_bucket(caml_check_bound(h[2],_eZ_)[1 + _eZ_])}
      function replace(h,key,info)
       {var hkey=caml_call2(H[2],h[3],key);
        function replace_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var next=param$0[3],c=param$0[2],hk=param$0[1];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                if(0 === match)return caml_call3(H[6],c,key,info);
                var param$0=next;
                continue}
              var param$0=next;
              continue}
            throw Not_found}}
        var i=key_index(h,hkey),l=caml_check_bound(h[2],i)[1 + i];
        try
         {var _eX_=replace_bucket(l);return _eX_}
        catch(_eY_)
         {_eY_ = caml_wrap_exception(_eY_);
          if(_eY_ === Not_found)
           {var container=caml_call2(H[1],key,info);
            caml_check_bound(h[2],i)[1 + i] = [0,hkey,container,l];
            h[1] = h[1] + 1 | 0;
            var _eW_=h[2].length - 1 << 1 < h[1]?1:0;
            return _eW_?resize(h):_eW_}
          throw _eY_}}
      function mem(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _eV_=key_index(h,hkey),
         param$0=caml_check_bound(h[2],_eV_)[1 + _eV_],
         param=param$0;
        for(;;)
         {if(param)
           {var rest=param[3],c=param[2],hk=param[1];
            if(hk === hkey)
             {var match=caml_call2(H[3],c,key);
              if(0 === match)return 1;
              var param=rest;
              continue}
            var param=rest;
            continue}
          return 0}}
      function iter$0(f,h)
       {var d$0=h[2],_eT_=d$0.length - 1 - 1 | 0,_eS_=0;
        if(! (_eT_ < 0))
         {var i=_eS_;
          a:
          for(;;)
           {var param$0=caml_check_bound(d$0,i)[1 + i],param=param$0;
            for(;;)
             {if(param)
               {var
                 rest=param[3],
                 c=param[2],
                 match=caml_call1(H[5],c),
                 match$0=caml_call1(H[4],c),
                 switch$0=0;
                if(match && match$0)
                 {var d=match$0[1],k=match[1];caml_call2(f,k,d);switch$0 = 1}
                var param=rest;
                continue}
              var _eU_=i + 1 | 0;
              if(_eT_ !== i){var i=_eU_;continue a}
              break}
            break}}
        return 0}
      function fold(f,h,init)
       {var d$0=h[2],accu$1=[0,init],_eP_=d$0.length - 1 - 1 | 0,_eO_=0;
        if(! (_eP_ < 0))
         {var i=_eO_;
          a:
          for(;;)
           {var
             _eQ_=accu$1[1],
             b$0=caml_check_bound(d$0,i)[1 + i],
             b=b$0,
             accu=_eQ_;
            for(;;)
             {if(b)
               {var
                 rest=b[3],
                 c=b[2],
                 match=caml_call1(H[5],c),
                 match$0=caml_call1(H[4],c),
                 switch$0=0;
                if(match && match$0)
                 {var d=match$0[1],k=match[1],accu$0=caml_call3(f,k,d,accu);
                  switch$0 = 1}
                if(! switch$0)var accu$0=accu;
                var b=rest,accu=accu$0;
                continue}
              accu$1[1] = accu;
              var _eR_=i + 1 | 0;
              if(_eP_ !== i){var i=_eR_;continue a}
              break}
            break}}
        return accu$1[1]}
      function filter_map_inplace(f,h)
       {function do_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var
               rest=param$0[3],
               c=param$0[2],
               hk=param$0[1],
               match=caml_call1(H[5],c),
               match$0=caml_call1(H[4],c);
              if(match && match$0)
               {var d=match$0[1],k=match[1],match$1=caml_call2(f,k,d);
                if(match$1)
                 {var new_d=match$1[1];
                  caml_call3(H[6],c,k,new_d);
                  return [0,hk,c,do_bucket(rest)]}
                var param$0=rest;
                continue}
              var param$0=rest;
              continue}
            return 0}}
        var d=h[2],_eL_=d.length - 1 - 1 | 0,_eK_=0;
        if(! (_eL_ < 0))
         {var i=_eK_;
          for(;;)
           {var _eM_=do_bucket(caml_check_bound(d,i)[1 + i]);
            caml_check_bound(d,i)[1 + i] = _eM_;
            var _eN_=i + 1 | 0;
            if(_eL_ !== i){var i=_eN_;continue}
            break}}
        return 0}
      function length(h){return h[1]}
      function bucket_length(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             param$1=param$0[3],
             accu$1=accu$0 + 1 | 0,
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function stats(h)
       {var
         _eH_=h[2],
         _eI_=0,
         mbl=
          fold_left$1
           (function(m,b){return max(m,bucket_length(0,b))},_eI_,_eH_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _eJ_=h[2];
        iter$5
         (function(b)
           {var l=bucket_length(0,b);
            histo[1 + l] = caml_check_bound(histo,l)[1 + l] + 1 | 0;
            return 0},
          _eJ_);
        return [0,h[1],h[2].length - 1,mbl,histo]}
      function bucket_length_alive(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var rest=param$0[3],c=param$0[2];
            if(caml_call1(H[7],c))
             {var accu$1=accu$0 + 1 | 0,accu$0=accu$1,param$0=rest;continue}
            var param$0=rest;
            continue}
          return accu$0}}
      function stats_alive(h)
       {var
         size=[0,0],
         _eE_=h[2],
         _eF_=0,
         mbl=
          fold_left$1
           (function(m,b){return max(m,bucket_length_alive(0,b))},_eF_,_eE_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _eG_=h[2];
        iter$5
         (function(b)
           {var l=bucket_length_alive(0,b);
            size[1] = size[1] + l | 0;
            histo[1 + l] = caml_check_bound(histo,l)[1 + l] + 1 | 0;
            return 0},
          _eG_);
        return [0,size[1],h[2].length - 1,mbl,histo]}
      function to_seq(tbl)
       {var tbl_data=tbl[2];
        function aux(i,buck,param)
         {var i$0=i,buck$0=buck;
          for(;;)
           {if(buck$0)
             {var
               next=buck$0[3],
               c=buck$0[2],
               match=caml_call1(H[5],c),
               match$0=caml_call1(H[4],c);
              if(match && match$0)
               {var data=match$0[1],key=match[1];
                return [0,
                        [0,key,data],
                        function(_eD_){return aux(i$0,next,_eD_)}]}
              var buck$0=next;
              continue}
            if(i$0 === tbl_data.length - 1)return 0;
            var
             buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
             i$1=i$0 + 1 | 0,
             i$0=i$1,
             buck$0=buck$1;
            continue}}
        var _eA_=0,_eB_=0;
        return function(_eC_){return aux(_eB_,_eA_,_eC_)}}
      function to_seq_keys(m)
       {var _ew_=to_seq(m);
        function _ex_(_ez_){return _ez_[1]}
        return function(_ey_){return map(_ex_,_ew_,_ey_)}}
      function to_seq_values(m)
       {var _es_=to_seq(m);
        function _et_(_ev_){return _ev_[2]}
        return function(_eu_){return map(_et_,_es_,_eu_)}}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i){var tbl=create(0,16);replace_seq(tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$0,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$5(param){return caml_call1(_s_[1],1)}
    function get_key$0(t){return caml_call2(_s_[3],t,0)}
    function get_key_copy$0(t){return caml_call2(_s_[4],t,0)}
    function set_key$0(t,k){return caml_call3(_s_[5],t,0,k)}
    function unset_key$0(t){return caml_call2(_s_[6],t,0)}
    function check_key$0(t){return caml_call2(_s_[7],t,0)}
    function blit_key$0(t1,t2){return caml_call5(_s_[8],t1,0,t2,0,1)}
    function get_data$1(t){return caml_call1(_s_[9],t)}
    function get_data_copy(t){return caml_call1(_s_[10],t)}
    function set_data(t,d){return caml_call2(_s_[11],t,d)}
    function unset_data(t){return caml_call1(_s_[12],t)}
    function check_data(t){return caml_call1(_s_[13],t)}
    function blit_data(t1,t2){return caml_call2(_s_[14],t1,t2)}
    function MakeSeeded$1(H)
     {function create(k,d)
       {var c=create$5(0);set_data(c,d);set_key$0(c,k);return c}
      var hash=H[2];
      function equal(c,k)
       {var match=get_key$0(c);
        if(match){var k$0=match[1];return caml_call2(H[1],k,k$0)?0:1}
        return 2}
      function set_key_data(c,k,d)
       {unset_data(c);set_key$0(c,k);return set_data(c,d)}
      return MakeSeeded$0
              ([0,
                create,
                hash,
                equal,
                get_data$1,
                get_key$0,
                set_key_data,
                check_key$0])}
    function Make$1(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$1([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _er_=include[1];
      function create(sz){return caml_call2(_er_,_cy_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$6(param){return caml_call1(_s_[1],2)}
    function get_key1(t){return caml_call2(_s_[3],t,0)}
    function get_key1_copy(t){return caml_call2(_s_[4],t,0)}
    function set_key1(t,k){return caml_call3(_s_[5],t,0,k)}
    function unset_key1(t){return caml_call2(_s_[6],t,0)}
    function check_key1(t){return caml_call2(_s_[7],t,0)}
    function get_key2(t){return caml_call2(_s_[3],t,1)}
    function get_key2_copy(t){return caml_call2(_s_[4],t,1)}
    function set_key2(t,k){return caml_call3(_s_[5],t,1,k)}
    function unset_key2(t){return caml_call2(_s_[6],t,1)}
    function check_key2(t){return caml_call2(_s_[7],t,1)}
    function blit_key1(t1,t2){return caml_call5(_s_[8],t1,0,t2,0,1)}
    function blit_key2(t1,t2){return caml_call5(_s_[8],t1,1,t2,1,1)}
    function blit_key12(t1,t2){return caml_call5(_s_[8],t1,0,t2,0,2)}
    function get_data$2(t){return caml_call1(_s_[9],t)}
    function get_data_copy$0(t){return caml_call1(_s_[10],t)}
    function set_data$0(t,d){return caml_call2(_s_[11],t,d)}
    function unset_data$0(t){return caml_call1(_s_[12],t)}
    function check_data$0(t){return caml_call1(_s_[13],t)}
    function blit_data$0(t1,t2){return caml_call2(_s_[14],t1,t2)}
    function MakeSeeded$2(H1,H2)
     {function create(param,d)
       {var k2=param[2],k1=param[1],c=create$6(0);
        set_data$0(c,d);
        set_key1(c,k1);
        set_key2(c,k2);
        return c}
      function hash(seed,param)
       {var
         k2=param[2],
         k1=param[1],
         _eq_=caml_call2(H2[2],seed,k2) * 65599 | 0;
        return caml_call2(H1[2],seed,k1) + _eq_ | 0}
      function equal(c,param)
       {var k2=param[2],k1=param[1],match=get_key1(c),match$0=get_key2(c);
        if(match && match$0)
         {var k2$0=match$0[1],k1$0=match[1];
          if(caml_call2(H1[1],k1,k1$0) && caml_call2(H2[1],k2,k2$0))return 0;
          return 1}
        return 2}
      function get_key(c)
       {var match=get_key1(c),match$0=get_key2(c);
        if(match && match$0)
         {var k2=match$0[1],k1=match[1];return [0,[0,k1,k2]]}
        return 0}
      function set_key_data(c,param,d)
       {var k2=param[2],k1=param[1];
        unset_data$0(c);
        set_key1(c,k1);
        set_key2(c,k2);
        return set_data$0(c,d)}
      function check_key(c)
       {var _ep_=check_key1(c);return _ep_?check_key2(c):_ep_}
      return MakeSeeded$0
              ([0,create,hash,equal,get_data$2,get_key,set_key_data,check_key])}
    function Make$2(H1,H2)
     {var equal=H2[1];
      function hash(seed,x){return caml_call1(H2[2],x)}
      var equal$0=H1[1],_en_=[0,equal,hash];
      function hash$0(seed,x){return caml_call1(H1[2],x)}
      var
       include=MakeSeeded$2([0,equal$0,hash$0],_en_),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _eo_=include[1];
      function create(sz){return caml_call2(_eo_,_cz_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$7(n){return caml_call1(_s_[1],n)}
    function length$6(k){return caml_call1(_s_[2],k)}
    function get_key$1(t,n){return caml_call2(_s_[3],t,n)}
    function get_key_copy$1(t,n){return caml_call2(_s_[4],t,n)}
    function set_key$1(t,n,k){return caml_call3(_s_[5],t,n,k)}
    function unset_key$1(t,n){return caml_call2(_s_[6],t,n)}
    function check_key$1(t,n){return caml_call2(_s_[7],t,n)}
    function blit_key$1(t1,o1,t2,o2,l)
     {return caml_call5(_s_[8],t1,o1,t2,o2,l)}
    function get_data$3(t){return caml_call1(_s_[9],t)}
    function get_data_copy$1(t){return caml_call1(_s_[10],t)}
    function set_data$1(t,d){return caml_call2(_s_[11],t,d)}
    function unset_data$1(t){return caml_call1(_s_[12],t)}
    function check_data$1(t){return caml_call1(_s_[13],t)}
    function blit_data$1(t1,t2){return caml_call2(_s_[14],t1,t2)}
    function MakeSeeded$3(H)
     {function create(k,d)
       {var c=create$7(k.length - 1);
        set_data$1(c,d);
        var _el_=k.length - 1 - 1 | 0,_ek_=0;
        if(! (_el_ < 0))
         {var i=_ek_;
          for(;;)
           {set_key$1(c,i,caml_check_bound(k,i)[1 + i]);
            var _em_=i + 1 | 0;
            if(_el_ !== i){var i=_em_;continue}
            break}}
        return c}
      function hash(seed,k)
       {var h=[0,0],_eg_=k.length - 1 - 1 | 0,_ef_=0;
        if(! (_eg_ < 0))
         {var i=_ef_;
          for(;;)
           {var _eh_=h[1],_ei_=caml_check_bound(k,i)[1 + i];
            h[1] = (caml_call2(H[2],seed,_ei_) * 65599 | 0) + _eh_ | 0;
            var _ej_=i + 1 | 0;
            if(_eg_ !== i){var i=_ej_;continue}
            break}}
        return h[1]}
      function equal(c,k)
       {var len=k.length - 1,len$0=length$6(c);
        if(len !== len$0)return 1;
        var i$1=len - 1 | 0,i=i$1;
        for(;;)
         {if(0 <= i)
           {var match=get_key$1(c,i);
            if(match)
             {var ki=match[1],_ee_=caml_check_bound(k,i)[1 + i];
              if(caml_call2(H[1],_ee_,ki)){var i$0=i - 1 | 0,i=i$0;continue}
              return 1}
            return 2}
          return 0}}
      function get_key(c)
       {var len=length$6(c);
        if(0 === len)return [0,[0]];
        var match=get_key$1(c,0);
        if(match)
         {var k0=match[1],a=caml_make_vect(len,k0),i$1=len - 1 | 0,i=i$1;
          for(;;)
           {if(1 <= i)
             {var match$0=get_key$1(c,i);
              if(match$0)
               {var ki=match$0[1];
                caml_check_bound(a,i)[1 + i] = ki;
                var i$0=i - 1 | 0,i=i$0;
                continue}
              return 0}
            return [0,a]}}
        return 0}
      function set_key_data(c,k,d)
       {unset_data$1(c);
        var _ec_=k.length - 1 - 1 | 0,_eb_=0;
        if(! (_ec_ < 0))
         {var i=_eb_;
          for(;;)
           {set_key$1(c,i,caml_check_bound(k,i)[1 + i]);
            var _ed_=i + 1 | 0;
            if(_ec_ !== i){var i=_ed_;continue}
            break}}
        return set_data$1(c,d)}
      function check_key(c)
       {var i$1=length$6(c) - 1 | 0,i=i$1;
        for(;;)
         {var _d__=i < 0?1:0;
          if(_d__)
           var _d$_=_d__;
          else
           {var _ea_=check_key$1(c,i);
            if(_ea_){var i$0=i - 1 | 0,i=i$0;continue}
            var _d$_=_ea_}
          return _d$_}}
      return MakeSeeded$0
              ([0,create,hash,equal,get_data$3,get_key,set_key_data,check_key])}
    function Make$3(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$3([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _d9_=include[1];
      function create(sz){return caml_call2(_d9_,_cA_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    var
     Stdlib_ephemeron=
      [0,
       [0,
        create$5,
        get_key$0,
        get_key_copy$0,
        set_key$0,
        unset_key$0,
        check_key$0,
        blit_key$0,
        get_data$1,
        get_data_copy,
        set_data,
        unset_data,
        check_data,
        blit_data,
        Make$1,
        MakeSeeded$1],
       [0,
        create$6,
        get_key1,
        get_key1_copy,
        set_key1,
        unset_key1,
        check_key1,
        get_key2,
        get_key2_copy,
        set_key2,
        unset_key2,
        check_key2,
        blit_key1,
        blit_key2,
        blit_key12,
        get_data$2,
        get_data_copy$0,
        set_data$0,
        unset_data$0,
        check_data$0,
        blit_data$0,
        Make$2,
        MakeSeeded$2],
       [0,
        create$7,
        get_key$1,
        get_key_copy$1,
        set_key$1,
        unset_key$1,
        check_key$1,
        blit_key$1,
        get_data$3,
        get_data_copy$1,
        set_data$1,
        unset_data$1,
        check_data$1,
        blit_data$1,
        Make$3,
        MakeSeeded$3],
       [0,
        function(_d8_)
         {return MakeSeeded$0
                  ([0,_d8_[3],_d8_[1],_d8_[2],_d8_[5],_d8_[4],_d8_[6],_d8_[7]])}]];
    caml_register_global(769,Stdlib_ephemeron,"Stdlib__ephemeron");
    function generic_basename(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$98))return current_dir_name;
      var n$3=caml_ml_string_length(name) - 1 | 0,n=n$3;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var p=n + 1 | 0,n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               return sub$0(name,n$1 + 1 | 0,(p - n$1 | 0) - 1 | 0);
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return sub$0(name,0,p)}}
        return sub$0(name,0,1)}}
    function generic_dirname(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$99))return current_dir_name;
      var n$5=caml_ml_string_length(name) - 1 | 0,n=n$5;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               {var n$3=n$1;
                for(;;)
                 {if(0 <= n$3)
                   {if(caml_call2(is_dir_sep,name,n$3))
                     {var n$4=n$3 - 1 | 0,n$3=n$4;continue}
                    return sub$0(name,0,n$3 + 1 | 0)}
                  return sub$0(name,0,1)}}
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return current_dir_name}}
        return sub$0(name,0,1)}}
    function is_dir_sep(s,i){return 47 === caml_string_get(s,i)?1:0}
    function is_relative(n)
     {var
       _d6_=caml_ml_string_length(n) < 1?1:0,
       _d7_=_d6_ || (47 !== caml_string_get(n,0)?1:0);
      return _d7_}
    function is_implicit(n)
     {var _d1_=is_relative(n);
      if(_d1_)
       {var
         _d2_=caml_ml_string_length(n) < 2?1:0,
         _d3_=_d2_ || caml_string_notequal(sub$0(n,0,2),cst$101);
        if(_d3_)
         var
          _d4_=caml_ml_string_length(n) < 3?1:0,
          _d5_=_d4_ || caml_string_notequal(sub$0(n,0,3),cst$100);
        else
         var _d5_=_d3_}
      else
       var _d5_=_d1_;
      return _d5_}
    function check_suffix(name,suff)
     {var
       _dZ_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0,
       _d0_=
        _dZ_
         ?caml_string_equal
           (sub$0
             (name,
              caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
              caml_ml_string_length(suff)),
            suff)
         :_dZ_;
      return _d0_}
    function chop_suffix_opt(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s <= len_f)
       {var r=sub$0(filename,len_f - len_s | 0,len_s);
        return caml_string_equal(r,suffix)
                ?[0,sub$0(filename,0,len_f - len_s | 0)]
                :0}
      return 0}
    try
     {var _cI_=caml_sys_getenv(cst_TMPDIR),_cB_=_cI_}
    catch(_dY_)
     {_dY_ = caml_wrap_exception(_dY_);
      if(_dY_ !== Not_found)throw _dY_;
      var _cB_=cst_tmp}
    function quote(s)
     {var l=caml_ml_string_length(s),b=create$2(l + 20 | 0);
      add_char(b,39);
      var _dW_=l - 1 | 0,_dV_=0;
      if(! (_dW_ < 0))
       {var i=_dV_;
        for(;;)
         {if(39 === caml_string_get(s,i))
           add_string(b,quotequote);
          else
           add_char(b,caml_string_get(s,i));
          var _dX_=i + 1 | 0;
          if(_dW_ !== i){var i=_dX_;continue}
          break}}
      add_char(b,39);
      return contents(b)}
    function basename(_dU_)
     {return generic_basename(is_dir_sep,current_dir_name,_dU_)}
    function dirname(_dT_)
     {return generic_dirname(is_dir_sep,current_dir_name,_dT_)}
    function is_dir_sep$0(s,i)
     {var c=caml_string_get(s,i),_dQ_=47 === c?1:0;
      if(_dQ_)
       var _dR_=_dQ_;
      else
       var _dS_=92 === c?1:0,_dR_=_dS_ || (58 === c?1:0);
      return _dR_}
    function is_relative$0(n)
     {var
       _dK_=caml_ml_string_length(n) < 1?1:0,
       _dL_=_dK_ || (47 !== caml_string_get(n,0)?1:0);
      if(_dL_)
       {var
         _dM_=caml_ml_string_length(n) < 1?1:0,
         _dN_=_dM_ || (92 !== caml_string_get(n,0)?1:0);
        if(_dN_)
         var
          _dO_=caml_ml_string_length(n) < 2?1:0,
          _dP_=_dO_ || (58 !== caml_string_get(n,1)?1:0);
        else
         var _dP_=_dN_}
      else
       var _dP_=_dL_;
      return _dP_}
    function is_implicit$0(n)
     {var _dB_=is_relative$0(n);
      if(_dB_)
       {var
         _dC_=caml_ml_string_length(n) < 2?1:0,
         _dD_=_dC_ || caml_string_notequal(sub$0(n,0,2),cst$105);
        if(_dD_)
         {var
           _dE_=caml_ml_string_length(n) < 2?1:0,
           _dF_=_dE_ || caml_string_notequal(sub$0(n,0,2),cst$104);
          if(_dF_)
           {var
             _dG_=caml_ml_string_length(n) < 3?1:0,
             _dH_=_dG_ || caml_string_notequal(sub$0(n,0,3),cst$103);
            if(_dH_)
             var
              _dI_=caml_ml_string_length(n) < 3?1:0,
              _dJ_=_dI_ || caml_string_notequal(sub$0(n,0,3),cst$102);
            else
             var _dJ_=_dH_}
          else
           var _dJ_=_dF_}
        else
         var _dJ_=_dD_}
      else
       var _dJ_=_dB_;
      return _dJ_}
    function check_suffix$0(name,suff)
     {var _dy_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0;
      if(_dy_)
       var
        s=
         sub$0
          (name,
           caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
           caml_ml_string_length(suff)),
        _dz_=lowercase_ascii$1(suff),
        _dA_=caml_string_equal(lowercase_ascii$1(s),_dz_);
      else
       var _dA_=_dy_;
      return _dA_}
    function chop_suffix_opt$0(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s <= len_f)
       {var
         r=sub$0(filename,len_f - len_s | 0,len_s),
         _dx_=lowercase_ascii$1(suffix);
        return caml_string_equal(lowercase_ascii$1(r),_dx_)
                ?[0,sub$0(filename,0,len_f - len_s | 0)]
                :0}
      return 0}
    try
     {var _cH_=caml_sys_getenv(cst_TEMP),temp_dir_name=_cH_}
    catch(_dw_)
     {_dw_ = caml_wrap_exception(_dw_);
      if(_dw_ !== Not_found)throw _dw_;
      var temp_dir_name=cst$106}
    function quote$0(s)
     {var l=caml_ml_string_length(s),b=create$2(l + 20 | 0);
      add_char(b,34);
      function add_bs(n)
       {var _du_=1;
        if(! (n < 1))
         {var j=_du_;
          for(;;)
           {add_char(b,92);
            var _dv_=j + 1 | 0;
            if(n !== j){var j=_dv_;continue}
            break}}
        return 0}
      function loop$0(counter,i)
       {var i$0=i;
        for(;;)
         {if(i$0 === l)return add_char(b,34);
          var c=caml_string_get(s,i$0);
          if(34 === c)
           {var _ds_=0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return loop_bs(counter$1,_ds_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_ds_,i$0])}
          if(92 === c)
           {var _dt_=0;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return loop_bs(counter$0,_dt_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_dt_,i$0])}
          add_char(b,c);
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function loop_bs(counter,n,i)
       {var n$0=n,i$0=i;
        for(;;)
         {if(i$0 === l){add_char(b,34);return add_bs(n$0)}
          var match=caml_string_get(s,i$0);
          if(34 === match)
           {add_bs((2 * n$0 | 0) + 1 | 0);
            add_char(b,34);
            var _dr_=i$0 + 1 | 0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;return loop$0(counter$1,_dr_)}
            return caml_trampoline_return(loop$0,[0,_dr_])}
          if(92 === match)
           {var i$1=i$0 + 1 | 0,n$1=n$0 + 1 | 0,n$0=n$1,i$0=i$1;continue}
          add_bs(n$0);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,i$0)}
          return caml_trampoline_return(loop$0,[0,i$0])}}
      function loop(i){return caml_trampoline(loop$0(0,i))}
      loop(0);
      return contents(b)}
    function drive_and_path(s)
     {var _dn_=2 <= caml_ml_string_length(s)?1:0;
      if(_dn_)
       {var param=caml_string_get(s,0),switch$0=0;
        if(91 <= param)
         {if(! (25 < (param - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= param)switch$0 = 1;
        var _do_=switch$0?1:0,_dp_=_do_?58 === caml_string_get(s,1)?1:0:_do_}
      else
       var _dp_=_dn_;
      if(_dp_)
       {var _dq_=sub$0(s,2,caml_ml_string_length(s) - 2 | 0);
        return [0,sub$0(s,0,2),_dq_]}
      return [0,cst$107,s]}
    function dirname$0(s)
     {var
       match=drive_and_path(s),
       path=match[2],
       drive=match[1],
       dir=generic_dirname(is_dir_sep$0,current_dir_name$0,path);
      return symbol(drive,dir)}
    function basename$0(s)
     {var match=drive_and_path(s),path=match[2];
      return generic_basename(is_dir_sep$0,current_dir_name$0,path)}
    function basename$1(_dm_)
     {return generic_basename(is_dir_sep$0,current_dir_name$1,_dm_)}
    function dirname$1(_dl_)
     {return generic_dirname(is_dir_sep$0,current_dir_name$1,_dl_)}
    var switch$0=0;
    if(caml_string_notequal(os_type,cst_Cygwin))
     if(caml_string_notequal(os_type,cst_Win32))
      {var
        current_dir_name$2=current_dir_name,
        parent_dir_name$2=parent_dir_name,
        dir_sep$2=dir_sep,
        is_dir_sep$1=is_dir_sep,
        is_relative$1=is_relative,
        is_implicit$1=is_implicit,
        check_suffix$1=check_suffix,
        chop_suffix_opt$1=chop_suffix_opt,
        temp_dir_name$0=_cB_,
        quote$1=quote,
        basename$2=basename,
        dirname$2=dirname;
       switch$0 = 1}
     else
      var
       _cG_=
        [0,
         current_dir_name$0,
         parent_dir_name$0,
         dir_sep$0,
         is_dir_sep$0,
         is_relative$0,
         is_implicit$0,
         check_suffix$0,
         chop_suffix_opt$0,
         temp_dir_name,
         quote$0,
         basename$0,
         dirname$0];
    else
     var
      _cG_=
       [0,
        current_dir_name$1,
        parent_dir_name$1,
        dir_sep$1,
        is_dir_sep$0,
        is_relative$0,
        is_implicit$0,
        check_suffix$0,
        chop_suffix_opt$0,
        _cB_,
        quote,
        basename$1,
        dirname$1];
    if(! switch$0)
     var
      current_dir_name$2=_cG_[1],
      parent_dir_name$2=_cG_[2],
      dir_sep$2=_cG_[3],
      is_dir_sep$1=is_dir_sep$0,
      is_relative$1=is_relative$0,
      is_implicit$1=is_implicit$0,
      check_suffix$1=check_suffix$0,
      chop_suffix_opt$1=chop_suffix_opt$0,
      temp_dir_name$0=_cG_[9],
      quote$1=_cG_[10],
      basename$2=_cG_[11],
      dirname$2=_cG_[12];
    function concat$3(dirname,filename)
     {var l=caml_ml_string_length(dirname);
      if(0 !== l && ! is_dir_sep$1(dirname,l - 1 | 0))
       return symbol(dirname,symbol(dir_sep$2,filename));
      return symbol(dirname,filename)}
    function chop_suffix(name,suff)
     {var n=caml_ml_string_length(name) - caml_ml_string_length(suff) | 0;
      return 0 <= n?sub$0(name,0,n):invalid_arg(cst_Filename_chop_suffix)}
    function extension_len(name)
     {var i$4=caml_ml_string_length(name) - 1 | 0,i$1=i$4;
      for(;;)
       {if(0 <= i$1 && ! is_dir_sep$1(name,i$1))
         {if(46 === caml_string_get(name,i$1))
           {var i$2=i$1 - 1 | 0,i=i$2;
            for(;;)
             {if(0 <= i && ! is_dir_sep$1(name,i))
               {if(46 === caml_string_get(name,i))
                 {var i$0=i - 1 | 0,i=i$0;continue}
                return caml_ml_string_length(name) - i$1 | 0}
              return 0}}
          var i$3=i$1 - 1 | 0,i$1=i$3;
          continue}
        return 0}}
    function extension(name)
     {var l=extension_len(name);
      return 0 === l?cst$108:sub$0(name,caml_ml_string_length(name) - l | 0,l)}
    function chop_extension(name)
     {var l=extension_len(name);
      return 0 === l
              ?invalid_arg(cst_Filename_chop_extension)
              :sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    function remove_extension(name)
     {var l=extension_len(name);
      return 0 === l?name:sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    var prng$0=[246,function(_dk_){return caml_call1(_b4_[2],0)}];
    function temp_file_name(temp_dir,prefix,suffix)
     {var
       _di_=caml_obj_tag(prng$0),
       _dj_=
        250 === _di_?prng$0[1]:246 === _di_?force_lazy_block(prng$0):prng$0,
       rnd=caml_call1(_b4_[4],_dj_) & 16777215;
      return concat$3(temp_dir,caml_call3(sprintf(_cC_),prefix,rnd,suffix))}
    var current_temp_dir_name=[0,temp_dir_name$0];
    function set_temp_dir_name(s){current_temp_dir_name[1] = s;return 0}
    function get_temp_dir_name(param){return current_temp_dir_name[1]}
    function temp_file(opt,prefix,suffix)
     {if(opt)
       var sth=opt[1],temp_dir=sth;
      else
       var temp_dir=current_temp_dir_name[1];
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {runtime.caml_sys_close(caml_sys_open(name,_cD_,384));return name}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] === Sys_error)
             {if(1000 <= counter$0)throw e;
              var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
              continue}
            throw e}}}
      return try_name(0)}
    function open_temp_file(opt,_dg_,_df_,prefix,suffix)
     {if(opt)var sth=opt[1],mode=sth;else var mode=_cE_;
      if(_dg_)var sth$0=_dg_[1],perms=sth$0;else var perms=384;
      if(_df_)
       var sth$1=_df_[1],temp_dir=sth$1;
      else
       var temp_dir=current_temp_dir_name[1];
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {var _dh_=[0,name,open_out_gen([0,1,[0,3,[0,5,mode]]],perms,name)];
            return _dh_}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] === Sys_error)
             {if(1000 <= counter$0)throw e;
              var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
              continue}
            throw e}}}
      return try_name(0)}
    var
     Stdlib_filename=
      [0,
       current_dir_name$2,
       parent_dir_name$2,
       dir_sep$2,
       concat$3,
       is_relative$1,
       is_implicit$1,
       check_suffix$1,
       chop_suffix,
       chop_suffix_opt$1,
       extension,
       remove_extension,
       chop_extension,
       basename$2,
       dirname$2,
       temp_file,
       open_temp_file,
       get_temp_dir_name,
       set_temp_dir_name,
       temp_dir_name$0,
       quote$1];
    caml_register_global(770,Stdlib_filename,"Stdlib__filename");
    function add$1(x,y){return [254,x[1] + y[1],x[2] + y[2]]}
    function sub$4(x,y){return [254,x[1] - y[1],x[2] - y[2]]}
    function neg(x){return [254,- x[1],- x[2]]}
    function conj(x){return [254,x[1],- x[2]]}
    function mul(x,y)
     {return [254,x[1] * y[1] - x[2] * y[2],x[1] * y[2] + x[2] * y[1]]}
    function div(x,y)
     {if(Math.abs(y[2]) <= Math.abs(y[1]))
       {var r=y[2] / y[1],d=y[1] + r * y[2];
        return [254,(x[1] + r * x[2]) / d,(x[2] - r * x[1]) / d]}
      var r$0=y[1] / y[2],d$0=y[2] + r$0 * y[1];
      return [254,(r$0 * x[1] + x[2]) / d$0,(r$0 * x[2] - x[1]) / d$0]}
    function inv(x){return div(one$4,x)}
    function norm2(x){return x[1] * x[1] + x[2] * x[2]}
    function norm(x)
     {var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(r == 0.)return i;
      if(i == 0.)return r;
      if(i <= r){var q=i / r;return r * Math.sqrt(1. + q * q)}
      var q$0=r / i;
      return i * Math.sqrt(1. + q$0 * q$0)}
    function arg(x){return Math.atan2(x[2],x[1])}
    function polar(n,a){return [254,Math.cos(a) * n,Math.sin(a) * n]}
    function sqrt(x)
     {if(x[1] == 0. && x[2] == 0.)return _cF_;
      var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(i <= r)
       var
        q=i / r,
        w=Math.sqrt(r) * Math.sqrt(0.5 * (1. + Math.sqrt(1. + q * q)));
      else
       var
        q$0=r / i,
        w=Math.sqrt(i) * Math.sqrt(0.5 * (q$0 + Math.sqrt(1. + q$0 * q$0)));
      if(0. <= x[1])return [254,w,0.5 * x[2] / w];
      var w$0=0. <= x[2]?w:- w;
      return [254,0.5 * i / w,w$0]}
    function exp(x)
     {var e=Math.exp(x[1]);return [254,e * Math.cos(x[2]),e * Math.sin(x[2])]}
    function log(x)
     {var _de_=Math.atan2(x[2],x[1]);return [254,Math.log(norm(x)),_de_]}
    function pow(x,y){return exp(mul(y,log(x)))}
    var
     Stdlib_complex=
      [0,
       zero$4,
       one$4,
       i,
       neg,
       conj,
       add$1,
       sub$4,
       mul,
       inv,
       div,
       sqrt,
       norm2,
       norm,
       arg,
       polar,
       exp,
       log,
       pow];
    caml_register_global(771,Stdlib_complex,"Stdlib__complex");
    var
     Stdlib_arrayLabels=
      [0,
       init$2,
       create_matrix,
       create_matrix,
       append$0,
       concat$1,
       sub$1,
       copy$1,
       fill$0,
       blit$1,
       to_list$1,
       of_list,
       iter$5,
       map$5,
       iteri$2,
       mapi$2,
       fold_left$1,
       fold_right$0,
       iter2$0,
       map2$0,
       exists$0,
       for_all$0,
       mem$0,
       memq$0,
       make_float,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$4,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(772,Stdlib_arrayLabels,"Stdlib__arrayLabels");
    var
     Stdlib_listLabels=
      [0,
       length,
       hd,
       compare_lengths,
       compare_length_with,
       cons,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       iter$2,
       iteri,
       map$2,
       mapi,
       rev_map,
       filter_map$0,
       fold_left$0,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_all,
       find_all,
       partition,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq$1,
       of_seq];
    caml_register_global(773,Stdlib_listLabels,"Stdlib__listLabels");
    var
     Stdlib_bytesLabels=
      [0,
       make,
       init$0,
       empty$0,
       copy,
       of_string,
       to_string$1,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat,
       cat,
       iter$3,
       iteri$0,
       map$3,
       mapi$0,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase$0,
       lowercase$0,
       capitalize,
       uncapitalize,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$4,
       equal$4,
       to_seq$2,
       to_seqi,
       of_seq$0,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le,
       unsafe_to_string,
       unsafe_of_string];
    caml_register_global(774,Stdlib_bytesLabels,"Stdlib__bytesLabels");
    var
     Stdlib_stringLabels=
      [0,
       make$0,
       init$1,
       copy$0,
       sub$0,
       fill,
       blit$0,
       concat$0,
       iter$4,
       iteri$1,
       map$4,
       mapi$1,
       trim$0,
       escaped$1,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       contains$0,
       contains_from$0,
       rcontains_from$0,
       uppercase$1,
       lowercase$1,
       capitalize$0,
       uncapitalize$0,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       compare$5,
       equal$5,
       split_on_char,
       to_seq$3,
       to_seqi$0,
       of_seq$1];
    caml_register_global(775,Stdlib_stringLabels,"Stdlib__stringLabels");
    var Stdlib_moreLabels=[0,Stdlib_hashtbl,Stdlib_map,Stdlib_set];
    caml_register_global(776,Stdlib_moreLabels,"Stdlib__moreLabels");
    var Stdlib_stdLabels=[0];
    caml_register_global(777,Stdlib_stdLabels,"Stdlib__stdLabels");
    var enabled=caml_spacetime_enabled(0);
    function if_spacetime_enabled(f){return enabled?caml_call1(f,0):0}
    function create$8(path)
     {if(caml_spacetime_enabled(0))
       {var channel=open_out(path),t=[0,channel,0];
        caml_spacetime_only_works_for_(t[1]);
        return t}
      return [0,stdout,1]}
    function save_event(time,t,event_name)
     {return if_spacetime_enabled
              (function(param)
                {return caml_spacetime_only_works_for_(time,t[1],event_name)})}
    function save_and_close(time,t)
     {return if_spacetime_enabled
              (function(param)
                {if(t[2])failwith(cst_Series_is_closed);
                 caml_spacetime_only_works_for_(time,t[1]);
                 close_out(t[1]);
                 t[2] = 1;
                 return 0})}
    var Series=[0,create$8,save_event,save_and_close];
    function take$0(time,param)
     {var channel=param[1],closed=param[2];
      return if_spacetime_enabled
              (function(param)
                {if(closed)failwith(cst_Series_is_closed$0);
                 runtime.caml_gc_minor(0);
                 return caml_spacetime_only_works_for_(time,channel)})}
    var Snapshot=[0,take$0];
    function save_event_for_automatic_snaps(event_name)
     {return if_spacetime_enabled
              (function(param)
                {return caml_spacetime_only_works_for_(event_name)})}
    var
     Stdlib_spacetime=
      [0,enabled,Series,Snapshot,save_event_for_automatic_snaps];
    caml_register_global(778,Stdlib_spacetime,"Stdlib__spacetime");
    var
     float32=0,
     float64=1,
     int8_signed=2,
     int8_unsigned=3,
     int16_signed=4,
     int16_unsigned=5,
     int32$1=6,
     int64$1=7,
     int$2=8,
     nativeint$1=9,
     complex32=10,
     complex64=11,
     char$0=12;
    function kind_size_in_bytes(param)
     {switch(param)
       {case 0:return 4;
        case 1:return 8;
        case 2:return 1;
        case 3:return 1;
        case 4:return 2;
        case 5:return 2;
        case 6:return 4;
        case 7:return 8;
        case 8:return 4;
        case 9:return 4;
        case 10:return 8;
        case 11:return 16;
        default:return 1}}
    var c_layout=0,fortran_layout=1;
    function dims(a)
     {var n=caml_ba_num_dims(a),d=caml_make_vect(n,0),_db_=n - 1 | 0,_da_=0;
      if(! (_db_ < 0))
       {var i=_da_;
        for(;;)
         {var _dc_=runtime.caml_ba_dim(a,i);
          caml_check_bound(d,i)[1 + i] = _dc_;
          var _dd_=i + 1 | 0;
          if(_db_ !== i){var i=_dd_;continue}
          break}}
      return d}
    function size_in_bytes(arr)
     {var _c$_=fold_left$1(caml_mul,1,dims(arr));
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_c$_)}
    var Genarray=[0,dims,size_in_bytes];
    function create$9(kind,layout){return caml_ba_create(kind,layout,[0])}
    function get$1(arr){return runtime.caml_ba_get_generic(arr,[0])}
    function set$0(arr)
     {var _c9_=[0];
      return function(_c__){return runtime.caml_ba_set_generic(arr,_c9_,_c__)}}
    function size_in_bytes$0(arr)
     {return kind_size_in_bytes(caml_ba_kind(arr))}
    function of_value(kind,layout,v)
     {var a=create$9(kind,layout);caml_call1(set$0(a),v);return a}
    function create$10(kind,layout,dim)
     {return caml_ba_create(kind,layout,[0,dim])}
    function size_in_bytes$1(arr)
     {var _c8_=caml_ba_dim_1(arr);
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_c8_)}
    function slice(a,n)
     {var match=runtime.caml_ba_layout(a);
      return 0 === match?caml_ba_slice(a,[0,n]):caml_ba_slice(a,[0,n])}
    function of_array(kind,layout,data)
     {var
       ba=create$10(kind,layout,data.length - 1),
       ofs=0 === layout?0:1,
       _c6_=data.length - 1 - 1 | 0,
       _c5_=0;
      if(! (_c6_ < 0))
       {var i=_c5_;
        for(;;)
         {runtime.caml_ba_set_1
           (ba,i + ofs | 0,caml_check_bound(data,i)[1 + i]);
          var _c7_=i + 1 | 0;
          if(_c6_ !== i){var i=_c7_;continue}
          break}}
      return ba}
    function create$11(kind,layout,dim1,dim2)
     {return caml_ba_create(kind,layout,[0,dim1,dim2])}
    function size_in_bytes$2(arr)
     {var _c3_=caml_ba_dim_2(arr),_c4_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_c4_),_c3_)}
    function slice_left(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right(a,n){return caml_ba_slice(a,[0,n])}
    function of_array$0(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       ba=create$11(kind,layout,dim1,dim2),
       ofs=0 === layout?0:1,
       _cY_=dim1 - 1 | 0,
       _cX_=0;
      if(! (_cY_ < 0))
       {var i=_cX_;
        for(;;)
         {var row=caml_check_bound(data,i)[1 + i];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array2_of_array_n);
          var _c0_=dim2 - 1 | 0,_cZ_=0;
          if(! (_c0_ < 0))
           {var j=_cZ_;
            for(;;)
             {runtime.caml_ba_set_2
               (ba,i + ofs | 0,j + ofs | 0,caml_check_bound(row,j)[1 + j]);
              var _c2_=j + 1 | 0;
              if(_c0_ !== j){var j=_c2_;continue}
              break}}
          var _c1_=i + 1 | 0;
          if(_cY_ !== i){var i=_c1_;continue}
          break}}
      return ba}
    function create$12(kind,layout,dim1,dim2,dim3)
     {return caml_ba_create(kind,layout,[0,dim1,dim2,dim3])}
    function size_in_bytes$3(arr)
     {var
       _cU_=runtime.caml_ba_dim_3(arr),
       _cV_=caml_ba_dim_2(arr),
       _cW_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul
                (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_cW_),_cV_),
               _cU_)}
    function slice_left_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_right_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_left_2(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right_2(a,n){return caml_ba_slice(a,[0,n])}
    function of_array$1(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       dim3=
        0 === dim2
         ?0
         :caml_check_bound(caml_check_bound(data,0)[1],0)[1].length - 1,
       ba=create$12(kind,layout,dim1,dim2,dim3),
       ofs=0 === layout?0:1,
       _cM_=dim1 - 1 | 0,
       _cL_=0;
      if(! (_cM_ < 0))
       {var i=_cL_;
        for(;;)
         {var row=caml_check_bound(data,i)[1 + i];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array3_of_array_n);
          var _cO_=dim2 - 1 | 0,_cN_=0;
          if(! (_cO_ < 0))
           {var j=_cN_;
            for(;;)
             {var col=caml_check_bound(row,j)[1 + j];
              if(col.length - 1 !== dim3)
               invalid_arg(cst_Bigarray_Array3_of_array_n$0);
              var _cR_=dim3 - 1 | 0,_cQ_=0;
              if(! (_cR_ < 0))
               {var k=_cQ_;
                for(;;)
                 {runtime.caml_ba_set_3
                   (ba,
                    i + ofs | 0,
                    j + ofs | 0,
                    k + ofs | 0,
                    caml_check_bound(col,k)[1 + k]);
                  var _cT_=k + 1 | 0;
                  if(_cR_ !== k){var k=_cT_;continue}
                  break}}
              var _cS_=j + 1 | 0;
              if(_cO_ !== j){var j=_cS_;continue}
              break}}
          var _cP_=i + 1 | 0;
          if(_cM_ !== i){var i=_cP_;continue}
          break}}
      return ba}
    function array0_of_genarray(a)
     {return 0 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array0_of_genarra)}
    function array1_of_genarray(a)
     {return 1 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array1_of_genarra)}
    function array2_of_genarray(a)
     {return 2 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array2_of_genarra)}
    function array3_of_genarray(a)
     {return 3 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array3_of_genarra)}
    function reshape_0(a){return caml_ba_reshape(a,[0])}
    function reshape_1(a,dim1){return caml_ba_reshape(a,[0,dim1])}
    function reshape_2(a,dim1,dim2){return caml_ba_reshape(a,[0,dim1,dim2])}
    function reshape_3(a,dim1,dim2,dim3)
     {return caml_ba_reshape(a,[0,dim1,dim2,dim3])}
    var
     Stdlib_bigarray=
      [0,
       float32,
       float64,
       complex32,
       complex64,
       int8_signed,
       int8_unsigned,
       int16_signed,
       int16_unsigned,
       int$2,
       int32$1,
       int64$1,
       nativeint$1,
       char$0,
       kind_size_in_bytes,
       c_layout,
       fortran_layout,
       Genarray,
       [0,create$9,caml_ba_change_layout,size_in_bytes$0,get$1,set$0,of_value],
       [0,create$10,caml_ba_change_layout,size_in_bytes$1,slice,of_array],
       [0,
        create$11,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$12,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
    caml_register_global(779,Stdlib_bigarray,"Stdlib__bigarray");
    return}
  (function(){return this}()));


//# 1 "../../.js/js_of_ocaml/js_of_ocaml.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_js_from_array=runtime.caml_js_from_array,
     caml_js_get=runtime.caml_js_get,
     caml_js_html_escape=runtime.caml_js_html_escape,
     caml_js_set=runtime.caml_js_set,
     caml_js_wrap_callback=runtime.caml_js_wrap_callback,
     caml_js_wrap_meth_callback=runtime.caml_js_wrap_meth_callback,
     caml_jsbytes_of_string=runtime.caml_jsbytes_of_string,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_array=runtime.caml_string_of_array,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_parseFloat=caml_string_of_jsbytes("parseFloat"),
     cst_parseInt=caml_string_of_jsbytes("parseInt"),
     cst_Js_of_ocaml_Js_Error=caml_string_of_jsbytes("Js_of_ocaml__Js.Error"),
     cst_jsError=caml_string_of_jsbytes("jsError"),
     cst_can_t_retrieve_file_name_n=
      caml_string_of_jsbytes("can't retrieve file name: not implemented"),
     cst_endings=caml_string_of_jsbytes("endings"),
     cst_type=caml_string_of_jsbytes("type"),
     cst_loadstart=caml_string_of_jsbytes("loadstart"),
     cst_progress=caml_string_of_jsbytes("progress"),
     cst_abort=caml_string_of_jsbytes("abort"),
     cst_error=caml_string_of_jsbytes("error"),
     cst_load=caml_string_of_jsbytes("load"),
     cst_loadend=caml_string_of_jsbytes("loadend"),
     cst_a$1=caml_string_of_jsbytes("a"),
     cst_area$1=caml_string_of_jsbytes("area"),
     cst_audio$1=caml_string_of_jsbytes("audio"),
     cst_base$1=caml_string_of_jsbytes("base"),
     cst_blockquote$1=caml_string_of_jsbytes("blockquote"),
     cst_body$1=caml_string_of_jsbytes("body"),
     cst_br$1=caml_string_of_jsbytes("br"),
     cst_button$1=caml_string_of_jsbytes("button"),
     cst_canvas$1=caml_string_of_jsbytes("canvas"),
     cst_caption$1=caml_string_of_jsbytes("caption"),
     cst_col$1=caml_string_of_jsbytes("col"),
     cst_colgroup$1=caml_string_of_jsbytes("colgroup"),
     cst_del$1=caml_string_of_jsbytes("del"),
     cst_div$1=caml_string_of_jsbytes("div"),
     cst_dl$1=caml_string_of_jsbytes("dl"),
     cst_embed$1=caml_string_of_jsbytes("embed"),
     cst_fieldset$1=caml_string_of_jsbytes("fieldset"),
     cst_form$1=caml_string_of_jsbytes("form"),
     cst_frame$1=caml_string_of_jsbytes("frame"),
     cst_frameset$1=caml_string_of_jsbytes("frameset"),
     cst_h1$1=caml_string_of_jsbytes("h1"),
     cst_h2$1=caml_string_of_jsbytes("h2"),
     cst_h3$1=caml_string_of_jsbytes("h3"),
     cst_h4$1=caml_string_of_jsbytes("h4"),
     cst_h5$1=caml_string_of_jsbytes("h5"),
     cst_h6$1=caml_string_of_jsbytes("h6"),
     cst_head$1=caml_string_of_jsbytes("head"),
     cst_hr$1=caml_string_of_jsbytes("hr"),
     cst_html$1=caml_string_of_jsbytes("html"),
     cst_iframe$1=caml_string_of_jsbytes("iframe"),
     cst_img$1=caml_string_of_jsbytes("img"),
     cst_input$2=caml_string_of_jsbytes("input"),
     cst_ins$1=caml_string_of_jsbytes("ins"),
     cst_label$1=caml_string_of_jsbytes("label"),
     cst_legend$1=caml_string_of_jsbytes("legend"),
     cst_li$1=caml_string_of_jsbytes("li"),
     cst_link$1=caml_string_of_jsbytes("link"),
     cst_map$1=caml_string_of_jsbytes("map"),
     cst_meta$1=caml_string_of_jsbytes("meta"),
     cst_object$1=caml_string_of_jsbytes("object"),
     cst_ol$1=caml_string_of_jsbytes("ol"),
     cst_optgroup$1=caml_string_of_jsbytes("optgroup"),
     cst_option$1=caml_string_of_jsbytes("option"),
     cst_p$1=caml_string_of_jsbytes("p"),
     cst_param$1=caml_string_of_jsbytes("param"),
     cst_pre$1=caml_string_of_jsbytes("pre"),
     cst_q$1=caml_string_of_jsbytes("q"),
     cst_script$1=caml_string_of_jsbytes("script"),
     cst_select$2=caml_string_of_jsbytes("select"),
     cst_style$1=caml_string_of_jsbytes("style"),
     cst_table$1=caml_string_of_jsbytes("table"),
     cst_tbody$1=caml_string_of_jsbytes("tbody"),
     cst_td$1=caml_string_of_jsbytes("td"),
     cst_textarea$1=caml_string_of_jsbytes("textarea"),
     cst_tfoot$1=caml_string_of_jsbytes("tfoot"),
     cst_th$1=caml_string_of_jsbytes("th"),
     cst_thead$1=caml_string_of_jsbytes("thead"),
     cst_title$1=caml_string_of_jsbytes("title"),
     cst_tr$1=caml_string_of_jsbytes("tr"),
     cst_ul$1=caml_string_of_jsbytes("ul"),
     cst_video$1=caml_string_of_jsbytes("video"),
     cst_KeyH=caml_string_of_jsbytes("KeyH"),
     cst_Digit6=caml_string_of_jsbytes("Digit6"),
     cst_BrowserRefresh=caml_string_of_jsbytes("BrowserRefresh"),
     cst_Backslash=caml_string_of_jsbytes("Backslash"),
     cst_AltLeft=caml_string_of_jsbytes("AltLeft"),
     cst_AltRight=caml_string_of_jsbytes("AltRight"),
     cst_ArrowDown=caml_string_of_jsbytes("ArrowDown"),
     cst_ArrowLeft=caml_string_of_jsbytes("ArrowLeft"),
     cst_ArrowRight=caml_string_of_jsbytes("ArrowRight"),
     cst_ArrowUp=caml_string_of_jsbytes("ArrowUp"),
     cst_Backquote=caml_string_of_jsbytes("Backquote"),
     cst_Backspace=caml_string_of_jsbytes("Backspace"),
     cst_BracketLeft=caml_string_of_jsbytes("BracketLeft"),
     cst_BracketRight=caml_string_of_jsbytes("BracketRight"),
     cst_BrowserBack=caml_string_of_jsbytes("BrowserBack"),
     cst_BrowserFavorites=caml_string_of_jsbytes("BrowserFavorites"),
     cst_BrowserForward=caml_string_of_jsbytes("BrowserForward"),
     cst_BrowserHome=caml_string_of_jsbytes("BrowserHome"),
     cst_Delete=caml_string_of_jsbytes("Delete"),
     cst_BrowserSearch=caml_string_of_jsbytes("BrowserSearch"),
     cst_BrowserStop=caml_string_of_jsbytes("BrowserStop"),
     cst_CapsLock=caml_string_of_jsbytes("CapsLock"),
     cst_Comma=caml_string_of_jsbytes("Comma"),
     cst_ContextMenu=caml_string_of_jsbytes("ContextMenu"),
     cst_ControlLeft=caml_string_of_jsbytes("ControlLeft"),
     cst_ControlRight=caml_string_of_jsbytes("ControlRight"),
     cst_Digit0=caml_string_of_jsbytes("Digit0"),
     cst_Digit1=caml_string_of_jsbytes("Digit1"),
     cst_Digit2=caml_string_of_jsbytes("Digit2"),
     cst_Digit3=caml_string_of_jsbytes("Digit3"),
     cst_Digit4=caml_string_of_jsbytes("Digit4"),
     cst_Digit5=caml_string_of_jsbytes("Digit5"),
     cst_F6=caml_string_of_jsbytes("F6"),
     cst_F1=caml_string_of_jsbytes("F1"),
     cst_Digit7=caml_string_of_jsbytes("Digit7"),
     cst_Digit8=caml_string_of_jsbytes("Digit8"),
     cst_Digit9=caml_string_of_jsbytes("Digit9"),
     cst_End=caml_string_of_jsbytes("End"),
     cst_Enter=caml_string_of_jsbytes("Enter"),
     cst_Equal=caml_string_of_jsbytes("Equal"),
     cst_Escape=caml_string_of_jsbytes("Escape"),
     cst_F10=caml_string_of_jsbytes("F10"),
     cst_F11=caml_string_of_jsbytes("F11"),
     cst_F12=caml_string_of_jsbytes("F12"),
     cst_F2=caml_string_of_jsbytes("F2"),
     cst_F3=caml_string_of_jsbytes("F3"),
     cst_F4=caml_string_of_jsbytes("F4"),
     cst_F5=caml_string_of_jsbytes("F5"),
     cst_KeyA=caml_string_of_jsbytes("KeyA"),
     cst_F7=caml_string_of_jsbytes("F7"),
     cst_F8=caml_string_of_jsbytes("F8"),
     cst_F9=caml_string_of_jsbytes("F9"),
     cst_Home=caml_string_of_jsbytes("Home"),
     cst_Insert=caml_string_of_jsbytes("Insert"),
     cst_IntlBackslash=caml_string_of_jsbytes("IntlBackslash"),
     cst_IntlYen=caml_string_of_jsbytes("IntlYen"),
     cst_KeyB=caml_string_of_jsbytes("KeyB"),
     cst_KeyC=caml_string_of_jsbytes("KeyC"),
     cst_KeyD=caml_string_of_jsbytes("KeyD"),
     cst_KeyE=caml_string_of_jsbytes("KeyE"),
     cst_KeyF=caml_string_of_jsbytes("KeyF"),
     cst_KeyG=caml_string_of_jsbytes("KeyG"),
     cst_Numpad4=caml_string_of_jsbytes("Numpad4"),
     cst_KeyX=caml_string_of_jsbytes("KeyX"),
     cst_KeyP=caml_string_of_jsbytes("KeyP"),
     cst_KeyI=caml_string_of_jsbytes("KeyI"),
     cst_KeyJ=caml_string_of_jsbytes("KeyJ"),
     cst_KeyK=caml_string_of_jsbytes("KeyK"),
     cst_KeyL=caml_string_of_jsbytes("KeyL"),
     cst_KeyM=caml_string_of_jsbytes("KeyM"),
     cst_KeyN=caml_string_of_jsbytes("KeyN"),
     cst_KeyO=caml_string_of_jsbytes("KeyO"),
     cst_KeyQ=caml_string_of_jsbytes("KeyQ"),
     cst_KeyR=caml_string_of_jsbytes("KeyR"),
     cst_KeyS=caml_string_of_jsbytes("KeyS"),
     cst_KeyT=caml_string_of_jsbytes("KeyT"),
     cst_KeyU=caml_string_of_jsbytes("KeyU"),
     cst_KeyV=caml_string_of_jsbytes("KeyV"),
     cst_KeyW=caml_string_of_jsbytes("KeyW"),
     cst_MetaRight=caml_string_of_jsbytes("MetaRight"),
     cst_KeyY=caml_string_of_jsbytes("KeyY"),
     cst_KeyZ=caml_string_of_jsbytes("KeyZ"),
     cst_MediaPlayPause=caml_string_of_jsbytes("MediaPlayPause"),
     cst_MediaStop=caml_string_of_jsbytes("MediaStop"),
     cst_MediaTrackNext=caml_string_of_jsbytes("MediaTrackNext"),
     cst_MediaTrackPrevious=caml_string_of_jsbytes("MediaTrackPrevious"),
     cst_MetaLeft=caml_string_of_jsbytes("MetaLeft"),
     cst_Minus=caml_string_of_jsbytes("Minus"),
     cst_NumLock=caml_string_of_jsbytes("NumLock"),
     cst_Numpad0=caml_string_of_jsbytes("Numpad0"),
     cst_Numpad1=caml_string_of_jsbytes("Numpad1"),
     cst_Numpad2=caml_string_of_jsbytes("Numpad2"),
     cst_Numpad3=caml_string_of_jsbytes("Numpad3"),
     cst_PageUp=caml_string_of_jsbytes("PageUp"),
     cst_NumpadDivide=caml_string_of_jsbytes("NumpadDivide"),
     cst_Numpad5=caml_string_of_jsbytes("Numpad5"),
     cst_Numpad6=caml_string_of_jsbytes("Numpad6"),
     cst_Numpad7=caml_string_of_jsbytes("Numpad7"),
     cst_Numpad8=caml_string_of_jsbytes("Numpad8"),
     cst_Numpad9=caml_string_of_jsbytes("Numpad9"),
     cst_NumpadAdd=caml_string_of_jsbytes("NumpadAdd"),
     cst_NumpadDecimal=caml_string_of_jsbytes("NumpadDecimal"),
     cst_NumpadEnter=caml_string_of_jsbytes("NumpadEnter"),
     cst_NumpadEqual=caml_string_of_jsbytes("NumpadEqual"),
     cst_NumpadMultiply=caml_string_of_jsbytes("NumpadMultiply"),
     cst_NumpadSubtract=caml_string_of_jsbytes("NumpadSubtract"),
     cst_OSLeft=caml_string_of_jsbytes("OSLeft"),
     cst_OSRight=caml_string_of_jsbytes("OSRight"),
     cst_PageDown=caml_string_of_jsbytes("PageDown"),
     cst_ShiftRight=caml_string_of_jsbytes("ShiftRight"),
     cst_Pause=caml_string_of_jsbytes("Pause"),
     cst_Period=caml_string_of_jsbytes("Period"),
     cst_PrintScreen=caml_string_of_jsbytes("PrintScreen"),
     cst_Quote=caml_string_of_jsbytes("Quote"),
     cst_ScrollLock=caml_string_of_jsbytes("ScrollLock"),
     cst_Semicolon=caml_string_of_jsbytes("Semicolon"),
     cst_ShiftLeft=caml_string_of_jsbytes("ShiftLeft"),
     cst_Slash=caml_string_of_jsbytes("Slash"),
     cst_Space=caml_string_of_jsbytes("Space"),
     cst_Tab=caml_string_of_jsbytes("Tab"),
     cst_VolumeDown=caml_string_of_jsbytes("VolumeDown"),
     cst_VolumeMute=caml_string_of_jsbytes("VolumeMute"),
     cst_VolumeUp=caml_string_of_jsbytes("VolumeUp"),
     cst_mouseout$0=caml_string_of_jsbytes("mouseout"),
     cst_mouseover$0=caml_string_of_jsbytes("mouseover"),
     cst_video$0=caml_string_of_jsbytes("video"),
     cst_audio$0=caml_string_of_jsbytes("audio"),
     cst_ul$0=caml_string_of_jsbytes("ul"),
     cst_tr$0=caml_string_of_jsbytes("tr"),
     cst_title$0=caml_string_of_jsbytes("title"),
     cst_thead$0=caml_string_of_jsbytes("thead"),
     cst_th$0=caml_string_of_jsbytes("th"),
     cst_tfoot$0=caml_string_of_jsbytes("tfoot"),
     cst_textarea$0=caml_string_of_jsbytes("textarea"),
     cst_td$0=caml_string_of_jsbytes("td"),
     cst_tbody$0=caml_string_of_jsbytes("tbody"),
     cst_table$0=caml_string_of_jsbytes("table"),
     cst_style$0=caml_string_of_jsbytes("style"),
     cst_select$1=caml_string_of_jsbytes("select"),
     cst_script$0=caml_string_of_jsbytes("script"),
     cst_q$0=caml_string_of_jsbytes("q"),
     cst_pre$0=caml_string_of_jsbytes("pre"),
     cst_param$0=caml_string_of_jsbytes("param"),
     cst_p$0=caml_string_of_jsbytes("p"),
     cst_option$0=caml_string_of_jsbytes("option"),
     cst_optgroup$0=caml_string_of_jsbytes("optgroup"),
     cst_ol$0=caml_string_of_jsbytes("ol"),
     cst_object$0=caml_string_of_jsbytes("object"),
     cst_meta$0=caml_string_of_jsbytes("meta"),
     cst_map$0=caml_string_of_jsbytes("map"),
     cst_link$0=caml_string_of_jsbytes("link"),
     cst_li$0=caml_string_of_jsbytes("li"),
     cst_legend$0=caml_string_of_jsbytes("legend"),
     cst_label$0=caml_string_of_jsbytes("label"),
     cst_ins$0=caml_string_of_jsbytes("ins"),
     cst_input$1=caml_string_of_jsbytes("input"),
     cst_img$0=caml_string_of_jsbytes("img"),
     cst_iframe$0=caml_string_of_jsbytes("iframe"),
     cst_html$0=caml_string_of_jsbytes("html"),
     cst_hr$0=caml_string_of_jsbytes("hr"),
     cst_head$0=caml_string_of_jsbytes("head"),
     cst_h6$0=caml_string_of_jsbytes("h6"),
     cst_h5$0=caml_string_of_jsbytes("h5"),
     cst_h4$0=caml_string_of_jsbytes("h4"),
     cst_h3$0=caml_string_of_jsbytes("h3"),
     cst_h2$0=caml_string_of_jsbytes("h2"),
     cst_h1$0=caml_string_of_jsbytes("h1"),
     cst_frame$0=caml_string_of_jsbytes("frame"),
     cst_frameset$0=caml_string_of_jsbytes("frameset"),
     cst_form$0=caml_string_of_jsbytes("form"),
     cst_embed$0=caml_string_of_jsbytes("embed"),
     cst_fieldset$0=caml_string_of_jsbytes("fieldset"),
     cst_dl$0=caml_string_of_jsbytes("dl"),
     cst_div$0=caml_string_of_jsbytes("div"),
     cst_del$0=caml_string_of_jsbytes("del"),
     cst_colgroup$0=caml_string_of_jsbytes("colgroup"),
     cst_col$0=caml_string_of_jsbytes("col"),
     cst_caption$0=caml_string_of_jsbytes("caption"),
     cst_canvas$0=caml_string_of_jsbytes("canvas"),
     cst_button$0=caml_string_of_jsbytes("button"),
     cst_br$0=caml_string_of_jsbytes("br"),
     cst_body$0=caml_string_of_jsbytes("body"),
     cst_blockquote$0=caml_string_of_jsbytes("blockquote"),
     cst_base$0=caml_string_of_jsbytes("base"),
     cst_area$0=caml_string_of_jsbytes("area"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_canvas=caml_string_of_jsbytes("canvas"),
     cst_video=caml_string_of_jsbytes("video"),
     cst_audio=caml_string_of_jsbytes("audio"),
     cst_iframe=caml_string_of_jsbytes("iframe"),
     cst_frame=caml_string_of_jsbytes("frame"),
     cst_frameset=caml_string_of_jsbytes("frameset"),
     cst_address=caml_string_of_jsbytes("address"),
     cst_noscript=caml_string_of_jsbytes("noscript"),
     cst_dt=caml_string_of_jsbytes("dt"),
     cst_dd=caml_string_of_jsbytes("dd"),
     cst_abbr=caml_string_of_jsbytes("abbr"),
     cst_var=caml_string_of_jsbytes("var"),
     cst_kbd=caml_string_of_jsbytes("kbd"),
     cst_samp=caml_string_of_jsbytes("samp"),
     cst_code=caml_string_of_jsbytes("code"),
     cst_dfn=caml_string_of_jsbytes("dfn"),
     cst_cite=caml_string_of_jsbytes("cite"),
     cst_strong=caml_string_of_jsbytes("strong"),
     cst_em=caml_string_of_jsbytes("em"),
     cst_small=caml_string_of_jsbytes("small"),
     cst_big=caml_string_of_jsbytes("big"),
     cst_b=caml_string_of_jsbytes("b"),
     cst_i=caml_string_of_jsbytes("i"),
     cst_tt=caml_string_of_jsbytes("tt"),
     cst_span=caml_string_of_jsbytes("span"),
     cst_sup=caml_string_of_jsbytes("sup"),
     cst_sub=caml_string_of_jsbytes("sub"),
     cst_td=caml_string_of_jsbytes("td"),
     cst_th=caml_string_of_jsbytes("th"),
     cst_tr=caml_string_of_jsbytes("tr"),
     cst_tbody=caml_string_of_jsbytes("tbody"),
     cst_tfoot=caml_string_of_jsbytes("tfoot"),
     cst_thead=caml_string_of_jsbytes("thead"),
     cst_colgroup=caml_string_of_jsbytes("colgroup"),
     cst_col=caml_string_of_jsbytes("col"),
     cst_caption=caml_string_of_jsbytes("caption"),
     cst_table=caml_string_of_jsbytes("table"),
     cst_script=caml_string_of_jsbytes("script"),
     cst_area=caml_string_of_jsbytes("area"),
     cst_map=caml_string_of_jsbytes("map"),
     cst_param=caml_string_of_jsbytes("param"),
     cst_object=caml_string_of_jsbytes("object"),
     cst_img=caml_string_of_jsbytes("img"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_del=caml_string_of_jsbytes("del"),
     cst_ins=caml_string_of_jsbytes("ins"),
     cst_hr=caml_string_of_jsbytes("hr"),
     cst_br=caml_string_of_jsbytes("br"),
     cst_pre=caml_string_of_jsbytes("pre"),
     cst_blockquote=caml_string_of_jsbytes("blockquote"),
     cst_q=caml_string_of_jsbytes("q"),
     cst_h6=caml_string_of_jsbytes("h6"),
     cst_h5=caml_string_of_jsbytes("h5"),
     cst_h4=caml_string_of_jsbytes("h4"),
     cst_h3=caml_string_of_jsbytes("h3"),
     cst_h2=caml_string_of_jsbytes("h2"),
     cst_h1=caml_string_of_jsbytes("h1"),
     cst_p=caml_string_of_jsbytes("p"),
     cst_embed=caml_string_of_jsbytes("embed"),
     cst_div=caml_string_of_jsbytes("div"),
     cst_li=caml_string_of_jsbytes("li"),
     cst_dl=caml_string_of_jsbytes("dl"),
     cst_ol=caml_string_of_jsbytes("ol"),
     cst_ul=caml_string_of_jsbytes("ul"),
     cst_legend=caml_string_of_jsbytes("legend"),
     cst_fieldset=caml_string_of_jsbytes("fieldset"),
     cst_label=caml_string_of_jsbytes("label"),
     cst_button=caml_string_of_jsbytes("button"),
     cst_textarea=caml_string_of_jsbytes("textarea"),
     cst_input$0=caml_string_of_jsbytes("input"),
     cst_select$0=caml_string_of_jsbytes("select"),
     cst_option=caml_string_of_jsbytes("option"),
     cst_optgroup=caml_string_of_jsbytes("optgroup"),
     cst_form=caml_string_of_jsbytes("form"),
     cst_body=caml_string_of_jsbytes("body"),
     cst_style=caml_string_of_jsbytes("style"),
     cst_base=caml_string_of_jsbytes("base"),
     cst_meta=caml_string_of_jsbytes("meta"),
     cst_title=caml_string_of_jsbytes("title"),
     cst_link=caml_string_of_jsbytes("link"),
     cst_head=caml_string_of_jsbytes("head"),
     cst_html=caml_string_of_jsbytes("html"),
     cst_click=caml_string_of_jsbytes("click"),
     cst_dblclick=caml_string_of_jsbytes("dblclick"),
     cst_mousedown=caml_string_of_jsbytes("mousedown"),
     cst_mouseup=caml_string_of_jsbytes("mouseup"),
     cst_mouseover=caml_string_of_jsbytes("mouseover"),
     cst_mousemove=caml_string_of_jsbytes("mousemove"),
     cst_mouseout=caml_string_of_jsbytes("mouseout"),
     cst_keypress=caml_string_of_jsbytes("keypress"),
     cst_keydown=caml_string_of_jsbytes("keydown"),
     cst_keyup=caml_string_of_jsbytes("keyup"),
     cst_mousewheel=caml_string_of_jsbytes("mousewheel"),
     cst_DOMMouseScroll=caml_string_of_jsbytes("DOMMouseScroll"),
     cst_touchstart=caml_string_of_jsbytes("touchstart"),
     cst_touchmove=caml_string_of_jsbytes("touchmove"),
     cst_touchend=caml_string_of_jsbytes("touchend"),
     cst_touchcancel=caml_string_of_jsbytes("touchcancel"),
     cst_dragstart=caml_string_of_jsbytes("dragstart"),
     cst_dragend=caml_string_of_jsbytes("dragend"),
     cst_dragenter=caml_string_of_jsbytes("dragenter"),
     cst_dragover=caml_string_of_jsbytes("dragover"),
     cst_dragleave=caml_string_of_jsbytes("dragleave"),
     cst_drag=caml_string_of_jsbytes("drag"),
     cst_drop=caml_string_of_jsbytes("drop"),
     cst_hashchange=caml_string_of_jsbytes("hashchange"),
     cst_change=caml_string_of_jsbytes("change"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_timeupdate=caml_string_of_jsbytes("timeupdate"),
     cst_submit=caml_string_of_jsbytes("submit"),
     cst_scroll=caml_string_of_jsbytes("scroll"),
     cst_focus=caml_string_of_jsbytes("focus"),
     cst_blur=caml_string_of_jsbytes("blur"),
     cst_load$0=caml_string_of_jsbytes("load"),
     cst_unload=caml_string_of_jsbytes("unload"),
     cst_beforeunload=caml_string_of_jsbytes("beforeunload"),
     cst_resize=caml_string_of_jsbytes("resize"),
     cst_orientationchange=caml_string_of_jsbytes("orientationchange"),
     cst_popstate=caml_string_of_jsbytes("popstate"),
     cst_error$0=caml_string_of_jsbytes("error"),
     cst_abort$0=caml_string_of_jsbytes("abort"),
     cst_select=caml_string_of_jsbytes("select"),
     cst_online=caml_string_of_jsbytes("online"),
     cst_offline=caml_string_of_jsbytes("offline"),
     cst_checking=caml_string_of_jsbytes("checking"),
     cst_noupdate=caml_string_of_jsbytes("noupdate"),
     cst_downloading=caml_string_of_jsbytes("downloading"),
     cst_progress$0=caml_string_of_jsbytes("progress"),
     cst_updateready=caml_string_of_jsbytes("updateready"),
     cst_cached=caml_string_of_jsbytes("cached"),
     cst_obsolete=caml_string_of_jsbytes("obsolete"),
     cst_DOMContentLoaded=caml_string_of_jsbytes("DOMContentLoaded"),
     cst_animationstart=caml_string_of_jsbytes("animationstart"),
     cst_animationend=caml_string_of_jsbytes("animationend"),
     cst_animationiteration=caml_string_of_jsbytes("animationiteration"),
     cst_animationcancel=caml_string_of_jsbytes("animationcancel"),
     cst_canplay=caml_string_of_jsbytes("canplay"),
     cst_canplaythrough=caml_string_of_jsbytes("canplaythrough"),
     cst_durationchange=caml_string_of_jsbytes("durationchange"),
     cst_emptied=caml_string_of_jsbytes("emptied"),
     cst_ended=caml_string_of_jsbytes("ended"),
     cst_gotpointercapture=caml_string_of_jsbytes("gotpointercapture"),
     cst_loadeddata=caml_string_of_jsbytes("loadeddata"),
     cst_loadedmetadata=caml_string_of_jsbytes("loadedmetadata"),
     cst_loadstart$0=caml_string_of_jsbytes("loadstart"),
     cst_lostpointercapture=caml_string_of_jsbytes("lostpointercapture"),
     cst_pause=caml_string_of_jsbytes("pause"),
     cst_play=caml_string_of_jsbytes("play"),
     cst_playing=caml_string_of_jsbytes("playing"),
     cst_pointerenter=caml_string_of_jsbytes("pointerenter"),
     cst_pointercancel=caml_string_of_jsbytes("pointercancel"),
     cst_pointerdown=caml_string_of_jsbytes("pointerdown"),
     cst_pointerleave=caml_string_of_jsbytes("pointerleave"),
     cst_pointermove=caml_string_of_jsbytes("pointermove"),
     cst_pointerout=caml_string_of_jsbytes("pointerout"),
     cst_pointerover=caml_string_of_jsbytes("pointerover"),
     cst_pointerup=caml_string_of_jsbytes("pointerup"),
     cst_ratechange=caml_string_of_jsbytes("ratechange"),
     cst_seeked=caml_string_of_jsbytes("seeked"),
     cst_seeking=caml_string_of_jsbytes("seeking"),
     cst_stalled=caml_string_of_jsbytes("stalled"),
     cst_suspend=caml_string_of_jsbytes("suspend"),
     cst_volumechange=caml_string_of_jsbytes("volumechange"),
     cst_waiting=caml_string_of_jsbytes("waiting"),
     cst_Js_of_ocaml_Dom_html_Canva=
      caml_string_of_jsbytes("Js_of_ocaml__Dom_html.Canvas_not_available"),
     cst_checkbox=caml_string_of_jsbytes("checkbox"),
     cst_file=caml_string_of_jsbytes("file"),
     cst_password=caml_string_of_jsbytes("password"),
     cst_radio=caml_string_of_jsbytes("radio"),
     cst_reset=caml_string_of_jsbytes("reset"),
     cst_submit$0=caml_string_of_jsbytes("submit"),
     cst_text=caml_string_of_jsbytes("text"),
     cst_readystatechange=caml_string_of_jsbytes("readystatechange"),
     cst_loadstart$1=caml_string_of_jsbytes("loadstart"),
     cst_progress$1=caml_string_of_jsbytes("progress"),
     cst_abort$1=caml_string_of_jsbytes("abort"),
     cst_error$1=caml_string_of_jsbytes("error"),
     cst_load$1=caml_string_of_jsbytes("load"),
     cst_timeout=caml_string_of_jsbytes("timeout"),
     cst_loadend$0=caml_string_of_jsbytes("loadend"),
     cst_Worker_onmessage_is_undefi$0=
      caml_string_of_jsbytes("Worker.onmessage is undefined"),
     cst_Worker_onmessage_is_undefi=
      caml_string_of_jsbytes("Worker.onmessage is undefined"),
     cst_Worker_import_scripts_is_u=
      caml_string_of_jsbytes("Worker.import_scripts is undefined"),
     cst_webglcontextlost=caml_string_of_jsbytes("webglcontextlost"),
     cst_webglcontextrestored=caml_string_of_jsbytes("webglcontextrestored"),
     cst_webglcontextcreationerror=
      caml_string_of_jsbytes("webglcontextcreationerror"),
     cst_g=caml_string_of_jsbytes("g"),
     cst=caml_string_of_jsbytes("[\\][()\\\\|+*.?{}^$]"),
     cst$37=caml_string_of_jsbytes(""),
     cst$13=caml_string_of_jsbytes(""),
     cst$21=caml_string_of_jsbytes(""),
     cst$14=caml_string_of_jsbytes("#"),
     cst$15=caml_string_of_jsbytes("?"),
     cst$20=caml_string_of_jsbytes(""),
     cst$16=caml_string_of_jsbytes("/"),
     cst$17=caml_string_of_jsbytes("/"),
     cst$19=caml_string_of_jsbytes(":"),
     cst$18=caml_string_of_jsbytes(""),
     cst_http$1=caml_string_of_jsbytes("http://"),
     cst$22=caml_string_of_jsbytes(""),
     cst$30=caml_string_of_jsbytes(""),
     cst$23=caml_string_of_jsbytes("#"),
     cst$24=caml_string_of_jsbytes("?"),
     cst$29=caml_string_of_jsbytes(""),
     cst$25=caml_string_of_jsbytes("/"),
     cst$26=caml_string_of_jsbytes("/"),
     cst$28=caml_string_of_jsbytes(":"),
     cst$27=caml_string_of_jsbytes(""),
     cst_https$1=caml_string_of_jsbytes("https://"),
     cst$31=caml_string_of_jsbytes(""),
     cst$36=caml_string_of_jsbytes(""),
     cst$32=caml_string_of_jsbytes("#"),
     cst$33=caml_string_of_jsbytes("?"),
     cst$35=caml_string_of_jsbytes(""),
     cst$34=caml_string_of_jsbytes("/"),
     cst_file$2=caml_string_of_jsbytes("file://"),
     cst$12=caml_string_of_jsbytes(""),
     cst$11=caml_string_of_jsbytes(""),
     cst$10=caml_string_of_jsbytes(""),
     cst$9=caml_string_of_jsbytes(""),
     cst$8=caml_string_of_jsbytes(""),
     cst$7=caml_string_of_jsbytes(""),
     cst$6=caml_string_of_jsbytes(""),
     cst$4=caml_string_of_jsbytes("="),
     cst$5=caml_string_of_jsbytes("&"),
     cst$2=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_file$0=caml_string_of_jsbytes("file"),
     cst_file$1=caml_string_of_jsbytes("file:"),
     cst_http=caml_string_of_jsbytes("http"),
     cst_http$0=caml_string_of_jsbytes("http:"),
     cst_https=caml_string_of_jsbytes("https"),
     cst_https$0=caml_string_of_jsbytes("https:"),
     cst$1=caml_string_of_jsbytes(" "),
     cst_2B=caml_string_of_jsbytes("%2B"),
     cst_Js_of_ocaml_Url_Local_exn=
      caml_string_of_jsbytes("Js_of_ocaml__Url.Local_exn"),
     cst$0=caml_string_of_jsbytes("+"),
     cst_Js_of_ocaml_Url_Not_an_htt=
      caml_string_of_jsbytes("Js_of_ocaml__Url.Not_an_http_protocol"),
     cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0=
      caml_string_of_jsbytes
       ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$"),
     cst_Ff_Ii_Ll_Ee=
      caml_string_of_jsbytes
       ("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$"),
     s=caml_string_of_jsbytes("3.6.0"),
     git_version=caml_string_of_jsbytes(""),
     cst$38=caml_string_of_jsbytes(""),
     cst$41=caml_string_of_jsbytes("+"),
     cst_Jstable_keys=caml_string_of_jsbytes("Jstable.keys"),
     dummy_string=caml_string_of_jsbytes(""),
     dummy_int64=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     cst_is_not_a_valid_length$0=
      caml_string_of_jsbytes(" is not a valid length"),
     cst_d_d_deg_grad_rad_turns=
      caml_string_of_jsbytes("^(\\d*(?:\\.\\d*))(deg|grad|rad|turns)$"),
     cst_length_conversion_error$0=
      caml_string_of_jsbytes("length conversion error: "),
     cst_deg$0=caml_string_of_jsbytes("deg"),
     cst_grad$0=caml_string_of_jsbytes("grad"),
     cst_rad$0=caml_string_of_jsbytes("rad"),
     cst_turns$0=caml_string_of_jsbytes("turns"),
     cst_deg=caml_string_of_jsbytes("deg"),
     cst_grad=caml_string_of_jsbytes("grad"),
     cst_rad=caml_string_of_jsbytes("rad"),
     cst_turns=caml_string_of_jsbytes("turns"),
     cst_is_not_a_valid_length=
      caml_string_of_jsbytes(" is not a valid length"),
     cst_0$0=caml_string_of_jsbytes("0"),
     cst_d_d_s_S=caml_string_of_jsbytes("^(\\d*(?:\\.\\d*)?)\\s*(\\S*)$"),
     cst_length_conversion_error=
      caml_string_of_jsbytes("length conversion error: "),
     cst_pc$0=caml_string_of_jsbytes("pc"),
     cst_ch$0=caml_string_of_jsbytes("ch"),
     cst_cm$0=caml_string_of_jsbytes("cm"),
     cst_em$1=caml_string_of_jsbytes("em"),
     cst_ex$0=caml_string_of_jsbytes("ex"),
     cst_gd$0=caml_string_of_jsbytes("gd"),
     cst_in$0=caml_string_of_jsbytes("in"),
     cst_mm$0=caml_string_of_jsbytes("mm"),
     cst_pt$0=caml_string_of_jsbytes("pt"),
     cst_px$0=caml_string_of_jsbytes("px"),
     cst_rem$0=caml_string_of_jsbytes("rem"),
     cst_vh$0=caml_string_of_jsbytes("vh"),
     cst_vm$0=caml_string_of_jsbytes("vm"),
     cst_vw$0=caml_string_of_jsbytes("vw"),
     cst_0=caml_string_of_jsbytes("0"),
     cst_em$0=caml_string_of_jsbytes("em"),
     cst_ex=caml_string_of_jsbytes("ex"),
     cst_px=caml_string_of_jsbytes("px"),
     cst_gd=caml_string_of_jsbytes("gd"),
     cst_rem=caml_string_of_jsbytes("rem"),
     cst_vw=caml_string_of_jsbytes("vw"),
     cst_vh=caml_string_of_jsbytes("vh"),
     cst_vm=caml_string_of_jsbytes("vm"),
     cst_ch=caml_string_of_jsbytes("ch"),
     cst_mm=caml_string_of_jsbytes("mm"),
     cst_cm=caml_string_of_jsbytes("cm"),
     cst_in=caml_string_of_jsbytes("in"),
     cst_pt=caml_string_of_jsbytes("pt"),
     cst_pc=caml_string_of_jsbytes("pc"),
     cst$40=caml_string_of_jsbytes("): "),
     cst_color_conversion_error$0=
      caml_string_of_jsbytes("color conversion error ("),
     cst$39=caml_string_of_jsbytes("): "),
     cst_color_conversion_error=
      caml_string_of_jsbytes("color conversion error ("),
     cst_is_not_a_valid_color$0=
      caml_string_of_jsbytes(" is not a valid color"),
     cst_rgba_d_d_d_d_d=
      caml_string_of_jsbytes
       ("(rgba?)\\((?:(\\d*),(\\d*),(\\d*)(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgba_d_d_d_d_d$0=
      caml_string_of_jsbytes
       ("(rgba?)\\((?:(\\d*)%,(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_hsla_d_d_d_d_d=
      caml_string_of_jsbytes
       ("(hsla?)\\((?:(\\d*),(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgb=caml_string_of_jsbytes("rgb"),
     cst_rgba=caml_string_of_jsbytes("rgba"),
     cst_rgb$0=caml_string_of_jsbytes("rgb"),
     cst_rgba$0=caml_string_of_jsbytes("rgba"),
     cst_hsl=caml_string_of_jsbytes("hsl"),
     cst_hsla=caml_string_of_jsbytes("hsla"),
     cst_rgb_s_d_s_d_s_d=
      caml_string_of_jsbytes("^rgb\\(\\s*\\d*,\\s*\\d*,\\s*\\d*\\)$"),
     cst_rgb_s_d_s_d_s_d$0=
      caml_string_of_jsbytes("^rgb\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d=
      caml_string_of_jsbytes
       ("^rgba\\(\\s*\\d*,\\s*\\d*,\\s*\\d*,\\d*\\.?\\d*\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d$0=
      caml_string_of_jsbytes
       ("^rgba\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_hsl_s_d_s_d_s_d=
      caml_string_of_jsbytes("^hsl\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_hsla_s_d_s_d_s_d_d_d=
      caml_string_of_jsbytes
       ("^hsla\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_is_not_a_valid_color=caml_string_of_jsbytes(" is not a valid color"),
     cst_is_out_of_valid_range=
      caml_string_of_jsbytes(" is out of valid range"),
     partial=[8,[0,0,0],0,0,[12,41,0]],
     partial$0=[12,41,0],
     partial$1=[0,0,0],
     cst_lightgrey$0=caml_string_of_jsbytes("lightgrey"),
     cst_darkslategray$0=caml_string_of_jsbytes("darkslategray"),
     cst_cornsilk$0=caml_string_of_jsbytes("cornsilk"),
     cst_blue$0=caml_string_of_jsbytes("blue"),
     cst_aliceblue$0=caml_string_of_jsbytes("aliceblue"),
     cst_antiquewhite$0=caml_string_of_jsbytes("antiquewhite"),
     cst_aqua$0=caml_string_of_jsbytes("aqua"),
     cst_aquamarine$0=caml_string_of_jsbytes("aquamarine"),
     cst_azure$0=caml_string_of_jsbytes("azure"),
     cst_beige$0=caml_string_of_jsbytes("beige"),
     cst_bisque$0=caml_string_of_jsbytes("bisque"),
     cst_black$0=caml_string_of_jsbytes("black"),
     cst_blanchedalmond$0=caml_string_of_jsbytes("blanchedalmond"),
     cst_blueviolet$0=caml_string_of_jsbytes("blueviolet"),
     cst_brown$0=caml_string_of_jsbytes("brown"),
     cst_burlywood$0=caml_string_of_jsbytes("burlywood"),
     cst_cadetblue$0=caml_string_of_jsbytes("cadetblue"),
     cst_chartreuse$0=caml_string_of_jsbytes("chartreuse"),
     cst_chocolate$0=caml_string_of_jsbytes("chocolate"),
     cst_coral$0=caml_string_of_jsbytes("coral"),
     cst_cornflowerblue$0=caml_string_of_jsbytes("cornflowerblue"),
     cst_darkkhaki$0=caml_string_of_jsbytes("darkkhaki"),
     cst_crimson$0=caml_string_of_jsbytes("crimson"),
     cst_cyan$0=caml_string_of_jsbytes("cyan"),
     cst_darkblue$0=caml_string_of_jsbytes("darkblue"),
     cst_darkcyan$0=caml_string_of_jsbytes("darkcyan"),
     cst_darkgoldenrod$0=caml_string_of_jsbytes("darkgoldenrod"),
     cst_darkgray$0=caml_string_of_jsbytes("darkgray"),
     cst_darkgreen$0=caml_string_of_jsbytes("darkgreen"),
     cst_darkgrey$0=caml_string_of_jsbytes("darkgrey"),
     cst_darkmagenta$0=caml_string_of_jsbytes("darkmagenta"),
     cst_darkolivegreen$0=caml_string_of_jsbytes("darkolivegreen"),
     cst_darkorange$0=caml_string_of_jsbytes("darkorange"),
     cst_darkorchid$0=caml_string_of_jsbytes("darkorchid"),
     cst_darkred$0=caml_string_of_jsbytes("darkred"),
     cst_darksalmon$0=caml_string_of_jsbytes("darksalmon"),
     cst_darkseagreen$0=caml_string_of_jsbytes("darkseagreen"),
     cst_darkslateblue$0=caml_string_of_jsbytes("darkslateblue"),
     cst_greenyellow$0=caml_string_of_jsbytes("greenyellow"),
     cst_floralwhite$0=caml_string_of_jsbytes("floralwhite"),
     cst_darkslategrey$0=caml_string_of_jsbytes("darkslategrey"),
     cst_darkturquoise$0=caml_string_of_jsbytes("darkturquoise"),
     cst_darkviolet$0=caml_string_of_jsbytes("darkviolet"),
     cst_deeppink$0=caml_string_of_jsbytes("deeppink"),
     cst_deepskyblue$0=caml_string_of_jsbytes("deepskyblue"),
     cst_dimgray$0=caml_string_of_jsbytes("dimgray"),
     cst_dimgrey$0=caml_string_of_jsbytes("dimgrey"),
     cst_dodgerblue$0=caml_string_of_jsbytes("dodgerblue"),
     cst_firebrick$0=caml_string_of_jsbytes("firebrick"),
     cst_forestgreen$0=caml_string_of_jsbytes("forestgreen"),
     cst_fuchsia$0=caml_string_of_jsbytes("fuchsia"),
     cst_gainsboro$0=caml_string_of_jsbytes("gainsboro"),
     cst_ghostwhite$0=caml_string_of_jsbytes("ghostwhite"),
     cst_gold$0=caml_string_of_jsbytes("gold"),
     cst_goldenrod$0=caml_string_of_jsbytes("goldenrod"),
     cst_gray$0=caml_string_of_jsbytes("gray"),
     cst_green$0=caml_string_of_jsbytes("green"),
     cst_lavenderblush$0=caml_string_of_jsbytes("lavenderblush"),
     cst_grey$0=caml_string_of_jsbytes("grey"),
     cst_honeydew$0=caml_string_of_jsbytes("honeydew"),
     cst_hotpink$0=caml_string_of_jsbytes("hotpink"),
     cst_indianred$0=caml_string_of_jsbytes("indianred"),
     cst_indigo$0=caml_string_of_jsbytes("indigo"),
     cst_ivory$0=caml_string_of_jsbytes("ivory"),
     cst_khaki$0=caml_string_of_jsbytes("khaki"),
     cst_lavender$0=caml_string_of_jsbytes("lavender"),
     cst_lawngreen$0=caml_string_of_jsbytes("lawngreen"),
     cst_lemonchiffon$0=caml_string_of_jsbytes("lemonchiffon"),
     cst_lightblue$0=caml_string_of_jsbytes("lightblue"),
     cst_lightcoral$0=caml_string_of_jsbytes("lightcoral"),
     cst_lightcyan$0=caml_string_of_jsbytes("lightcyan"),
     cst_lightgoldenrodyellow$0=caml_string_of_jsbytes("lightgoldenrodyellow"),
     cst_lightgray$0=caml_string_of_jsbytes("lightgray"),
     cst_lightgreen$0=caml_string_of_jsbytes("lightgreen"),
     cst_paleturquoise$0=caml_string_of_jsbytes("paleturquoise"),
     cst_mediumslateblue$0=caml_string_of_jsbytes("mediumslateblue"),
     cst_limegreen$0=caml_string_of_jsbytes("limegreen"),
     cst_lightpink$0=caml_string_of_jsbytes("lightpink"),
     cst_lightsalmon$0=caml_string_of_jsbytes("lightsalmon"),
     cst_lightseagreen$0=caml_string_of_jsbytes("lightseagreen"),
     cst_lightskyblue$0=caml_string_of_jsbytes("lightskyblue"),
     cst_lightslategray$0=caml_string_of_jsbytes("lightslategray"),
     cst_lightslategrey$0=caml_string_of_jsbytes("lightslategrey"),
     cst_lightsteelblue$0=caml_string_of_jsbytes("lightsteelblue"),
     cst_lightyellow$0=caml_string_of_jsbytes("lightyellow"),
     cst_lime$0=caml_string_of_jsbytes("lime"),
     cst_linen$0=caml_string_of_jsbytes("linen"),
     cst_magenta$0=caml_string_of_jsbytes("magenta"),
     cst_maroon$0=caml_string_of_jsbytes("maroon"),
     cst_mediumaquamarine$0=caml_string_of_jsbytes("mediumaquamarine"),
     cst_mediumblue$0=caml_string_of_jsbytes("mediumblue"),
     cst_mediumorchid$0=caml_string_of_jsbytes("mediumorchid"),
     cst_mediumpurple$0=caml_string_of_jsbytes("mediumpurple"),
     cst_mediumseagreen$0=caml_string_of_jsbytes("mediumseagreen"),
     cst_navy$0=caml_string_of_jsbytes("navy"),
     cst_mediumspringgreen$0=caml_string_of_jsbytes("mediumspringgreen"),
     cst_mediumturquoise$0=caml_string_of_jsbytes("mediumturquoise"),
     cst_mediumvioletred$0=caml_string_of_jsbytes("mediumvioletred"),
     cst_midnightblue$0=caml_string_of_jsbytes("midnightblue"),
     cst_mintcream$0=caml_string_of_jsbytes("mintcream"),
     cst_mistyrose$0=caml_string_of_jsbytes("mistyrose"),
     cst_moccasin$0=caml_string_of_jsbytes("moccasin"),
     cst_navajowhite$0=caml_string_of_jsbytes("navajowhite"),
     cst_oldlace$0=caml_string_of_jsbytes("oldlace"),
     cst_olive$0=caml_string_of_jsbytes("olive"),
     cst_olivedrab$0=caml_string_of_jsbytes("olivedrab"),
     cst_orange$0=caml_string_of_jsbytes("orange"),
     cst_orangered$0=caml_string_of_jsbytes("orangered"),
     cst_orchid$0=caml_string_of_jsbytes("orchid"),
     cst_palegoldenrod$0=caml_string_of_jsbytes("palegoldenrod"),
     cst_palegreen$0=caml_string_of_jsbytes("palegreen"),
     cst_skyblue$0=caml_string_of_jsbytes("skyblue"),
     cst_rosybrown$0=caml_string_of_jsbytes("rosybrown"),
     cst_palevioletred$0=caml_string_of_jsbytes("palevioletred"),
     cst_papayawhip$0=caml_string_of_jsbytes("papayawhip"),
     cst_peachpuff$0=caml_string_of_jsbytes("peachpuff"),
     cst_peru$0=caml_string_of_jsbytes("peru"),
     cst_pink$0=caml_string_of_jsbytes("pink"),
     cst_plum$0=caml_string_of_jsbytes("plum"),
     cst_powderblue$0=caml_string_of_jsbytes("powderblue"),
     cst_purple$0=caml_string_of_jsbytes("purple"),
     cst_red$0=caml_string_of_jsbytes("red"),
     cst_royalblue$0=caml_string_of_jsbytes("royalblue"),
     cst_saddlebrown$0=caml_string_of_jsbytes("saddlebrown"),
     cst_salmon$0=caml_string_of_jsbytes("salmon"),
     cst_sandybrown$0=caml_string_of_jsbytes("sandybrown"),
     cst_seagreen$0=caml_string_of_jsbytes("seagreen"),
     cst_seashell$0=caml_string_of_jsbytes("seashell"),
     cst_sienna$0=caml_string_of_jsbytes("sienna"),
     cst_silver$0=caml_string_of_jsbytes("silver"),
     cst_thistle$0=caml_string_of_jsbytes("thistle"),
     cst_slateblue$0=caml_string_of_jsbytes("slateblue"),
     cst_slategray$0=caml_string_of_jsbytes("slategray"),
     cst_slategrey$0=caml_string_of_jsbytes("slategrey"),
     cst_snow$0=caml_string_of_jsbytes("snow"),
     cst_springgreen$0=caml_string_of_jsbytes("springgreen"),
     cst_steelblue$0=caml_string_of_jsbytes("steelblue"),
     cst_tan$0=caml_string_of_jsbytes("tan"),
     cst_teal$0=caml_string_of_jsbytes("teal"),
     cst_tomato$0=caml_string_of_jsbytes("tomato"),
     cst_turquoise$0=caml_string_of_jsbytes("turquoise"),
     cst_violet$0=caml_string_of_jsbytes("violet"),
     cst_wheat$0=caml_string_of_jsbytes("wheat"),
     cst_white$0=caml_string_of_jsbytes("white"),
     cst_whitesmoke$0=caml_string_of_jsbytes("whitesmoke"),
     cst_yellow$0=caml_string_of_jsbytes("yellow"),
     cst_yellowgreen$0=caml_string_of_jsbytes("yellowgreen"),
     cst_is_not_a_valid_color_name=
      caml_string_of_jsbytes(" is not a valid color name"),
     cst_aliceblue=caml_string_of_jsbytes("aliceblue"),
     cst_antiquewhite=caml_string_of_jsbytes("antiquewhite"),
     cst_aqua=caml_string_of_jsbytes("aqua"),
     cst_aquamarine=caml_string_of_jsbytes("aquamarine"),
     cst_azure=caml_string_of_jsbytes("azure"),
     cst_beige=caml_string_of_jsbytes("beige"),
     cst_bisque=caml_string_of_jsbytes("bisque"),
     cst_black=caml_string_of_jsbytes("black"),
     cst_blanchedalmond=caml_string_of_jsbytes("blanchedalmond"),
     cst_blue=caml_string_of_jsbytes("blue"),
     cst_blueviolet=caml_string_of_jsbytes("blueviolet"),
     cst_brown=caml_string_of_jsbytes("brown"),
     cst_burlywood=caml_string_of_jsbytes("burlywood"),
     cst_cadetblue=caml_string_of_jsbytes("cadetblue"),
     cst_chartreuse=caml_string_of_jsbytes("chartreuse"),
     cst_chocolate=caml_string_of_jsbytes("chocolate"),
     cst_coral=caml_string_of_jsbytes("coral"),
     cst_cornflowerblue=caml_string_of_jsbytes("cornflowerblue"),
     cst_cornsilk=caml_string_of_jsbytes("cornsilk"),
     cst_crimson=caml_string_of_jsbytes("crimson"),
     cst_cyan=caml_string_of_jsbytes("cyan"),
     cst_darkblue=caml_string_of_jsbytes("darkblue"),
     cst_darkcyan=caml_string_of_jsbytes("darkcyan"),
     cst_darkgoldenrod=caml_string_of_jsbytes("darkgoldenrod"),
     cst_darkgray=caml_string_of_jsbytes("darkgray"),
     cst_darkgreen=caml_string_of_jsbytes("darkgreen"),
     cst_darkgrey=caml_string_of_jsbytes("darkgrey"),
     cst_darkkhaki=caml_string_of_jsbytes("darkkhaki"),
     cst_darkmagenta=caml_string_of_jsbytes("darkmagenta"),
     cst_darkolivegreen=caml_string_of_jsbytes("darkolivegreen"),
     cst_darkorange=caml_string_of_jsbytes("darkorange"),
     cst_darkorchid=caml_string_of_jsbytes("darkorchid"),
     cst_darkred=caml_string_of_jsbytes("darkred"),
     cst_darksalmon=caml_string_of_jsbytes("darksalmon"),
     cst_darkseagreen=caml_string_of_jsbytes("darkseagreen"),
     cst_darkslateblue=caml_string_of_jsbytes("darkslateblue"),
     cst_darkslategray=caml_string_of_jsbytes("darkslategray"),
     cst_darkslategrey=caml_string_of_jsbytes("darkslategrey"),
     cst_darkturquoise=caml_string_of_jsbytes("darkturquoise"),
     cst_darkviolet=caml_string_of_jsbytes("darkviolet"),
     cst_deeppink=caml_string_of_jsbytes("deeppink"),
     cst_deepskyblue=caml_string_of_jsbytes("deepskyblue"),
     cst_dimgray=caml_string_of_jsbytes("dimgray"),
     cst_dimgrey=caml_string_of_jsbytes("dimgrey"),
     cst_dodgerblue=caml_string_of_jsbytes("dodgerblue"),
     cst_firebrick=caml_string_of_jsbytes("firebrick"),
     cst_floralwhite=caml_string_of_jsbytes("floralwhite"),
     cst_forestgreen=caml_string_of_jsbytes("forestgreen"),
     cst_fuchsia=caml_string_of_jsbytes("fuchsia"),
     cst_gainsboro=caml_string_of_jsbytes("gainsboro"),
     cst_ghostwhite=caml_string_of_jsbytes("ghostwhite"),
     cst_gold=caml_string_of_jsbytes("gold"),
     cst_goldenrod=caml_string_of_jsbytes("goldenrod"),
     cst_gray=caml_string_of_jsbytes("gray"),
     cst_grey=caml_string_of_jsbytes("grey"),
     cst_green=caml_string_of_jsbytes("green"),
     cst_greenyellow=caml_string_of_jsbytes("greenyellow"),
     cst_honeydew=caml_string_of_jsbytes("honeydew"),
     cst_hotpink=caml_string_of_jsbytes("hotpink"),
     cst_indianred=caml_string_of_jsbytes("indianred"),
     cst_indigo=caml_string_of_jsbytes("indigo"),
     cst_ivory=caml_string_of_jsbytes("ivory"),
     cst_khaki=caml_string_of_jsbytes("khaki"),
     cst_lavender=caml_string_of_jsbytes("lavender"),
     cst_lavenderblush=caml_string_of_jsbytes("lavenderblush"),
     cst_lawngreen=caml_string_of_jsbytes("lawngreen"),
     cst_lemonchiffon=caml_string_of_jsbytes("lemonchiffon"),
     cst_lightblue=caml_string_of_jsbytes("lightblue"),
     cst_lightcoral=caml_string_of_jsbytes("lightcoral"),
     cst_lightcyan=caml_string_of_jsbytes("lightcyan"),
     cst_lightgoldenrodyellow=caml_string_of_jsbytes("lightgoldenrodyellow"),
     cst_lightgray=caml_string_of_jsbytes("lightgray"),
     cst_lightgreen=caml_string_of_jsbytes("lightgreen"),
     cst_lightgrey=caml_string_of_jsbytes("lightgrey"),
     cst_lightpink=caml_string_of_jsbytes("lightpink"),
     cst_lightsalmon=caml_string_of_jsbytes("lightsalmon"),
     cst_lightseagreen=caml_string_of_jsbytes("lightseagreen"),
     cst_lightskyblue=caml_string_of_jsbytes("lightskyblue"),
     cst_lightslategray=caml_string_of_jsbytes("lightslategray"),
     cst_lightslategrey=caml_string_of_jsbytes("lightslategrey"),
     cst_lightsteelblue=caml_string_of_jsbytes("lightsteelblue"),
     cst_lightyellow=caml_string_of_jsbytes("lightyellow"),
     cst_lime=caml_string_of_jsbytes("lime"),
     cst_limegreen=caml_string_of_jsbytes("limegreen"),
     cst_linen=caml_string_of_jsbytes("linen"),
     cst_magenta=caml_string_of_jsbytes("magenta"),
     cst_maroon=caml_string_of_jsbytes("maroon"),
     cst_mediumaquamarine=caml_string_of_jsbytes("mediumaquamarine"),
     cst_mediumblue=caml_string_of_jsbytes("mediumblue"),
     cst_mediumorchid=caml_string_of_jsbytes("mediumorchid"),
     cst_mediumpurple=caml_string_of_jsbytes("mediumpurple"),
     cst_mediumseagreen=caml_string_of_jsbytes("mediumseagreen"),
     cst_mediumslateblue=caml_string_of_jsbytes("mediumslateblue"),
     cst_mediumspringgreen=caml_string_of_jsbytes("mediumspringgreen"),
     cst_mediumturquoise=caml_string_of_jsbytes("mediumturquoise"),
     cst_mediumvioletred=caml_string_of_jsbytes("mediumvioletred"),
     cst_midnightblue=caml_string_of_jsbytes("midnightblue"),
     cst_mintcream=caml_string_of_jsbytes("mintcream"),
     cst_mistyrose=caml_string_of_jsbytes("mistyrose"),
     cst_moccasin=caml_string_of_jsbytes("moccasin"),
     cst_navajowhite=caml_string_of_jsbytes("navajowhite"),
     cst_navy=caml_string_of_jsbytes("navy"),
     cst_oldlace=caml_string_of_jsbytes("oldlace"),
     cst_olive=caml_string_of_jsbytes("olive"),
     cst_olivedrab=caml_string_of_jsbytes("olivedrab"),
     cst_orange=caml_string_of_jsbytes("orange"),
     cst_orangered=caml_string_of_jsbytes("orangered"),
     cst_orchid=caml_string_of_jsbytes("orchid"),
     cst_palegoldenrod=caml_string_of_jsbytes("palegoldenrod"),
     cst_palegreen=caml_string_of_jsbytes("palegreen"),
     cst_paleturquoise=caml_string_of_jsbytes("paleturquoise"),
     cst_palevioletred=caml_string_of_jsbytes("palevioletred"),
     cst_papayawhip=caml_string_of_jsbytes("papayawhip"),
     cst_peachpuff=caml_string_of_jsbytes("peachpuff"),
     cst_peru=caml_string_of_jsbytes("peru"),
     cst_pink=caml_string_of_jsbytes("pink"),
     cst_plum=caml_string_of_jsbytes("plum"),
     cst_powderblue=caml_string_of_jsbytes("powderblue"),
     cst_purple=caml_string_of_jsbytes("purple"),
     cst_red=caml_string_of_jsbytes("red"),
     cst_rosybrown=caml_string_of_jsbytes("rosybrown"),
     cst_royalblue=caml_string_of_jsbytes("royalblue"),
     cst_saddlebrown=caml_string_of_jsbytes("saddlebrown"),
     cst_salmon=caml_string_of_jsbytes("salmon"),
     cst_sandybrown=caml_string_of_jsbytes("sandybrown"),
     cst_seagreen=caml_string_of_jsbytes("seagreen"),
     cst_seashell=caml_string_of_jsbytes("seashell"),
     cst_sienna=caml_string_of_jsbytes("sienna"),
     cst_silver=caml_string_of_jsbytes("silver"),
     cst_skyblue=caml_string_of_jsbytes("skyblue"),
     cst_slateblue=caml_string_of_jsbytes("slateblue"),
     cst_slategray=caml_string_of_jsbytes("slategray"),
     cst_slategrey=caml_string_of_jsbytes("slategrey"),
     cst_snow=caml_string_of_jsbytes("snow"),
     cst_springgreen=caml_string_of_jsbytes("springgreen"),
     cst_steelblue=caml_string_of_jsbytes("steelblue"),
     cst_tan=caml_string_of_jsbytes("tan"),
     cst_teal=caml_string_of_jsbytes("teal"),
     cst_thistle=caml_string_of_jsbytes("thistle"),
     cst_tomato=caml_string_of_jsbytes("tomato"),
     cst_turquoise=caml_string_of_jsbytes("turquoise"),
     cst_violet=caml_string_of_jsbytes("violet"),
     cst_wheat=caml_string_of_jsbytes("wheat"),
     cst_white=caml_string_of_jsbytes("white"),
     cst_whitesmoke=caml_string_of_jsbytes("whitesmoke"),
     cst_yellow=caml_string_of_jsbytes("yellow"),
     cst_yellowgreen=caml_string_of_jsbytes("yellowgreen"),
     cst_vkern$0=caml_string_of_jsbytes("vkern"),
     cst_view$0=caml_string_of_jsbytes("view"),
     cst_use$0=caml_string_of_jsbytes("use"),
     cst_tspan$0=caml_string_of_jsbytes("tspan"),
     cst_tref$0=caml_string_of_jsbytes("tref"),
     cst_title$3=caml_string_of_jsbytes("title"),
     cst_textpath$0=caml_string_of_jsbytes("textpath"),
     cst_text$1=caml_string_of_jsbytes("text"),
     cst_symbol$0=caml_string_of_jsbytes("symbol"),
     cst_switch$0=caml_string_of_jsbytes("switch"),
     cst_svg$0=caml_string_of_jsbytes("svg"),
     cst_style$3=caml_string_of_jsbytes("style"),
     cst_stop$0=caml_string_of_jsbytes("stop"),
     cst_set$0=caml_string_of_jsbytes("set"),
     cst_script$3=caml_string_of_jsbytes("script"),
     cst_rect$0=caml_string_of_jsbytes("rect"),
     cst_radialgradient$0=caml_string_of_jsbytes("radialgradient"),
     cst_polyline$0=caml_string_of_jsbytes("polyline"),
     cst_polygon$0=caml_string_of_jsbytes("polygon"),
     cst_pattern$0=caml_string_of_jsbytes("pattern"),
     cst_path$0=caml_string_of_jsbytes("path"),
     cst_mpath$0=caml_string_of_jsbytes("mpath"),
     cst_missing_glyph$0=caml_string_of_jsbytes("missing-glyph"),
     cst_metadata$0=caml_string_of_jsbytes("metadata"),
     cst_mask$0=caml_string_of_jsbytes("mask"),
     cst_lineargradient$0=caml_string_of_jsbytes("lineargradient"),
     cst_line$0=caml_string_of_jsbytes("line"),
     cst_image$0=caml_string_of_jsbytes("image"),
     cst_hkern$0=caml_string_of_jsbytes("hkern"),
     cst_glyphref$0=caml_string_of_jsbytes("glyphref"),
     cst_glyph$0=caml_string_of_jsbytes("glyph"),
     cst_g$1=caml_string_of_jsbytes("g"),
     cst_foreignobject=caml_string_of_jsbytes("foreignobject"),
     cst_font_face_uri$0=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_src$0=caml_string_of_jsbytes("font-face-src"),
     cst_font_face_name$0=caml_string_of_jsbytes("font-face-name"),
     cst_font_face_format$0=caml_string_of_jsbytes("font-face-format"),
     cst_font_face$0=caml_string_of_jsbytes("font-face"),
     cst_font$0=caml_string_of_jsbytes("font"),
     cst_filter$0=caml_string_of_jsbytes("filter"),
     cst_ellipse$0=caml_string_of_jsbytes("ellipse"),
     cst_desc$0=caml_string_of_jsbytes("desc"),
     cst_defs$0=caml_string_of_jsbytes("defs"),
     cst_cursor$0=caml_string_of_jsbytes("cursor"),
     cst_clippath$0=caml_string_of_jsbytes("clippath"),
     cst_circle$0=caml_string_of_jsbytes("circle"),
     cst_animatetransform$0=caml_string_of_jsbytes("animatetransform"),
     cst_animatemotion$0=caml_string_of_jsbytes("animatemotion"),
     cst_animatecolor$0=caml_string_of_jsbytes("animatecolor"),
     cst_animate$0=caml_string_of_jsbytes("animate"),
     cst_altglyphitem$0=caml_string_of_jsbytes("altglyphitem"),
     cst_altglyphdef$0=caml_string_of_jsbytes("altglyphdef"),
     cst_altglyph$0=caml_string_of_jsbytes("altglyph"),
     cst_a$3=caml_string_of_jsbytes("a"),
     cst_vkern=caml_string_of_jsbytes("vkern"),
     cst_view=caml_string_of_jsbytes("view"),
     cst_use=caml_string_of_jsbytes("use"),
     cst_tspan=caml_string_of_jsbytes("tspan"),
     cst_tref=caml_string_of_jsbytes("tref"),
     cst_title$2=caml_string_of_jsbytes("title"),
     cst_textpath=caml_string_of_jsbytes("textpath"),
     cst_text$0=caml_string_of_jsbytes("text"),
     cst_symbol=caml_string_of_jsbytes("symbol"),
     cst_switch=caml_string_of_jsbytes("switch"),
     cst_svg=caml_string_of_jsbytes("svg"),
     cst_style$2=caml_string_of_jsbytes("style"),
     cst_stop=caml_string_of_jsbytes("stop"),
     cst_set=caml_string_of_jsbytes("set"),
     cst_script$2=caml_string_of_jsbytes("script"),
     cst_rect=caml_string_of_jsbytes("rect"),
     cst_radialgradient=caml_string_of_jsbytes("radialgradient"),
     cst_polyline=caml_string_of_jsbytes("polyline"),
     cst_polygon=caml_string_of_jsbytes("polygon"),
     cst_pattern=caml_string_of_jsbytes("pattern"),
     cst_path=caml_string_of_jsbytes("path"),
     cst_mpath=caml_string_of_jsbytes("mpath"),
     cst_missing_glyph=caml_string_of_jsbytes("missing-glyph"),
     cst_metadata=caml_string_of_jsbytes("metadata"),
     cst_mask=caml_string_of_jsbytes("mask"),
     cst_lineargradient=caml_string_of_jsbytes("lineargradient"),
     cst_line=caml_string_of_jsbytes("line"),
     cst_image=caml_string_of_jsbytes("image"),
     cst_hkern=caml_string_of_jsbytes("hkern"),
     cst_glyphref=caml_string_of_jsbytes("glyphref"),
     cst_glyph=caml_string_of_jsbytes("glyph"),
     cst_g$0=caml_string_of_jsbytes("g"),
     cst_foreignObject=caml_string_of_jsbytes("foreignObject"),
     cst_font_face_uri=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_src=caml_string_of_jsbytes("font-face-src"),
     cst_font_face_name=caml_string_of_jsbytes("font-face-name"),
     cst_font_face_format=caml_string_of_jsbytes("font-face-format"),
     cst_font_face=caml_string_of_jsbytes("font-face"),
     cst_font=caml_string_of_jsbytes("font"),
     cst_filter=caml_string_of_jsbytes("filter"),
     cst_ellipse=caml_string_of_jsbytes("ellipse"),
     cst_desc=caml_string_of_jsbytes("desc"),
     cst_defs=caml_string_of_jsbytes("defs"),
     cst_cursor=caml_string_of_jsbytes("cursor"),
     cst_clippath=caml_string_of_jsbytes("clippath"),
     cst_circle=caml_string_of_jsbytes("circle"),
     cst_animatetransform=caml_string_of_jsbytes("animatetransform"),
     cst_animatemotion=caml_string_of_jsbytes("animatemotion"),
     cst_animatecolor=caml_string_of_jsbytes("animatecolor"),
     cst_animate=caml_string_of_jsbytes("animate"),
     cst_altglyphitem=caml_string_of_jsbytes("altglyphitem"),
     cst_altglyphdef=caml_string_of_jsbytes("altglyphdef"),
     cst_altglyph=caml_string_of_jsbytes("altglyph"),
     cst_a$2=caml_string_of_jsbytes("a"),
     cst_Js_of_ocaml_Dom_svg_SVGErr=
      caml_string_of_jsbytes("Js_of_ocaml__Dom_svg.SVGError"),
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_char=global_data.Stdlib__char,
     Stdlib=global_data.Stdlib,
     Stdlib_callback=global_data.Stdlib__callback,
     Stdlib_printexc=global_data.Stdlib__printexc,
     Assert_failure=global_data.Assert_failure,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_uchar=global_data.Stdlib__uchar,
     Stdlib_printf=global_data.Stdlib__printf,
     Js_of_ocaml=[0];
    caml_register_global(1634,Js_of_ocaml,"Js_of_ocaml__");
    var
     Poly=[0],
     _d_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom.ml"),351,67],
     _e_=[0,caml_string_of_jsbytes("transparent")],
     _f_=[0,caml_string_of_jsbytes("native")],
     _j_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom_html.ml"),2792,58],
     _i_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom_html.ml"),2791,61],
     _h_=
      [0,
       [11,
        caml_string_of_jsbytes("getElementById_exn: "),
        [3,0,[11,caml_string_of_jsbytes(" not found"),0]]],
       caml_string_of_jsbytes("getElementById_exn: %S not found")],
     _l_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/form.ml"),177,13],
     _k_=[0,1],
     _m_=
      [0,caml_string_of_jsbytes("lib/js_of_ocaml/xmlHttpRequest.ml"),129,75],
     _n_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/regexp.ml"),34,64],
     _o_=[0,caml_string_of_jsbytes(""),0],
     _ci_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cj_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ck_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cl_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b6_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b7_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b8_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b9_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b__=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b$_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ca_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cb_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cc_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cd_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ce_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cf_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cg_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ch_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b5_=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("aliceblue"),
         caml_string_of_jsbytes("antiquewhite"),
         caml_string_of_jsbytes("aqua"),
         caml_string_of_jsbytes("aquamarine"),
         caml_string_of_jsbytes("azure"),
         caml_string_of_jsbytes("beige"),
         caml_string_of_jsbytes("bisque"),
         caml_string_of_jsbytes("black"),
         caml_string_of_jsbytes("blanchedalmond"),
         caml_string_of_jsbytes("blue"),
         caml_string_of_jsbytes("blueviolet"),
         caml_string_of_jsbytes("brown"),
         caml_string_of_jsbytes("burlywood"),
         caml_string_of_jsbytes("cadetblue"),
         caml_string_of_jsbytes("chartreuse"),
         caml_string_of_jsbytes("chocolate"),
         caml_string_of_jsbytes("coral"),
         caml_string_of_jsbytes("cornflowerblue"),
         caml_string_of_jsbytes("cornsilk"),
         caml_string_of_jsbytes("crimson"),
         caml_string_of_jsbytes("cyan"),
         caml_string_of_jsbytes("darkblue"),
         caml_string_of_jsbytes("darkcyan"),
         caml_string_of_jsbytes("darkgoldenrod"),
         caml_string_of_jsbytes("darkgray"),
         caml_string_of_jsbytes("darkgreen"),
         caml_string_of_jsbytes("darkgrey"),
         caml_string_of_jsbytes("darkkhaki"),
         caml_string_of_jsbytes("darkmagenta"),
         caml_string_of_jsbytes("darkolivegreen"),
         caml_string_of_jsbytes("darkorange"),
         caml_string_of_jsbytes("darkorchid"),
         caml_string_of_jsbytes("darkred"),
         caml_string_of_jsbytes("darksalmon"),
         caml_string_of_jsbytes("darkseagreen"),
         caml_string_of_jsbytes("darkslateblue"),
         caml_string_of_jsbytes("darkslategray"),
         caml_string_of_jsbytes("darkslategrey"),
         caml_string_of_jsbytes("darkturquoise"),
         caml_string_of_jsbytes("darkviolet"),
         caml_string_of_jsbytes("deeppink"),
         caml_string_of_jsbytes("deepskyblue"),
         caml_string_of_jsbytes("dimgray"),
         caml_string_of_jsbytes("dimgrey"),
         caml_string_of_jsbytes("dodgerblue"),
         caml_string_of_jsbytes("firebrick"),
         caml_string_of_jsbytes("floralwhite"),
         caml_string_of_jsbytes("forestgreen"),
         caml_string_of_jsbytes("fuchsia"),
         caml_string_of_jsbytes("gainsboro"),
         caml_string_of_jsbytes("ghostwhite"),
         caml_string_of_jsbytes("gold"),
         caml_string_of_jsbytes("goldenrod"),
         caml_string_of_jsbytes("gray"),
         caml_string_of_jsbytes("green"),
         caml_string_of_jsbytes("greenyellow"),
         caml_string_of_jsbytes("grey"),
         caml_string_of_jsbytes("honeydew"),
         caml_string_of_jsbytes("hotpink"),
         caml_string_of_jsbytes("indianred"),
         caml_string_of_jsbytes("indigo"),
         caml_string_of_jsbytes("ivory"),
         caml_string_of_jsbytes("khaki"),
         caml_string_of_jsbytes("lavender"),
         caml_string_of_jsbytes("lavenderblush"),
         caml_string_of_jsbytes("lawngreen"),
         caml_string_of_jsbytes("lemonchiffon"),
         caml_string_of_jsbytes("lightblue"),
         caml_string_of_jsbytes("lightcoral"),
         caml_string_of_jsbytes("lightcyan"),
         caml_string_of_jsbytes("lightgoldenrodyellow"),
         caml_string_of_jsbytes("lightgray"),
         caml_string_of_jsbytes("lightgreen"),
         caml_string_of_jsbytes("lightgrey"),
         caml_string_of_jsbytes("lightpink"),
         caml_string_of_jsbytes("lightsalmon"),
         caml_string_of_jsbytes("lightseagreen"),
         caml_string_of_jsbytes("lightskyblue"),
         caml_string_of_jsbytes("lightslategray"),
         caml_string_of_jsbytes("lightslategrey"),
         caml_string_of_jsbytes("lightsteelblue"),
         caml_string_of_jsbytes("lightyellow"),
         caml_string_of_jsbytes("lime"),
         caml_string_of_jsbytes("limegreen"),
         caml_string_of_jsbytes("linen"),
         caml_string_of_jsbytes("magenta"),
         caml_string_of_jsbytes("maroon"),
         caml_string_of_jsbytes("mediumaquamarine"),
         caml_string_of_jsbytes("mediumblue"),
         caml_string_of_jsbytes("mediumorchid"),
         caml_string_of_jsbytes("mediumpurple"),
         caml_string_of_jsbytes("mediumseagreen"),
         caml_string_of_jsbytes("mediumslateblue"),
         caml_string_of_jsbytes("mediumspringgreen"),
         caml_string_of_jsbytes("mediumturquoise"),
         caml_string_of_jsbytes("mediumvioletred"),
         caml_string_of_jsbytes("midnightblue"),
         caml_string_of_jsbytes("mintcream"),
         caml_string_of_jsbytes("mistyrose"),
         caml_string_of_jsbytes("moccasin"),
         caml_string_of_jsbytes("navajowhite"),
         caml_string_of_jsbytes("navy"),
         caml_string_of_jsbytes("oldlace"),
         caml_string_of_jsbytes("olive"),
         caml_string_of_jsbytes("olivedrab"),
         caml_string_of_jsbytes("orange"),
         caml_string_of_jsbytes("orangered"),
         caml_string_of_jsbytes("orchid"),
         caml_string_of_jsbytes("palegoldenrod"),
         caml_string_of_jsbytes("palegreen"),
         caml_string_of_jsbytes("paleturquoise"),
         caml_string_of_jsbytes("palevioletred"),
         caml_string_of_jsbytes("papayawhip"),
         caml_string_of_jsbytes("peachpuff"),
         caml_string_of_jsbytes("peru"),
         caml_string_of_jsbytes("pink"),
         caml_string_of_jsbytes("plum"),
         caml_string_of_jsbytes("powderblue"),
         caml_string_of_jsbytes("purple"),
         caml_string_of_jsbytes("red"),
         caml_string_of_jsbytes("rosybrown"),
         caml_string_of_jsbytes("royalblue"),
         caml_string_of_jsbytes("saddlebrown"),
         caml_string_of_jsbytes("salmon"),
         caml_string_of_jsbytes("sandybrown"),
         caml_string_of_jsbytes("seagreen"),
         caml_string_of_jsbytes("seashell"),
         caml_string_of_jsbytes("sienna"),
         caml_string_of_jsbytes("silver"),
         caml_string_of_jsbytes("skyblue"),
         caml_string_of_jsbytes("slateblue"),
         caml_string_of_jsbytes("slategray"),
         caml_string_of_jsbytes("slategrey"),
         caml_string_of_jsbytes("snow"),
         caml_string_of_jsbytes("springgreen"),
         caml_string_of_jsbytes("steelblue"),
         caml_string_of_jsbytes("tan"),
         caml_string_of_jsbytes("teal"),
         caml_string_of_jsbytes("thistle"),
         caml_string_of_jsbytes("tomato"),
         caml_string_of_jsbytes("turquoise"),
         caml_string_of_jsbytes("violet"),
         caml_string_of_jsbytes("wheat"),
         caml_string_of_jsbytes("white"),
         caml_string_of_jsbytes("whitesmoke"),
         caml_string_of_jsbytes("yellow"),
         caml_string_of_jsbytes("yellowgreen")]),
     _b4_=
      [0,
       [12,35,[4,8,[0,2,2],0,[4,8,[0,2,2],0,[4,8,[0,2,2],0,0]]]],
       caml_string_of_jsbytes("#%02X%02X%02X")],
     _bY_=
      [0,
       [11,
        caml_string_of_jsbytes("rgb("),
        [4,0,0,0,[12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes("rgb(%d,%d,%d)")],
     _bZ_=
      [0,
       [11,
        caml_string_of_jsbytes("rgb("),
        [4,
         0,
         0,
         0,
         [12,37,[12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]]],
       caml_string_of_jsbytes("rgb(%d%%,%d%%,%d%%)")],
     _b0_=
      [0,
       [11,
        caml_string_of_jsbytes("rgba("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,44,[8,[0,0,0],0,0,[12,41,0]]]]]]]]],
       caml_string_of_jsbytes("rgba(%d,%d,%d,%f)")],
     _b1_=
      [0,
       [11,
        caml_string_of_jsbytes("rgba("),
        [4,
         0,
         0,
         0,
         [12,
          37,
          [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,44,partial]]]]]]]]]],
       caml_string_of_jsbytes("rgba(%d%%,%d%%,%d%%,%f)")],
     _b2_=
      [0,
       [11,
        caml_string_of_jsbytes("hsl("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]],
       caml_string_of_jsbytes("hsl(%d,%d%%,%d%%)")],
     _b3_=
      [0,
       [11,
        caml_string_of_jsbytes("hsla("),
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,
           0,
           0,
           0,
           [12,
            37,
            [12,44,[4,0,0,0,[12,37,[12,44,[8,partial$1,0,0,partial$0]]]]]]]]]],
       caml_string_of_jsbytes("hsla(%d,%d%%,%d%%,%f)")],
     _v_=[0,240,248,255],
     _w_=[0,250,235,215],
     _x_=[0,0,255,255],
     _y_=[0,127,255,212],
     _z_=[0,240,255,255],
     _A_=[0,245,245,220],
     _B_=[0,255,228,196],
     _C_=[0,0,0,0],
     _D_=[0,255,235,205],
     _E_=[0,0,0,255],
     _F_=[0,138,43,226],
     _G_=[0,165,42,42],
     _H_=[0,222,184,135],
     _I_=[0,95,158,160],
     _J_=[0,127,255,0],
     _K_=[0,210,105,30],
     _L_=[0,255,127,80],
     _M_=[0,100,149,237],
     _N_=[0,255,248,220],
     _O_=[0,220,20,60],
     _P_=[0,0,255,255],
     _Q_=[0,0,0,139],
     _R_=[0,0,139,139],
     _S_=[0,184,134,11],
     _T_=[0,169,169,169],
     _U_=[0,0,100,0],
     _V_=[0,169,169,169],
     _W_=[0,189,183,107],
     _X_=[0,139,0,139],
     _Y_=[0,85,107,47],
     _Z_=[0,255,140,0],
     ___=[0,153,50,204],
     _$_=[0,139,0,0],
     _aa_=[0,233,150,122],
     _ab_=[0,143,188,143],
     _ac_=[0,72,61,139],
     _ad_=[0,47,79,79],
     _ae_=[0,47,79,79],
     _af_=[0,0,206,209],
     _ag_=[0,148,0,211],
     _ah_=[0,255,20,147],
     _ai_=[0,0,191,255],
     _aj_=[0,105,105,105],
     _ak_=[0,105,105,105],
     _al_=[0,30,144,255],
     _am_=[0,178,34,34],
     _an_=[0,255,250,240],
     _ao_=[0,34,139,34],
     _ap_=[0,255,0,255],
     _aq_=[0,220,220,220],
     _ar_=[0,248,248,255],
     _as_=[0,255,215,0],
     _at_=[0,218,165,32],
     _au_=[0,128,128,128],
     _av_=[0,128,128,128],
     _aw_=[0,0,128,0],
     _ax_=[0,173,255,47],
     _ay_=[0,240,255,240],
     _az_=[0,255,105,180],
     _aA_=[0,205,92,92],
     _aB_=[0,75,0,130],
     _aC_=[0,255,255,240],
     _aD_=[0,240,230,140],
     _aE_=[0,230,230,250],
     _aF_=[0,255,240,245],
     _aG_=[0,124,252,0],
     _aH_=[0,255,250,205],
     _aI_=[0,173,216,230],
     _aJ_=[0,240,128,128],
     _aK_=[0,224,255,255],
     _aL_=[0,250,250,210],
     _aM_=[0,211,211,211],
     _aN_=[0,144,238,144],
     _aO_=[0,211,211,211],
     _aP_=[0,255,182,193],
     _aQ_=[0,255,160,122],
     _aR_=[0,32,178,170],
     _aS_=[0,135,206,250],
     _aT_=[0,119,136,153],
     _aU_=[0,119,136,153],
     _aV_=[0,176,196,222],
     _aW_=[0,255,255,224],
     _aX_=[0,0,255,0],
     _aY_=[0,50,205,50],
     _aZ_=[0,250,240,230],
     _a0_=[0,255,0,255],
     _a1_=[0,128,0,0],
     _a2_=[0,102,205,170],
     _a3_=[0,0,0,205],
     _a4_=[0,186,85,211],
     _a5_=[0,147,112,219],
     _a6_=[0,60,179,113],
     _a7_=[0,123,104,238],
     _a8_=[0,0,250,154],
     _a9_=[0,72,209,204],
     _a__=[0,199,21,133],
     _a$_=[0,25,25,112],
     _ba_=[0,245,255,250],
     _bb_=[0,255,228,225],
     _bc_=[0,255,228,181],
     _bd_=[0,255,222,173],
     _be_=[0,0,0,128],
     _bf_=[0,253,245,230],
     _bg_=[0,128,128,0],
     _bh_=[0,107,142,35],
     _bi_=[0,255,165,0],
     _bj_=[0,255,69,0],
     _bk_=[0,218,112,214],
     _bl_=[0,238,232,170],
     _bm_=[0,152,251,152],
     _bn_=[0,175,238,238],
     _bo_=[0,219,112,147],
     _bp_=[0,255,239,213],
     _bq_=[0,255,218,185],
     _br_=[0,205,133,63],
     _bs_=[0,255,192,203],
     _bt_=[0,221,160,221],
     _bu_=[0,176,224,230],
     _bv_=[0,128,0,128],
     _bw_=[0,255,0,0],
     _bx_=[0,188,143,143],
     _by_=[0,65,105,225],
     _bz_=[0,139,69,19],
     _bA_=[0,250,128,114],
     _bB_=[0,244,164,96],
     _bC_=[0,46,139,87],
     _bD_=[0,255,245,238],
     _bE_=[0,160,82,45],
     _bF_=[0,192,192,192],
     _bG_=[0,135,206,235],
     _bH_=[0,106,90,205],
     _bI_=[0,112,128,144],
     _bJ_=[0,112,128,144],
     _bK_=[0,255,250,250],
     _bL_=[0,0,255,127],
     _bM_=[0,70,130,180],
     _bN_=[0,210,180,140],
     _bO_=[0,0,128,128],
     _bP_=[0,216,191,216],
     _bQ_=[0,255,99,71],
     _bR_=[0,64,224,208],
     _bS_=[0,238,130,238],
     _bT_=[0,245,222,179],
     _bU_=[0,255,255,255],
     _bV_=[0,245,245,245],
     _bW_=[0,255,255,0],
     _bX_=[0,154,205,50];
    function symbol(x,y){return x < y?1:0}
    function symbol$0(x,y){return x <= y?1:0}
    function symbol$1(x,y){return x !== y?1:0}
    function symbol$2(x,y){return x === y?1:0}
    function symbol$3(x,y){return y < x?1:0}
    function symbol$4(x,y){return y <= x?1:0}
    var compare=runtime.caml_int_compare;
    function equal(x,y){return x === y?1:0}
    function max(x,y){return y <= x?x:y}
    function min(x,y){return x <= y?x:y}
    var
     Int_replace_polymorphic_compar=
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
     make=Stdlib_string[1],
     init=Stdlib_string[2],
     copy=Stdlib_string[3],
     sub=Stdlib_string[4],
     fill=Stdlib_string[5],
     blit=Stdlib_string[6],
     concat=Stdlib_string[7],
     iter=Stdlib_string[8],
     iteri=Stdlib_string[9],
     map=Stdlib_string[10],
     mapi=Stdlib_string[11],
     trim=Stdlib_string[12],
     escaped=Stdlib_string[13],
     index=Stdlib_string[14],
     index_opt=Stdlib_string[15],
     rindex=Stdlib_string[16],
     rindex_opt=Stdlib_string[17],
     index_from=Stdlib_string[18],
     index_from_opt=Stdlib_string[19],
     rindex_from=Stdlib_string[20],
     rindex_from_opt=Stdlib_string[21],
     contains=Stdlib_string[22],
     contains_from=Stdlib_string[23],
     rcontains_from=Stdlib_string[24],
     uppercase=Stdlib_string[25],
     lowercase=Stdlib_string[26],
     capitalize=Stdlib_string[27],
     uncapitalize=Stdlib_string[28],
     uppercase_ascii=Stdlib_string[29],
     lowercase_ascii=Stdlib_string[30],
     capitalize_ascii=Stdlib_string[31],
     uncapitalize_ascii=Stdlib_string[32],
     compare$0=Stdlib_string[33],
     split_on_char=Stdlib_string[35],
     to_seq=Stdlib_string[36],
     to_seqi=Stdlib_string[37],
     of_seq=Stdlib_string[38],
     equal$0=runtime.caml_string_equal,
     String=
      [0,
       make,
       init,
       copy,
       sub,
       fill,
       blit,
       concat,
       iter,
       iteri,
       map,
       mapi,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$0,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       equal$0],
     chr=Stdlib_char[1],
     escaped$0=Stdlib_char[2],
     lowercase$0=Stdlib_char[3],
     uppercase$0=Stdlib_char[4],
     lowercase_ascii$0=Stdlib_char[5],
     uppercase_ascii$0=Stdlib_char[6],
     compare$1=Stdlib_char[7];
    function equal$1(x,y){return x === y?1:0}
    var
     Char=
      [0,
       chr,
       escaped$0,
       lowercase$0,
       uppercase$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$1,
       equal$1],
     symbol$5=Int_replace_polymorphic_compar[1],
     symbol$6=Int_replace_polymorphic_compar[2],
     symbol$7=Int_replace_polymorphic_compar[3],
     symbol$8=Int_replace_polymorphic_compar[4],
     symbol$9=Int_replace_polymorphic_compar[5],
     symbol$10=Int_replace_polymorphic_compar[6],
     compare$2=Int_replace_polymorphic_compar[7],
     equal$2=Int_replace_polymorphic_compar[8],
     max$0=Int_replace_polymorphic_compar[9],
     min$0=Int_replace_polymorphic_compar[10],
     Js_of_ocaml_Import=
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       compare$2,
       equal$2,
       max$0,
       min$0];
    caml_register_global(1637,Js_of_ocaml_Import,"Js_of_ocaml__Import");
    var
     global=joo_global_object,
     Unsafe=[0,global],
     no_handler=null,
     t37=undefined;
    function return$0(_gP_){return _gP_}
    function map$0(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function bind(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function test(x){return 1 - (x == no_handler?1:0)}
    function iter$0(x,f)
     {var _gO_=1 - (x == no_handler?1:0);return _gO_?caml_call1(f,x):_gO_}
    function case$0(x,f,g)
     {return x == no_handler?caml_call1(f,0):caml_call1(g,x)}
    function get(x,f){return x == no_handler?caml_call1(f,0):x}
    function option(x){if(x){var x$0=x[1];return x$0}return no_handler}
    function to_option(x)
     {function _gN_(x){return [0,x]}
      return case$0(x,function(param){return 0},_gN_)}
    var
     Opt=
      [0,
       no_handler,
       return$0,
       map$0,
       bind,
       test,
       iter$0,
       case$0,
       get,
       option,
       to_option];
    function return$1(_gM_){return _gM_}
    function map$1(x,f){return x === t37?t37:caml_call1(f,x)}
    function bind$0(x,f){return x === t37?t37:caml_call1(f,x)}
    function test$0(x){return x !== t37?1:0}
    function iter$1(x,f)
     {var _gL_=x !== t37?1:0;return _gL_?caml_call1(f,x):_gL_}
    function case$1(x,f,g){return x === t37?caml_call1(f,0):caml_call1(g,x)}
    function get$0(x,f){return x === t37?caml_call1(f,0):x}
    function option$0(x){if(x){var x$0=x[1];return x$0}return t37}
    function to_option$0(x)
     {function _gK_(x){return [0,x]}
      return case$1(x,function(param){return 0},_gK_)}
    var
     Optdef=
      [0,
       t37,
       return$1,
       map$1,
       bind$0,
       test$0,
       iter$1,
       case$1,
       get$0,
       option$0,
       to_option$0];
    function coerce(x,f,g)
     {function _gI_(param){return caml_call1(g,x)}
      var _gJ_=caml_call1(f,x);
      return caml_call2(Opt[8],_gJ_,_gI_)}
    function coerce_opt(x,f,g)
     {function _gG_(param){return caml_call1(g,x)}
      var _gH_=caml_call2(Opt[4],x,f);
      return caml_call2(Opt[8],_gH_,_gG_)}
    var
     true$0=true,
     false$0=false,
     string_constr=Unsafe[1].String,
     regExp_withFlags=Unsafe[1].RegExp,
     object_constructor=Unsafe[1].Object;
    function object_keys(o){return object_constructor.keys(o)}
    var
     array_length=Unsafe[1].Array,
     array_get=caml_js_get,
     array_set=caml_js_set;
    function array_map(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call1(f,x)}))}
    function array_mapi(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call2(f,idx,x)}))}
    function str_array(_gF_){return _gF_}
    function match_result(_gE_){return _gE_}
    var
     date_ms=Unsafe[1].Date,
     math=Unsafe[1].Math,
     Error=[248,cst_Js_of_ocaml_Js_Error,caml_fresh_oo_id(0)],
     error_constr=Unsafe[1].Error;
    caml_call2(Stdlib_callback[2],cst_jsError,[0,Error,{}]);
    function raise_js_error(exn){throw exn}
    var JSON=Unsafe[1].JSON;
    function decodeURI(s){return Unsafe[1].decodeURI(s)}
    function decodeURIComponent(s){return Unsafe[1].decodeURIComponent(s)}
    function encodeURI(s){return Unsafe[1].encodeURI(s)}
    function encodeURIComponent(s){return Unsafe[1].encodeURIComponent(s)}
    function escape(s){return Unsafe[1].escape(s)}
    function unescape(s){return Unsafe[1].unescape(s)}
    function isNaN(i){return Unsafe[1].isNaN(i) | 0}
    function parseInt(s)
     {var s$0=Unsafe[1].parseInt(s);
      return isNaN(s$0)?caml_call1(Stdlib[2],cst_parseInt):s$0}
    function parseFloat(s)
     {var s$0=Unsafe[1].parseFloat(s);
      return isNaN(s$0)?caml_call1(Stdlib[2],cst_parseFloat):s$0}
    function _a_(param)
     {if(param[1] === Error)
       {var e=param[2];return [0,caml_string_of_jsstring(e.toString())]}
      return 0}
    caml_call1(Stdlib_printexc[9],_a_);
    function _b_(e)
     {return e instanceof array_length
              ?0
              :[0,caml_string_of_jsstring(e.toString())]}
    caml_call1(Stdlib_printexc[9],_b_);
    function string_of_error(e){return caml_string_of_jsstring(e.toString())}
    function export_js(field,x)
     {return runtime.caml_js_export_var(0)[field] = x}
    function export$0(field,x)
     {return export_js(caml_jsstring_of_string(field),x)}
    function export_all(obj)
     {var keys=object_keys(obj);
      return keys.forEach
              (caml_js_wrap_callback
                (function(key,param,_gD_){return export_js(key,obj[key])}))}
    function _c_(_gC_){return _gC_}
    var
     Js_of_ocaml_Js=
      [0,
       no_handler,
       function(_gB_){return _gB_},
       t37,
       _c_,
       Opt,
       Optdef,
       true$0,
       false$0,
       string_constr,
       regExp_withFlags,
       regExp_withFlags,
       regExp_withFlags,
       object_keys,
       array_length,
       array_length,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       math,
       error_constr,
       string_of_error,
       raise_js_error,
       Error,
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       export$0,
       export_all,
       Unsafe];
    caml_register_global(1641,Js_of_ocaml_Js,"Js_of_ocaml__Js");
    function list_of_nodeList(nodeList)
     {var length=nodeList.length,acc=0,i=0;
      for(;;)
       {if(caml_call2(symbol$5,i,length))
         {var _gA_=nodeList.item(i),match=caml_call1(Opt[10],_gA_);
          if(match)
           {var e=match[1],i$0=i + 1 | 0,acc$0=[0,e,acc],acc=acc$0,i=i$0;
            continue}
          var i$1=i + 1 | 0,i=i$1;
          continue}
        return caml_call1(Stdlib_list[9],acc)}}
    var
     disconnected=1,
     preceding=2,
     following=4,
     contains$0=8,
     contained_by=16,
     implementation_specific=32;
    function has(t,mask){return caml_call2(symbol$8,t & mask,mask)}
    function add(x,y){return x | y}
    var
     DocumentPosition=
      [0,
       disconnected,
       preceding,
       following,
       contains$0,
       contained_by,
       implementation_specific,
       has,
       add,
       add];
    function appendChild(p,n){p.appendChild(n);return 0}
    function removeChild(p,n){p.removeChild(n);return 0}
    function replaceChild(p,n,o){p.replaceChild(n,o);return 0}
    function insertBefore(p,n,o){p.insertBefore(n,o);return 0}
    function nodeType(e)
     {var match=e.nodeType;
      if(0 !== match)
       {var switcher=match - 1 | 0;
        switch(switcher)
         {case 0:return [0,e];case 1:return [1,e];case 2:case 3:return [2,e]}}
      return [3,e]}
    function cast(e,t){return e.nodeType === t?e:no_handler}
    function element(e){return cast(e,1)}
    function text(e)
     {if(3 !== e.nodeType && 4 !== e.nodeType)return no_handler;return e}
    function attr(e){return cast(e,2)}
    function handler(f)
     {return function(e)
       {if(caml_call1(Opt[5],e))
         {var res=caml_call1(f,e);
          if(1 - (res | 0))e.preventDefault();
          return res}
        var e$0=event,res$0=caml_call1(f,e$0);
        if(1 - (res$0 | 0))e$0.returnValue = res$0;
        return res$0}}
    function full_handler(f)
     {return runtime.caml_js_wrap_meth_callback_unsafe
              (function(this$0,e)
                {if(caml_call1(Opt[5],e))
                  {var res=caml_call2(f,this$0,e);
                   if(1 - (res | 0))e.preventDefault();
                   return res}
                 var e$0=event,res$0=caml_call2(f,this$0,e$0);
                 if(1 - (res$0 | 0))e$0.returnValue = res$0;
                 return res$0})}
    function invoke_handler(f,this$0,event){return f.call(this$0,event)}
    function eventTarget(e)
     {function _gx_(param)
       {function _gz_(param){throw Stdlib[8]}
        return caml_call2(Opt[8],e.srcElement,_gz_)}
      var target=caml_call2(Opt[8],e.target,_gx_);
      if(target instanceof Unsafe[1].Node)
       {if(3 === target.nodeType)
         {var _gy_=function(param){throw [0,Assert_failure,_d_]};
          return caml_call2(Opt[8],target.parentNode,_gy_)}
        return target}
      return target}
    var make$0=caml_jsstring_of_string,Event=[0,make$0];
    function addEventListenerWithOptions(e,typ,capture,once,passive,h)
     {if(e.addEventListener === t37)
       {var
         ev="on".concat(typ),
         callback=
          function(e)
           {var _gu_=[0,h,e,[0]];
            return function(_gv_,_gw_)
             {return runtime.caml_js_call(_gu_,_gv_,_gw_)}};
        e.attachEvent(ev,callback);
        return function(param){return e.detachEvent(ev,callback)}}
      var opts={};
      function iter(t,f){if(t){var b=t[1];return caml_call1(f,b)}return 0}
      iter(capture,function(b){return opts.capture = b});
      iter(once,function(b){return opts.once = b});
      iter(passive,function(b){return opts.passive = b});
      e.addEventListener(typ,h,opts);
      return function(param){return e.removeEventListener(typ,h,opts)}}
    function addEventListener(e,typ,h,capt)
     {return addEventListenerWithOptions(e,typ,[0,capt],0,0,h)}
    function removeEventListener(id){return caml_call1(id,0)}
    function preventDefault(ev)
     {return caml_call1(Optdef[5],ev.preventDefault)
              ?ev.preventDefault()
              :ev.returnValue = ! ! 0}
    function createCustomEvent(bubbles,cancelable,detail,typ)
     {function opt_iter(f,param)
       {if(param){var x=param[1];return caml_call1(f,x)}return 0}
      var opts={};
      opt_iter(function(x){return opts.bubbles = ! ! x},bubbles);
      opt_iter(function(x){return opts.cancelable = ! ! x},cancelable);
      opt_iter(function(x){return opts.detail = x},detail);
      var constr=Unsafe[1].CustomEvent;
      return new constr(typ,opts)}
    var
     Js_of_ocaml_Dom=
      [0,
       DocumentPosition,
       insertBefore,
       replaceChild,
       removeChild,
       appendChild,
       list_of_nodeList,
       nodeType,
       [0,element,text,attr],
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       Event,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       preventDefault,
       createCustomEvent];
    caml_register_global(1644,Js_of_ocaml_Dom,"Js_of_ocaml__Dom");
    var
     arrayBuffer=Unsafe[1].ArrayBuffer,
     int8Array_inBuffer=Unsafe[1].Int8Array,
     uint8Array_fromBuffer=Unsafe[1].Uint8Array,
     int16Array_inBuffer=Unsafe[1].Int16Array,
     uint16Array_inBuffer=Unsafe[1].Uint16Array,
     int32Array_inBuffer=Unsafe[1].Int32Array,
     uint32Array_inBuffer=Unsafe[1].Uint32Array,
     float32Array_inBuffer=Unsafe[1].Float32Array,
     float64Array_inBuffer=Unsafe[1].Float64Array,
     set=caml_js_set,
     get$1=caml_js_get,
     unsafe_get=caml_js_get,
     dataView=Unsafe[1].DataView;
    function of_arrayBuffer(ab)
     {var uint8=new uint8Array_fromBuffer(ab);
      return caml_string_of_array(uint8)}
    var
     Js_of_ocaml_Typed_array=
      [0,
       arrayBuffer,
       runtime.caml_ba_kind_of_typed_array,
       runtime.caml_ba_to_typed_array,
       runtime.caml_ba_from_typed_array,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       set,
       get$1,
       unsafe_get,
       dataView,
       dataView,
       [0,
        runtime.bigstring_to_array_buffer,
        runtime.bigstring_to_typed_array,
        runtime.bigstring_of_array_buffer,
        runtime.bigstring_of_typed_array],
       [0,of_arrayBuffer,caml_string_of_array]];
    caml_register_global
     (1645,Js_of_ocaml_Typed_array,"Js_of_ocaml__Typed_array");
    var blob_constr=Unsafe[1].Blob;
    function filter_map(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,filter_map(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function blob_raw(contentType,endings,a)
     {var _gq_=0;
      if(endings)
       var _gr_=116179762 <= endings[1]?_e_:_f_,_gs_=_gr_;
      else
       var _gs_=0;
      var
       _gt_=[0,[0,cst_type,contentType],[0,[0,cst_endings,_gs_],_gq_]],
       options=
        filter_map
         (function(param)
           {var v=param[2],name=param[1];
            if(v)
             {var v$0=v[1];return [0,[0,name,caml_jsstring_of_string(v$0)]]}
            return 0},
          _gt_),
       options$0=
        options
         ?runtime.caml_js_object(caml_call1(Stdlib_array[12],options))
         :t37;
      return new blob_constr(caml_js_from_array(a),options$0)}
    function blob_from_string(contentType,endings,s)
     {return blob_raw(contentType,endings,[0,caml_jsstring_of_string(s)])}
    function blob_from_any(contentType,endings,l)
     {function _go_(param)
       {var _gp_=param[1];
        if(155580615 === _gp_){var s=param[2];return s}
        if(486041214 <= _gp_)
         {if(1037850489 <= _gp_){var a=param[2];return a}
          var a$0=param[2];
          return a$0}
        if(288368849 <= _gp_)
         {var s$0=param[2];return caml_jsstring_of_string(s$0)}
        var b=param[2];
        return b}
      var l$0=caml_call2(Stdlib_list[17],_go_,l);
      return blob_raw(contentType,endings,caml_call1(Stdlib_array[12],l$0))}
    function filename(file)
     {var match=caml_call1(Optdef[10],file.name);
      if(match){var name=match[1];return name}
      var match$0=caml_call1(Optdef[10],file.fileName);
      if(match$0){var name$0=match$0[1];return name$0}
      return caml_call1(Stdlib[2],cst_can_t_retrieve_file_name_n)}
    var doc_constr=Unsafe[1].Document;
    function document(e){return e instanceof doc_constr?e:no_handler}
    function blob(e){return e instanceof blob_constr?e:no_handler}
    function string(e){return typeof e === "string"?e:no_handler}
    function arrayBuffer$0(e){return e instanceof arrayBuffer?e:no_handler}
    var
     loadstart=caml_call1(Event[1],cst_loadstart),
     progress=caml_call1(Event[1],cst_progress),
     abort=caml_call1(Event[1],cst_abort),
     error=caml_call1(Event[1],cst_error),
     load=caml_call1(Event[1],cst_load),
     loadend=caml_call1(Event[1],cst_loadend),
     ReaderEvent=[0,loadstart,progress,abort,error,load,loadend],
     fileReader=Unsafe[1].FileReader,
     Js_of_ocaml_File=
      [0,
       blob_from_string,
       blob_from_any,
       [0,document,blob,function(_gn_){return _gn_},string,arrayBuffer$0],
       ReaderEvent,
       filename,
       fileReader,
       addEventListener];
    caml_register_global(1647,Js_of_ocaml_File,"Js_of_ocaml__File");
    var
     onIE=runtime.caml_js_on_ie(0) | 0,
     click=caml_call1(Event[1],cst_click),
     dblclick=caml_call1(Event[1],cst_dblclick),
     mousedown=caml_call1(Event[1],cst_mousedown),
     mouseup=caml_call1(Event[1],cst_mouseup),
     mouseover=caml_call1(Event[1],cst_mouseover),
     mousemove=caml_call1(Event[1],cst_mousemove),
     mouseout=caml_call1(Event[1],cst_mouseout),
     keypress=caml_call1(Event[1],cst_keypress),
     keydown=caml_call1(Event[1],cst_keydown),
     keyup=caml_call1(Event[1],cst_keyup),
     mousewheel=caml_call1(Event[1],cst_mousewheel),
     DOMMouseScroll=caml_call1(Event[1],cst_DOMMouseScroll),
     touchstart=caml_call1(Event[1],cst_touchstart),
     touchmove=caml_call1(Event[1],cst_touchmove),
     touchend=caml_call1(Event[1],cst_touchend),
     touchcancel=caml_call1(Event[1],cst_touchcancel),
     dragstart=caml_call1(Event[1],cst_dragstart),
     dragend=caml_call1(Event[1],cst_dragend),
     dragenter=caml_call1(Event[1],cst_dragenter),
     dragover=caml_call1(Event[1],cst_dragover),
     dragleave=caml_call1(Event[1],cst_dragleave),
     drag=caml_call1(Event[1],cst_drag),
     drop=caml_call1(Event[1],cst_drop),
     hashchange=caml_call1(Event[1],cst_hashchange),
     change=caml_call1(Event[1],cst_change),
     input=caml_call1(Event[1],cst_input),
     timeupdate=caml_call1(Event[1],cst_timeupdate),
     submit=caml_call1(Event[1],cst_submit),
     scroll=caml_call1(Event[1],cst_scroll),
     focus=caml_call1(Event[1],cst_focus),
     blur=caml_call1(Event[1],cst_blur),
     load$0=caml_call1(Event[1],cst_load$0),
     unload=caml_call1(Event[1],cst_unload),
     beforeunload=caml_call1(Event[1],cst_beforeunload),
     resize=caml_call1(Event[1],cst_resize),
     orientationchange=caml_call1(Event[1],cst_orientationchange),
     popstate=caml_call1(Event[1],cst_popstate),
     error$0=caml_call1(Event[1],cst_error$0),
     abort$0=caml_call1(Event[1],cst_abort$0),
     select=caml_call1(Event[1],cst_select),
     online=caml_call1(Event[1],cst_online),
     offline=caml_call1(Event[1],cst_offline),
     checking=caml_call1(Event[1],cst_checking),
     noupdate=caml_call1(Event[1],cst_noupdate),
     downloading=caml_call1(Event[1],cst_downloading),
     progress$0=caml_call1(Event[1],cst_progress$0),
     updateready=caml_call1(Event[1],cst_updateready),
     cached=caml_call1(Event[1],cst_cached),
     obsolete=caml_call1(Event[1],cst_obsolete),
     domContentLoaded=caml_call1(Event[1],cst_DOMContentLoaded),
     animationstart=caml_call1(Event[1],cst_animationstart),
     animationend=caml_call1(Event[1],cst_animationend),
     animationiteration=caml_call1(Event[1],cst_animationiteration),
     animationcancel=caml_call1(Event[1],cst_animationcancel),
     canplay=caml_call1(Event[1],cst_canplay),
     canplaythrough=caml_call1(Event[1],cst_canplaythrough),
     durationchange=caml_call1(Event[1],cst_durationchange),
     emptied=caml_call1(Event[1],cst_emptied),
     ended=caml_call1(Event[1],cst_ended),
     gotpointercapture=caml_call1(Event[1],cst_gotpointercapture),
     loadeddata=caml_call1(Event[1],cst_loadeddata),
     loadedmetadata=caml_call1(Event[1],cst_loadedmetadata),
     loadstart$0=caml_call1(Event[1],cst_loadstart$0),
     lostpointercapture=caml_call1(Event[1],cst_lostpointercapture),
     pause=caml_call1(Event[1],cst_pause),
     play=caml_call1(Event[1],cst_play),
     playing=caml_call1(Event[1],cst_playing),
     pointerenter=caml_call1(Event[1],cst_pointerenter),
     pointercancel=caml_call1(Event[1],cst_pointercancel),
     pointerdown=caml_call1(Event[1],cst_pointerdown),
     pointerleave=caml_call1(Event[1],cst_pointerleave),
     pointermove=caml_call1(Event[1],cst_pointermove),
     pointerout=caml_call1(Event[1],cst_pointerout),
     pointerover=caml_call1(Event[1],cst_pointerover),
     pointerup=caml_call1(Event[1],cst_pointerup),
     ratechange=caml_call1(Event[1],cst_ratechange),
     seeked=caml_call1(Event[1],cst_seeked),
     seeking=caml_call1(Event[1],cst_seeking),
     stalled=caml_call1(Event[1],cst_stalled),
     suspend=caml_call1(Event[1],cst_suspend),
     volumechange=caml_call1(Event[1],cst_volumechange),
     waiting=caml_call1(Event[1],cst_waiting),
     make$1=Event[1],
     Event$0=
      [0,
       click,
       dblclick,
       mousedown,
       mouseup,
       mouseover,
       mousemove,
       mouseout,
       keypress,
       keydown,
       keyup,
       mousewheel,
       DOMMouseScroll,
       touchstart,
       touchmove,
       touchend,
       touchcancel,
       dragstart,
       dragend,
       dragenter,
       dragover,
       dragleave,
       drag,
       drop,
       hashchange,
       change,
       input,
       timeupdate,
       submit,
       scroll,
       focus,
       blur,
       load$0,
       unload,
       beforeunload,
       resize,
       orientationchange,
       popstate,
       error$0,
       abort$0,
       select,
       online,
       offline,
       checking,
       noupdate,
       downloading,
       progress$0,
       updateready,
       cached,
       obsolete,
       domContentLoaded,
       animationstart,
       animationend,
       animationiteration,
       animationcancel,
       canplay,
       canplaythrough,
       durationchange,
       emptied,
       ended,
       gotpointercapture,
       loadeddata,
       loadedmetadata,
       loadstart$0,
       lostpointercapture,
       pause,
       play,
       playing,
       pointerenter,
       pointercancel,
       pointerdown,
       pointerleave,
       pointermove,
       pointerout,
       pointerover,
       pointerup,
       ratechange,
       seeked,
       seeking,
       stalled,
       suspend,
       volumechange,
       waiting,
       make$1],
     d="2d";
    function location_origin(loc)
     {function _gl_(o){return o}
      function _gm_(param)
       {var protocol=loc.protocol,hostname=loc.hostname,port=loc.port;
        if
         (caml_call2(symbol$8,protocol.length,0)
          &&
          caml_call2(symbol$8,hostname.length,0))
         return "";
        var origin=protocol.concat("//",hostname);
        return caml_call2(symbol$9,port.length,0)
                ?origin.concat(":",loc.port)
                :origin}
      return caml_call3(Optdef[7],loc.origin,_gm_,_gl_)}
    var _g_=Unsafe[1],document$0=_g_.document;
    function getElementById(id)
     {function _gi_(pnode){return pnode}
      function _gj_(param){throw Stdlib[8]}
      var _gk_=document$0.getElementById(caml_jsstring_of_string(id));
      return caml_call3(Opt[7],_gk_,_gj_,_gi_)}
    function getElementById_exn(id)
     {function _ge_(pnode){return pnode}
      function _gf_(param)
       {var _gh_=caml_call2(Stdlib_printf[4],_h_,id);
        return caml_call1(Stdlib[2],_gh_)}
      var _gg_=document$0.getElementById(caml_jsstring_of_string(id));
      return caml_call3(Opt[7],_gg_,_gf_,_ge_)}
    function getElementById_opt(id)
     {var _gd_=document$0.getElementById(caml_jsstring_of_string(id));
      return caml_call1(Opt[10],_gd_)}
    function getElementById_coerce(id,coerce)
     {function _f$_(e)
       {var _gc_=caml_call1(coerce,e);return caml_call1(Opt[10],_gc_)}
      function _ga_(param){return 0}
      var _gb_=document$0.getElementById(caml_jsstring_of_string(id));
      return caml_call3(Opt[7],_gb_,_ga_,_f$_)}
    function opt_iter(x,f){if(x){var v=x[1];return caml_call1(f,v)}return 0}
    function createElement(doc,name)
     {return doc.createElement(caml_jsstring_of_string(name))}
    function unsafeCreateElement(doc,name){return createElement(doc,name)}
    var createElementSyntax=[0,785140586];
    function unsafeCreateElementEx(type,name,doc,elt)
     {for(;;)
       {if(0 === type && 0 === name)return createElement(doc,elt);
        var _f5_=createElementSyntax[1];
        if(785140586 === _f5_)
         {try
           {var
             el=document$0.createElement('<input name="x">'),
             _f8_=el.tagName.toLowerCase() === "input"?1:0,
             _f9_=_f8_?el.name === "x"?1:0:_f8_,
             _f6_=_f9_}
          catch(_f__){var _f6_=0}
          var _f7_=_f6_?982028505:-1003883683;
          createElementSyntax[1] = _f7_;
          continue}
        if(982028505 <= _f5_)
         {var a=new array_length();
          a.push("<",caml_jsstring_of_string(elt));
          opt_iter
           (type,
            function(t){a.push(' type="',caml_js_html_escape(t),'"');return 0});
          opt_iter
           (name,
            function(n){a.push(' name="',caml_js_html_escape(n),'"');return 0});
          a.push(">");
          return doc.createElement(a.join(""))}
        var res=createElement(doc,elt);
        opt_iter(type,function(t){return res.type = t});
        opt_iter(name,function(n){return res.name = n});
        return res}}
    function createHtml(doc){return unsafeCreateElement(doc,cst_html)}
    function createHead(doc){return unsafeCreateElement(doc,cst_head)}
    function createLink(doc){return unsafeCreateElement(doc,cst_link)}
    function createTitle(doc){return unsafeCreateElement(doc,cst_title)}
    function createMeta(doc){return unsafeCreateElement(doc,cst_meta)}
    function createBase(doc){return unsafeCreateElement(doc,cst_base)}
    function createStyle(doc){return unsafeCreateElement(doc,cst_style)}
    function createBody(doc){return unsafeCreateElement(doc,cst_body)}
    function createForm(doc){return unsafeCreateElement(doc,cst_form)}
    function createOptgroup(doc){return unsafeCreateElement(doc,cst_optgroup)}
    function createOption(doc){return unsafeCreateElement(doc,cst_option)}
    function createSelect(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_select$0)}
    function createInput(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_input$0)}
    function createTextarea(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_textarea)}
    function createButton(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_button)}
    function createLabel(doc){return unsafeCreateElement(doc,cst_label)}
    function createFieldset(doc){return unsafeCreateElement(doc,cst_fieldset)}
    function createLegend(doc){return unsafeCreateElement(doc,cst_legend)}
    function createUl(doc){return unsafeCreateElement(doc,cst_ul)}
    function createOl(doc){return unsafeCreateElement(doc,cst_ol)}
    function createDl(doc){return unsafeCreateElement(doc,cst_dl)}
    function createLi(doc){return unsafeCreateElement(doc,cst_li)}
    function createDiv(doc){return unsafeCreateElement(doc,cst_div)}
    function createEmbed(doc){return unsafeCreateElement(doc,cst_embed)}
    function createP(doc){return unsafeCreateElement(doc,cst_p)}
    function createH1(doc){return unsafeCreateElement(doc,cst_h1)}
    function createH2(doc){return unsafeCreateElement(doc,cst_h2)}
    function createH3(doc){return unsafeCreateElement(doc,cst_h3)}
    function createH4(doc){return unsafeCreateElement(doc,cst_h4)}
    function createH5(doc){return unsafeCreateElement(doc,cst_h5)}
    function createH6(doc){return unsafeCreateElement(doc,cst_h6)}
    function createQ(doc){return unsafeCreateElement(doc,cst_q)}
    function createBlockquote(doc)
     {return unsafeCreateElement(doc,cst_blockquote)}
    function createPre(doc){return unsafeCreateElement(doc,cst_pre)}
    function createBr(doc){return unsafeCreateElement(doc,cst_br)}
    function createHr(doc){return unsafeCreateElement(doc,cst_hr)}
    function createIns(doc){return unsafeCreateElement(doc,cst_ins)}
    function createDel(doc){return unsafeCreateElement(doc,cst_del)}
    function createA(doc){return unsafeCreateElement(doc,cst_a)}
    function createImg(doc){return unsafeCreateElement(doc,cst_img)}
    function createObject(doc){return unsafeCreateElement(doc,cst_object)}
    function createParam(doc){return unsafeCreateElement(doc,cst_param)}
    function createMap(doc){return unsafeCreateElement(doc,cst_map)}
    function createArea(doc){return unsafeCreateElement(doc,cst_area)}
    function createScript(doc){return unsafeCreateElement(doc,cst_script)}
    function createTable(doc){return unsafeCreateElement(doc,cst_table)}
    function createCaption(doc){return unsafeCreateElement(doc,cst_caption)}
    function createCol(doc){return unsafeCreateElement(doc,cst_col)}
    function createColgroup(doc){return unsafeCreateElement(doc,cst_colgroup)}
    function createThead(doc){return unsafeCreateElement(doc,cst_thead)}
    function createTfoot(doc){return unsafeCreateElement(doc,cst_tfoot)}
    function createTbody(doc){return unsafeCreateElement(doc,cst_tbody)}
    function createTr(doc){return unsafeCreateElement(doc,cst_tr)}
    function createTh(doc){return unsafeCreateElement(doc,cst_th)}
    function createTd(doc){return unsafeCreateElement(doc,cst_td)}
    function createSub(doc){return createElement(doc,cst_sub)}
    function createSup(doc){return createElement(doc,cst_sup)}
    function createSpan(doc){return createElement(doc,cst_span)}
    function createTt(doc){return createElement(doc,cst_tt)}
    function createI(doc){return createElement(doc,cst_i)}
    function createB(doc){return createElement(doc,cst_b)}
    function createBig(doc){return createElement(doc,cst_big)}
    function createSmall(doc){return createElement(doc,cst_small)}
    function createEm(doc){return createElement(doc,cst_em)}
    function createStrong(doc){return createElement(doc,cst_strong)}
    function createCite(doc){return createElement(doc,cst_cite)}
    function createDfn(doc){return createElement(doc,cst_dfn)}
    function createCode(doc){return createElement(doc,cst_code)}
    function createSamp(doc){return createElement(doc,cst_samp)}
    function createKbd(doc){return createElement(doc,cst_kbd)}
    function createVar(doc){return createElement(doc,cst_var)}
    function createAbbr(doc){return createElement(doc,cst_abbr)}
    function createDd(doc){return createElement(doc,cst_dd)}
    function createDt(doc){return createElement(doc,cst_dt)}
    function createNoscript(doc){return createElement(doc,cst_noscript)}
    function createAddress(doc){return createElement(doc,cst_address)}
    function createFrameset(doc){return unsafeCreateElement(doc,cst_frameset)}
    function createFrame(doc){return unsafeCreateElement(doc,cst_frame)}
    function createIframe(doc){return unsafeCreateElement(doc,cst_iframe)}
    function createAudio(doc){return unsafeCreateElement(doc,cst_audio)}
    function createVideo(doc){return unsafeCreateElement(doc,cst_video)}
    var
     Canvas_not_available=
      [248,cst_Js_of_ocaml_Dom_html_Canva,caml_fresh_oo_id(0)];
    function createCanvas(doc)
     {var c=unsafeCreateElement(doc,cst_canvas);
      if(1 - caml_call1(Opt[5],c.getContext))throw Canvas_not_available;
      return c}
    var
     html_element=Unsafe[1].HTMLElement,
     element$0=
      html_element === t37
       ?function(e){return e.innerHTML === t37?no_handler:e}
       :function(e){return e instanceof html_element?e:no_handler};
    function unsafeCoerce(tag,e)
     {var _f4_=caml_jsstring_of_string(tag);
      return e.tagName.toLowerCase() === _f4_?e:no_handler}
    function a(e){return unsafeCoerce(cst_a$0,e)}
    function area(e){return unsafeCoerce(cst_area$0,e)}
    function base(e){return unsafeCoerce(cst_base$0,e)}
    function blockquote(e){return unsafeCoerce(cst_blockquote$0,e)}
    function body(e){return unsafeCoerce(cst_body$0,e)}
    function br(e){return unsafeCoerce(cst_br$0,e)}
    function button(e){return unsafeCoerce(cst_button$0,e)}
    function canvas(e){return unsafeCoerce(cst_canvas$0,e)}
    function caption(e){return unsafeCoerce(cst_caption$0,e)}
    function col(e){return unsafeCoerce(cst_col$0,e)}
    function colgroup(e){return unsafeCoerce(cst_colgroup$0,e)}
    function del(e){return unsafeCoerce(cst_del$0,e)}
    function div(e){return unsafeCoerce(cst_div$0,e)}
    function dl(e){return unsafeCoerce(cst_dl$0,e)}
    function fieldset(e){return unsafeCoerce(cst_fieldset$0,e)}
    function embed(e){return unsafeCoerce(cst_embed$0,e)}
    function form(e){return unsafeCoerce(cst_form$0,e)}
    function frameset(e){return unsafeCoerce(cst_frameset$0,e)}
    function frame(e){return unsafeCoerce(cst_frame$0,e)}
    function h1(e){return unsafeCoerce(cst_h1$0,e)}
    function h2(e){return unsafeCoerce(cst_h2$0,e)}
    function h3(e){return unsafeCoerce(cst_h3$0,e)}
    function h4(e){return unsafeCoerce(cst_h4$0,e)}
    function h5(e){return unsafeCoerce(cst_h5$0,e)}
    function h6(e){return unsafeCoerce(cst_h6$0,e)}
    function head(e){return unsafeCoerce(cst_head$0,e)}
    function hr(e){return unsafeCoerce(cst_hr$0,e)}
    function html(e){return unsafeCoerce(cst_html$0,e)}
    function iframe(e){return unsafeCoerce(cst_iframe$0,e)}
    function img(e){return unsafeCoerce(cst_img$0,e)}
    function input$0(e){return unsafeCoerce(cst_input$1,e)}
    function ins(e){return unsafeCoerce(cst_ins$0,e)}
    function label(e){return unsafeCoerce(cst_label$0,e)}
    function legend(e){return unsafeCoerce(cst_legend$0,e)}
    function li(e){return unsafeCoerce(cst_li$0,e)}
    function link(e){return unsafeCoerce(cst_link$0,e)}
    function map$2(e){return unsafeCoerce(cst_map$0,e)}
    function meta(e){return unsafeCoerce(cst_meta$0,e)}
    function object(e){return unsafeCoerce(cst_object$0,e)}
    function ol(e){return unsafeCoerce(cst_ol$0,e)}
    function optgroup(e){return unsafeCoerce(cst_optgroup$0,e)}
    function option$1(e){return unsafeCoerce(cst_option$0,e)}
    function p(e){return unsafeCoerce(cst_p$0,e)}
    function param(e){return unsafeCoerce(cst_param$0,e)}
    function pre(e){return unsafeCoerce(cst_pre$0,e)}
    function q(e){return unsafeCoerce(cst_q$0,e)}
    function script(e){return unsafeCoerce(cst_script$0,e)}
    function select$0(e){return unsafeCoerce(cst_select$1,e)}
    function style(e){return unsafeCoerce(cst_style$0,e)}
    function table(e){return unsafeCoerce(cst_table$0,e)}
    function tbody(e){return unsafeCoerce(cst_tbody$0,e)}
    function td(e){return unsafeCoerce(cst_td$0,e)}
    function textarea(e){return unsafeCoerce(cst_textarea$0,e)}
    function tfoot(e){return unsafeCoerce(cst_tfoot$0,e)}
    function th(e){return unsafeCoerce(cst_th$0,e)}
    function thead(e){return unsafeCoerce(cst_thead$0,e)}
    function title(e){return unsafeCoerce(cst_title$0,e)}
    function tr(e){return unsafeCoerce(cst_tr$0,e)}
    function ul(e){return unsafeCoerce(cst_ul$0,e)}
    function audio(e){return unsafeCoerce(cst_audio$0,e)}
    function video(e){return unsafeCoerce(cst_video$0,e)}
    function unsafeCoerceEvent(constr,ev)
     {if(constr !== t37 && ev instanceof constr)return ev;return no_handler}
    function mouseEvent(ev){return unsafeCoerceEvent(Unsafe[1].MouseEvent,ev)}
    function keyboardEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].KeyboardEvent,ev)}
    function wheelEvent(ev){return unsafeCoerceEvent(Unsafe[1].WheelEvent,ev)}
    function mouseScrollEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].MouseScrollEvent,ev)}
    function popStateEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].PopStateEvent,ev)}
    function eventRelatedTarget(e)
     {function _f1_(param)
       {var match=caml_string_of_jsstring(e.type);
        if(caml_string_notequal(match,cst_mouseout$0))
         {if(caml_string_notequal(match,cst_mouseover$0))return no_handler;
          var _f2_=function(param){throw [0,Assert_failure,_i_]};
          return caml_call2(Optdef[8],e.fromElement,_f2_)}
        function _f3_(param){throw [0,Assert_failure,_j_]}
        return caml_call2(Optdef[8],e.toElement,_f3_)}
      return caml_call2(Optdef[8],e.relatedTarget,_f1_)}
    function eventAbsolutePosition(e)
     {var body=document$0.body,html=document$0.documentElement;
      return [0,
              (e.clientX + body.scrollLeft | 0) + html.scrollLeft | 0,
              (e.clientY + body.scrollTop | 0) + html.scrollTop | 0]}
    function eventAbsolutePosition$0(e)
     {function _fX_(x)
       {function _fZ_(y){return [0,x,y]}
        function _f0_(param){return eventAbsolutePosition(e)}
        return caml_call3(Optdef[7],e.pageY,_f0_,_fZ_)}
      function _fY_(param){return eventAbsolutePosition(e)}
      return caml_call3(Optdef[7],e.pageX,_fY_,_fX_)}
    function elementClientPosition(e)
     {var
       r=e.getBoundingClientRect(),
       body=document$0.body,
       html=document$0.documentElement;
      return [0,
              ((r.left | 0) - body.clientLeft | 0) - html.clientLeft | 0,
              ((r.top | 0) - body.clientTop | 0) - html.clientTop | 0]}
    function getDocumentScroll(param)
     {var body=document$0.body,html=document$0.documentElement;
      return [0,
              body.scrollLeft + html.scrollLeft | 0,
              body.scrollTop + html.scrollTop | 0]}
    function buttonPressed(ev)
     {function _fV_(x){return x}
      function _fW_(param)
       {var match=ev.button,switcher=match - 1 | 0;
        if(! (3 < switcher >>> 0))
         switch(switcher)
          {case 0:return 1;case 1:return 3;case 2:break;default:return 2}
        return 0}
      return caml_call3(Optdef[7],ev.which,_fW_,_fV_)}
    function addMousewheelEventListenerWith(e,capture,once,passive,h)
     {var d=createDiv(document$0);
      d.setAttribute("onmousewheel","return;");
      if(typeof d.onmousewheel === "function")
       {var
         _fR_=
          handler
           (function(e)
             {function _fT_(param){return 0}
              var
               dx=
                (- caml_call2(Optdef[8],e.wheelDeltaX,_fT_) | 0) / 40 | 0;
              function _fU_(param){return e.wheelDelta}
              var
               dy=
                (- caml_call2(Optdef[8],e.wheelDeltaY,_fU_) | 0) / 40 | 0;
              return caml_call3(h,e,dx,dy)});
        return addEventListenerWithOptions
                (e,Event$0[11],capture,once,passive,_fR_)}
      var
       _fS_=
        handler
         (function(e)
           {var d=e.detail;
            return e.axis === e.HORIZONTAL
                    ?caml_call3(h,e,d,0)
                    :caml_call3(h,e,0,d)});
      return addEventListenerWithOptions
              (e,Event$0[12],capture,once,passive,_fS_)}
    function addMousewheelEventListener(e,h,capt)
     {return addMousewheelEventListenerWith(e,[0,capt],0,0,h)}
    function f(v)
     {var
       match=caml_string_of_jsstring(v),
       switch$0=caml_string_compare(match,cst_KeyH);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 8;
        var switch$1=caml_string_compare(match,cst_Numpad4);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 72;
          var switch$2=caml_string_compare(match,cst_PageUp);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 98;
            var switch$3=caml_string_compare(match,cst_ShiftRight);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 91;
              if(! caml_string_notequal(match,cst_Slash))return 55;
              if(! caml_string_notequal(match,cst_Space))return 41;
              if(! caml_string_notequal(match,cst_Tab))return 39;
              if(! caml_string_notequal(match,cst_VolumeDown))return 103;
              if(! caml_string_notequal(match,cst_VolumeMute))return 102;
              if(! caml_string_notequal(match,cst_VolumeUp))return 104}
            else
             {if(! caml_string_notequal(match,cst_Pause))return 123;
              if(! caml_string_notequal(match,cst_Period))return 54;
              if(! caml_string_notequal(match,cst_PrintScreen))return 120;
              if(! caml_string_notequal(match,cst_Quote))return 50;
              if(! caml_string_notequal(match,cst_ScrollLock))return 119;
              if(! caml_string_notequal(match,cst_Semicolon))return 49;
              if(! caml_string_notequal(match,cst_ShiftLeft))return 90}}
          else
           {var switch$4=caml_string_compare(match,cst_NumpadDivide);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 84;
              if(! caml_string_notequal(match,cst_NumpadEnter))return 83;
              if(! caml_string_notequal(match,cst_NumpadEqual))return 82;
              if(! caml_string_notequal(match,cst_NumpadMultiply))return 78;
              if(! caml_string_notequal(match,cst_NumpadSubtract))return 79;
              if(! caml_string_notequal(match,cst_OSLeft))return 117;
              if(! caml_string_notequal(match,cst_OSRight))return 118;
              if(! caml_string_notequal(match,cst_PageDown))return 99}
            else
             {if(! caml_string_notequal(match,cst_Numpad5))return 73;
              if(! caml_string_notequal(match,cst_Numpad6))return 74;
              if(! caml_string_notequal(match,cst_Numpad7))return 75;
              if(! caml_string_notequal(match,cst_Numpad8))return 76;
              if(! caml_string_notequal(match,cst_Numpad9))return 77;
              if(! caml_string_notequal(match,cst_NumpadAdd))return 80;
              if(! caml_string_notequal(match,cst_NumpadDecimal))return 81}}}
        else
         {var switch$5=caml_string_compare(match,cst_KeyX);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 24;
            var switch$6=caml_string_compare(match,cst_MetaRight);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 89;
              if(! caml_string_notequal(match,cst_Minus))return 37;
              if(! caml_string_notequal(match,cst_NumLock))return 85;
              if(! caml_string_notequal(match,cst_Numpad0))return 68;
              if(! caml_string_notequal(match,cst_Numpad1))return 69;
              if(! caml_string_notequal(match,cst_Numpad2))return 70;
              if(! caml_string_notequal(match,cst_Numpad3))return 71}
            else
             {if(! caml_string_notequal(match,cst_KeyY))return 25;
              if(! caml_string_notequal(match,cst_KeyZ))return 26;
              if(! caml_string_notequal(match,cst_MediaPlayPause))return 107;
              if(! caml_string_notequal(match,cst_MediaStop))return 108;
              if(! caml_string_notequal(match,cst_MediaTrackNext))return 106;
              if(! caml_string_notequal(match,cst_MediaTrackPrevious))
               return 105;
              if(! caml_string_notequal(match,cst_MetaLeft))return 88}}
          else
           {var switch$7=caml_string_compare(match,cst_KeyP);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 16;
              if(! caml_string_notequal(match,cst_KeyQ))return 17;
              if(! caml_string_notequal(match,cst_KeyR))return 18;
              if(! caml_string_notequal(match,cst_KeyS))return 19;
              if(! caml_string_notequal(match,cst_KeyT))return 20;
              if(! caml_string_notequal(match,cst_KeyU))return 21;
              if(! caml_string_notequal(match,cst_KeyV))return 22;
              if(! caml_string_notequal(match,cst_KeyW))return 23}
            else
             {if(! caml_string_notequal(match,cst_KeyI))return 9;
              if(! caml_string_notequal(match,cst_KeyJ))return 10;
              if(! caml_string_notequal(match,cst_KeyK))return 11;
              if(! caml_string_notequal(match,cst_KeyL))return 12;
              if(! caml_string_notequal(match,cst_KeyM))return 13;
              if(! caml_string_notequal(match,cst_KeyN))return 14;
              if(! caml_string_notequal(match,cst_KeyO))return 15}}}}
      else
       {var switch$8=caml_string_compare(match,cst_Digit6);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 33;
          var switch$9=caml_string_compare(match,cst_F6);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 61;
            var switch$10=caml_string_compare(match,cst_KeyA);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 1;
              if(! caml_string_notequal(match,cst_KeyB))return 2;
              if(! caml_string_notequal(match,cst_KeyC))return 3;
              if(! caml_string_notequal(match,cst_KeyD))return 4;
              if(! caml_string_notequal(match,cst_KeyE))return 5;
              if(! caml_string_notequal(match,cst_KeyF))return 6;
              if(! caml_string_notequal(match,cst_KeyG))return 7}
            else
             {if(! caml_string_notequal(match,cst_F7))return 62;
              if(! caml_string_notequal(match,cst_F8))return 63;
              if(! caml_string_notequal(match,cst_F9))return 64;
              if(! caml_string_notequal(match,cst_Home))return 100;
              if(! caml_string_notequal(match,cst_Insert))return 44;
              if(! caml_string_notequal(match,cst_IntlBackslash))return 121;
              if(! caml_string_notequal(match,cst_IntlYen))return 122}}
          else
           {var switch$11=caml_string_compare(match,cst_F1);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 56;
              if(! caml_string_notequal(match,cst_F10))return 65;
              if(! caml_string_notequal(match,cst_F11))return 66;
              if(! caml_string_notequal(match,cst_F12))return 67;
              if(! caml_string_notequal(match,cst_F2))return 57;
              if(! caml_string_notequal(match,cst_F3))return 58;
              if(! caml_string_notequal(match,cst_F4))return 59;
              if(! caml_string_notequal(match,cst_F5))return 60}
            else
             {if(! caml_string_notequal(match,cst_Digit7))return 34;
              if(! caml_string_notequal(match,cst_Digit8))return 35;
              if(! caml_string_notequal(match,cst_Digit9))return 36;
              if(! caml_string_notequal(match,cst_End))return 101;
              if(! caml_string_notequal(match,cst_Enter))return 40;
              if(! caml_string_notequal(match,cst_Equal))return 38;
              if(! caml_string_notequal(match,cst_Escape))return 42}}}
        else
         {var switch$12=caml_string_compare(match,cst_BrowserRefresh);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 113;
            var switch$13=caml_string_compare(match,cst_Delete);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 45;
              if(! caml_string_notequal(match,cst_Digit0))return 27;
              if(! caml_string_notequal(match,cst_Digit1))return 28;
              if(! caml_string_notequal(match,cst_Digit2))return 29;
              if(! caml_string_notequal(match,cst_Digit3))return 30;
              if(! caml_string_notequal(match,cst_Digit4))return 31;
              if(! caml_string_notequal(match,cst_Digit5))return 32}
            else
             {if(! caml_string_notequal(match,cst_BrowserSearch))return 110;
              if(! caml_string_notequal(match,cst_BrowserStop))return 114;
              if(! caml_string_notequal(match,cst_CapsLock))return 46;
              if(! caml_string_notequal(match,cst_Comma))return 53;
              if(! caml_string_notequal(match,cst_ContextMenu))return 109;
              if(! caml_string_notequal(match,cst_ControlLeft))return 86;
              if(! caml_string_notequal(match,cst_ControlRight))return 87}}
          else
           {var switch$14=caml_string_compare(match,cst_Backslash);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 52;
              if(! caml_string_notequal(match,cst_Backspace))return 43;
              if(! caml_string_notequal(match,cst_BracketLeft))return 47;
              if(! caml_string_notequal(match,cst_BracketRight))return 48;
              if(! caml_string_notequal(match,cst_BrowserBack))return 116;
              if(! caml_string_notequal(match,cst_BrowserFavorites))
               return 112;
              if(! caml_string_notequal(match,cst_BrowserForward))return 115;
              if(! caml_string_notequal(match,cst_BrowserHome))return 111}
            else
             {if(! caml_string_notequal(match,cst_AltLeft))return 92;
              if(! caml_string_notequal(match,cst_AltRight))return 93;
              if(! caml_string_notequal(match,cst_ArrowDown))return 97;
              if(! caml_string_notequal(match,cst_ArrowLeft))return 94;
              if(! caml_string_notequal(match,cst_ArrowRight))return 95;
              if(! caml_string_notequal(match,cst_ArrowUp))return 96;
              if(! caml_string_notequal(match,cst_Backquote))return 51}}}}
      return 0}
    function try_key_code_left(param)
     {if(19 <= param)
       {if(91 === param)return 88}
      else
       if(16 <= param)
        {var switcher=param - 16 | 0;
         switch(switcher){case 0:return 90;case 1:return 86;default:return 92}}
      return 0}
    function try_key_code_right(param)
     {if(19 <= param)
       {if(91 === param)return 89}
      else
       if(16 <= param)
        {var switcher=param - 16 | 0;
         switch(switcher){case 0:return 91;case 1:return 87;default:return 93}}
      return 0}
    function try_key_code_numpad(param)
     {if(47 <= param)
       {var switcher=param - 96 | 0;
        if(! (15 < switcher >>> 0))
         switch(switcher)
          {case 0:return 68;
           case 1:return 69;
           case 2:return 70;
           case 3:return 71;
           case 4:return 72;
           case 5:return 73;
           case 6:return 74;
           case 7:return 75;
           case 8:return 76;
           case 9:return 77;
           case 10:return 78;
           case 11:return 80;
           case 12:break;
           case 13:return 79;
           case 14:return 81;
           default:return 84}}
      else
       if(12 <= param)
        {var switcher$0=param - 12 | 0;
         switch(switcher$0)
          {case 0:return 73;
           case 1:return 83;
           case 21:return 77;
           case 22:return 71;
           case 23:return 69;
           case 24:return 75;
           case 25:return 72;
           case 26:return 76;
           case 27:return 74;
           case 28:return 70;
           case 33:return 68;
           case 34:return 81
           }}
      return 0}
    function try_key_code_normal(param)
     {var switcher=param - 8 | 0;
      if(! (214 < switcher >>> 0))
       {var _fQ_=switcher;
        if(67 <= _fQ_)
         switch(_fQ_)
          {case 67:return 11;
           case 68:return 12;
           case 69:return 13;
           case 70:return 14;
           case 71:return 15;
           case 72:return 16;
           case 73:return 17;
           case 74:return 18;
           case 75:return 19;
           case 76:return 20;
           case 77:return 21;
           case 78:return 22;
           case 79:return 23;
           case 80:return 24;
           case 81:return 25;
           case 82:return 26;
           case 85:return 109;
           case 104:return 56;
           case 105:return 57;
           case 106:return 58;
           case 107:return 59;
           case 108:return 60;
           case 109:return 61;
           case 110:return 62;
           case 111:return 63;
           case 112:return 64;
           case 113:return 65;
           case 114:return 66;
           case 115:return 67;
           case 137:return 119;
           case 178:return 49;
           case 179:return 38;
           case 180:return 53;
           case 181:return 37;
           case 182:return 54;
           case 183:return 55;
           case 184:return 51;
           case 211:return 47;
           case 212:return 52;
           case 213:return 48;
           case 214:return 50
           }
        else
         switch(_fQ_)
          {case 0:return 43;
           case 1:return 39;
           case 5:return 40;
           case 11:return 123;
           case 12:return 46;
           case 19:return 42;
           case 24:return 41;
           case 25:return 98;
           case 26:return 99;
           case 27:return 101;
           case 28:return 100;
           case 29:return 94;
           case 30:return 96;
           case 31:return 95;
           case 32:return 97;
           case 34:return 120;
           case 37:return 44;
           case 38:return 45;
           case 40:return 27;
           case 41:return 28;
           case 42:return 29;
           case 43:return 30;
           case 44:return 31;
           case 45:return 32;
           case 46:return 33;
           case 47:return 34;
           case 48:return 35;
           case 49:return 36;
           case 57:return 1;
           case 58:return 2;
           case 59:return 3;
           case 60:return 4;
           case 61:return 5;
           case 62:return 6;
           case 63:return 7;
           case 64:return 8;
           case 65:return 9;
           case 66:return 10
           }}
      return 0}
    function make_unidentified(param){return 0}
    function run_next(value,f,v){return 0 === v?caml_call1(f,value):v}
    function symbol$11(x,f){return caml_call1(f,x)}
    function of_event(evt)
     {var _fJ_=evt.keyCode;
      function _fK_(_fP_){return run_next(_fJ_,try_key_code_normal,_fP_)}
      var match=evt.location,switcher=match - 1 | 0;
      if(2 < switcher >>> 0)
       var _fL_=make_unidentified;
      else
       switch(switcher)
        {case 0:
          var
           _fG_=evt.keyCode,
           _fL_=function(_fN_){return run_next(_fG_,try_key_code_left,_fN_)};
          break;
         case 1:
          var
           _fH_=evt.keyCode,
           _fL_=function(_fM_){return run_next(_fH_,try_key_code_right,_fM_)};
          break;
         default:
          var
           _fI_=evt.keyCode,
           _fL_=function(_fO_){return run_next(_fI_,try_key_code_numpad,_fO_)}}
      var value=evt.code;
      return symbol$11
              (symbol$11
                (symbol$11
                  (0,
                   function(v)
                    {return 0 === v
                             ?caml_call3(Optdef[7],value,make_unidentified,f)
                             :v}),
                 _fL_),
               _fK_)}
    function char_of_int(value)
     {if(caml_call2(symbol$5,0,value))
       try
        {var _fE_=[0,caml_call1(Stdlib_uchar[8],value)];return _fE_}
       catch(_fF_){return 0}
      return 0}
    function empty_string(param){return ""}
    function none(param){return 0}
    function of_event$0(evt)
     {var key=caml_call2(Optdef[8],evt.key,empty_string),match=key.length;
      return 0 === match
              ?caml_call3(Optdef[7],evt.charCode,none,char_of_int)
              :1 === match?char_of_int(key.charCodeAt(0) | 0):0}
    function element$1(_fD_){return _fD_}
    function tagged(e)
     {var tag=caml_string_of_jsbytes(e.tagName.toLowerCase());
      if(caml_call2(symbol$8,caml_ml_string_length(tag),0))return [61,e];
      var match=runtime.caml_string_unsafe_get(tag,0),switcher=match - 97 | 0;
      if(! (21 < switcher >>> 0))
       switch(switcher)
        {case 0:
          return caml_string_notequal(tag,cst_a$1)
                  ?caml_string_notequal(tag,cst_area$1)
                    ?caml_string_notequal(tag,cst_audio$1)?[61,e]:[2,e]
                    :[1,e]
                  :[0,e];
         case 1:
          return caml_string_notequal(tag,cst_base$1)
                  ?caml_string_notequal(tag,cst_blockquote$1)
                    ?caml_string_notequal(tag,cst_body$1)
                      ?caml_string_notequal(tag,cst_br$1)
                        ?caml_string_notequal(tag,cst_button$1)?[61,e]:[7,e]
                        :[6,e]
                      :[5,e]
                    :[4,e]
                  :[3,e];
         case 2:
          return caml_string_notequal(tag,cst_canvas$1)
                  ?caml_string_notequal(tag,cst_caption$1)
                    ?caml_string_notequal(tag,cst_col$1)
                      ?caml_string_notequal(tag,cst_colgroup$1)?[61,e]:[11,e]
                      :[10,e]
                    :[9,e]
                  :[8,e];
         case 3:
          return caml_string_notequal(tag,cst_del$1)
                  ?caml_string_notequal(tag,cst_div$1)
                    ?caml_string_notequal(tag,cst_dl$1)?[61,e]:[14,e]
                    :[13,e]
                  :[12,e];
         case 4:return caml_string_notequal(tag,cst_embed$1)?[61,e]:[15,e];
         case 5:
          return caml_string_notequal(tag,cst_fieldset$1)
                  ?caml_string_notequal(tag,cst_form$1)
                    ?caml_string_notequal(tag,cst_frame$1)
                      ?caml_string_notequal(tag,cst_frameset$1)?[61,e]:[18,e]
                      :[19,e]
                    :[17,e]
                  :[16,e];
         case 7:
          return caml_string_notequal(tag,cst_h1$1)
                  ?caml_string_notequal(tag,cst_h2$1)
                    ?caml_string_notequal(tag,cst_h3$1)
                      ?caml_string_notequal(tag,cst_h4$1)
                        ?caml_string_notequal(tag,cst_h5$1)
                          ?caml_string_notequal(tag,cst_h6$1)
                            ?caml_string_notequal(tag,cst_head$1)
                              ?caml_string_notequal(tag,cst_hr$1)
                                ?caml_string_notequal(tag,cst_html$1)?[61,e]:[28,e]
                                :[27,e]
                              :[26,e]
                            :[25,e]
                          :[24,e]
                        :[23,e]
                      :[22,e]
                    :[21,e]
                  :[20,e];
         case 8:
          return caml_string_notequal(tag,cst_iframe$1)
                  ?caml_string_notequal(tag,cst_img$1)
                    ?caml_string_notequal(tag,cst_input$2)
                      ?caml_string_notequal(tag,cst_ins$1)?[61,e]:[32,e]
                      :[31,e]
                    :[30,e]
                  :[29,e];
         case 11:
          return caml_string_notequal(tag,cst_label$1)
                  ?caml_string_notequal(tag,cst_legend$1)
                    ?caml_string_notequal(tag,cst_li$1)
                      ?caml_string_notequal(tag,cst_link$1)?[61,e]:[36,e]
                      :[35,e]
                    :[34,e]
                  :[33,e];
         case 12:
          return caml_string_notequal(tag,cst_map$1)
                  ?caml_string_notequal(tag,cst_meta$1)?[61,e]:[38,e]
                  :[37,e];
         case 14:
          return caml_string_notequal(tag,cst_object$1)
                  ?caml_string_notequal(tag,cst_ol$1)
                    ?caml_string_notequal(tag,cst_optgroup$1)
                      ?caml_string_notequal(tag,cst_option$1)?[61,e]:[42,e]
                      :[41,e]
                    :[40,e]
                  :[39,e];
         case 15:
          return caml_string_notequal(tag,cst_p$1)
                  ?caml_string_notequal(tag,cst_param$1)
                    ?caml_string_notequal(tag,cst_pre$1)?[61,e]:[45,e]
                    :[44,e]
                  :[43,e];
         case 16:return caml_string_notequal(tag,cst_q$1)?[61,e]:[46,e];
         case 18:
          return caml_string_notequal(tag,cst_script$1)
                  ?caml_string_notequal(tag,cst_select$2)
                    ?caml_string_notequal(tag,cst_style$1)?[61,e]:[49,e]
                    :[48,e]
                  :[47,e];
         case 19:
          return caml_string_notequal(tag,cst_table$1)
                  ?caml_string_notequal(tag,cst_tbody$1)
                    ?caml_string_notequal(tag,cst_td$1)
                      ?caml_string_notequal(tag,cst_textarea$1)
                        ?caml_string_notequal(tag,cst_tfoot$1)
                          ?caml_string_notequal(tag,cst_th$1)
                            ?caml_string_notequal(tag,cst_thead$1)
                              ?caml_string_notequal(tag,cst_title$1)
                                ?caml_string_notequal(tag,cst_tr$1)?[61,e]:[58,e]
                                :[57,e]
                              :[56,e]
                            :[55,e]
                          :[54,e]
                        :[53,e]
                      :[52,e]
                    :[51,e]
                  :[50,e];
         case 20:return caml_string_notequal(tag,cst_ul$1)?[61,e]:[59,e];
         case 21:return caml_string_notequal(tag,cst_video$1)?[61,e]:[60,e]
         }
      return [61,e]}
    function opt_tagged(e)
     {function _fB_(e){return [0,tagged(e)]}
      function _fC_(param){return 0}
      return caml_call3(Opt[7],e,_fC_,_fB_)}
    function taggedEvent(ev)
     {function _fm_(ev){return [0,ev]}
      function _fn_(param)
       {function _fp_(ev){return [1,ev]}
        function _fq_(param)
         {function _fs_(ev){return [2,ev]}
          function _ft_(param)
           {function _fv_(ev){return [3,ev]}
            function _fw_(param)
             {function _fy_(ev){return [4,ev]}
              function _fz_(param){return [5,ev]}
              var _fA_=popStateEvent(ev);
              return caml_call3(Opt[7],_fA_,_fz_,_fy_)}
            var _fx_=mouseScrollEvent(ev);
            return caml_call3(Opt[7],_fx_,_fw_,_fv_)}
          var _fu_=wheelEvent(ev);
          return caml_call3(Opt[7],_fu_,_ft_,_fs_)}
        var _fr_=keyboardEvent(ev);
        return caml_call3(Opt[7],_fr_,_fq_,_fp_)}
      var _fo_=mouseEvent(ev);
      return caml_call3(Opt[7],_fo_,_fn_,_fm_)}
    function opt_taggedEvent(ev)
     {function _fk_(ev){return [0,taggedEvent(ev)]}
      function _fl_(param){return 0}
      return caml_call3(Opt[7],ev,_fl_,_fk_)}
    function stopPropagation(ev)
     {function _fi_(param){return ev.stopPropagation()}
      function _fj_(param){return ev.cancelBubble = true$0}
      return caml_call3(Optdef[7],ev.stopPropagation,_fj_,_fi_)}
    var
     requestAnimationFrame=
      runtime.caml_js_pure_expr
       (function(param)
         {var
           l=
            [0,
             _g_.requestAnimationFrame,
             [0,
              _g_.mozRequestAnimationFrame,
              [0,
               _g_.webkitRequestAnimationFrame,
               [0,
                _g_.oRequestAnimationFrame,
                [0,_g_.msRequestAnimationFrame,0]]]]];
          try
           {var
             _ff_=function(c){return caml_call1(Optdef[5],c)},
             req=caml_call2(Stdlib_list[34],_ff_,l),
             _fg_=function(callback){return req(callback)};
            return _fg_}
          catch(_fh_)
           {_fh_ = caml_wrap_exception(_fh_);
            if(_fh_ === Stdlib[8])
             {var
               now=function(param){return new date_ms().getTime()},
               last=[0,now(0)];
              return function(callback)
               {var
                 t=now(0),
                 dt=last[1] + 16.6666666666666679 - t,
                 dt$0=dt < 0.?0.:dt;
                last[1] = t;
                _g_.setTimeout(callback,dt$0);
                return 0}}
            throw _fh_}});
    function hasPushState(param)
     {return caml_call1(Optdef[5],_g_.history.pushState)}
    function hasPlaceholder(param)
     {var i=createInput(0,0,document$0);
      return caml_call1(Optdef[5],i.placeholder)}
    function hasRequired(param)
     {var i=createInput(0,0,document$0);
      return caml_call1(Optdef[5],i.required)}
    var overflow_limit=2147483000.;
    function setTimeout(callback,d)
     {var id=[0,0];
      function loop(step,param)
       {if(2147483000. < step)
         var step$0=overflow_limit,remain=step - 2147483000.;
        else
         var step$0=step,remain=0.;
        var cb=remain == 0.?callback:function(_fe_){return loop(remain,_fe_)};
        id[1] = [0,_g_.setTimeout(caml_js_wrap_callback(cb),step$0)];
        return 0}
      loop(d,0);
      return id}
    function clearTimeout(id)
     {var _fd_=id[1];
      if(_fd_){var x=_fd_[1];id[1] = 0;return _g_.clearTimeout(x)}
      return 0}
    function js_array_of_collection(c){return [].slice.call(c)}
    var
     Js_of_ocaml_Dom_html=
      [0,
       d,
       document$0,
       getElementById_opt,
       getElementById_exn,
       getElementById_coerce,
       getElementById,
       location_origin,
       _g_,
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       eventRelatedTarget,
       Event$0,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       addMousewheelEventListenerWith,
       addMousewheelEventListener,
       createCustomEvent,
       buttonPressed,
       eventAbsolutePosition$0,
       elementClientPosition,
       getDocumentScroll,
       [0,of_event,try_key_code_normal],
       [0,of_event$0],
       createHtml,
       createHead,
       createLink,
       createTitle,
       createMeta,
       createBase,
       createStyle,
       createBody,
       createForm,
       createOptgroup,
       createOption,
       createSelect,
       createInput,
       createTextarea,
       createButton,
       createLabel,
       createFieldset,
       createLegend,
       createUl,
       createOl,
       createDl,
       createLi,
       createDiv,
       createEmbed,
       createP,
       createH1,
       createH2,
       createH3,
       createH4,
       createH5,
       createH6,
       createQ,
       createBlockquote,
       createPre,
       createBr,
       createHr,
       createIns,
       createDel,
       createA,
       createImg,
       createObject,
       createParam,
       createMap,
       createArea,
       createScript,
       createTable,
       createCaption,
       createCol,
       createColgroup,
       createThead,
       createTfoot,
       createTbody,
       createTr,
       createTh,
       createTd,
       createSub,
       createSup,
       createSpan,
       createTt,
       createI,
       createB,
       createBig,
       createSmall,
       createEm,
       createStrong,
       createCite,
       createDfn,
       createCode,
       createSamp,
       createKbd,
       createVar,
       createAbbr,
       createDd,
       createDt,
       createNoscript,
       createAddress,
       createFrameset,
       createFrame,
       createIframe,
       createAudio,
       createVideo,
       Canvas_not_available,
       createCanvas,
       element$1,
       tagged,
       opt_tagged,
       taggedEvent,
       opt_taggedEvent,
       stopPropagation,
       [0,
        element$0,
        a,
        area,
        audio,
        base,
        blockquote,
        body,
        br,
        button,
        canvas,
        caption,
        col,
        colgroup,
        del,
        div,
        embed,
        dl,
        fieldset,
        form,
        frameset,
        frame,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        head,
        hr,
        html,
        iframe,
        img,
        input$0,
        ins,
        label,
        legend,
        li,
        link,
        map$2,
        meta,
        object,
        ol,
        optgroup,
        option$1,
        p,
        param,
        pre,
        q,
        script,
        select$0,
        style,
        table,
        tbody,
        td,
        textarea,
        tfoot,
        th,
        thead,
        title,
        tr,
        ul,
        video,
        mouseEvent,
        keyboardEvent,
        wheelEvent,
        mouseScrollEvent,
        popStateEvent],
       setTimeout,
       clearTimeout,
       js_array_of_collection,
       requestAnimationFrame,
       runtime.caml_js_html_entities,
       onIE,
       hasPushState,
       hasPlaceholder,
       hasRequired];
    caml_register_global(1650,Js_of_ocaml_Dom_html,"Js_of_ocaml__Dom_html");
    var formData=Unsafe[1].FormData,formData_form=Unsafe[1].FormData;
    function filter_map$0(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,filter_map$0(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function have_content(elt)
     {var
       _fb_=caml_call2(symbol$9,elt.name.length,0),
       _fc_=_fb_?1 - (elt.disabled | 0):_fb_;
      return _fc_}
    function form_elements(get,form)
     {var length=form.elements.length;
      function _e1_(i)
       {var _fa_=form.elements.item(i);return caml_call1(Opt[10],_fa_)}
      var
       _e2_=caml_call2(Stdlib_array[2],length,_e1_),
       elements=caml_call1(Stdlib_array[11],_e2_);
      function _e3_(param)
       {if(param)
         {var v=param[1],match$3=tagged(v);
          switch(match$3[0])
           {case 31:
             var v$0=match$3[1];
             if(get)var sth=get[1],get$0=sth;else var get$0=0;
             if(have_content(v$0))
              {var
                name$1=caml_string_of_jsstring(v$0.name),
                value=v$0.value,
                match=caml_string_of_jsbytes(v$0.type.toLowerCase());
               if(caml_string_notequal(match,cst_checkbox))
                {if(! caml_string_notequal(match,cst_file))
                  {if(get$0)return [0,[0,name$1,[0,-976970511,value]],0];
                   var match$0=caml_call1(Optdef[10],v$0.files);
                   if(match$0)
                    {var list=match$0[1];
                     if(caml_call2(symbol$8,list.length,0))
                      return [0,[0,name$1,[0,-976970511,""]],0];
                     var match$1=caml_call1(Optdef[10],v$0.multiple);
                     if(match$1 && 0 !== match$1[1])
                      {var
                        _e8_=function(i){return list.item(i)},
                        _e9_=caml_call2(Stdlib_array[2],list.length,_e8_),
                        _e__=caml_call1(Stdlib_array[11],_e9_);
                       return filter_map$0
                               (function(f)
                                 {var match=caml_call1(Opt[10],f);
                                  if(match)
                                   {var file=match[1];return [0,[0,name$1,[0,781515420,file]]]}
                                  return 0},
                                _e__)}
                     var _e7_=list.item(0),match$2=caml_call1(Opt[10],_e7_);
                     if(match$2)
                      {var file=match$2[1];
                       return [0,[0,name$1,[0,781515420,file]],0]}
                     return 0}
                   return 0}
                 var switch$0=0;
                 if(caml_string_notequal(match,cst_password))
                  {if(caml_string_notequal(match,cst_radio))
                    {var switch$1=0;
                     if
                      (caml_string_notequal(match,cst_reset)
                       &&
                       caml_string_notequal(match,cst_submit$0))
                      {if(caml_string_notequal(match,cst_text))
                        return [0,[0,name$1,[0,-976970511,value]],0];
                       switch$0 = 1;
                       switch$1 = 1}
                     if(! switch$1)return 0}}
                 else
                  switch$0 = 1;
                 if(switch$0)return [0,[0,name$1,[0,-976970511,value]],0]}
               return v$0.checked | 0?[0,[0,name$1,[0,-976970511,value]],0]:0}
             return 0;
            case 48:
             var v$1=match$3[1];
             if(have_content(v$1))
              {var name$0=caml_string_of_jsstring(v$1.name);
               if(v$1.multiple | 0)
                {var
                  _e5_=
                   function(i)
                    {var _e$_=v$1.options.item(i);
                     return caml_call1(Opt[10],_e$_)},
                  options=caml_call2(Stdlib_array[2],v$1.options.length,_e5_),
                  _e6_=caml_call1(Stdlib_array[11],options);
                 return filter_map$0
                         (function(param)
                           {if(param)
                             {var e=param[1];
                              return e.selected | 0
                                      ?[0,[0,name$0,[0,-976970511,e.value]]]
                                      :0}
                            return 0},
                          _e6_)}
               return [0,[0,name$0,[0,-976970511,v$1.value]],0]}
             return 0;
            case 53:
             var v$2=match$3[1];
             if(have_content(v$2))
              {var name=caml_string_of_jsstring(v$2.name);
               return [0,[0,name,[0,-976970511,v$2.value]],0]}
             return 0;
            default:return 0}}
        return 0}
      var
       _e4_=caml_call2(Stdlib_list[17],_e3_,elements),
       contents=caml_call1(Stdlib_list[14],_e4_);
      return contents}
    function append(form_contents,form_elt)
     {if(891486873 <= form_contents[1])
       {var list=form_contents[2];list[1] = [0,form_elt,list[1]];return 0}
      var f=form_contents[2],_eZ_=form_elt[2],_e0_=form_elt[1];
      if(781515420 <= _eZ_[1])
       {var file=_eZ_[2];return f.append(caml_jsstring_of_string(_e0_),file)}
      var s=_eZ_[2];
      return f.append(caml_jsstring_of_string(_e0_),s)}
    function empty_form_contents(param)
     {var match=caml_call1(Optdef[10],formData);
      if(match){var constr=match[1];return [0,808620462,new constr()]}
      return [0,891486873,[0,0]]}
    function post_form_contents(form)
     {var contents=empty_form_contents(0),_eW_=form_elements(0,form);
      function _eX_(_eY_){return append(contents,_eY_)}
      caml_call2(Stdlib_list[15],_eX_,_eW_);
      return contents}
    function get_form_contents(form)
     {var _eS_=form_elements(_k_,form);
      function _eT_(param)
       {var _eU_=param[2],_eV_=param[1];
        if(typeof _eU_ !== "number" && -976970511 === _eU_[1])
         {var s=_eU_[2];return [0,_eV_,caml_string_of_jsstring(s)]}
        throw [0,Assert_failure,_l_]}
      return caml_call2(Stdlib_list[17],_eT_,_eS_)}
    var
     Js_of_ocaml_Form=
      [0,
       formData,
       formData_form,
       append,
       post_form_contents,
       get_form_contents,
       empty_form_contents,
       form_elements];
    caml_register_global(1651,Js_of_ocaml_Form,"Js_of_ocaml__Form");
    var
     readystatechange=caml_call1(Event[1],cst_readystatechange),
     loadstart$1=caml_call1(Event[1],cst_loadstart$1),
     progress$1=caml_call1(Event[1],cst_progress$1),
     abort$1=caml_call1(Event[1],cst_abort$1),
     error$1=caml_call1(Event[1],cst_error$1),
     load$1=caml_call1(Event[1],cst_load$1),
     timeout=caml_call1(Event[1],cst_timeout),
     loadend$0=caml_call1(Event[1],cst_loadend$0),
     Event$1=
      [0,
       readystatechange,
       loadstart$1,
       progress$1,
       abort$1,
       error$1,
       load$1,
       timeout,
       loadend$0];
    function create(param)
     {var
       xmlHttpRequest=Unsafe[1].XMLHttpRequest,
       activeXObject=Unsafe[1].activeXObject;
      try
       {var _eN_=new xmlHttpRequest();return _eN_}
      catch(_eO_)
       {try
         {var _eM_=new activeXObject("Msxml2.XMLHTTP");return _eM_}
        catch(_eP_)
         {try
           {var _eL_=new activeXObject("Msxml3.XMLHTTP");return _eL_}
          catch(_eQ_)
           {try
             {var _eK_=new activeXObject("Microsoft.XMLHTTP");return _eK_}
            catch(_eR_){throw [0,Assert_failure,_m_]}}}}}
    var Js_of_ocaml_XmlHttpRequest=[0,create,Event$1];
    caml_register_global
     (1652,Js_of_ocaml_XmlHttpRequest,"Js_of_ocaml__XmlHttpRequest");
    var worker=Unsafe[1].Worker;
    function create$0(script)
     {return new worker(caml_jsstring_of_string(script))}
    function import_scripts(scripts)
     {if(Unsafe[1].importScripts === t37)
       caml_call1(Stdlib[1],cst_Worker_import_scripts_is_u);
      var
       _eI_=caml_call1(Stdlib_array[12],scripts),
       _eJ_=caml_call2(Stdlib_array[15],caml_jsstring_of_string,_eI_);
      return runtime.caml_js_fun_call(Unsafe[1].importScripts,_eJ_)}
    function set_onmessage(handler)
     {if(Unsafe[1].onmessage === t37)
       caml_call1(Stdlib[1],cst_Worker_onmessage_is_undefi);
      function js_handler(ev){return caml_call1(handler,ev.data)}
      return Unsafe[1].onmessage = caml_js_wrap_callback(js_handler)}
    function post_message(msg)
     {if(Unsafe[1].postMessage === t37)
       caml_call1(Stdlib[1],cst_Worker_onmessage_is_undefi$0);
      return Unsafe[1].postMessage(msg)}
    var
     Js_of_ocaml_Worker=
      [0,create$0,import_scripts,set_onmessage,post_message];
    caml_register_global(1653,Js_of_ocaml_Worker,"Js_of_ocaml__Worker");
    var webSocket=Unsafe[1].WebSocket;
    function is_supported(param){return caml_call1(Optdef[5],webSocket)}
    var Js_of_ocaml_WebSockets=[0,webSocket,webSocket,webSocket,is_supported];
    caml_register_global
     (1654,Js_of_ocaml_WebSockets,"Js_of_ocaml__WebSockets");
    var
     defaultContextAttributes=
      {"alpha":true$0,
       "depth":true$0,
       "stencil":false$0,
       "antialias":true$0,
       "premultipliedAlpha":false$0,
       "preserveDrawingBuffer":false$0,
       "preferLowPowerToHighPerformance":false$0,
       "failIfMajorPerformanceCaveat":false$0},
     webglcontextlost=caml_call1(Event$0[83],cst_webglcontextlost),
     webglcontextrestored=caml_call1(Event$0[83],cst_webglcontextrestored),
     webglcontextcreationerror=
      caml_call1(Event$0[83],cst_webglcontextcreationerror),
     Event$2=
      [0,webglcontextlost,webglcontextrestored,webglcontextcreationerror];
    function getContext(c)
     {var ctx=c.getContext("webgl");
      return caml_call1(Opt[5],ctx)?ctx:c.getContext("experimental-webgl")}
    function getContextWithAttributes(c,attribs)
     {var ctx=c.getContext("webgl",attribs);
      return caml_call1(Opt[5],ctx)
              ?ctx
              :c.getContext("experimental-webgl",attribs)}
    var
     Js_of_ocaml_WebGL=
      [0,defaultContextAttributes,Event$2,getContext,getContextWithAttributes];
    caml_register_global(1655,Js_of_ocaml_WebGL,"Js_of_ocaml__WebGL");
    function regexp(s)
     {return new regExp_withFlags(caml_jsbytes_of_string(s),"g")}
    function regexp_case_fold(s)
     {return new regExp_withFlags(caml_jsbytes_of_string(s),"gi")}
    function regexp_with_flag(s,f)
     {return new
              regExp_withFlags
              (caml_jsbytes_of_string(s),
               caml_jsstring_of_string(caml_call2(Stdlib[28],cst_g,f)))}
    function blunt_str_array_get(a,i)
     {function _eH_(param){throw [0,Assert_failure,_n_]}
      return caml_string_of_jsbytes(caml_call2(Optdef[8],a[i],_eH_))}
    function string_match(r,s,i)
     {r.lastIndex = i;
      var
       _eF_=r.exec(caml_jsbytes_of_string(s)),
       _eG_=caml_call2(Opt[3],_eF_,match_result);
      return caml_call1(Opt[10],_eG_)}
    function search_forward(r,s,i)
     {r.lastIndex = i;
      function _eC_(res){return [0,res.index,res]}
      var
       _eD_=r.exec(caml_jsbytes_of_string(s)),
       _eE_=caml_call2(Opt[3],_eD_,_eC_);
      return caml_call1(Opt[10],_eE_)}
    function matched_string(r){return blunt_str_array_get(r,0)}
    function matched_group(r,i)
     {var _eB_=caml_call2(Optdef[3],r[i],caml_string_of_jsbytes);
      return caml_call1(Optdef[10],_eB_)}
    var quote_repl_re=new regExp_withFlags("[$]","g");
    function quote_repl(s)
     {return caml_jsbytes_of_string(s).replace(quote_repl_re,"$$$$")}
    function global_replace(r,s,s_by)
     {r.lastIndex = 0;
      return caml_string_of_jsbytes
              (caml_jsbytes_of_string(s).replace(r,quote_repl(s_by)))}
    function replace_first(r,s,s_by)
     {var
       match=r.ignoreCase | 0,
       match$0=r.multiline | 0,
       flags=0 === match?0 === match$0?"":"m":0 === match$0?"i":"mi",
       r$0=new regExp_withFlags(r.source,flags);
      return caml_string_of_jsbytes
              (caml_jsbytes_of_string(s).replace(r$0,quote_repl(s_by)))}
    function list_of_js_array(a)
     {var idx$1=a.length - 1 | 0,accu=0,idx=idx$1;
      for(;;)
       {if(caml_call2(symbol$5,idx,0))return accu;
        var
         idx$0=idx - 1 | 0,
         accu$0=[0,blunt_str_array_get(a,idx),accu],
         accu=accu$0,
         idx=idx$0;
        continue}}
    function split(r,s)
     {r.lastIndex = 0;
      return list_of_js_array(caml_jsbytes_of_string(s).split(r))}
    function bounded_split(r,s,i)
     {r.lastIndex = 0;
      return list_of_js_array(caml_jsbytes_of_string(s).split(r,i))}
    var quote_re=regexp(cst);
    function quote(s)
     {return caml_string_of_jsbytes
              (caml_jsbytes_of_string(s).replace(quote_re,"\\$&"))}
    function regexp_string(s){return regexp(quote(s))}
    function regexp_string_case_fold(s){return regexp_case_fold(quote(s))}
    var
     Js_of_ocaml_Regexp=
      [0,
       regexp,
       regexp_case_fold,
       regexp_with_flag,
       quote,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search_forward,
       search_forward,
       matched_string,
       matched_group,
       global_replace,
       replace_first,
       split,
       bounded_split];
    caml_register_global(1656,Js_of_ocaml_Regexp,"Js_of_ocaml__Regexp");
    var Local_exn=[248,cst_Js_of_ocaml_Url_Local_exn,caml_fresh_oo_id(0)];
    function interrupt(param){throw Local_exn}
    var
     plus_re=regexp_string(cst$0),
     plus_re_js_string=new regExp_withFlags("\\+","g");
    function urldecode_js_string_string(s)
     {plus_re_js_string.lastIndex = 0;
      return caml_string_of_jsbytes
              (unescape(s.replace(plus_re_js_string," ")))}
    function urldecode(s)
     {return caml_string_of_jsbytes
              (unescape
                (caml_jsbytes_of_string(global_replace(plus_re,s,cst$1))))}
    function urlencode(opt,s)
     {if(opt)var sth=opt[1],with_plus=sth;else var with_plus=1;
      if(with_plus)
       {var s$0=caml_string_of_jsbytes(escape(caml_jsbytes_of_string(s)));
        return global_replace(plus_re,s$0,cst_2B)}
      return caml_string_of_jsbytes(escape(caml_jsbytes_of_string(s)))}
    var
     Not_an_http_protocol=
      [248,cst_Js_of_ocaml_Url_Not_an_htt,caml_fresh_oo_id(0)],
     default_http_port=80,
     default_https_port=443;
    function path_of_path_string(s)
     {var l=caml_ml_string_length(s);
      function aux(i)
       {try
         {var _ez_=caml_call3(String[18],s,i,47),j=_ez_}
        catch(_eA_)
         {_eA_ = caml_wrap_exception(_eA_);
          if(_eA_ !== Stdlib[8])throw _eA_;
          var j=l}
        var word=caml_call3(String[4],s,i,j - i | 0);
        return caml_call2(symbol$10,j,l)?[0,word,0]:[0,word,aux(j + 1 | 0)]}
      var a=aux(0);
      if(a && ! caml_string_notequal(a[1],cst$2))
       {var _ey_=a[2];
        if(! _ey_)return 0;
        if(! caml_string_notequal(_ey_[1],cst$3) && ! _ey_[2])return _o_}
      return a}
    function encode_arguments(l)
     {function _et_(param)
       {var
         v=param[2],
         n=param[1],
         _ev_=urlencode(0,v),
         _ew_=caml_call2(Stdlib[28],cst$4,_ev_),
         _ex_=urlencode(0,n);
        return caml_call2(Stdlib[28],_ex_,_ew_)}
      var _eu_=caml_call2(Stdlib_list[17],_et_,l);
      return caml_call2(String[7],cst$5,_eu_)}
    function decode_arguments_js_string(s)
     {var
       arr=s.split(caml_jsstring_of_string(caml_call2(String[1],1,38))),
       len=arr.length;
      function aux(acc,idx)
       {var idx$0=idx;
        for(;;)
         {if(caml_call2(symbol$5,idx$0,0))return acc;
          try
           {var
             _el_=idx$0 - 1 | 0,
             _em_=
              function(s)
               {function _er_(param)
                 {var
                   y=param[2],
                   x=param[1],
                   _es_=urldecode_js_string_string(y);
                  return [0,urldecode_js_string_string(x),_es_]}
                var
                 index=
                  s.indexOf
                   (caml_jsstring_of_string(caml_call2(String[1],1,61)));
                if(caml_call2(symbol$5,index,0))
                 var _eq_=t37;
                else
                 var
                  _ep_=s.slice(index + 1 | 0),
                  _eq_=[0,s.slice(0,index),_ep_];
                return caml_call3(Optdef[7],_eq_,interrupt,_er_)},
             _en_=
              aux
               ([0,caml_call3(Optdef[7],arr[idx$0],interrupt,_em_),acc],_el_);
            return _en_}
          catch(_eo_)
           {_eo_ = caml_wrap_exception(_eo_);
            if(_eo_ === Local_exn)
             {var idx$1=idx$0 - 1 | 0,idx$0=idx$1;continue}
            throw _eo_}}}
      return aux(0,len - 1 | 0)}
    function decode_arguments(s)
     {return decode_arguments_js_string(caml_jsbytes_of_string(s))}
    var
     url_re=
      new
       regExp_withFlags
       (caml_jsbytes_of_string(cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0)),
     file_re=new regExp_withFlags(caml_jsbytes_of_string(cst_Ff_Ii_Ll_Ee));
    function url_of_js_string(s)
     {function _d4_(res)
       {var
         prot_string=caml_call2(Optdef[8],res[1],interrupt),
         match=caml_string_of_jsbytes(prot_string.toLowerCase());
        if
         (caml_string_notequal(match,cst_file$0)
          &&
          caml_string_notequal(match,cst_file$1))
         {var switch$0=0;
          if
           (caml_string_notequal(match,cst_http)
            &&
            caml_string_notequal(match,cst_http$0))
           {var switch$1=0;
            if
             (caml_string_notequal(match,cst_https)
              &&
              caml_string_notequal(match,cst_https$0))
             switch$1 = 1;
            if(! switch$1){var ssl=1;switch$0 = 2}}
          else
           switch$0 = 1;
          var switch$2=0;
          switch(switch$0)
           {case 1:var ssl=0;switch$2 = 1;break;
            case 0:break;
            default:switch$2 = 1}
          if(switch$2)
           {var
             _ec_=function(param){return caml_jsbytes_of_string(cst$7)},
             path_str=
              urldecode_js_string_string(caml_call2(Optdef[8],res[6],_ec_)),
             _ed_=function(param){return caml_jsbytes_of_string(cst$8)},
             _ee_=
              urldecode_js_string_string(caml_call2(Optdef[8],res[10],_ed_)),
             _ef_=function(param){return caml_jsbytes_of_string(cst$9)},
             _eg_=
              decode_arguments_js_string(caml_call2(Optdef[8],res[8],_ef_)),
             _eh_=path_of_path_string(path_str),
             _ei_=function(param){return caml_jsbytes_of_string(cst$10)},
             s=caml_string_of_jsbytes(caml_call2(Optdef[8],res[4],_ei_)),
             _ej_=
              caml_string_notequal(s,cst$6)?caml_int_of_string(s):ssl?443:80,
             url=
              [0,
               urldecode_js_string_string
                (caml_call2(Optdef[8],res[2],interrupt)),
               _ej_,
               _eh_,
               path_str,
               _eg_,
               _ee_],
             _ek_=ssl?[1,url]:[0,url];
            return [0,_ek_]}}
        throw Not_an_http_protocol}
      function _d5_(param)
       {function _d7_(res)
         {var
           path_str=
            urldecode_js_string_string(caml_call2(Optdef[8],res[2],interrupt));
          function _d__(param){return caml_jsbytes_of_string(cst$11)}
          var _d$_=caml_string_of_jsbytes(caml_call2(Optdef[8],res[6],_d__));
          function _ea_(param){return caml_jsbytes_of_string(cst$12)}
          var
           _eb_=
            decode_arguments_js_string(caml_call2(Optdef[8],res[4],_ea_));
          return [0,[2,[0,path_of_path_string(path_str),path_str,_eb_,_d$_]]]}
        function _d8_(param){return 0}
        var _d9_=file_re.exec(s);
        return caml_call3(Opt[7],_d9_,_d8_,_d7_)}
      var _d6_=url_re.exec(s);
      return caml_call3(Opt[7],_d6_,_d5_,_d4_)}
    function url_of_string(s)
     {return url_of_js_string(caml_jsbytes_of_string(s))}
    function string_of_url(param)
     {switch(param[0])
       {case 0:
         var
          match=param[1],
          frag=match[6],
          args=match[5],
          path=match[3],
          port=match[2],
          host=match[1];
         if(caml_string_notequal(frag,cst$13))
          var _dr_=urlencode(0,frag),_ds_=caml_call2(Stdlib[28],cst$14,_dr_);
         else
          var _ds_=cst$21;
         if(args)
          var
           _dt_=encode_arguments(args),
           _du_=caml_call2(Stdlib[28],cst$15,_dt_);
         else
          var _du_=cst$20;
         var
          _dv_=caml_call2(Stdlib[28],_du_,_ds_),
          _dw_=function(x){return urlencode(0,x)},
          _dx_=caml_call2(Stdlib_list[17],_dw_,path),
          _dy_=caml_call2(String[7],cst$16,_dx_),
          _dz_=caml_call2(Stdlib[28],_dy_,_dv_),
          _dA_=caml_call2(Stdlib[28],cst$17,_dz_);
         if(80 === port)
          var _dB_=cst$18;
         else
          var
           _dF_=caml_call1(Stdlib[33],port),
           _dB_=caml_call2(Stdlib[28],cst$19,_dF_);
         var
          _dC_=caml_call2(Stdlib[28],_dB_,_dA_),
          _dD_=urlencode(0,host),
          _dE_=caml_call2(Stdlib[28],_dD_,_dC_);
         return caml_call2(Stdlib[28],cst_http$1,_dE_);
        case 1:
         var
          match$0=param[1],
          frag$0=match$0[6],
          args$0=match$0[5],
          path$0=match$0[3],
          port$0=match$0[2],
          host$0=match$0[1];
         if(caml_string_notequal(frag$0,cst$22))
          var
           _dG_=urlencode(0,frag$0),
           _dH_=caml_call2(Stdlib[28],cst$23,_dG_);
         else
          var _dH_=cst$30;
         if(args$0)
          var
           _dI_=encode_arguments(args$0),
           _dJ_=caml_call2(Stdlib[28],cst$24,_dI_);
         else
          var _dJ_=cst$29;
         var
          _dK_=caml_call2(Stdlib[28],_dJ_,_dH_),
          _dL_=function(x){return urlencode(0,x)},
          _dM_=caml_call2(Stdlib_list[17],_dL_,path$0),
          _dN_=caml_call2(String[7],cst$25,_dM_),
          _dO_=caml_call2(Stdlib[28],_dN_,_dK_),
          _dP_=caml_call2(Stdlib[28],cst$26,_dO_);
         if(443 === port$0)
          var _dQ_=cst$27;
         else
          var
           _dU_=caml_call1(Stdlib[33],port$0),
           _dQ_=caml_call2(Stdlib[28],cst$28,_dU_);
         var
          _dR_=caml_call2(Stdlib[28],_dQ_,_dP_),
          _dS_=urlencode(0,host$0),
          _dT_=caml_call2(Stdlib[28],_dS_,_dR_);
         return caml_call2(Stdlib[28],cst_https$1,_dT_);
        default:
         var
          match$1=param[1],
          frag$1=match$1[4],
          args$1=match$1[3],
          path$1=match$1[1];
         if(caml_string_notequal(frag$1,cst$31))
          var
           _dV_=urlencode(0,frag$1),
           _dW_=caml_call2(Stdlib[28],cst$32,_dV_);
         else
          var _dW_=cst$36;
         if(args$1)
          var
           _dX_=encode_arguments(args$1),
           _dY_=caml_call2(Stdlib[28],cst$33,_dX_);
         else
          var _dY_=cst$35;
         var
          _dZ_=caml_call2(Stdlib[28],_dY_,_dW_),
          _d0_=function(x){return urlencode(0,x)},
          _d1_=caml_call2(Stdlib_list[17],_d0_,path$1),
          _d2_=caml_call2(String[7],cst$34,_d1_),
          _d3_=caml_call2(Stdlib[28],_d2_,_dZ_);
         return caml_call2(Stdlib[28],cst_file$2,_d3_)}}
    var _p_=caml_call1(Optdef[2],_g_.location);
    if(caml_call1(Optdef[5],_p_))
     var _q_=_g_.location;
    else
     var
      t40=function(param,_dq_){return 0},
      t39=function(param,_dp_){return 0},
      t38=function(param){return 0},
      _q_=
       {"href":"",
        "protocol":"",
        "host":"",
        "hostname":"",
        "port":"",
        "pathname":"",
        "search":"",
        "hash":"",
        "origin":t37,
        "reload":caml_js_wrap_meth_callback(t38),
        "replace":caml_js_wrap_meth_callback(t39),
        "assign":caml_js_wrap_meth_callback(t40)};
    var
     host=urldecode_js_string_string(_q_.hostname),
     protocol=urldecode_js_string_string(_q_.protocol),
     _r_=0,
     port=
      function(param)
        {try
          {var _dn_=[0,caml_int_of_string(caml_string_of_jsbytes(_q_.port))];
           return _dn_}
         catch(_do_)
          {_do_ = caml_wrap_exception(_do_);
           if(_do_[1] === Stdlib[7])return 0;
           throw _do_}}
       (_r_),
     path_string=urldecode_js_string_string(_q_.pathname),
     path=path_of_path_string(path_string),
     _s_=_q_.search.charAt(0) === "?"?_q_.search.slice(1):_q_.search,
     arguments$0=decode_arguments_js_string(_s_);
    function get_fragment(param)
     {function _dj_(res){return caml_string_of_jsstring(res[1])}
      function _dk_(param){return cst$37}
      var _dl_=new regExp_withFlags("#(.*)"),_dm_=_q_.href.match(_dl_);
      return caml_call3(Opt[7],_dm_,_dk_,_dj_)}
    function set_fragment(s)
     {return _q_.hash = caml_jsbytes_of_string(urlencode(0,s))}
    function get$2(param){return url_of_js_string(_q_.href)}
    function set$0(u)
     {return _q_.href = caml_jsbytes_of_string(string_of_url(u))}
    var
     as_string=urldecode_js_string_string(_q_.href),
     Js_of_ocaml_Url=
      [0,
       urldecode,
       urlencode,
       default_http_port,
       default_https_port,
       path_of_path_string,
       encode_arguments,
       decode_arguments,
       url_of_string,
       string_of_url,
       [0,
        host,
        port,
        protocol,
        path_string,
        path,
        arguments$0,
        get_fragment,
        set_fragment,
        get$2,
        set$0,
        as_string]];
    caml_register_global(1658,Js_of_ocaml_Url,"Js_of_ocaml__Url");
    var Js_of_ocaml_Lib_version=[0,s,git_version];
    caml_register_global
     (1659,Js_of_ocaml_Lib_version,"Js_of_ocaml__Lib_version");
    function update_file(name,content)
     {var oc=caml_call1(Stdlib[60],name);
      caml_call2(Stdlib[66],oc,content);
      return caml_call1(Stdlib[76],oc)}
    function set_channel_flusher(out_channel,f)
     {var
       f$0=
        caml_js_wrap_callback
         (function(s){return caml_call1(f,caml_string_of_jsbytes(s))});
      return runtime.caml_ml_set_channel_output(out_channel,f$0)}
    function set_channel_filler(in_channel,f)
     {var f$0=caml_js_wrap_callback(f);
      return runtime.caml_ml_set_channel_refill(in_channel,f$0)}
    function mount(path,f)
     {return runtime.caml_mount_autoload
              (path,
               caml_js_wrap_callback
                (function(prefix,path){return caml_call2(f,prefix,path)}))}
    var unmount=runtime.caml_unmount;
    if(caml_call2(String[38],git_version,cst$38))
     var js_of_ocaml_version=s;
    else
     var
      _cm_=caml_call2(Stdlib[28],cst$41,git_version),
      js_of_ocaml_version=caml_call2(Stdlib[28],s,_cm_);
    var
     _t_=runtime.caml_create_file,
     _u_=runtime.caml_read_file_content,
     Js_of_ocaml_Sys_js=
      [0,
       set_channel_flusher,
       set_channel_filler,
       function(_di_){return runtime.caml_list_mount_point(_di_)},
       unmount,
       mount,
       _u_,
       _t_,
       update_file,
       js_of_ocaml_version];
    caml_register_global(1660,Js_of_ocaml_Sys_js,"Js_of_ocaml__Sys_js");
    function empty_resize_observer_options(param){return {}}
    var resizeObserver=Unsafe[1].ResizeObserver;
    function is_supported$0(param)
     {return caml_call1(Optdef[5],resizeObserver)}
    function observe(node,f,box,param)
     {var obs=new resizeObserver(caml_js_wrap_callback(f));
      if(box)
       {var box$0=box[1],opts={};opts.box = box$0;obs.observe(node,opts)}
      else
       obs.observe(node);
      return obs}
    var
     Js_of_ocaml_ResizeObserver=
      [0,empty_resize_observer_options,resizeObserver,is_supported$0,observe];
    caml_register_global
     (1661,Js_of_ocaml_ResizeObserver,"Js_of_ocaml__ResizeObserver");
    function empty_mutation_observer_init(param){return {}}
    var mutationObserver=Unsafe[1].MutationObserver;
    function is_supported$1(param)
     {return caml_call1(Optdef[5],mutationObserver)}
    function observe$0
     (node,
      f,
      child_list,
      attributes,
      character_data,
      subtree,
      attribute_old_value,
      character_data_old_value,
      attribute_filter,
      param)
     {function opt_iter(x,f)
       {if(x){var x$0=x[1];return caml_call1(f,x$0)}return 0}
      var obs=new mutationObserver(caml_js_wrap_callback(f)),cfg={};
      opt_iter(child_list,function(v){return cfg.childList = v});
      opt_iter(attributes,function(v){return cfg.attributes = v});
      opt_iter(character_data,function(v){return cfg.characterData = v});
      opt_iter(subtree,function(v){return cfg.subtree = v});
      opt_iter
       (attribute_old_value,function(v){return cfg.attributeOldValue = v});
      opt_iter
       (character_data_old_value,
        function(v){return cfg.characterDataOldValue = v});
      opt_iter
       (attribute_filter,
        function(l)
         {return cfg.attributeFilter
                 =
                 caml_js_from_array(caml_call1(Stdlib_array[12],l))});
      obs.observe(node,cfg);
      return obs}
    var
     Js_of_ocaml_MutationObserver=
      [0,
       empty_mutation_observer_init,
       mutationObserver,
       is_supported$1,
       observe$0];
    caml_register_global
     (1662,Js_of_ocaml_MutationObserver,"Js_of_ocaml__MutationObserver");
    var obj=Unsafe[1].Object;
    function create$1(param){return new obj()}
    function add$0(t,k,v){return t[k.concat("_")] = v}
    function remove(t,k){return delete t[k.concat("_")]}
    function find(t,k){return t[k.concat("_")]}
    function keys(t)
     {var
       key_array=Unsafe[1].Object.keys(t),
       res=[0,0],
       _de_=key_array.length - 1 | 0,
       _dd_=0;
      if(! (_de_ < 0))
       {var i=_dd_;
        for(;;)
         {var
           _df_=function(param){return caml_call1(Stdlib[2],cst_Jstable_keys)},
           key=caml_call2(Optdef[8],key_array[i],_df_),
           _dg_=res[1];
          res[1] = [0,key.substring(0,key.length - 1 | 0),_dg_];
          var _dh_=i + 1 | 0;
          if(_de_ !== i){var i=_dh_;continue}
          break}}
      return caml_call1(Stdlib_list[9],res[1])}
    var Js_of_ocaml_Jstable=[0,create$1,add$0,remove,find,keys];
    caml_register_global(1663,Js_of_ocaml_Jstable,"Js_of_ocaml__Jstable");
    var json=Unsafe[1].JSON;
    function reviver(this$0,key,value)
     {if(typeof value == typeof "foo")return caml_string_of_jsbytes(value);
      if
       (value instanceof array_length
        &&
        4
        ===
        value.length
        &&
        255
        ===
        value[0])
       return runtime.caml_int64_create_lo_mi_hi(value[1],value[2],value[3]);
      return value}
    var input_reviver=caml_js_wrap_meth_callback(reviver);
    function unsafe_input(s){return json.parse(s,input_reviver)}
    var
     mlString_constr=dummy_string.constructor,
     mlInt64_constr=dummy_int64.constructor;
    function output_reviver(key,value)
     {return value instanceof mlString_constr
              ?caml_jsbytes_of_string(value)
              :value instanceof mlInt64_constr
                ?caml_js_from_array([0,255,value.lo,value.mi,value.hi])
                :value}
    function output(obj){return json.stringify(obj,output_reviver)}
    var Js_of_ocaml_Json=[0,output,unsafe_input];
    caml_register_global(1664,Js_of_ocaml_Json,"Js_of_ocaml__Json");
    function string_of_name(param)
     {var _dc_=param;
      if(74 <= _dc_)
       {if(111 <= _dc_)
         switch(_dc_)
          {case 111:return cst_palevioletred;
           case 112:return cst_papayawhip;
           case 113:return cst_peachpuff;
           case 114:return cst_peru;
           case 115:return cst_pink;
           case 116:return cst_plum;
           case 117:return cst_powderblue;
           case 118:return cst_purple;
           case 119:return cst_red;
           case 120:return cst_rosybrown;
           case 121:return cst_royalblue;
           case 122:return cst_saddlebrown;
           case 123:return cst_salmon;
           case 124:return cst_sandybrown;
           case 125:return cst_seagreen;
           case 126:return cst_seashell;
           case 127:return cst_sienna;
           case 128:return cst_silver;
           case 129:return cst_skyblue;
           case 130:return cst_slateblue;
           case 131:return cst_slategray;
           case 132:return cst_slategrey;
           case 133:return cst_snow;
           case 134:return cst_springgreen;
           case 135:return cst_steelblue;
           case 136:return cst_tan;
           case 137:return cst_teal;
           case 138:return cst_thistle;
           case 139:return cst_tomato;
           case 140:return cst_turquoise;
           case 141:return cst_violet;
           case 142:return cst_wheat;
           case 143:return cst_white;
           case 144:return cst_whitesmoke;
           case 145:return cst_yellow;
           default:return cst_yellowgreen}
        switch(_dc_)
         {case 74:return cst_lightpink;
          case 75:return cst_lightsalmon;
          case 76:return cst_lightseagreen;
          case 77:return cst_lightskyblue;
          case 78:return cst_lightslategray;
          case 79:return cst_lightslategrey;
          case 80:return cst_lightsteelblue;
          case 81:return cst_lightyellow;
          case 82:return cst_lime;
          case 83:return cst_limegreen;
          case 84:return cst_linen;
          case 85:return cst_magenta;
          case 86:return cst_maroon;
          case 87:return cst_mediumaquamarine;
          case 88:return cst_mediumblue;
          case 89:return cst_mediumorchid;
          case 90:return cst_mediumpurple;
          case 91:return cst_mediumseagreen;
          case 92:return cst_mediumslateblue;
          case 93:return cst_mediumspringgreen;
          case 94:return cst_mediumturquoise;
          case 95:return cst_mediumvioletred;
          case 96:return cst_midnightblue;
          case 97:return cst_mintcream;
          case 98:return cst_mistyrose;
          case 99:return cst_moccasin;
          case 100:return cst_navajowhite;
          case 101:return cst_navy;
          case 102:return cst_oldlace;
          case 103:return cst_olive;
          case 104:return cst_olivedrab;
          case 105:return cst_orange;
          case 106:return cst_orangered;
          case 107:return cst_orchid;
          case 108:return cst_palegoldenrod;
          case 109:return cst_palegreen;
          default:return cst_paleturquoise}}
      if(37 <= _dc_)
       switch(_dc_)
        {case 37:return cst_darkslategrey;
         case 38:return cst_darkturquoise;
         case 39:return cst_darkviolet;
         case 40:return cst_deeppink;
         case 41:return cst_deepskyblue;
         case 42:return cst_dimgray;
         case 43:return cst_dimgrey;
         case 44:return cst_dodgerblue;
         case 45:return cst_firebrick;
         case 46:return cst_floralwhite;
         case 47:return cst_forestgreen;
         case 48:return cst_fuchsia;
         case 49:return cst_gainsboro;
         case 50:return cst_ghostwhite;
         case 51:return cst_gold;
         case 52:return cst_goldenrod;
         case 53:return cst_gray;
         case 54:return cst_grey;
         case 55:return cst_green;
         case 56:return cst_greenyellow;
         case 57:return cst_honeydew;
         case 58:return cst_hotpink;
         case 59:return cst_indianred;
         case 60:return cst_indigo;
         case 61:return cst_ivory;
         case 62:return cst_khaki;
         case 63:return cst_lavender;
         case 64:return cst_lavenderblush;
         case 65:return cst_lawngreen;
         case 66:return cst_lemonchiffon;
         case 67:return cst_lightblue;
         case 68:return cst_lightcoral;
         case 69:return cst_lightcyan;
         case 70:return cst_lightgoldenrodyellow;
         case 71:return cst_lightgray;
         case 72:return cst_lightgreen;
         default:return cst_lightgrey}
      switch(_dc_)
       {case 0:return cst_aliceblue;
        case 1:return cst_antiquewhite;
        case 2:return cst_aqua;
        case 3:return cst_aquamarine;
        case 4:return cst_azure;
        case 5:return cst_beige;
        case 6:return cst_bisque;
        case 7:return cst_black;
        case 8:return cst_blanchedalmond;
        case 9:return cst_blue;
        case 10:return cst_blueviolet;
        case 11:return cst_brown;
        case 12:return cst_burlywood;
        case 13:return cst_cadetblue;
        case 14:return cst_chartreuse;
        case 15:return cst_chocolate;
        case 16:return cst_coral;
        case 17:return cst_cornflowerblue;
        case 18:return cst_cornsilk;
        case 19:return cst_crimson;
        case 20:return cst_cyan;
        case 21:return cst_darkblue;
        case 22:return cst_darkcyan;
        case 23:return cst_darkgoldenrod;
        case 24:return cst_darkgray;
        case 25:return cst_darkgreen;
        case 26:return cst_darkgrey;
        case 27:return cst_darkkhaki;
        case 28:return cst_darkmagenta;
        case 29:return cst_darkolivegreen;
        case 30:return cst_darkorange;
        case 31:return cst_darkorchid;
        case 32:return cst_darkred;
        case 33:return cst_darksalmon;
        case 34:return cst_darkseagreen;
        case 35:return cst_darkslateblue;
        default:return cst_darkslategray}}
    function name_of_string(s)
     {var switch$0=caml_string_compare(s,cst_lightgrey$0);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 73;
        var switch$1=caml_string_compare(s,cst_paleturquoise$0);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 110;
          var switch$2=caml_string_compare(s,cst_skyblue$0);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 129;
            var switch$3=caml_string_compare(s,cst_thistle$0);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 138;
              if(! caml_string_notequal(s,cst_tomato$0))return 139;
              if(! caml_string_notequal(s,cst_turquoise$0))return 140;
              if(! caml_string_notequal(s,cst_violet$0))return 141;
              if(! caml_string_notequal(s,cst_wheat$0))return 142;
              if(! caml_string_notequal(s,cst_white$0))return 143;
              if(! caml_string_notequal(s,cst_whitesmoke$0))return 144;
              if(! caml_string_notequal(s,cst_yellow$0))return 145;
              if(! caml_string_notequal(s,cst_yellowgreen$0))return 146}
            else
             {if(! caml_string_notequal(s,cst_slateblue$0))return 130;
              if(! caml_string_notequal(s,cst_slategray$0))return 131;
              if(! caml_string_notequal(s,cst_slategrey$0))return 132;
              if(! caml_string_notequal(s,cst_snow$0))return 133;
              if(! caml_string_notequal(s,cst_springgreen$0))return 134;
              if(! caml_string_notequal(s,cst_steelblue$0))return 135;
              if(! caml_string_notequal(s,cst_tan$0))return 136;
              if(! caml_string_notequal(s,cst_teal$0))return 137}}
          else
           {var switch$4=caml_string_compare(s,cst_rosybrown$0);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 120;
              if(! caml_string_notequal(s,cst_royalblue$0))return 121;
              if(! caml_string_notequal(s,cst_saddlebrown$0))return 122;
              if(! caml_string_notequal(s,cst_salmon$0))return 123;
              if(! caml_string_notequal(s,cst_sandybrown$0))return 124;
              if(! caml_string_notequal(s,cst_seagreen$0))return 125;
              if(! caml_string_notequal(s,cst_seashell$0))return 126;
              if(! caml_string_notequal(s,cst_sienna$0))return 127;
              if(! caml_string_notequal(s,cst_silver$0))return 128}
            else
             {if(! caml_string_notequal(s,cst_palevioletred$0))return 111;
              if(! caml_string_notequal(s,cst_papayawhip$0))return 112;
              if(! caml_string_notequal(s,cst_peachpuff$0))return 113;
              if(! caml_string_notequal(s,cst_peru$0))return 114;
              if(! caml_string_notequal(s,cst_pink$0))return 115;
              if(! caml_string_notequal(s,cst_plum$0))return 116;
              if(! caml_string_notequal(s,cst_powderblue$0))return 117;
              if(! caml_string_notequal(s,cst_purple$0))return 118;
              if(! caml_string_notequal(s,cst_red$0))return 119}}}
        else
         {var switch$5=caml_string_compare(s,cst_mediumslateblue$0);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 92;
            var switch$6=caml_string_compare(s,cst_navy$0);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 101;
              if(! caml_string_notequal(s,cst_oldlace$0))return 102;
              if(! caml_string_notequal(s,cst_olive$0))return 103;
              if(! caml_string_notequal(s,cst_olivedrab$0))return 104;
              if(! caml_string_notequal(s,cst_orange$0))return 105;
              if(! caml_string_notequal(s,cst_orangered$0))return 106;
              if(! caml_string_notequal(s,cst_orchid$0))return 107;
              if(! caml_string_notequal(s,cst_palegoldenrod$0))return 108;
              if(! caml_string_notequal(s,cst_palegreen$0))return 109}
            else
             {if(! caml_string_notequal(s,cst_mediumspringgreen$0))return 93;
              if(! caml_string_notequal(s,cst_mediumturquoise$0))return 94;
              if(! caml_string_notequal(s,cst_mediumvioletred$0))return 95;
              if(! caml_string_notequal(s,cst_midnightblue$0))return 96;
              if(! caml_string_notequal(s,cst_mintcream$0))return 97;
              if(! caml_string_notequal(s,cst_mistyrose$0))return 98;
              if(! caml_string_notequal(s,cst_moccasin$0))return 99;
              if(! caml_string_notequal(s,cst_navajowhite$0))return 100}}
          else
           {var switch$7=caml_string_compare(s,cst_limegreen$0);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 83;
              if(! caml_string_notequal(s,cst_linen$0))return 84;
              if(! caml_string_notequal(s,cst_magenta$0))return 85;
              if(! caml_string_notequal(s,cst_maroon$0))return 86;
              if(! caml_string_notequal(s,cst_mediumaquamarine$0))return 87;
              if(! caml_string_notequal(s,cst_mediumblue$0))return 88;
              if(! caml_string_notequal(s,cst_mediumorchid$0))return 89;
              if(! caml_string_notequal(s,cst_mediumpurple$0))return 90;
              if(! caml_string_notequal(s,cst_mediumseagreen$0))return 91}
            else
             {if(! caml_string_notequal(s,cst_lightpink$0))return 74;
              if(! caml_string_notequal(s,cst_lightsalmon$0))return 75;
              if(! caml_string_notequal(s,cst_lightseagreen$0))return 76;
              if(! caml_string_notequal(s,cst_lightskyblue$0))return 77;
              if(! caml_string_notequal(s,cst_lightslategray$0))return 78;
              if(! caml_string_notequal(s,cst_lightslategrey$0))return 79;
              if(! caml_string_notequal(s,cst_lightsteelblue$0))return 80;
              if(! caml_string_notequal(s,cst_lightyellow$0))return 81;
              if(! caml_string_notequal(s,cst_lime$0))return 82}}}}
      else
       {var switch$8=caml_string_compare(s,cst_darkslategray$0);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 36;
          var switch$9=caml_string_compare(s,cst_greenyellow$0);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 56;
            var switch$10=caml_string_compare(s,cst_lavenderblush$0);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 64;
              if(! caml_string_notequal(s,cst_lawngreen$0))return 65;
              if(! caml_string_notequal(s,cst_lemonchiffon$0))return 66;
              if(! caml_string_notequal(s,cst_lightblue$0))return 67;
              if(! caml_string_notequal(s,cst_lightcoral$0))return 68;
              if(! caml_string_notequal(s,cst_lightcyan$0))return 69;
              if(! caml_string_notequal(s,cst_lightgoldenrodyellow$0))
               return 70;
              if(! caml_string_notequal(s,cst_lightgray$0))return 71;
              if(! caml_string_notequal(s,cst_lightgreen$0))return 72}
            else
             {if(! caml_string_notequal(s,cst_grey$0))return 54;
              if(! caml_string_notequal(s,cst_honeydew$0))return 57;
              if(! caml_string_notequal(s,cst_hotpink$0))return 58;
              if(! caml_string_notequal(s,cst_indianred$0))return 59;
              if(! caml_string_notequal(s,cst_indigo$0))return 60;
              if(! caml_string_notequal(s,cst_ivory$0))return 61;
              if(! caml_string_notequal(s,cst_khaki$0))return 62;
              if(! caml_string_notequal(s,cst_lavender$0))return 63}}
          else
           {var switch$11=caml_string_compare(s,cst_floralwhite$0);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 46;
              if(! caml_string_notequal(s,cst_forestgreen$0))return 47;
              if(! caml_string_notequal(s,cst_fuchsia$0))return 48;
              if(! caml_string_notequal(s,cst_gainsboro$0))return 49;
              if(! caml_string_notequal(s,cst_ghostwhite$0))return 50;
              if(! caml_string_notequal(s,cst_gold$0))return 51;
              if(! caml_string_notequal(s,cst_goldenrod$0))return 52;
              if(! caml_string_notequal(s,cst_gray$0))return 53;
              if(! caml_string_notequal(s,cst_green$0))return 55}
            else
             {if(! caml_string_notequal(s,cst_darkslategrey$0))return 37;
              if(! caml_string_notequal(s,cst_darkturquoise$0))return 38;
              if(! caml_string_notequal(s,cst_darkviolet$0))return 39;
              if(! caml_string_notequal(s,cst_deeppink$0))return 40;
              if(! caml_string_notequal(s,cst_deepskyblue$0))return 41;
              if(! caml_string_notequal(s,cst_dimgray$0))return 42;
              if(! caml_string_notequal(s,cst_dimgrey$0))return 43;
              if(! caml_string_notequal(s,cst_dodgerblue$0))return 44;
              if(! caml_string_notequal(s,cst_firebrick$0))return 45}}}
        else
         {var switch$12=caml_string_compare(s,cst_cornsilk$0);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 18;
            var switch$13=caml_string_compare(s,cst_darkkhaki$0);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 27;
              if(! caml_string_notequal(s,cst_darkmagenta$0))return 28;
              if(! caml_string_notequal(s,cst_darkolivegreen$0))return 29;
              if(! caml_string_notequal(s,cst_darkorange$0))return 30;
              if(! caml_string_notequal(s,cst_darkorchid$0))return 31;
              if(! caml_string_notequal(s,cst_darkred$0))return 32;
              if(! caml_string_notequal(s,cst_darksalmon$0))return 33;
              if(! caml_string_notequal(s,cst_darkseagreen$0))return 34;
              if(! caml_string_notequal(s,cst_darkslateblue$0))return 35}
            else
             {if(! caml_string_notequal(s,cst_crimson$0))return 19;
              if(! caml_string_notequal(s,cst_cyan$0))return 20;
              if(! caml_string_notequal(s,cst_darkblue$0))return 21;
              if(! caml_string_notequal(s,cst_darkcyan$0))return 22;
              if(! caml_string_notequal(s,cst_darkgoldenrod$0))return 23;
              if(! caml_string_notequal(s,cst_darkgray$0))return 24;
              if(! caml_string_notequal(s,cst_darkgreen$0))return 25;
              if(! caml_string_notequal(s,cst_darkgrey$0))return 26}}
          else
           {var switch$14=caml_string_compare(s,cst_blue$0);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 9;
              if(! caml_string_notequal(s,cst_blueviolet$0))return 10;
              if(! caml_string_notequal(s,cst_brown$0))return 11;
              if(! caml_string_notequal(s,cst_burlywood$0))return 12;
              if(! caml_string_notequal(s,cst_cadetblue$0))return 13;
              if(! caml_string_notequal(s,cst_chartreuse$0))return 14;
              if(! caml_string_notequal(s,cst_chocolate$0))return 15;
              if(! caml_string_notequal(s,cst_coral$0))return 16;
              if(! caml_string_notequal(s,cst_cornflowerblue$0))return 17}
            else
             {if(! caml_string_notequal(s,cst_aliceblue$0))return 0;
              if(! caml_string_notequal(s,cst_antiquewhite$0))return 1;
              if(! caml_string_notequal(s,cst_aqua$0))return 2;
              if(! caml_string_notequal(s,cst_aquamarine$0))return 3;
              if(! caml_string_notequal(s,cst_azure$0))return 4;
              if(! caml_string_notequal(s,cst_beige$0))return 5;
              if(! caml_string_notequal(s,cst_bisque$0))return 6;
              if(! caml_string_notequal(s,cst_black$0))return 7;
              if(! caml_string_notequal(s,cst_blanchedalmond$0))return 8}}}}
      var _db_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_color_name);
      throw [0,Stdlib[6],_db_]}
    function rgb_of_name(param)
     {var _da_=param;
      if(74 <= _da_)
       {if(111 <= _da_)
         switch(_da_)
          {case 111:return _bo_;
           case 112:return _bp_;
           case 113:return _bq_;
           case 114:return _br_;
           case 115:return _bs_;
           case 116:return _bt_;
           case 117:return _bu_;
           case 118:return _bv_;
           case 119:return _bw_;
           case 120:return _bx_;
           case 121:return _by_;
           case 122:return _bz_;
           case 123:return _bA_;
           case 124:return _bB_;
           case 125:return _bC_;
           case 126:return _bD_;
           case 127:return _bE_;
           case 128:return _bF_;
           case 129:return _bG_;
           case 130:return _bH_;
           case 131:return _bI_;
           case 132:return _bJ_;
           case 133:return _bK_;
           case 134:return _bL_;
           case 135:return _bM_;
           case 136:return _bN_;
           case 137:return _bO_;
           case 138:return _bP_;
           case 139:return _bQ_;
           case 140:return _bR_;
           case 141:return _bS_;
           case 142:return _bT_;
           case 143:return _bU_;
           case 144:return _bV_;
           case 145:return _bW_;
           default:return _bX_}
        switch(_da_)
         {case 74:return _aP_;
          case 75:return _aQ_;
          case 76:return _aR_;
          case 77:return _aS_;
          case 78:return _aT_;
          case 79:return _aU_;
          case 80:return _aV_;
          case 81:return _aW_;
          case 82:return _aX_;
          case 83:return _aY_;
          case 84:return _aZ_;
          case 85:return _a0_;
          case 86:return _a1_;
          case 87:return _a2_;
          case 88:return _a3_;
          case 89:return _a4_;
          case 90:return _a5_;
          case 91:return _a6_;
          case 92:return _a7_;
          case 93:return _a8_;
          case 94:return _a9_;
          case 95:return _a__;
          case 96:return _a$_;
          case 97:return _ba_;
          case 98:return _bb_;
          case 99:return _bc_;
          case 100:return _bd_;
          case 101:return _be_;
          case 102:return _bf_;
          case 103:return _bg_;
          case 104:return _bh_;
          case 105:return _bi_;
          case 106:return _bj_;
          case 107:return _bk_;
          case 108:return _bl_;
          case 109:return _bm_;
          default:return _bn_}}
      if(37 <= _da_)
       switch(_da_)
        {case 37:return _ae_;
         case 38:return _af_;
         case 39:return _ag_;
         case 40:return _ah_;
         case 41:return _ai_;
         case 42:return _aj_;
         case 43:return _ak_;
         case 44:return _al_;
         case 45:return _am_;
         case 46:return _an_;
         case 47:return _ao_;
         case 48:return _ap_;
         case 49:return _aq_;
         case 50:return _ar_;
         case 51:return _as_;
         case 52:return _at_;
         case 53:return _au_;
         case 54:return _av_;
         case 55:return _aw_;
         case 56:return _ax_;
         case 57:return _ay_;
         case 58:return _az_;
         case 59:return _aA_;
         case 60:return _aB_;
         case 61:return _aC_;
         case 62:return _aD_;
         case 63:return _aE_;
         case 64:return _aF_;
         case 65:return _aG_;
         case 66:return _aH_;
         case 67:return _aI_;
         case 68:return _aJ_;
         case 69:return _aK_;
         case 70:return _aL_;
         case 71:return _aM_;
         case 72:return _aN_;
         default:return _aO_}
      switch(_da_)
       {case 0:return _v_;
        case 1:return _w_;
        case 2:return _x_;
        case 3:return _y_;
        case 4:return _z_;
        case 5:return _A_;
        case 6:return _B_;
        case 7:return _C_;
        case 8:return _D_;
        case 9:return _E_;
        case 10:return _F_;
        case 11:return _G_;
        case 12:return _H_;
        case 13:return _I_;
        case 14:return _J_;
        case 15:return _K_;
        case 16:return _L_;
        case 17:return _M_;
        case 18:return _N_;
        case 19:return _O_;
        case 20:return _P_;
        case 21:return _Q_;
        case 22:return _R_;
        case 23:return _S_;
        case 24:return _T_;
        case 25:return _U_;
        case 26:return _V_;
        case 27:return _W_;
        case 28:return _X_;
        case 29:return _Y_;
        case 30:return _Z_;
        case 31:return ___;
        case 32:return _$_;
        case 33:return _aa_;
        case 34:return _ab_;
        case 35:return _ac_;
        default:return _ad_}}
    function rgb(a,r,g,b)
     {if(a){var a$0=a[1];return [3,[0,r,g,b,a$0]]}return [1,[0,r,g,b]]}
    function hsl(a,h,s,l)
     {if(a){var a$0=a[1];return [6,[0,h,s,l,a$0]]}return [5,[0,h,s,l]]}
    function string_of_t(param)
     {switch(param[0])
       {case 0:var n=param[1];return string_of_name(n);
        case 1:
         var match=param[1],b=match[3],g=match[2],r=match[1];
         return caml_call4(Stdlib_printf[4],_bY_,r,g,b);
        case 2:
         var match$0=param[1],b$0=match$0[3],g$0=match$0[2],r$0=match$0[1];
         return caml_call4(Stdlib_printf[4],_bZ_,r$0,g$0,b$0);
        case 3:
         var
          match$1=param[1],
          a=match$1[4],
          b$1=match$1[3],
          g$1=match$1[2],
          r$1=match$1[1];
         return caml_call5(Stdlib_printf[4],_b0_,r$1,g$1,b$1,a);
        case 4:
         var
          match$2=param[1],
          a$0=match$2[4],
          b$2=match$2[3],
          g$2=match$2[2],
          r$2=match$2[1];
         return caml_call5(Stdlib_printf[4],_b1_,r$2,g$2,b$2,a$0);
        case 5:
         var match$3=param[1],l=match$3[3],s=match$3[2],h=match$3[1];
         return caml_call4(Stdlib_printf[4],_b2_,h,s,l);
        default:
         var
          match$4=param[1],
          a$1=match$4[4],
          l$0=match$4[3],
          s$0=match$4[2],
          h$0=match$4[1];
         return caml_call5(Stdlib_printf[4],_b3_,h$0,s$0,l$0,a$1)}}
    function hex_of_rgb(param)
     {var blue=param[3],green=param[2],red=param[1];
      function in_range(i)
       {var
         _c8_=caml_call2(symbol$5,i,0),
         _c9_=_c8_ || caml_call2(symbol$9,i,255);
        if(_c9_)
         {var
           _c__=caml_call1(Stdlib[33],i),
           _c$_=caml_call2(Stdlib[28],_c__,cst_is_out_of_valid_range);
          throw [0,Stdlib[6],_c$_]}
        return _c9_}
      in_range(red);
      in_range(green);
      in_range(blue);
      return caml_call4(Stdlib_printf[4],_b4_,red,green,blue)}
    function js_t_of_js_string(s)
     {var
       rgb_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d)),
       rgb_pct_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d$0)),
       rgba_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d)),
       rgba_pct_re=
        new
         regExp_withFlags
         (caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d$0)),
       hsl_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_hsl_s_d_s_d_s_d)),
       hsla_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_hsla_s_d_s_d_s_d_d_d));
      if
       (!
        (rgb_re.test(s) | 0)
        &&
        !
        (rgba_re.test(s) | 0)
        &&
        !
        (rgb_pct_re.test(s) | 0)
        &&
        !
        (rgba_pct_re.test(s) | 0)
        &&
        !
        (hsl_re.test(s) | 0)
        &&
        !
        (hsla_re.test(s) | 0))
       {var _c5_=caml_string_of_jsstring(s);
        if(caml_call2(Stdlib_list[32],_c5_,_b5_))return s;
        var
         _c6_=caml_string_of_jsstring(s),
         _c7_=caml_call2(Stdlib[28],_c6_,cst_is_not_a_valid_color);
        throw [0,Stdlib[6],_c7_]}
      return s}
    function js(c)
     {if(0 === c[0])
       {var n=c[1];return caml_jsstring_of_string(string_of_name(n))}
      return caml_jsstring_of_string(string_of_t(c))}
    function ml(c)
     {var s=caml_string_of_jsstring(c);
      try
       {var _cS_=[0,name_of_string(s)];return _cS_}
      catch(_cT_)
       {_cT_ = caml_wrap_exception(_cT_);
        if(_cT_[1] === Stdlib[6])
         {var
           fail=
            function(param)
             {var _c4_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_color$0);
              throw [0,Stdlib[6],_c4_]},
           re_rgb=regexp(cst_rgba_d_d_d_d_d),
           re_rgb_pct=regexp(cst_rgba_d_d_d_d_d$0),
           re_hsl=regexp(cst_hsla_d_d_d_d_d),
           i_of_s_o=
            function(param)
             {if(param)
               {var i=param[1];
                try
                 {var _c2_=caml_int_of_string(i);return _c2_}
                catch(_c3_)
                 {_c3_ = caml_wrap_exception(_c3_);
                  if(_c3_[1] === Stdlib[6])
                   var s=_c3_[2];
                  else
                   {if(_c3_[1] !== Stdlib[7])throw _c3_;var s=_c3_[2]}
                  var
                   _cZ_=caml_call2(Stdlib[28],cst$39,s),
                   _c0_=caml_call2(Stdlib[28],i,_cZ_),
                   _c1_=caml_call2(Stdlib[28],cst_color_conversion_error,_c0_);
                  throw [0,Stdlib[6],_c1_]}}
              return fail(0)},
           f_of_s=
            function(f)
             {try
               {var _cX_=caml_float_of_string(f);return _cX_}
              catch(_cY_)
               {_cY_ = caml_wrap_exception(_cY_);
                if(_cY_[1] === Stdlib[6])
                 var s=_cY_[2];
                else
                 {if(_cY_[1] !== Stdlib[7])throw _cY_;var s=_cY_[2]}
                var
                 _cU_=caml_call2(Stdlib[28],cst$40,s),
                 _cV_=caml_call2(Stdlib[28],f,_cU_),
                 _cW_=caml_call2(Stdlib[28],cst_color_conversion_error$0,_cV_);
                throw [0,Stdlib[6],_cW_]}},
           match=string_match(re_rgb,s,0);
          if(match)
           {var
             r=match[1],
             red=matched_group(r,2),
             green=matched_group(r,3),
             blue=matched_group(r,4),
             alpha=matched_group(r,5),
             match$0=matched_group(r,1);
            if(match$0)
             {var _cA_=match$0[1];
              if(! caml_string_notequal(_cA_,cst_rgb))
               {if(alpha)return fail(0);
                var _cE_=i_of_s_o(blue),_cF_=i_of_s_o(green);
                return [1,[0,i_of_s_o(red),_cF_,_cE_]]}
              if(! caml_string_notequal(_cA_,cst_rgba))
               {if(alpha)
                 {var
                   a=alpha[1],
                   _cB_=f_of_s(a),
                   _cC_=i_of_s_o(blue),
                   _cD_=i_of_s_o(green);
                  return [3,[0,i_of_s_o(red),_cD_,_cC_,_cB_]]}
                return fail(0)}}
            return fail(0)}
          var match$1=string_match(re_rgb_pct,s,0);
          if(match$1)
           {var
             r$0=match$1[1],
             red$0=matched_group(r$0,2),
             green$0=matched_group(r$0,3),
             blue$0=matched_group(r$0,4),
             alpha$0=matched_group(r$0,5),
             match$2=matched_group(r$0,1);
            if(match$2)
             {var _cG_=match$2[1];
              if(! caml_string_notequal(_cG_,cst_rgb$0))
               {if(alpha$0)return fail(0);
                var _cK_=i_of_s_o(blue$0),_cL_=i_of_s_o(green$0);
                return [2,[0,i_of_s_o(red$0),_cL_,_cK_]]}
              if(! caml_string_notequal(_cG_,cst_rgba$0))
               {if(alpha$0)
                 {var
                   a$0=alpha$0[1],
                   _cH_=f_of_s(a$0),
                   _cI_=i_of_s_o(blue$0),
                   _cJ_=i_of_s_o(green$0);
                  return [4,[0,i_of_s_o(red$0),_cJ_,_cI_,_cH_]]}
                return fail(0)}}
            return fail(0)}
          var match$3=string_match(re_hsl,s,0);
          if(match$3)
           {var
             r$1=match$3[1],
             red$1=matched_group(r$1,2),
             green$1=matched_group(r$1,3),
             blue$1=matched_group(r$1,4),
             alpha$1=matched_group(r$1,5),
             match$4=matched_group(r$1,1);
            if(match$4)
             {var _cM_=match$4[1];
              if(! caml_string_notequal(_cM_,cst_hsl))
               {if(alpha$1)return fail(0);
                var _cQ_=i_of_s_o(blue$1),_cR_=i_of_s_o(green$1);
                return [5,[0,i_of_s_o(red$1),_cR_,_cQ_]]}
              if(! caml_string_notequal(_cM_,cst_hsla))
               {if(alpha$1)
                 {var
                   a$1=alpha$1[1],
                   _cN_=f_of_s(a$1),
                   _cO_=i_of_s_o(blue$1),
                   _cP_=i_of_s_o(green$1);
                  return [6,[0,i_of_s_o(red$1),_cP_,_cO_,_cN_]]}
                return fail(0)}}
            return fail(0)}
          return fail(0)}
        throw _cT_}}
    function string_of_t$0(param)
     {if(typeof param === "number")
       return cst_0;
      else
       switch(param[0])
        {case 0:
          var f=param[1];return caml_call3(Stdlib_printf[4],_b6_,f,cst_em$0);
         case 1:
          var f$0=param[1];
          return caml_call3(Stdlib_printf[4],_b7_,f$0,cst_ex);
         case 2:
          var f$1=param[1];
          return caml_call3(Stdlib_printf[4],_b8_,f$1,cst_px);
         case 3:
          var f$2=param[1];
          return caml_call3(Stdlib_printf[4],_b9_,f$2,cst_gd);
         case 4:
          var f$3=param[1];
          return caml_call3(Stdlib_printf[4],_b__,f$3,cst_rem);
         case 5:
          var f$4=param[1];
          return caml_call3(Stdlib_printf[4],_b$_,f$4,cst_vw);
         case 6:
          var f$5=param[1];
          return caml_call3(Stdlib_printf[4],_ca_,f$5,cst_vh);
         case 7:
          var f$6=param[1];
          return caml_call3(Stdlib_printf[4],_cb_,f$6,cst_vm);
         case 8:
          var f$7=param[1];
          return caml_call3(Stdlib_printf[4],_cc_,f$7,cst_ch);
         case 9:
          var f$8=param[1];
          return caml_call3(Stdlib_printf[4],_cd_,f$8,cst_mm);
         case 10:
          var f$9=param[1];
          return caml_call3(Stdlib_printf[4],_ce_,f$9,cst_cm);
         case 11:
          var f$10=param[1];
          return caml_call3(Stdlib_printf[4],_cf_,f$10,cst_in);
         case 12:
          var f$11=param[1];
          return caml_call3(Stdlib_printf[4],_cg_,f$11,cst_pt);
         default:
          var f$12=param[1];
          return caml_call3(Stdlib_printf[4],_ch_,f$12,cst_pc)}}
    function js$0(t){return caml_jsstring_of_string(string_of_t$0(t))}
    function ml$0(t)
     {var s=caml_string_of_jsstring(t);
      if(caml_call2(String[38],s,cst_0$0))return 0;
      function fail(param)
       {var _cz_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_length);
        throw [0,Stdlib[6],_cz_]}
      var re=regexp(cst_d_d_s_S),match=string_match(re,s,0);
      if(match)
       {var r=match[1],match$0=matched_group(r,1);
        if(match$0)
         {var f=match$0[1];
          try
           {var _cx_=caml_float_of_string(f)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Stdlib[6])
             {var
               s$0=exn[2],
               _cw_=caml_call2(Stdlib[28],cst_length_conversion_error,s$0);
              throw [0,Stdlib[6],_cw_]}
            throw exn}
          var f$0=_cx_}
        else
         var f$0=fail(0);
        var match$1=matched_group(r,2);
        if(match$1)
         {var _cy_=match$1[1],switch$0=caml_string_compare(_cy_,cst_pc$0);
          if(0 <= switch$0)
           {if(! (0 < switch$0))return [13,f$0];
            if(! caml_string_notequal(_cy_,cst_pt$0))return [12,f$0];
            if(! caml_string_notequal(_cy_,cst_px$0))return [2,f$0];
            if(! caml_string_notequal(_cy_,cst_rem$0))return [4,f$0];
            if(! caml_string_notequal(_cy_,cst_vh$0))return [6,f$0];
            if(! caml_string_notequal(_cy_,cst_vm$0))return [7,f$0];
            if(! caml_string_notequal(_cy_,cst_vw$0))return [5,f$0]}
          else
           {if(! caml_string_notequal(_cy_,cst_ch$0))return [8,f$0];
            if(! caml_string_notequal(_cy_,cst_cm$0))return [10,f$0];
            if(! caml_string_notequal(_cy_,cst_em$1))return [0,f$0];
            if(! caml_string_notequal(_cy_,cst_ex$0))return [1,f$0];
            if(! caml_string_notequal(_cy_,cst_gd$0))return [3,f$0];
            if(! caml_string_notequal(_cy_,cst_in$0))return [11,f$0];
            if(! caml_string_notequal(_cy_,cst_mm$0))return [9,f$0]}
          return fail(0)}
        return fail(0)}
      return fail(0)}
    var Length=[0,string_of_t$0,js$0,ml$0];
    function string_of_t$1(param)
     {switch(param[0])
       {case 0:
         var f=param[1];return caml_call3(Stdlib_printf[4],_ci_,f,cst_deg);
        case 1:
         var f$0=param[1];
         return caml_call3(Stdlib_printf[4],_cj_,f$0,cst_grad);
        case 2:
         var f$1=param[1];
         return caml_call3(Stdlib_printf[4],_ck_,f$1,cst_rad);
        default:
         var f$2=param[1];
         return caml_call3(Stdlib_printf[4],_cl_,f$2,cst_turns)}}
    function js$1(t){return caml_jsstring_of_string(string_of_t$1(t))}
    function ml$1(j)
     {var s=caml_string_of_jsstring(j),re=regexp(cst_d_d_deg_grad_rad_turns);
      function fail(param)
       {var _cv_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_length$0);
        throw [0,Stdlib[6],_cv_]}
      var match=string_match(re,s,0);
      if(match)
       {var r=match[1],match$0=matched_group(r,1);
        if(match$0)
         {var f=match$0[1];
          try
           {var _ct_=caml_float_of_string(f)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Stdlib[6])
             {var
               s$0=exn[2],
               _cs_=caml_call2(Stdlib[28],cst_length_conversion_error$0,s$0);
              throw [0,Stdlib[6],_cs_]}
            throw exn}
          var f$0=_ct_}
        else
         var f$0=fail(0);
        var match$1=matched_group(r,2);
        if(match$1)
         {var _cu_=match$1[1];
          if(! caml_string_notequal(_cu_,cst_deg$0))return [0,f$0];
          if(! caml_string_notequal(_cu_,cst_grad$0))return [1,f$0];
          if(! caml_string_notequal(_cu_,cst_rad$0))return [2,f$0];
          if(! caml_string_notequal(_cu_,cst_turns$0))return [3,f$0]}
        return fail(0)}
      return fail(0)}
    var
     Angle=[0,string_of_t$1,js$1,ml$1],
     Js_of_ocaml_CSS=
      [0,
       [0,
        string_of_name,
        rgb_of_name,
        hex_of_rgb,
        rgb,
        hsl,
        string_of_t,
        js,
        ml,
        js_t_of_js_string],
       Length,
       Angle];
    caml_register_global(1665,Js_of_ocaml_CSS,"Js_of_ocaml__CSS");
    function listen(opt,target,typ,cb)
     {if(opt)var sth=opt[1],capture=sth;else var capture=0;
      var _cr_=! ! capture;
      return addEventListener
              (target,
               typ,
               full_handler(function(n,e){return ! ! caml_call2(cb,n,e)}),
               _cr_)}
    var Js_of_ocaml_Dom_events=[0,Event$0,listen,removeEventListener];
    caml_register_global
     (1666,Js_of_ocaml_Dom_events,"Js_of_ocaml__Dom_events");
    var
     xmlns="http://www.w3.org/2000/svg",
     SVGError=[248,cst_Js_of_ocaml_Dom_svg_SVGErr,caml_fresh_oo_id(0)];
    function createElement$0(doc,name)
     {return doc.createElementNS
              ("http://www.w3.org/2000/svg",caml_jsstring_of_string(name))}
    function unsafeCreateElement$0(doc,name){return createElement$0(doc,name)}
    function createA$0(doc){return unsafeCreateElement$0(doc,cst_a$2)}
    function createAltGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_altglyph)}
    function createAltGlyphDef(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphdef)}
    function createAltGlyphItem(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphitem)}
    function createAnimate(doc){return unsafeCreateElement$0(doc,cst_animate)}
    function createAnimateColor(doc)
     {return unsafeCreateElement$0(doc,cst_animatecolor)}
    function createAnimateMotion(doc)
     {return unsafeCreateElement$0(doc,cst_animatemotion)}
    function createAnimateTransform(doc)
     {return unsafeCreateElement$0(doc,cst_animatetransform)}
    function createCircle(doc){return unsafeCreateElement$0(doc,cst_circle)}
    function createClipPath(doc)
     {return unsafeCreateElement$0(doc,cst_clippath)}
    function createCursor(doc){return unsafeCreateElement$0(doc,cst_cursor)}
    function createDefs(doc){return unsafeCreateElement$0(doc,cst_defs)}
    function createDesc(doc){return unsafeCreateElement$0(doc,cst_desc)}
    function createEllipse(doc){return unsafeCreateElement$0(doc,cst_ellipse)}
    function createFilter(doc){return unsafeCreateElement$0(doc,cst_filter)}
    function createFont(doc){return unsafeCreateElement$0(doc,cst_font)}
    function createFontFace(doc)
     {return unsafeCreateElement$0(doc,cst_font_face)}
    function createFontFaceFormat(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_format)}
    function createFontFaceName(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_name)}
    function createFontFaceSrc(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_src)}
    function createFontFaceUri(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_uri)}
    function createForeignObject(doc)
     {return unsafeCreateElement$0(doc,cst_foreignObject)}
    function createG(doc){return unsafeCreateElement$0(doc,cst_g$0)}
    function createGlyph(doc){return unsafeCreateElement$0(doc,cst_glyph)}
    function createGlyphRef(doc)
     {return unsafeCreateElement$0(doc,cst_glyphref)}
    function createhkern(doc){return unsafeCreateElement$0(doc,cst_hkern)}
    function createImage(doc){return unsafeCreateElement$0(doc,cst_image)}
    function createLineElement(doc)
     {return unsafeCreateElement$0(doc,cst_line)}
    function createLinearElement(doc)
     {return unsafeCreateElement$0(doc,cst_lineargradient)}
    function createMask(doc){return unsafeCreateElement$0(doc,cst_mask)}
    function createMetaData(doc)
     {return unsafeCreateElement$0(doc,cst_metadata)}
    function createMissingGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_missing_glyph)}
    function createMPath(doc){return unsafeCreateElement$0(doc,cst_mpath)}
    function createPath(doc){return unsafeCreateElement$0(doc,cst_path)}
    function createPattern(doc){return unsafeCreateElement$0(doc,cst_pattern)}
    function createPolygon(doc){return unsafeCreateElement$0(doc,cst_polygon)}
    function createPolyline(doc)
     {return unsafeCreateElement$0(doc,cst_polyline)}
    function createRadialgradient(doc)
     {return unsafeCreateElement$0(doc,cst_radialgradient)}
    function createRect(doc){return unsafeCreateElement$0(doc,cst_rect)}
    function createScript$0(doc)
     {return unsafeCreateElement$0(doc,cst_script$2)}
    function createSet(doc){return unsafeCreateElement$0(doc,cst_set)}
    function createStop(doc){return unsafeCreateElement$0(doc,cst_stop)}
    function createStyle$0(doc){return unsafeCreateElement$0(doc,cst_style$2)}
    function createSvg(doc){return unsafeCreateElement$0(doc,cst_svg)}
    function createSwitch(doc){return unsafeCreateElement$0(doc,cst_switch)}
    function createSymbol(doc){return unsafeCreateElement$0(doc,cst_symbol)}
    function createTextElement(doc)
     {return unsafeCreateElement$0(doc,cst_text$0)}
    function createTextpath(doc)
     {return unsafeCreateElement$0(doc,cst_textpath)}
    function createTitle$0(doc){return unsafeCreateElement$0(doc,cst_title$2)}
    function createTref(doc){return unsafeCreateElement$0(doc,cst_tref)}
    function createTspan(doc){return unsafeCreateElement$0(doc,cst_tspan)}
    function createUse(doc){return unsafeCreateElement$0(doc,cst_use)}
    function createView(doc){return unsafeCreateElement$0(doc,cst_view)}
    function createvkern(doc){return unsafeCreateElement$0(doc,cst_vkern)}
    var svg_element=Unsafe[1].SVGElement,document$1=Unsafe[1].document;
    function getElementById$0(id)
     {function _co_(e){if(e instanceof svg_element)return e;throw Stdlib[8]}
      function _cp_(param){throw Stdlib[8]}
      var _cq_=Unsafe[1].document.getElementById(caml_jsstring_of_string(id));
      return caml_call3(Opt[7],_cq_,_cp_,_co_)}
    function element$2(e){return e instanceof svg_element?e:no_handler}
    function unsafeCoerce$0(e,tag)
     {var _cn_=caml_jsstring_of_string(tag);
      return e.tagName.toLowerCase() === _cn_?e:no_handler}
    function a$0(e){return unsafeCoerce$0(e,cst_a$3)}
    function altGlyph(e){return unsafeCoerce$0(e,cst_altglyph$0)}
    function altGlyphDef(e){return unsafeCoerce$0(e,cst_altglyphdef$0)}
    function altGlyphItem(e){return unsafeCoerce$0(e,cst_altglyphitem$0)}
    function animate(e){return unsafeCoerce$0(e,cst_animate$0)}
    function animateColor(e){return unsafeCoerce$0(e,cst_animatecolor$0)}
    function animateMotion(e){return unsafeCoerce$0(e,cst_animatemotion$0)}
    function animateTransform(e)
     {return unsafeCoerce$0(e,cst_animatetransform$0)}
    function circle(e){return unsafeCoerce$0(e,cst_circle$0)}
    function clipPath(e){return unsafeCoerce$0(e,cst_clippath$0)}
    function cursor(e){return unsafeCoerce$0(e,cst_cursor$0)}
    function defs(e){return unsafeCoerce$0(e,cst_defs$0)}
    function desc(e){return unsafeCoerce$0(e,cst_desc$0)}
    function ellipse(e){return unsafeCoerce$0(e,cst_ellipse$0)}
    function filter(e){return unsafeCoerce$0(e,cst_filter$0)}
    function font(e){return unsafeCoerce$0(e,cst_font$0)}
    function fontFace(e){return unsafeCoerce$0(e,cst_font_face$0)}
    function fontFaceFormat(e)
     {return unsafeCoerce$0(e,cst_font_face_format$0)}
    function fontFaceName(e){return unsafeCoerce$0(e,cst_font_face_name$0)}
    function fontFaceSrc(e){return unsafeCoerce$0(e,cst_font_face_src$0)}
    function fontFaceUri(e){return unsafeCoerce$0(e,cst_font_face_uri$0)}
    function foreignObject(e){return unsafeCoerce$0(e,cst_foreignobject)}
    function g(e){return unsafeCoerce$0(e,cst_g$1)}
    function glyph(e){return unsafeCoerce$0(e,cst_glyph$0)}
    function glyphRef(e){return unsafeCoerce$0(e,cst_glyphref$0)}
    function hkern(e){return unsafeCoerce$0(e,cst_hkern$0)}
    function image(e){return unsafeCoerce$0(e,cst_image$0)}
    function lineElement(e){return unsafeCoerce$0(e,cst_line$0)}
    function linearElement(e){return unsafeCoerce$0(e,cst_lineargradient$0)}
    function mask(e){return unsafeCoerce$0(e,cst_mask$0)}
    function metaData(e){return unsafeCoerce$0(e,cst_metadata$0)}
    function missingGlyph(e){return unsafeCoerce$0(e,cst_missing_glyph$0)}
    function mPath(e){return unsafeCoerce$0(e,cst_mpath$0)}
    function path$0(e){return unsafeCoerce$0(e,cst_path$0)}
    function pattern(e){return unsafeCoerce$0(e,cst_pattern$0)}
    function polygon(e){return unsafeCoerce$0(e,cst_polygon$0)}
    function polyline(e){return unsafeCoerce$0(e,cst_polyline$0)}
    function radialgradient(e){return unsafeCoerce$0(e,cst_radialgradient$0)}
    function rect(e){return unsafeCoerce$0(e,cst_rect$0)}
    function script$0(e){return unsafeCoerce$0(e,cst_script$3)}
    function set$1(e){return unsafeCoerce$0(e,cst_set$0)}
    function stop(e){return unsafeCoerce$0(e,cst_stop$0)}
    function style$0(e){return unsafeCoerce$0(e,cst_style$3)}
    function svg(e){return unsafeCoerce$0(e,cst_svg$0)}
    function switch$0(e){return unsafeCoerce$0(e,cst_switch$0)}
    function symbol$12(e){return unsafeCoerce$0(e,cst_symbol$0)}
    function textElement(e){return unsafeCoerce$0(e,cst_text$1)}
    function textpath(e){return unsafeCoerce$0(e,cst_textpath$0)}
    function title$0(e){return unsafeCoerce$0(e,cst_title$3)}
    function tref(e){return unsafeCoerce$0(e,cst_tref$0)}
    function tspan(e){return unsafeCoerce$0(e,cst_tspan$0)}
    function use(e){return unsafeCoerce$0(e,cst_use$0)}
    function view(e){return unsafeCoerce$0(e,cst_view$0)}
    function vkern(e){return unsafeCoerce$0(e,cst_vkern$0)}
    var
     Js_of_ocaml_Dom_svg=
      [0,
       xmlns,
       SVGError,
       createElement$0,
       createA$0,
       createAltGlyph,
       createAltGlyphDef,
       createAltGlyphItem,
       createAnimate,
       createAnimateColor,
       createAnimateMotion,
       createAnimateTransform,
       createCircle,
       createClipPath,
       createCursor,
       createDefs,
       createDesc,
       createEllipse,
       createFilter,
       createFont,
       createFontFace,
       createFontFaceFormat,
       createFontFaceName,
       createFontFaceSrc,
       createFontFaceUri,
       createForeignObject,
       createG,
       createGlyph,
       createGlyphRef,
       createhkern,
       createImage,
       createLineElement,
       createLinearElement,
       createMask,
       createMetaData,
       createMissingGlyph,
       createMPath,
       createPath,
       createPattern,
       createPolygon,
       createPolyline,
       createRadialgradient,
       createRect,
       createScript$0,
       createSet,
       createStop,
       createStyle$0,
       createSvg,
       createSwitch,
       createSymbol,
       createTextElement,
       createTextpath,
       createTitle$0,
       createTref,
       createTspan,
       createUse,
       createView,
       createvkern,
       svg_element,
       document$1,
       getElementById$0,
       [0,
        element$2,
        a$0,
        altGlyph,
        altGlyphDef,
        altGlyphItem,
        animate,
        animateColor,
        animateMotion,
        animateTransform,
        circle,
        clipPath,
        cursor,
        defs,
        desc,
        ellipse,
        filter,
        font,
        fontFace,
        fontFaceFormat,
        fontFaceName,
        fontFaceSrc,
        fontFaceUri,
        foreignObject,
        g,
        glyph,
        glyphRef,
        hkern,
        image,
        lineElement,
        linearElement,
        mask,
        metaData,
        missingGlyph,
        mPath,
        path$0,
        pattern,
        polygon,
        polyline,
        radialgradient,
        rect,
        script$0,
        set$1,
        stop,
        style$0,
        svg,
        switch$0,
        symbol$12,
        textElement,
        textpath,
        title$0,
        tref,
        tspan,
        use,
        view,
        vkern]];
    caml_register_global(1667,Js_of_ocaml_Dom_svg,"Js_of_ocaml__Dom_svg");
    function withCredentials(b)
     {var init={};init.withCredentials = ! ! b;return init}
    var
     eventSource=Unsafe[1].EventSource,
     eventSource_options=Unsafe[1].EventSource,
     Js_of_ocaml_EventSource=
      [0,withCredentials,eventSource,eventSource_options,addEventListener];
    caml_register_global
     (1668,Js_of_ocaml_EventSource,"Js_of_ocaml__EventSource");
    var
     console=runtime.caml_js_get_console(0),
     Js_of_ocaml_Firebug=[0,console];
    caml_register_global(1669,Js_of_ocaml_Firebug,"Js_of_ocaml__Firebug");
    function empty_position_options(param){return {}}
    var
     x=Unsafe[1].navigator,
     geolocation=caml_call1(Optdef[5],x)?x.geolocation:x;
    function is_supported$2(param){return caml_call1(Optdef[5],geolocation)}
    var
     Js_of_ocaml_Geolocation=
      [0,empty_position_options,geolocation,is_supported$2];
    caml_register_global
     (1670,Js_of_ocaml_Geolocation,"Js_of_ocaml__Geolocation");
    function object_options(param){return {"localeMatcher":"best fit"}}
    function options(param)
     {return {"localeMatcher":"best fit",
              "usage":"sort",
              "sensitivity":"variant",
              "ignorePunctuation":false$0,
              "numeric":false$0,
              "caseFirst":"false"}}
    var Collator=[0,object_options,options];
    function options$0(param)
     {return {"localeMatcher":"best fit",
              "timeZone":t37,
              "hour12":t37,
              "hourCycle":t37,
              "formatMatcher":"best fit",
              "weekday":t37,
              "era":t37,
              "year":t37,
              "month":t37,
              "day":t37,
              "hour":t37,
              "minute":t37,
              "second":t37,
              "timeZoneName":t37}}
    var DateTimeFormat=[0,object_options,options$0];
    function options$1(param)
     {return {"localeMatcher":"best fit",
              "style":"decimal",
              "currency":t37,
              "currencyDisplay":t37,
              "useGrouping":true$0,
              "minimumIntegerDigits":t37,
              "minimumFractionDigits":t37,
              "maximumFractionDigits":t37,
              "minimumSignificantDigits":t37,
              "maximumSignificantDigits":t37}}
    var NumberFormat=[0,object_options,options$1];
    function options$2(param)
     {return {"localeMatcher":"best fit","type":"cardinal"}}
    var
     PluralRules=[0,object_options,options$2],
     intl=Unsafe[1].Intl,
     collator_constr=Unsafe[1].Intl.Collator,
     dateTimeFormat_constr=Unsafe[1].Intl.DateTimeFormat,
     numberFormat_constr=Unsafe[1].Intl.NumberFormat,
     pluralRules_constr=Unsafe[1].Intl.PluralRules;
    function is_supported$3(param){return caml_call1(Optdef[5],intl)}
    var
     Js_of_ocaml_Intl=
      [0,
       Collator,
       DateTimeFormat,
       NumberFormat,
       PluralRules,
       intl,
       collator_constr,
       dateTimeFormat_constr,
       numberFormat_constr,
       pluralRules_constr,
       is_supported$3];
    caml_register_global(1671,Js_of_ocaml_Intl,"Js_of_ocaml__Intl");
    var Js_of_ocaml$0=[0];
    caml_register_global(1672,Js_of_ocaml$0,"Js_of_ocaml");
    return}
  (function(){return this}()));


//# 1 "../../.js/uutf/uutf.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_blit_bytes=runtime.caml_blit_bytes,
     caml_bytes_unsafe_get=runtime.caml_bytes_unsafe_get,
     caml_check_bound=runtime.caml_check_bound,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_UTF_8$0=caml_string_of_jsbytes("UTF-8"),
     cst_US_ASCII$0=caml_string_of_jsbytes("US-ASCII"),
     cst_ISO_8859_1$1=caml_string_of_jsbytes("ISO-8859-1"),
     cst_UTF_16$0=caml_string_of_jsbytes("UTF-16"),
     cst_UTF_16LE$0=caml_string_of_jsbytes("UTF-16LE"),
     cst_UTF_16BE$0=caml_string_of_jsbytes("UTF-16BE"),
     cst_ISO646_US=caml_string_of_jsbytes("ISO646-US"),
     cst_CSISOLATIN1=caml_string_of_jsbytes("CSISOLATIN1"),
     cst_ANSI_X3_4_1968=caml_string_of_jsbytes("ANSI_X3.4-1968"),
     cst_ANSI_X3_4_1986=caml_string_of_jsbytes("ANSI_X3.4-1986"),
     cst_ASCII=caml_string_of_jsbytes("ASCII"),
     cst_CP367=caml_string_of_jsbytes("CP367"),
     cst_CP819=caml_string_of_jsbytes("CP819"),
     cst_CSASCII=caml_string_of_jsbytes("CSASCII"),
     cst_IBM367=caml_string_of_jsbytes("IBM367"),
     cst_IBM819=caml_string_of_jsbytes("IBM819"),
     cst_ISO_8859_1$0=caml_string_of_jsbytes("ISO-8859-1"),
     cst_ISO_IR_100=caml_string_of_jsbytes("ISO-IR-100"),
     cst_ISO_IR_6=caml_string_of_jsbytes("ISO-IR-6"),
     cst_US=caml_string_of_jsbytes("US"),
     cst_ISO_646_IRV_1991=caml_string_of_jsbytes("ISO_646.IRV:1991"),
     cst_ISO_8859_1=caml_string_of_jsbytes("ISO_8859-1"),
     cst_ISO_8859_1_1987=caml_string_of_jsbytes("ISO_8859-1:1987"),
     cst_L1=caml_string_of_jsbytes("L1"),
     cst_LATIN1=caml_string_of_jsbytes("LATIN1"),
     cst_US_ASCII=caml_string_of_jsbytes("US-ASCII"),
     cst_UTF_16=caml_string_of_jsbytes("UTF-16"),
     cst_UTF_16BE=caml_string_of_jsbytes("UTF-16BE"),
     cst_UTF_16LE=caml_string_of_jsbytes("UTF-16LE"),
     cst_UTF_8=caml_string_of_jsbytes("UTF-8"),
     cst_expected_Await_encode=
      caml_string_of_jsbytes("expected `Await encode"),
     Stdlib_uchar=global_data.Stdlib__uchar,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Stdlib_bytes=global_data.Stdlib__bytes,
     Stdlib=global_data.Stdlib,
     Assert_failure=global_data.Assert_failure,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_printf=global_data.Stdlib__printf,
     Stdlib_format=global_data.Stdlib__format,
     _a_=Stdlib_format[123],
     _B_=[0,caml_string_of_jsbytes("src/uutf.ml"),364,9],
     _u_=
      [0,
       [11,caml_string_of_jsbytes("`Await"),0],
       caml_string_of_jsbytes("`Await")],
     _v_=
      [0,[11,caml_string_of_jsbytes("`End"),0],caml_string_of_jsbytes("`End")],
     _w_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,caml_string_of_jsbytes("`Uchar U+"),[4,8,[0,2,4],0,[17,0,0]]]],
       caml_string_of_jsbytes("@[`Uchar U+%04X@]")],
     _x_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,caml_string_of_jsbytes("`Malformed ("),0]],
       caml_string_of_jsbytes("@[`Malformed (")],
     _y_=[0,[4,8,[0,2,2],0,0],caml_string_of_jsbytes("%02X")],
     _A_=[0,[12,32,[4,8,[0,2,2],0,0]],caml_string_of_jsbytes(" %02X")],
     _z_=[0,[12,41,[17,0,0]],caml_string_of_jsbytes(")@]")],
     _p_=[0,-211555818,3299808],
     _k_=[0,-211558048,3299808],
     _q_=[0,684370880,3299808],
     _o_=[0,684370880,427938126],
     _l_=[0,-211558048,427938126],
     _m_=[0,caml_string_of_jsbytes("src/uutf.ml"),154,55],
     _n_=[0,684370880,427938126],
     _r_=[0,caml_string_of_jsbytes("src/uutf.ml"),153,55],
     _s_=[0,caml_string_of_jsbytes("src/uutf.ml"),155,55],
     _t_=[0,684370880,3455931],
     _j_=[0,caml_string_of_jsbytes("src/uutf.ml"),121,9],
     _c_=[0,684370880],
     _d_=[0,-211555818],
     _e_=[0,-211558048],
     _f_=[0,143365725],
     _g_=[0,423112016],
     _h_=[0,338302576],
     _b_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid bounds (index "),
        [4,0,0,0,[11,caml_string_of_jsbytes(", length "),[4,0,0,0,[12,41,0]]]]],
       caml_string_of_jsbytes("invalid bounds (index %d, length %d)")],
     _i_=
      [0,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       4,
       4,
       4,
       4,
       4,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0];
    function invalid_bounds(j,l)
     {var _aF_=caml_call3(Stdlib_printf[4],_b_,j,l);
      return caml_call1(Stdlib[1],_aF_)}
    function unsafe_set_byte(s,j,byte$0)
     {runtime.caml_bytes_unsafe_set(s,j,byte$0);return 0}
    var
     u_bom=caml_call1(Stdlib_uchar[9],65279),
     u_rep=caml_call1(Stdlib_uchar[9],65533);
    function encoding_of_string(s)
     {var
       match=caml_call1(Stdlib_string[25],s),
       _aD_=caml_string_compare(match,cst_ISO646_US),
       switch$1=0;
      if(0 <= _aD_)
       {if(0 < _aD_)
         {var switch$0=caml_string_compare(match,cst_US);
          if(0 <= switch$0)
           {if(0 < switch$0 && caml_string_notequal(match,cst_US_ASCII))
             {if(! caml_string_notequal(match,cst_UTF_16))return _f_;
              if(! caml_string_notequal(match,cst_UTF_16BE))return _e_;
              if(! caml_string_notequal(match,cst_UTF_16LE))return _d_;
              if(! caml_string_notequal(match,cst_UTF_8))return _c_;
              switch$1 = 2}}
          else
           if(caml_string_notequal(match,cst_ISO_646_IRV_1991))
            if
             (caml_string_notequal(match,cst_ISO_8859_1)
              &&
              caml_string_notequal(match,cst_ISO_8859_1_1987)
              &&
              caml_string_notequal(match,cst_L1)
              &&
              caml_string_notequal(match,cst_LATIN1))
             switch$1 = 2;
            else
             switch$1 = 1}}
      else
       {var _aE_=caml_string_compare(match,cst_CSISOLATIN1);
        if(0 <= _aE_)
         if(0 < _aE_)
          {if(caml_string_notequal(match,cst_IBM367))
            if
             (caml_string_notequal(match,cst_IBM819)
              &&
              caml_string_notequal(match,cst_ISO_8859_1$0)
              &&
              caml_string_notequal(match,cst_ISO_IR_100))
             {if(caml_string_notequal(match,cst_ISO_IR_6))switch$1 = 2}
            else
             switch$1 = 1}
         else
          switch$1 = 1;
        else
         if
          (caml_string_notequal(match,cst_ANSI_X3_4_1968)
           &&
           caml_string_notequal(match,cst_ANSI_X3_4_1986)
           &&
           caml_string_notequal(match,cst_ASCII)
           &&
           caml_string_notequal(match,cst_CP367))
          if(caml_string_notequal(match,cst_CP819))
           {if(caml_string_notequal(match,cst_CSASCII))switch$1 = 2}
          else
           switch$1 = 1}
      switch(switch$1){case 2:return 0;case 0:return _g_;default:return _h_}}
    function encoding_to_string(param)
     {return 143365725 <= param
              ?423112016 <= param
                ?684370880 <= param?cst_UTF_8$0:cst_US_ASCII$0
                :338302576 <= param?cst_ISO_8859_1$1:cst_UTF_16$0
              :-211555818 <= param?cst_UTF_16LE$0:cst_UTF_16BE$0}
    function malformed(s,j,l)
     {return [0,659980059,caml_call3(Stdlib_bytes[8],s,j,l)]}
    function malformed_pair(be,hi,s,j,l)
     {var bs1=caml_call3(Stdlib_bytes[7],s,j,l),bs0=caml_create_bytes(2);
      if(be)var j0=0,j1=1;else var j0=1,j1=0;
      unsafe_set_byte(bs0,j0,hi >>> 8 | 0);
      unsafe_set_byte(bs0,j1,hi & 255);
      var _aC_=caml_call2(Stdlib_bytes[14],bs0,bs1);
      return [0,659980059,caml_call1(Stdlib_bytes[42],_aC_)]}
    var utf_8_len=_i_.slice();
    function r_utf_8(s,j,l)
     {function uchar(c){return [0,852405675,caml_call1(Stdlib_uchar[9],c)]}
      var switcher=l - 1 | 0;
      if(3 < switcher >>> 0)throw [0,Assert_failure,_j_];
      switch(switcher)
       {case 0:return uchar(caml_bytes_unsafe_get(s,j));
        case 1:
         var
          b0=caml_bytes_unsafe_get(s,j),
          b1=caml_bytes_unsafe_get(s,j + 1 | 0);
         return 2 === (b1 >>> 6 | 0)
                 ?uchar((b0 & 31) << 6 | b1 & 63)
                 :malformed(s,j,l);
        case 2:
         var
          b0$0=caml_bytes_unsafe_get(s,j),
          b1$0=caml_bytes_unsafe_get(s,j + 1 | 0),
          b2=caml_bytes_unsafe_get(s,j + 2 | 0),
          c=(b0$0 & 15) << 12 | (b1$0 & 63) << 6 | b2 & 63;
         if(2 === (b2 >>> 6 | 0))
          {if(224 === b0$0)
            {if(160 <= b1$0 && ! (191 < b1$0))return uchar(c);
             return malformed(s,j,l)}
           if(237 === b0$0)
            {if(128 <= b1$0 && ! (159 < b1$0))return uchar(c);
             return malformed(s,j,l)}
           return 2 === (b1$0 >>> 6 | 0)?uchar(c):malformed(s,j,l)}
         return malformed(s,j,l);
        default:
         var
          b0$1=caml_bytes_unsafe_get(s,j),
          b1$1=caml_bytes_unsafe_get(s,j + 1 | 0),
          b2$0=caml_bytes_unsafe_get(s,j + 2 | 0),
          b3=caml_bytes_unsafe_get(s,j + 3 | 0),
          c$0=
           (b0$1 & 7)
           <<
           18
           |
           (b1$1 & 63)
           <<
           12
           |
           (b2$0 & 63)
           <<
           6
           |
           b3
           &
           63;
         if(2 === (b3 >>> 6 | 0) && 2 === (b2$0 >>> 6 | 0))
          {if(240 === b0$1)
            {if(144 <= b1$1 && ! (191 < b1$1))return uchar(c$0);
             return malformed(s,j,l)}
           if(244 === b0$1)
            {if(128 <= b1$1 && ! (143 < b1$1))return uchar(c$0);
             return malformed(s,j,l)}
           return 2 === (b1$1 >>> 6 | 0)?uchar(c$0):malformed(s,j,l)}
         return malformed(s,j,l)}}
    function r_utf_16(s,j0,j1)
     {var
       b0=caml_bytes_unsafe_get(s,j0),
       b1=caml_bytes_unsafe_get(s,j1),
       u=b0 << 8 | b1;
      if(55296 <= u && ! (57343 < u))
       return 56319 < u
               ?malformed(s,caml_call2(Stdlib[16],j0,j1),2)
               :[0,16161,u];
      return [0,852405675,caml_call1(Stdlib_uchar[9],u)]}
    function r_utf_16_lo(hi,s,j0,j1)
     {var
       b0=caml_bytes_unsafe_get(s,j0),
       b1=caml_bytes_unsafe_get(s,j1),
       lo=b0 << 8 | b1;
      if(56320 <= lo && ! (57343 < lo))
       return [0,
               852405675,
               caml_call1
                (Stdlib_uchar[9],((hi & 1023) << 10 | lo & 1023) + 65536 | 0)];
      return malformed_pair(j0 < j1?1:0,hi,s,caml_call2(Stdlib[16],j0,j1),2)}
    function r_encoding(s,j,l)
     {function some(i){return i < l?[0,caml_bytes_unsafe_get(s,j + i | 0)]:0}
      var match=some(0),match$0=some(1),match$1=some(2);
      if(match)
       {var _aB_=match[1],switch$0=0;
        if(240 <= _aB_)
         if(254 === _aB_)
          {if(match$0){if(255 === match$0[1])return _k_;switch$0 = 1}}
         else
          if(255 === _aB_)
           {if(match$0){if(254 === match$0[1])return _p_;switch$0 = 1}}
          else
           switch$0 = 1;
        else
         if(0 === _aB_)
          {if(match$0)
            {var p=match$0[1];
             if(0 < p)return [0,-211558048,[0,605782321,p]];
             switch$0 = 1}}
         else
          if(239 <= _aB_)
           {if(match$0)
             if(187 === match$0[1])
              {if(match$1 && 191 === match$1[1])return _q_}
             else
              switch$0 = 1}
          else
           switch$0 = 1;
        if(switch$0 && match$0 && 0 === match$0[1] && 0 < _aB_)
         return [0,-211555818,[0,605782321,_aB_]];
        if(0 === caml_check_bound(utf_8_len,_aB_)[1 + _aB_])
         {if(match$0)return _l_;
          if(match$1)throw [0,Assert_failure,_m_];
          return _n_}
        return _o_}
      if(match$0)throw [0,Assert_failure,_r_];
      if(match$1)throw [0,Assert_failure,_s_];
      return _t_}
    function pp_decode(ppf,param)
     {if(typeof param === "number")
       return 1006505782 <= param
               ?caml_call2(_a_,ppf,_u_)
               :caml_call2(_a_,ppf,_v_);
      if(852405675 <= param[1])
       {var u=param[2];
        return caml_call3(_a_,ppf,_w_,caml_call1(Stdlib_uchar[10],u))}
      var bs=param[2],l=caml_ml_string_length(bs);
      caml_call2(_a_,ppf,_x_);
      if(0 < l)caml_call3(_a_,ppf,_y_,caml_string_get(bs,0));
      var _az_=l - 1 | 0,_ay_=1;
      if(! (_az_ < 1))
       {var i=_ay_;
        for(;;)
         {caml_call3(_a_,ppf,_A_,caml_string_get(bs,i));
          var _aA_=i + 1 | 0;
          if(_az_ !== i){var i=_aA_;continue}
          break}}
      return caml_call2(_a_,ppf,_z_)}
    function i_rem(d){return (d[7] - d[6] | 0) + 1 | 0}
    function eoi(d)
     {d[5] = Stdlib_bytes[3];d[6] = 0;d[7] = Stdlib[20];return 0}
    function src(d,s,j,l)
     {if(0 <= j && 0 <= l && ! (caml_ml_bytes_length(s) < (j + l | 0)))
       return 0 === l?eoi(d):(d[5] = s,d[6] = j,d[7] = (j + l | 0) - 1 | 0,0);
      return invalid_bounds(j,l)}
    function refill(k,d)
     {var _ax_=d[1];
      if(typeof _ax_ === "number"){d[18] = k;return 1006505782}
      if(438511779 <= _ax_[1])
       {var
         ic=_ax_[2],
         rc=caml_call4(Stdlib[84],ic,d[5],0,caml_ml_bytes_length(d[5]));
        src(d,d[5],0,rc);
        return caml_call1(k,d)}
      eoi(d);
      return caml_call1(k,d)}
    function t_need(d,need){d[9] = 0;d[10] = need;return 0}
    function t_fill(k,d)
     {function blit(d,l)
       {caml_blit_bytes(d[5],d[6],d[8],d[9],l);
        d[6] = d[6] + l | 0;
        d[9] = d[9] + l | 0;
        return 0}
      var rem=i_rem(d);
      if(0 <= rem)
       {var need=d[10] - d[9] | 0;
        return rem < need
                ?(blit(d,rem),refill(function(_aw_){return t_fill(k,_aw_)},d))
                :(blit(d,need),caml_call1(k,d))}
      return caml_call1(k,d)}
    function ret(k,v,byte_count,d)
     {d[18] = k;d[15] = d[15] + byte_count | 0;return caml_call2(d[17],d,v)}
    function decode_us_ascii(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var j=d[6];
        d[6] = d[6] + 1 | 0;
        var
         _au_=d[5],
         b0=caml_bytes_unsafe_get(_au_,j),
         _at_=1,
         _av_=
          127 < b0
           ?malformed(_au_,j,1)
           :[0,852405675,caml_call1(Stdlib_uchar[9],b0)];
        return ret(decode_us_ascii,_av_,_at_,d)}
      return 0 <= rem?refill(decode_us_ascii,d):3455931}
    function decode_iso_8859_1(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var j=d[6];
        d[6] = d[6] + 1 | 0;
        return ret
                (decode_iso_8859_1,
                 [0,
                  852405675,
                  caml_call1(Stdlib_uchar[9],caml_bytes_unsafe_get(d[5],j))],
                 1,
                 d)}
      return 0 <= rem?refill(decode_iso_8859_1,d):3455931}
    function t_decode_utf_8(d)
     {if(d[9] < d[10])
       {var _ar_=d[9];return ret(decode_utf_8,malformed(d[8],0,d[9]),_ar_,d)}
      var _as_=d[9];
      return ret(decode_utf_8,r_utf_8(d[8],0,d[9]),_as_,d)}
    function decode_utf_8(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var need=utf_8_len[1 + caml_bytes_unsafe_get(d[5],d[6])];
        if(rem < need){t_need(d,need);return t_fill(t_decode_utf_8,d)}
        var j=d[6];
        return 0 === need
                ?(d[6]
                  =
                  d[6]
                  +
                  1
                  |
                  0,
                  ret(decode_utf_8,malformed(d[5],j,1),1,d))
                :(d[6]
                  =
                  d[6]
                  +
                  need
                  |
                  0,
                  ret(decode_utf_8,r_utf_8(d[5],j,need),need,d))}
      return 0 <= rem?refill(decode_utf_8,d):3455931}
    function t_decode_utf_16be_lo(hi,d)
     {var bcount=d[9] + 2 | 0;
      return d[9] < d[10]
              ?ret(decode_utf_16be,malformed_pair(1,hi,d[8],0,d[9]),bcount,d)
              :ret(decode_utf_16be,r_utf_16_lo(hi,d[8],0,1),bcount,d)}
    function decode_utf_16be_lo(v,d)
     {if(659980059 <= v[1])return ret(decode_utf_16be,v,2,d);
      var hi=v[2],rem=i_rem(d);
      if(2 <= rem)
       {var j=d[6];
        d[6] = d[6] + 2 | 0;
        return ret(decode_utf_16be,r_utf_16_lo(hi,d[5],j,j + 1 | 0),4,d)}
      t_need(d,2);
      return t_fill(function(_aq_){return t_decode_utf_16be_lo(hi,_aq_)},d)}
    function t_decode_utf_16be(d)
     {if(d[9] < d[10])
       {var _ap_=d[9];
        return ret(decode_utf_16be,malformed(d[8],0,d[9]),_ap_,d)}
      return decode_utf_16be_lo(r_utf_16(d[8],0,1),d)}
    function decode_utf_16be(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {if(2 <= rem)
         {var j=d[6];
          d[6] = d[6] + 2 | 0;
          return decode_utf_16be_lo(r_utf_16(d[5],j,j + 1 | 0),d)}
        t_need(d,2);
        return t_fill(t_decode_utf_16be,d)}
      return 0 <= rem?refill(decode_utf_16be,d):3455931}
    function t_decode_utf_16_lo(hi,d)
     {var bcount=d[9] + 2 | 0;
      return d[9] < d[10]
              ?ret(decode_utf_16,malformed_pair(0,hi,d[8],0,d[9]),bcount,d)
              :ret(decode_utf_16,r_utf_16_lo(hi,d[8],1,0),bcount,d)}
    function decode_utf_16le_lo(v,d)
     {if(659980059 <= v[1])return ret(decode_utf_16,v,2,d);
      var hi=v[2],rem=i_rem(d);
      if(2 <= rem)
       {var j=d[6];
        d[6] = d[6] + 2 | 0;
        return ret(decode_utf_16,r_utf_16_lo(hi,d[5],j + 1 | 0,j),4,d)}
      t_need(d,2);
      return t_fill(function(_ao_){return t_decode_utf_16_lo(hi,_ao_)},d)}
    function t_decode_utf_16(d)
     {if(d[9] < d[10])
       {var _an_=d[9];return ret(decode_utf_16,malformed(d[8],0,d[9]),_an_,d)}
      return decode_utf_16le_lo(r_utf_16(d[8],1,0),d)}
    function decode_utf_16(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {if(2 <= rem)
         {var j=d[6];
          d[6] = d[6] + 2 | 0;
          return decode_utf_16le_lo(r_utf_16(d[5],j + 1 | 0,j),d)}
        t_need(d,2);
        return t_fill(t_decode_utf_16,d)}
      return 0 <= rem?refill(decode_utf_16,d):3455931}
    function guessed_utf_16(d,be,v)
     {if(be)
       var
        decode_utf_16$0=decode_utf_16be,
        t_decode_utf_16$0=t_decode_utf_16be,
        t_decode_utf_16_lo$0=t_decode_utf_16be_lo,
        j0=0,
        j1=1;
      else
       var
        decode_utf_16$0=decode_utf_16,
        t_decode_utf_16$0=t_decode_utf_16,
        t_decode_utf_16_lo$0=t_decode_utf_16_lo,
        j0=1,
        j1=0;
      function b3(k,d)
       {return 3 <= d[9]
                ?(d[10]
                  =
                  2,
                  d[9]
                  =
                  1,
                  unsafe_set_byte(d[8],0,caml_bytes_unsafe_get(d[8],2)),
                  t_fill(k,d))
                :decode_utf_16$0(d)}
      if(typeof v === "number")
       {if(427938126 <= v)
         {var v$0=r_utf_16(d[8],j0,j1);
          if(659980059 <= v$0[1])
           {var _ad_=2;
            return ret
                    (function(_am_){return b3(t_decode_utf_16$0,_am_)},
                     v$0,
                     _ad_,
                     d)}
          var hi=v$0[2];
          if(3 <= d[9])
           return b3(function(_al_){return t_decode_utf_16_lo$0(hi,_al_)},d);
          var _ae_=d[9];
          return ret
                  (decode_utf_16$0,
                   malformed_pair(be,hi,Stdlib_bytes[3],0,0),
                   _ae_,
                   d)}
        var _af_=2,_ag_=[0,852405675,u_bom];
        return ret
                (function(_ak_){return b3(t_decode_utf_16$0,_ak_)},
                 _ag_,
                 _af_,
                 d)}
      var u=v[2],_ah_=2,_ai_=[0,852405675,caml_call1(Stdlib_uchar[9],u)];
      return ret
              (function(_aj_){return b3(t_decode_utf_16$0,_aj_)},_ai_,_ah_,d)}
    function k(d)
     {function setup(d)
       {var match=r_encoding(d[8],0,d[9]),_ac_=match[1];
        if(-211555818 === _ac_)
         {var r=match[2];
          d[2] = -211555818;
          d[18] = decode_utf_16;
          return guessed_utf_16(d,0,r)}
        if(684370880 <= _ac_)
         {var r$0=match[2];
          d[2] = 684370880;
          d[18] = decode_utf_8;
          if(3455931 === r$0)return 3455931;
          if(427938126 <= r$0)
           {var
             b3=
              function(d)
               {var
                 b3=caml_bytes_unsafe_get(d[8],2),
                 n=caml_check_bound(utf_8_len,b3)[1 + b3];
                return 0 === n
                        ?ret(decode_utf_8,malformed(d[8],2,1),1,d)
                        :(d[10]
                          =
                          n,
                          d[9]
                          =
                          1,
                          unsafe_set_byte(d[8],0,b3),
                          t_fill(t_decode_utf_8,d))},
             b2=
              function(d)
               {var
                 b2=caml_bytes_unsafe_get(d[8],1),
                 b3$0=2 < d[9]?b3:decode_utf_8,
                 n=caml_check_bound(utf_8_len,b2)[1 + b2];
                if(0 === n)return ret(b3$0,malformed(d[8],1,1),1,d);
                if(1 === n)return ret(b3$0,r_utf_8(d[8],1,1),1,d);
                d[10] = n;
                unsafe_set_byte(d[8],0,b2);
                if(3 <= d[9])
                 {d[9] = 2;
                  unsafe_set_byte(d[8],1,caml_bytes_unsafe_get(d[8],2))}
                else
                 d[9] = 1;
                return t_fill(t_decode_utf_8,d)},
             b1=caml_bytes_unsafe_get(d[8],0),
             b2$0=1 < d[9]?b2:decode_utf_8,
             n=caml_check_bound(utf_8_len,b1)[1 + b1];
            if(4 < n >>> 0)throw [0,Assert_failure,_B_];
            switch(n)
             {case 0:return ret(b2$0,malformed(d[8],0,1),1,d);
              case 1:return ret(b2$0,r_utf_8(d[8],0,1),1,d);
              case 2:
               return 2 <= d[9]
                       ?3 <= d[9]
                         ?ret(b3,r_utf_8(d[8],0,2),2,d)
                         :ret(decode_utf_8,r_utf_8(d[8],0,2),2,d)
                       :ret(decode_utf_8,malformed(d[8],0,1),1,d);
              case 3:
               if(3 <= d[9])return ret(decode_utf_8,r_utf_8(d[8],0,3),3,d);
               var _aa_=d[9];
               return ret(decode_utf_8,malformed(d[8],0,d[9]),_aa_,d);
              default:
               if(3 <= d[9]){d[10] = 4;return t_fill(t_decode_utf_8,d)}
               var _ab_=d[9];
               return ret(decode_utf_8,malformed(d[8],0,d[9]),_ab_,d)}}
          return ret(decode_utf_8,[0,852405675,u_bom],3,d)}
        var r$1=match[2];
        d[2] = -211558048;
        d[18] = decode_utf_16be;
        return guessed_utf_16(d,1,r$1)}
      t_need(d,3);
      return t_fill(setup,d)}
    function nline(d){d[14] = 0;d[13] = d[13] + 1 | 0;return 0}
    function ncol(d){d[14] = d[14] + 1 | 0;return 0}
    function ncount(d){d[16] = d[16] + 1 | 0;return 0}
    function cr(d,b){d[12] = b;return 0}
    function pp(d,v)
     {if(852405675 <= v[1])
       {var
         u=v[2],
         match=caml_call1(Stdlib_uchar[10],u),
         _$_=match - 133 | 0,
         switch$0=0;
        if(8100 < _$_ >>> 0)
         {var switcher=_$_ + 123 | 0;
          if(! (3 < switcher >>> 0))
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              ncount(d);
              return last_cr?v:(nline(d),v);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return v}}
        else
         if(8097 < (_$_ - 1 | 0) >>> 0)switch$0 = 1;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_readline(d,v)
     {if(852405675 <= v[1])
       {var
         u=v[2],
         match=caml_call1(Stdlib_uchar[10],u),
         ___=match - 133 | 0,
         switch$0=0;
        if(8100 < ___ >>> 0)
         {var switcher=___ + 123 | 0;
          if(! (3 < switcher >>> 0))
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
        else
         if(8097 < (___ - 1 | 0) >>> 0)switch$0 = 1;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),[0,852405675,d[4]])
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_nlf(d,v)
     {if(852405675 <= v[1])
       {var u=v[2],match=caml_call1(Stdlib_uchar[10],u),switch$0=0;
        if(14 <= match)
         {if(8232 <= match)
           {if(! (8234 <= match))switch$0 = 1}
          else
           if(133 === match)
            {cr(d,0);ncount(d);nline(d);return [0,852405675,d[4]]}}
        else
         if(10 <= match)
          {var switcher=match - 10 | 0;
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_ascii(d,v)
     {if(852405675 <= v[1])
       {var
         u=v[2],
         match=caml_call1(Stdlib_uchar[10],u),
         _Z_=match - 133 | 0,
         switch$0=0;
        if(8100 < _Z_ >>> 0)
         {var switcher=_Z_ + 123 | 0;
          if(! (3 < switcher >>> 0))
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:break;
             case 2:switch$0 = 1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
        else
         if(8097 < (_Z_ - 1 | 0) >>> 0)switch$0 = 1;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function decode_fun(param)
     {return 143365725 <= param
              ?423112016 <= param
                ?684370880 <= param?decode_utf_8:decode_us_ascii
                :338302576 <= param?decode_iso_8859_1:decode_utf_16be
              :-211555818 <= param?decode_utf_16:decode_utf_16be}
    function decoder(nln,encoding,src)
     {if(nln)
       {var _X_=nln[1],_Y_=_X_[1];
        if(3895880 === _Y_)
         var nl=_X_[2],pp$0=pp_nln_nlf,nl$0=nl;
        else
         if(605782321 <= _Y_)
          var nl$1=_X_[2],pp$0=pp_nln_ascii,nl$0=nl$1;
         else
          var nl$2=_X_[2],pp$0=pp_nln_readline,nl$0=nl$2}
      else
       var nl$3=caml_call1(Stdlib_uchar[9],10),pp$0=pp,nl$0=nl$3;
      if(encoding)
       var e=encoding[1],encoding$0=e,k$0=decode_fun(e);
      else
       var encoding$0=684370880,k$0=k;
      if(typeof src === "number")
       var i=Stdlib_bytes[3],i_pos=1,i_max=0;
      else
       if(438511779 <= src[1])
        var i=caml_create_bytes(65536),i_pos=1,i_max=0;
       else
        var
         s=src[2],
         i_max$0=caml_ml_string_length(s) - 1 | 0,
         i$0=caml_call1(Stdlib_bytes[43],s),
         i=i$0,
         i_pos=0,
         i_max=i_max$0;
      var utf16=143365725 === encoding$0?1:0;
      return [0,
              src,
              encoding$0,
              nln,
              nl$0,
              i,
              i_pos,
              i_max,
              caml_create_bytes(4),
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              function(d,v)
               {if(852405675 <= v[1])
                 {var u=v[2],match=caml_call1(Stdlib_uchar[10],u);
                  if(65279 === match)
                   {if(utf16){d[2] = -211558048;d[18] = decode_utf_16be}
                    d[11] = 1;
                    d[17] = pp$0;
                    return caml_call1(d[18],d)}
                  if(65534 === match && utf16)
                   {d[2] = -211555818;
                    d[18] = decode_utf_16;
                    d[11] = 1;
                    d[17] = pp$0;
                    return caml_call1(d[18],d)}
                  d[11] = 0;
                  d[17] = pp$0;
                  return caml_call2(d[17],d,v)}
                d[11] = 0;
                d[17] = pp$0;
                return caml_call2(d[17],d,v)},
              k$0]}
    function decode(d){return caml_call1(d[18],d)}
    function decoder_line(d){return d[13]}
    function decoder_col(d){return d[14]}
    function decoder_byte_count(d){return d[15]}
    function decoder_count(d){return d[16]}
    function decoder_removed_bom(d){return d[11]}
    function decoder_src(d){return d[1]}
    function decoder_nln(d){return d[3]}
    function decoder_encoding(d){return d[2]}
    function set_decoder_encoding(d,e)
     {d[2] = e;d[18] = decode_fun(e);return 0}
    function o_rem(e){return (e[5] - e[4] | 0) + 1 | 0}
    function dst(e,s,j,l)
     {var _U_=j < 0?1:0;
      if(_U_)
       var _V_=_U_;
      else
       var
        _W_=l < 0?1:0,
        _V_=_W_ || (caml_ml_bytes_length(s) < (j + l | 0)?1:0);
      if(_V_)invalid_bounds(j,l);
      e[3] = s;
      e[4] = j;
      e[5] = (j + l | 0) - 1 | 0;
      return 0}
    function flush(k,e)
     {var _T_=e[1];
      if(typeof _T_ === "number")
       {e[9]
        =
        function(e,param)
         {if(typeof param === "number" && 1006505782 <= param)
           return caml_call1(k,e);
          return caml_call1(Stdlib[1],cst_expected_Await_encode)};
        return 939392865}
      if(438511779 <= _T_[1])
       {var oc=_T_[2];
        caml_call4(Stdlib[68],oc,e[3],0,e[4]);
        e[4] = 0;
        return caml_call1(k,e)}
      var b=_T_[2],o=caml_call1(Stdlib_bytes[42],e[3]);
      caml_call4(Stdlib_buffer[16],b,o,0,e[4]);
      e[4] = 0;
      return caml_call1(k,e)}
    function t_range(e,max){e[7] = 0;e[8] = max;return 0}
    function t_flush(k,e)
     {function blit(e,l)
       {caml_blit_bytes(e[6],e[7],e[3],e[4],l);
        e[4] = e[4] + l | 0;
        e[7] = e[7] + l | 0;
        return 0}
      var rem=o_rem(e),len=(e[8] - e[7] | 0) + 1 | 0;
      return rem < len
              ?(blit(e,rem),flush(function(_S_){return t_flush(k,_S_)},e))
              :(blit(e,len),caml_call1(k,e))}
    function encode_utf_8(e,v)
     {function k(e){e[9] = encode_utf_8;return 17724}
      if(typeof v === "number")return 1006505782 <= v?k(e):flush(k,e);
      var u=v[2],u$0=caml_call1(Stdlib_uchar[10],u),rem=o_rem(e);
      if(127 < u$0)
       {if(2047 < u$0)
         {if(65535 < u$0)
           {if(4 <= rem)
             {var j=e[4];e[4] = e[4] + 4 | 0;var s=e[3],j$0=j,k$0=k}
            else
             {t_range(e,3);
              var
               _M_=function(_R_){return t_flush(k,_R_)},
               s=e[6],
               j$0=0,
               k$0=_M_}
            unsafe_set_byte(s,j$0,240 | u$0 >>> 18 | 0);
            unsafe_set_byte(s,j$0 + 1 | 0,128 | (u$0 >>> 12 | 0) & 63);
            unsafe_set_byte(s,j$0 + 2 | 0,128 | (u$0 >>> 6 | 0) & 63);
            unsafe_set_byte(s,j$0 + 3 | 0,128 | u$0 & 63);
            return k$0(e)}
          if(3 <= rem)
           {var j$1=e[4];e[4] = e[4] + 3 | 0;var s$0=e[3],j$2=j$1,k$1=k}
          else
           {t_range(e,2);
            var
             _N_=function(_Q_){return t_flush(k,_Q_)},
             s$0=e[6],
             j$2=0,
             k$1=_N_}
          unsafe_set_byte(s$0,j$2,224 | u$0 >>> 12 | 0);
          unsafe_set_byte(s$0,j$2 + 1 | 0,128 | (u$0 >>> 6 | 0) & 63);
          unsafe_set_byte(s$0,j$2 + 2 | 0,128 | u$0 & 63);
          return k$1(e)}
        if(2 <= rem)
         {var j$3=e[4];e[4] = e[4] + 2 | 0;var s$1=e[3],j$4=j$3,k$2=k}
        else
         {t_range(e,1);
          var _O_=function(_P_){return t_flush(k,_P_)},s$1=e[6],j$4=0,k$2=_O_}
        unsafe_set_byte(s$1,j$4,192 | u$0 >>> 6 | 0);
        unsafe_set_byte(s$1,j$4 + 1 | 0,128 | u$0 & 63);
        return k$2(e)}
      return 1 <= rem
              ?(unsafe_set_byte(e[3],e[4],u$0),e[4] = e[4] + 1 | 0,k(e))
              :flush(function(e){return encode_utf_8(e,v)},e)}
    function encode_utf_16be(e,v)
     {function k(e){e[9] = encode_utf_16be;return 17724}
      if(typeof v === "number")return 1006505782 <= v?k(e):flush(k,e);
      var u=v[2],u$0=caml_call1(Stdlib_uchar[10],u),rem=o_rem(e);
      if(65536 <= u$0)
       {if(4 <= rem)
         {var j=e[4];e[4] = e[4] + 4 | 0;var s=e[3],j$0=j,k$0=k}
        else
         {t_range(e,3);
          var _I_=function(_L_){return t_flush(k,_L_)},s=e[6],j$0=0,k$0=_I_}
        var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        unsafe_set_byte(s,j$0,hi >>> 8 | 0);
        unsafe_set_byte(s,j$0 + 1 | 0,hi & 255);
        unsafe_set_byte(s,j$0 + 2 | 0,lo >>> 8 | 0);
        unsafe_set_byte(s,j$0 + 3 | 0,lo & 255);
        return k$0(e)}
      if(2 <= rem)
       {var j$1=e[4];e[4] = e[4] + 2 | 0;var s$0=e[3],j$2=j$1,k$1=k}
      else
       {t_range(e,1);
        var _J_=function(_K_){return t_flush(k,_K_)},s$0=e[6],j$2=0,k$1=_J_}
      unsafe_set_byte(s$0,j$2,u$0 >>> 8 | 0);
      unsafe_set_byte(s$0,j$2 + 1 | 0,u$0 & 255);
      return k$1(e)}
    function encode_utf_16le(e,v)
     {function k(e){e[9] = encode_utf_16le;return 17724}
      if(typeof v === "number")return 1006505782 <= v?k(e):flush(k,e);
      var u=v[2],u$0=caml_call1(Stdlib_uchar[10],u),rem=o_rem(e);
      if(65536 <= u$0)
       {if(4 <= rem)
         {var j=e[4];e[4] = e[4] + 4 | 0;var s=e[3],j$0=j,k$0=k}
        else
         {t_range(e,3);
          var _E_=function(_H_){return t_flush(k,_H_)},s=e[6],j$0=0,k$0=_E_}
        var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        unsafe_set_byte(s,j$0,hi & 255);
        unsafe_set_byte(s,j$0 + 1 | 0,hi >>> 8 | 0);
        unsafe_set_byte(s,j$0 + 2 | 0,lo & 255);
        unsafe_set_byte(s,j$0 + 3 | 0,lo >>> 8 | 0);
        return k$0(e)}
      if(2 <= rem)
       {var j$1=e[4];e[4] = e[4] + 2 | 0;var s$0=e[3],j$2=j$1,k$1=k}
      else
       {t_range(e,1);
        var _F_=function(_G_){return t_flush(k,_G_)},s$0=e[6],j$2=0,k$1=_F_}
      unsafe_set_byte(s$0,j$2,u$0 & 255);
      unsafe_set_byte(s$0,j$2 + 1 | 0,u$0 >>> 8 | 0);
      return k$1(e)}
    function encoder(encoding,dst)
     {if(typeof dst === "number")
       var o=Stdlib_bytes[3],o_pos=1,o_max=0;
      else
       var o$0=caml_create_bytes(65536),o=o$0,o_pos=0,o_max=65535;
      var
       _D_=
        143365725 <= encoding
         ?684370880 <= encoding?encode_utf_8:encode_utf_16be
         :-211555818 <= encoding?encode_utf_16le:encode_utf_16be;
      return [0,dst,encoding,o,o_pos,o_max,caml_create_bytes(4),1,0,_D_]}
    function encode(e,v){return caml_call2(e[9],e,v)}
    function encoder_encoding(e){return e[2]}
    function encoder_dst(e){return e[1]}
    var Manual=[0,src,dst,o_rem];
    function encoding_guess(s)
     {var
       s$0=caml_call1(Stdlib_bytes[43],s),
       match=
        r_encoding(s$0,0,caml_call2(Stdlib[17],caml_ml_bytes_length(s$0),3)),
       _C_=match[1];
      if(-211555818 === _C_)
       {var d=match[2];return [0,-211555818,3299808 === d?1:0]}
      if(684370880 <= _C_)
       {var d$0=match[2];return [0,684370880,3299808 === d$0?1:0]}
      var d$1=match[2];
      return [0,-211558048,3299808 === d$1?1:0]}
    function fold_utf_8(opt,len,f,acc,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(len)
       var l=len[1],len$0=l;
      else
       var len$0=caml_ml_string_length(s) - pos | 0;
      var
       last=(pos + len$0 | 0) - 1 | 0,
       s$0=caml_call1(Stdlib_bytes[43],s),
       acc$0=acc,
       i=pos;
      for(;;)
       {if(last < i)return acc$0;
        var need=utf_8_len[1 + caml_bytes_unsafe_get(s$0,i)];
        if(0 === need)
         {var
           i$0=i + 1 | 0,
           acc$1=caml_call3(f,acc$0,i,malformed(s$0,i,1)),
           acc$0=acc$1,
           i=i$0;
          continue}
        var rem=(last - i | 0) + 1 | 0;
        if(rem < need)return caml_call3(f,acc$0,i,malformed(s$0,i,rem));
        var
         i$1=i + need | 0,
         acc$2=caml_call3(f,acc$0,i,r_utf_8(s$0,i,need)),
         acc$0=acc$2,
         i=i$1;
        continue}}
    function fold_utf_16be(opt,len,f,acc,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(len)
       var l=len[1],len$0=l;
      else
       var len$0=caml_ml_string_length(s) - pos | 0;
      var
       last=(pos + len$0 | 0) - 1 | 0,
       s$0=caml_call1(Stdlib_bytes[43],s),
       acc$0=acc,
       i=pos;
      for(;;)
       {if(last < i)return acc$0;
        var rem=(last - i | 0) + 1 | 0;
        if(2 <= rem)
         {var v=r_utf_16(s$0,i,i + 1 | 0);
          if(659980059 <= v[1])
           {var i$0=i + 2 | 0,acc$1=caml_call3(f,acc$0,i,v),acc$0=acc$1,i=i$0;
            continue}
          var hi=v[2];
          if(4 <= rem)
           {var
             i$1=i + 4 | 0,
             acc$2=
              caml_call3(f,acc$0,i,r_utf_16_lo(hi,s$0,i + 2 | 0,i + 3 | 0)),
             acc$0=acc$2,
             i=i$1;
            continue}
          return caml_call3(f,acc$0,i,malformed(s$0,i,rem))}
        return caml_call3(f,acc$0,i,malformed(s$0,i,1))}}
    function fold_utf_16le(opt,len,f,acc,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(len)
       var l=len[1],len$0=l;
      else
       var len$0=caml_ml_string_length(s) - pos | 0;
      var
       last=(pos + len$0 | 0) - 1 | 0,
       s$0=caml_call1(Stdlib_bytes[43],s),
       acc$0=acc,
       i=pos;
      for(;;)
       {if(last < i)return acc$0;
        var rem=(last - i | 0) + 1 | 0;
        if(2 <= rem)
         {var v=r_utf_16(s$0,i + 1 | 0,i);
          if(659980059 <= v[1])
           {var i$0=i + 2 | 0,acc$1=caml_call3(f,acc$0,i,v),acc$0=acc$1,i=i$0;
            continue}
          var hi=v[2];
          if(4 <= rem)
           {var
             i$1=i + 4 | 0,
             acc$2=
              caml_call3(f,acc$0,i,r_utf_16_lo(hi,s$0,i + 3 | 0,i + 2 | 0)),
             acc$0=acc$2,
             i=i$1;
            continue}
          return caml_call3(f,acc$0,i,malformed(s$0,i,rem))}
        return caml_call3(f,acc$0,i,malformed(s$0,i,1))}}
    var String=[0,encoding_guess,fold_utf_8,fold_utf_16be,fold_utf_16le];
    function add_utf_8(b,u)
     {var u$0=caml_call1(Stdlib_uchar[10],u);
      function w(byte$0){return caml_call2(Stdlib_buffer[10],b,byte$0)}
      return 127 < u$0
              ?2047 < u$0
                ?65535 < u$0
                  ?(w(240 | u$0 >>> 18 | 0),
                    w(128 | (u$0 >>> 12 | 0) & 63),
                    w(128 | (u$0 >>> 6 | 0) & 63),
                    w(128 | u$0 & 63))
                  :(w(224 | u$0 >>> 12 | 0),
                    w(128 | (u$0 >>> 6 | 0) & 63),
                    w(128 | u$0 & 63))
                :(w(192 | u$0 >>> 6 | 0),w(128 | u$0 & 63))
              :w(u$0)}
    function add_utf_16be(b,u)
     {var u$0=caml_call1(Stdlib_uchar[10],u);
      function w(byte$0){return caml_call2(Stdlib_buffer[10],b,byte$0)}
      if(65536 <= u$0)
       {var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        w(hi >>> 8 | 0);
        w(hi & 255);
        w(lo >>> 8 | 0);
        return w(lo & 255)}
      w(u$0 >>> 8 | 0);
      return w(u$0 & 255)}
    function add_utf_16le(b,u)
     {var u$0=caml_call1(Stdlib_uchar[10],u);
      function w(byte$0){return caml_call2(Stdlib_buffer[10],b,byte$0)}
      if(65536 <= u$0)
       {var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        w(hi & 255);
        w(hi >>> 8 | 0);
        w(lo & 255);
        return w(lo >>> 8 | 0)}
      w(u$0 & 255);
      return w(u$0 >>> 8 | 0)}
    var
     Buffer=[0,add_utf_8,add_utf_16be,add_utf_16le],
     Uutf=
      [0,
       u_bom,
       u_rep,
       encoding_of_string,
       encoding_to_string,
       decoder,
       decode,
       decoder_encoding,
       set_decoder_encoding,
       decoder_line,
       decoder_col,
       decoder_byte_count,
       decoder_count,
       decoder_removed_bom,
       decoder_src,
       decoder_nln,
       pp_decode,
       encoder,
       encode,
       encoder_encoding,
       encoder_dst,
       Manual,
       String,
       Buffer];
    runtime.caml_register_global(66,Uutf,"Uutf");
    return}
  (function(){return this}()));


//# 1 "../../.js/re/re.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_bytes_get=runtime.caml_bytes_get,
     caml_bytes_set=runtime.caml_bytes_set,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_equal=runtime.caml_equal,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int_compare=runtime.caml_int_compare,
     caml_lessthan=runtime.caml_lessthan,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_make_vect=runtime.caml_make_vect,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Re_cset_pick=caml_string_of_jsbytes("Re_cset.pick"),
     cany=[0,[0,0,255],0],
     cst_eps=caml_string_of_jsbytes("eps"),
     cst_cst=caml_string_of_jsbytes("cst"),
     cst_alt=caml_string_of_jsbytes("alt"),
     cst_seq=caml_string_of_jsbytes("seq"),
     cst_rep=caml_string_of_jsbytes("rep"),
     cst_mark=caml_string_of_jsbytes("mark"),
     cst_erase=caml_string_of_jsbytes("erase"),
     cst_before=caml_string_of_jsbytes("before"),
     cst_after=caml_string_of_jsbytes("after"),
     cst_pmark=caml_string_of_jsbytes("pmark"),
     cst_Non_greedy=caml_string_of_jsbytes("Non_greedy"),
     cst_Greedy=caml_string_of_jsbytes("Greedy"),
     cst_first=caml_string_of_jsbytes("first"),
     cst_short=caml_string_of_jsbytes("short"),
     cst_long=caml_string_of_jsbytes("long"),
     eps_expr=[0,0,0],
     cst_Group=caml_string_of_jsbytes("Group"),
     dummy_offset=[0,-1,-1],
     dummy_string=caml_string_of_jsbytes(""),
     cst_Beg_of_line=caml_string_of_jsbytes("Beg_of_line"),
     cst_End_of_line=caml_string_of_jsbytes("End_of_line"),
     cst_Beg_of_word=caml_string_of_jsbytes("Beg_of_word"),
     cst_End_of_word=caml_string_of_jsbytes("End_of_word"),
     cst_Not_bound=caml_string_of_jsbytes("Not_bound"),
     cst_Beg_of_str=caml_string_of_jsbytes("Beg_of_str"),
     cst_End_of_str=caml_string_of_jsbytes("End_of_str"),
     cst_Last_end_of_line=caml_string_of_jsbytes("Last_end_of_line"),
     cst_Start=caml_string_of_jsbytes("Start"),
     cst_Stop=caml_string_of_jsbytes("Stop"),
     cst_Set=caml_string_of_jsbytes("Set"),
     cst_Sequence=caml_string_of_jsbytes("Sequence"),
     cst_Alternative=caml_string_of_jsbytes("Alternative"),
     cst_Repeat=caml_string_of_jsbytes("Repeat"),
     cst_Sem=caml_string_of_jsbytes("Sem"),
     cst_Sem_greedy=caml_string_of_jsbytes("Sem_greedy"),
     cst_Group$0=caml_string_of_jsbytes("Group"),
     cst_No_group=caml_string_of_jsbytes("No_group"),
     cst_Nest=caml_string_of_jsbytes("Nest"),
     cst_Case=caml_string_of_jsbytes("Case"),
     cst_No_case=caml_string_of_jsbytes("No_case"),
     cst_Intersection=caml_string_of_jsbytes("Intersection"),
     cst_Complement=caml_string_of_jsbytes("Complement"),
     cst_Difference=caml_string_of_jsbytes("Difference"),
     cst_Pmark=caml_string_of_jsbytes("Pmark"),
     cst$1=caml_string_of_jsbytes(""),
     cst$2=caml_string_of_jsbytes(""),
     cst_Re_replace=caml_string_of_jsbytes("Re.replace"),
     cst_Re_replace$0=caml_string_of_jsbytes("Re.replace"),
     cst_Re_split=caml_string_of_jsbytes("Re.split"),
     cst_Re_split$0=caml_string_of_jsbytes("Re.split"),
     cst_Re_all=caml_string_of_jsbytes("Re.all"),
     cst_Re_all$0=caml_string_of_jsbytes("Re.all"),
     cst_Re_exec_partial=caml_string_of_jsbytes("Re.exec_partial"),
     cst_Re_execp=caml_string_of_jsbytes("Re.execp"),
     cst_Re_exec_opt=caml_string_of_jsbytes("Re.exec_opt"),
     cst_Re_exec=caml_string_of_jsbytes("Re.exec"),
     cst_Re_diff=caml_string_of_jsbytes("Re.diff"),
     cst_Re_compl=caml_string_of_jsbytes("Re.compl"),
     cst_Re_inter=caml_string_of_jsbytes("Re.inter"),
     cst_Re_repn=caml_string_of_jsbytes("Re.repn"),
     cst_Re_repn$0=caml_string_of_jsbytes("Re.repn"),
     cst$0=caml_string_of_jsbytes("\t "),
     cst_Re_Emacs_Parse_error=caml_string_of_jsbytes("Re__Emacs.Parse_error"),
     cst_Re_Emacs_Not_supported=
      caml_string_of_jsbytes("Re__Emacs.Not_supported"),
     cst_Str_replace_illegal_backsl=
      caml_string_of_jsbytes("Str.replace: illegal backslash sequence"),
     cst$5=caml_string_of_jsbytes(""),
     cst$4=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_Str_group_end=caml_string_of_jsbytes("Str.group_end"),
     cst_Str_group_beginning=caml_string_of_jsbytes("Str.group_beginning"),
     beg=[0,caml_string_of_jsbytes(""),0],
     cst_Re_Glob_Parse_error=caml_string_of_jsbytes("Re__Glob.Parse_error"),
     cst$6=caml_string_of_jsbytes(":]"),
     cst_lower=caml_string_of_jsbytes("lower"),
     cst_alnum=caml_string_of_jsbytes("alnum"),
     cst_ascii=caml_string_of_jsbytes("ascii"),
     cst_blank=caml_string_of_jsbytes("blank"),
     cst_cntrl=caml_string_of_jsbytes("cntrl"),
     cst_digit=caml_string_of_jsbytes("digit"),
     cst_graph=caml_string_of_jsbytes("graph"),
     cst_print=caml_string_of_jsbytes("print"),
     cst_punct=caml_string_of_jsbytes("punct"),
     cst_space=caml_string_of_jsbytes("space"),
     cst_upper=caml_string_of_jsbytes("upper"),
     cst_word=caml_string_of_jsbytes("word"),
     cst_xdigit=caml_string_of_jsbytes("xdigit"),
     cst_Invalid_pcre_class=caml_string_of_jsbytes("Invalid pcre class: "),
     cst_Re_Perl_Parse_error=caml_string_of_jsbytes("Re__Perl.Parse_error"),
     cst_Re_Perl_Not_supported=
      caml_string_of_jsbytes("Re__Perl.Not_supported"),
     posix_class_strings=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("alnum"),
         caml_string_of_jsbytes("ascii"),
         caml_string_of_jsbytes("blank"),
         caml_string_of_jsbytes("cntrl"),
         caml_string_of_jsbytes("digit"),
         caml_string_of_jsbytes("lower"),
         caml_string_of_jsbytes("print"),
         caml_string_of_jsbytes("space"),
         caml_string_of_jsbytes("upper"),
         caml_string_of_jsbytes("word"),
         caml_string_of_jsbytes("punct"),
         caml_string_of_jsbytes("graph"),
         caml_string_of_jsbytes("xdigit")]),
     cst_Re_Posix_Parse_error=caml_string_of_jsbytes("Re__Posix.Parse_error"),
     cst_Re_Posix_Not_supported=
      caml_string_of_jsbytes("Re__Posix.Not_supported"),
     include=global_data.Stdlib__format,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Stdlib=global_data.Stdlib,
     Assert_failure=global_data.Assert_failure,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_map=global_data.Stdlib__map,
     Stdlib_set=global_data.Stdlib__set,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_hashtbl=global_data.Stdlib__hashtbl,
     Stdlib_char=global_data.Stdlib__char,
     Stdlib_bytes=global_data.Stdlib__bytes,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_seq=global_data.Stdlib__seq,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Re=[0];
    caml_register_global(134,Re,"Re__");
    var
     _bG_=
      [0,
       [12,59,[17,[0,caml_string_of_jsbytes("@ "),1,0],0]],
       caml_string_of_jsbytes(";@ ")],
     _bH_=
      [0,
       [18,
        [1,
         [0,
          [11,caml_string_of_jsbytes("<3>"),0],
          caml_string_of_jsbytes("<3>")]],
        [12,
         91,
         [17,
          [0,caml_string_of_jsbytes("@ "),1,0],
          [15,[17,[0,caml_string_of_jsbytes("@ "),1,0],[12,93,[17,0,0]]]]]]],
       caml_string_of_jsbytes("@[<3>[@ %a@ ]@]")],
     _bF_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _bE_=
      [0,
       [17,[0,caml_string_of_jsbytes("@ "),1,0],[4,0,0,0,0]],
       caml_string_of_jsbytes("@ %d")],
     _bD_=
      [0,
       [18,
        [1,
         [0,
          [11,caml_string_of_jsbytes("<3>"),0],
          caml_string_of_jsbytes("<3>")]],
        [12,
         40,
         [2,0,[17,[0,caml_string_of_jsbytes("@ "),1,0],[15,[12,41,[17,0,0]]]]]]],
       caml_string_of_jsbytes("@[<3>(%s@ %a)@]")],
     _bL_=[0,caml_string_of_jsbytes("lib/cset.ml"),153,9],
     _bI_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bJ_=[0,[4,0,0,0,[12,45,[4,0,0,0,0]]],caml_string_of_jsbytes("%d-%d")],
     _bZ_=[0,caml_string_of_jsbytes("lib/automata.ml"),360,21],
     _bQ_=
      [0,
       [18,
        [1,
         [0,
          [11,caml_string_of_jsbytes("<2>"),0],
          caml_string_of_jsbytes("<2>")]],
        [11,
         caml_string_of_jsbytes("(Seq"),
         [17,[0,caml_string_of_jsbytes("@ "),1,0],0]]],
       caml_string_of_jsbytes("@[<2>(Seq@ ")],
     _bR_=[0,[12,32,[15,[12,41,[17,0,0]]]],caml_string_of_jsbytes(" %a)@]")],
     _bS_=
      [0,
       [11,
        caml_string_of_jsbytes("(Exp "),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(" ("),
          [15,[11,caml_string_of_jsbytes(") (eps))"),0]]]]],
       caml_string_of_jsbytes("(Exp %d (%a) (eps))")],
     _bT_=
      [0,
       [11,
        caml_string_of_jsbytes("(Exp "),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(" ("),
          [15,[11,caml_string_of_jsbytes(") "),[15,[12,41,0]]]]]]],
       caml_string_of_jsbytes("(Exp %d (%a) %a)")],
     _bU_=
      [0,
       [18,
        [1,
         [0,
          [11,caml_string_of_jsbytes("<2>"),0],
          caml_string_of_jsbytes("<2>")]],
        [11,
         caml_string_of_jsbytes("(Match"),
         [17,[0,caml_string_of_jsbytes("@ "),1,0],[15,[12,41,[17,0,0]]]]]],
       caml_string_of_jsbytes("@[<2>(Match@ %a)@]")],
     _bV_=
      [0,[11,caml_string_of_jsbytes(" | "),0],caml_string_of_jsbytes(" | ")],
     _bW_=[0,[11,caml_string_of_jsbytes("()"),0],caml_string_of_jsbytes("()")],
     _bX_=[0,0,0],
     _bP_=[1,0],
     _bO_=
      [0,
       [12,32,[4,0,0,0,[12,45,[4,0,0,0,0]]]],
       caml_string_of_jsbytes(" %d-%d")],
     _bN_=[0,[4,0,0,0,[12,45,[4,0,0,0,0]]],caml_string_of_jsbytes("%d-%d")],
     _b2_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [12,
         40,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(" ("),
           [4,
            0,
            0,
            0,
            [12,32,[4,0,0,0,[11,caml_string_of_jsbytes("))"),[17,0,0]]]]]]]]],
       caml_string_of_jsbytes("@[(%s (%d %d))@]")],
     _b4_=
      [0,
       [15,[17,[0,caml_string_of_jsbytes("@ "),1,0],[4,0,0,0,[15,0]]]],
       caml_string_of_jsbytes("%a@ %d%a")],
     _b__=[0,caml_string_of_jsbytes("lib/core.ml"),690,4],
     _cv_=[0,caml_string_of_jsbytes("lib/core.ml"),1149,24],
     _cw_=[0,caml_string_of_jsbytes("lib/core.ml"),1160,27],
     _ca_=[0,1],
     _b$_=[0,caml_string_of_jsbytes("lib/core.ml"),723,13],
     _b9_=[0,caml_string_of_jsbytes("lib/core.ml"),493,35],
     _b3_=[0,0,0,0,0,0,0,0,0,0,0],
     _b8_=[0,170,[0,181,[0,186,[0,223,[0,255,0]]]]],
     _cB_=[0,1],
     _cA_=[0,1],
     _cy_=[0,caml_string_of_jsbytes(""),0],
     _cz_=[0,caml_string_of_jsbytes(""),0],
     _cx_=[0,45],
     _cC_=[0,748194550,8],
     _cD_=[0,748194550,10],
     _cE_=[0,748194550,13],
     _cF_=[0,748194550,9],
     _cG_=[0,-1,-1];
    function equal(x,y){return x === y?1:0}
    var compare=caml_int_compare;
    function to_int(x){return x}
    var pp=include[17];
    function intersect(x,y){return 0 !== (x & y)?1:0}
    function symbol(x,y){return x | y}
    var
     dummy=-1,
     inexistant=1,
     letter=2,
     not_letter=4,
     newline=8,
     lastnewline=16,
     search_boundary=32;
    function from_char(param)
     {var switch$0=0;
      if(170 <= param)
       if(187 <= param)
        {var _jd_=param - 192 | 0;
         if(54 < _jd_ >>> 0)
          {if(56 <= _jd_)switch$0 = 1}
         else
          if(23 !== _jd_)switch$0 = 1}
       else
        {var _je_=param - 171 | 0;
         if(14 < _je_ >>> 0 || 10 === _je_)switch$0 = 1}
      else
       if(65 <= param)
        {var _jf_=param - 91 | 0;
         if(5 < _jf_ >>> 0)
          {if(! (32 <= _jf_))switch$0 = 1}
         else
          if(4 === _jf_)switch$0 = 1}
       else
        if(48 <= param)
         {if(! (58 <= param))switch$0 = 1}
        else
         if(10 === param)return 12;
      return switch$0?letter:not_letter}
    var
     Re_Category=
      [0,
       symbol,
       from_char,
       dummy,
       inexistant,
       letter,
       not_letter,
       newline,
       lastnewline,
       search_boundary,
       to_int,
       equal,
       compare,
       intersect,
       pp];
    caml_register_global(136,Re_Category,"Re__Category");
    var
     _m_=include[13],
     _q_=include[17],
     _y_=include[25],
     _A_=include[27],
     _bd_=include[123],
     _a_=include[1],
     _b_=include[2],
     _c_=include[3],
     _d_=include[4],
     _e_=include[5],
     _f_=include[6],
     _g_=include[7],
     _h_=include[8],
     _i_=include[9],
     _j_=include[10],
     _k_=include[11],
     _l_=include[12],
     _n_=include[14],
     _o_=include[15],
     _p_=include[16],
     _r_=include[18],
     _s_=include[19],
     _t_=include[20],
     _u_=include[21],
     _v_=include[22],
     _w_=include[23],
     _x_=include[24],
     _z_=include[26],
     _B_=include[28],
     _C_=include[29],
     _D_=include[30],
     _E_=include[31],
     _F_=include[32],
     _G_=include[33],
     _H_=include[34],
     _I_=include[35],
     _J_=include[36],
     _K_=include[37],
     _L_=include[38],
     _M_=include[39],
     _N_=include[40],
     _O_=include[41],
     _P_=include[42],
     _Q_=include[43],
     _R_=include[44],
     _S_=include[45],
     _T_=include[46],
     _U_=include[47],
     _V_=include[48],
     _W_=include[49],
     _X_=include[50],
     _Y_=include[51],
     _Z_=include[52],
     ___=include[53],
     _$_=include[54],
     _aa_=include[55],
     _ab_=include[56],
     _ac_=include[57],
     _ad_=include[58],
     _ae_=include[59],
     _af_=include[60],
     _ag_=include[61],
     _ah_=include[62],
     _ai_=include[63],
     _aj_=include[64],
     _ak_=include[65],
     _al_=include[66],
     _am_=include[67],
     _an_=include[68],
     _ao_=include[69],
     _ap_=include[70],
     _aq_=include[71],
     _ar_=include[72],
     _as_=include[73],
     _at_=include[74],
     _au_=include[75],
     _av_=include[76],
     _aw_=include[77],
     _ax_=include[78],
     _ay_=include[79],
     _az_=include[80],
     _aA_=include[81],
     _aB_=include[82],
     _aC_=include[83],
     _aD_=include[84],
     _aE_=include[85],
     _aF_=include[86],
     _aG_=include[87],
     _aH_=include[88],
     _aI_=include[89],
     _aJ_=include[90],
     _aK_=include[91],
     _aL_=include[92],
     _aM_=include[93],
     _aN_=include[94],
     _aO_=include[95],
     _aP_=include[96],
     _aQ_=include[97],
     _aR_=include[98],
     _aS_=include[99],
     _aT_=include[100],
     _aU_=include[101],
     _aV_=include[102],
     _aW_=include[103],
     _aX_=include[104],
     _aY_=include[105],
     _aZ_=include[106],
     _a0_=include[107],
     _a1_=include[108],
     _a2_=include[109],
     _a3_=include[110],
     _a4_=include[111],
     _a5_=include[112],
     _a6_=include[113],
     _a7_=include[114],
     _a8_=include[115],
     _a9_=include[116],
     _a__=include[117],
     _a$_=include[118],
     _ba_=include[120],
     _bb_=include[121],
     _bc_=include[122],
     _be_=include[124],
     _bf_=include[125],
     _bg_=include[126],
     _bh_=include[127],
     _bi_=include[128],
     _bj_=include[129],
     _bk_=include[130],
     _bl_=include[131],
     _bm_=include[132],
     _bn_=include[133],
     _bo_=include[134],
     _bp_=include[135],
     _bq_=include[136],
     _br_=include[137],
     _bs_=include[138],
     _bt_=include[139],
     _bu_=include[140],
     _bv_=include[141],
     _bw_=include[142],
     _bx_=include[143],
     _by_=include[144],
     _bz_=include[145],
     _bA_=include[146],
     _bB_=include[147],
     _bC_=include[148];
    function pp_print_list(opt,pp,ppf,param)
     {var opt$0=opt,param$0=param;
      for(;;)
       {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=_A_;
        if(param$0)
         {var _jb_=param$0[2],_jc_=param$0[1];
          if(_jb_)
           {caml_call2(pp,ppf,_jc_);
            caml_call2(pp_sep,ppf,0);
            var opt$1=[0,pp_sep],opt$0=opt$1,param$0=_jb_;
            continue}
          return caml_call2(pp,ppf,_jc_)}
        return 0}}
    function sexp(fmt,s,pp,x){return caml_call5(_bd_,fmt,_bD_,s,pp,x)}
    function pair(pp1,pp2,fmt,param)
     {var v2=param[2],v1=param[1];
      caml_call2(pp1,fmt,v1);
      caml_call2(_y_,fmt,0);
      return caml_call2(pp2,fmt,v2)}
    function triple(pp1,pp2,pp3,fmt,param)
     {var v3=param[3],v2=param[2],v1=param[1];
      caml_call2(pp1,fmt,v1);
      caml_call2(_y_,fmt,0);
      caml_call2(pp2,fmt,v2);
      caml_call2(_y_,fmt,0);
      return caml_call2(pp3,fmt,v3)}
    function optint(fmt,param)
     {if(param){var i=param[1];return caml_call3(_bd_,fmt,_bE_,i)}return 0}
    function quote(fmt,s){return caml_call3(include[123],fmt,_bF_,s)}
    function pp_olist(pp_elem,fmt)
     {var _i9_=[0,function(fmt,param){return caml_call2(_bd_,fmt,_bG_)}];
      function _i__(_i$_,_ja_){return pp_print_list(_i9_,pp_elem,_i$_,_ja_)}
      return caml_call3(include[123],fmt,_bH_,_i__)}
    function pp_str_list(_i8_){return pp_olist(quote,_i8_)}
    function to_to_string(pp,x)
     {var b=caml_call1(Stdlib_buffer[1],16),fmt=caml_call1(include[107],b);
      caml_call2(pp,fmt,x);
      return caml_call1(Stdlib_buffer[2],b)}
    var
     Re_Fmt=
      [0,
       _a_,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       _a6_,
       _a7_,
       _a8_,
       _a9_,
       _a__,
       _a$_,
       _ba_,
       _bb_,
       _bc_,
       _bd_,
       _be_,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       _bj_,
       _bk_,
       _bl_,
       _bm_,
       _bn_,
       _bo_,
       _bp_,
       _bq_,
       _br_,
       _bs_,
       _bt_,
       _bu_,
       _bv_,
       _bw_,
       _bx_,
       _by_,
       _bz_,
       _bA_,
       _bB_,
       _bC_,
       pp_print_list,
       pp_print_list,
       _m_,
       sexp,
       pair,
       triple,
       _q_,
       optint,
       quote,
       pp_olist,
       pp_str_list,
       to_to_string];
    caml_register_global(138,Re_Fmt,"Re__Fmt");
    function union(l$0,l)
     {var l$2=l$0,l$1=l;
      for(;;)
       {if(l$1)
         {if(l$2)
           {var
             r=l$1[2],
             _i7_=l$1[1],
             c2=_i7_[2],
             c1=_i7_[1],
             r$0=l$2[2],
             match=l$2[1],
             c2$0=match[2],
             c1$0=match[1];
            if((c2$0 + 1 | 0) < c1)return [0,[0,c1$0,c2$0],union(r$0,l$1)];
            if((c2 + 1 | 0) < c1$0)return [0,[0,c1,c2],union(l$2,r)];
            if(c2$0 < c2)
             {var
               l$3=[0,[0,caml_call2(Stdlib[16],c1$0,c1),c2],r],
               l$2=r$0,
               l$1=l$3;
              continue}
            var
             l$4=[0,[0,caml_call2(Stdlib[16],c1$0,c1),c2$0],r$0],
             l$2=l$4,
             l$1=r;
            continue}
          return l$1}
        return l$2}}
    function inter(l$0,l)
     {var l$2=l$0,l$1=l;
      for(;;)
       {if(l$1)
         {if(l$2)
           {var
             r=l$1[2],
             _i4_=l$1[1],
             c2=_i4_[2],
             c1=_i4_[1],
             r$0=l$2[2],
             match=l$2[1],
             c2$0=match[2],
             c1$0=match[1];
            if(caml_lessthan(c2$0,c1)){var l$2=r$0;continue}
            if(caml_lessthan(c2,c1$0)){var l$1=r;continue}
            if(caml_lessthan(c2$0,c2))
             {var _i5_=inter(r$0,l$1);
              return [0,[0,caml_call2(Stdlib[17],c1$0,c1),c2$0],_i5_]}
            var _i6_=inter(l$2,r);
            return [0,[0,caml_call2(Stdlib[17],c1$0,c1),c2],_i6_]}
          return 0}
        return 0}}
    function diff(l$0,l)
     {var l$2=l$0,l$1=l;
      for(;;)
       {if(l$1)
         {if(l$2)
           {var
             r=l$1[2],
             _i3_=l$1[1],
             c2=_i3_[2],
             c1=_i3_[1],
             r$0=l$2[2],
             match=l$2[1],
             c2$0=match[2],
             c1$0=match[1];
            if(c2$0 < c1)return [0,[0,c1$0,c2$0],diff(r$0,l$1)];
            if(c2 < c1$0){var l$1=r;continue}
            var r$1=c2 < c2$0?[0,[0,c2 + 1 | 0,c2$0],r$0]:r$0;
            if(c1$0 < c1)return [0,[0,c1$0,c1 - 1 | 0],diff(r$1,r)];
            var l$2=r$1,l$1=r;
            continue}
          return 0}
        return l$2}}
    function single(c){return [0,[0,c,c],0]}
    function add(c,l){return union(single(c),l)}
    function seq(c$0,c)
     {return runtime.caml_lessequal(c$0,c)?[0,[0,c$0,c],0]:[0,[0,c,c$0],0]}
    function offset(o,l)
     {if(l)
       {var r=l[2],match=l[1],c2=match[2],c1=match[1];
        return [0,[0,c1 + o | 0,c2 + o | 0],offset(o,r)]}
      return 0}
    var empty=0;
    function mem(c,s)
     {var s$0=s;
      for(;;)
       {if(s$0)
         {var rem=s$0[2],match=s$0[1],c2=match[2],c1=match[1];
          if(c <= c2)return c1 <= c?1:0;
          var s$0=rem;
          continue}
        return 0}}
    function hash_rec(param)
     {if(param)
       {var r=param[2],match=param[1],j=match[2],i=match[1];
        return (i + (13 * j | 0) | 0) + (257 * hash_rec(r) | 0) | 0}
      return 0}
    function hash(l){return hash_rec(l) & 1073741823}
    function print_one(ch,param)
     {var c2=param[2],c1=param[1];
      return c1 === c2
              ?caml_call3(include[123],ch,_bI_,c1)
              :caml_call4(include[123],ch,_bJ_,c1,c2)}
    var _bK_=0;
    function pp$0(_i1_,_i2_){return pp_print_list(_bK_,print_one,_i1_,_i2_)}
    function iter(t,f)
     {var t$0=t;
      for(;;)
       {if(t$0)
         {var xs=t$0[2],match=t$0[1],y=match[2],x=match[1];
          caml_call2(f,x,y);
          var t$0=xs;
          continue}
        return 0}}
    function one_char(param)
     {if(param && ! param[2])
       {var match=param[1],j=match[2],i=match[1];
        if(caml_equal(i,j))return [0,i]}
      return 0}
    function compare$0(param,_i0_)
     {var v=_i0_[2],j=_i0_[1],u=param[2],i=param[1],c=caml_compare(i,j);
      return 0 === c?caml_compare(u,v):c}
    var CSetMap=caml_call1(Stdlib_map[1],[0,compare$0]);
    function fold_right(t,init,f){return caml_call3(Stdlib_list[22],f,t,init)}
    function csingle(c){return single(c)}
    function is_empty(param){return param?0:1}
    function prepend(s,x,l)
     {var s$0=s;
      for(;;)
       {if(s$0)
         {if(l)
           {var _iV_=l[1],_iW_=_iV_[1];
            if(_iW_ && ! _iW_[2])
             {var
               r=l[2],
               x$0=_iV_[2],
               _iX_=_iW_[1],
               d=_iX_[2],
               d$0=_iX_[1],
               r$0=s$0[2],
               match=s$0[1],
               c=match[2],
               c$0=match[1];
              if(c < d$0){var s$0=r$0;continue}
              if(c$0 <= d$0)
               {if(c < d)
                 {var _iY_=prepend(r$0,x,[0,[0,[0,[0,c + 1 | 0,d],0],x$0],r]);
                  return [0,
                          [0,[0,[0,d$0,c],0],caml_call2(Stdlib[37],x,x$0)],
                          _iY_]}
                var _iZ_=prepend(s$0,x,r);
                return [0,
                        [0,[0,[0,d$0,d],0],caml_call2(Stdlib[37],x,x$0)],
                        _iZ_]}
              return d < c$0
                      ?[0,[0,[0,[0,d$0,d],0],x$0],prepend(s$0,x,r)]
                      :[0,
                        [0,[0,[0,d$0,c$0 - 1 | 0],0],x$0],
                        prepend(s$0,x,[0,[0,[0,[0,c$0,d],0],x$0],r])]}
            throw [0,Assert_failure,_bL_]}
          return 0}
        return l}}
    function pick(param)
     {if(param){var match=param[1],x=match[1];return x}
      return caml_call1(Stdlib[1],cst_Re_cset_pick)}
    var
     Re_Cset=
      [0,
       iter,
       union,
       inter,
       diff,
       offset,
       empty,
       single,
       seq,
       add,
       mem,
       hash,
       pp$0,
       one_char,
       fold_right,
       hash_rec,
       CSetMap,
       cany,
       csingle,
       is_empty,
       prepend,
       pick];
    caml_register_global(143,Re_Cset,"Re__Cset");
    function equal$0(x,y){return x === y?1:0}
    var compare$1=caml_int_compare,r=[0,0];
    function gen(param){r[1]++;return r[1]}
    var
     pp$1=include[17],
     Set=caml_call1(Stdlib_set[1],[0,compare$1]),
     Re_Pmark=[0,equal$0,compare$1,gen,pp$1,Set];
    caml_register_global(145,Re_Pmark,"Re__Pmark");
    function hash_combine(h,accu){return (accu * 65599 | 0) + h | 0}
    var empty$0=[0,0,Set[1]];
    function merge_marks_offset(old,param)
     {if(param)
       {var
         rem=param[2],
         match=param[1],
         v=match[2],
         i=match[1],
         nw=merge_marks_offset(caml_call2(Stdlib_list[46],i,old),rem);
        return -2 === v?nw:[0,[0,i,v],nw]}
      return old}
    function merge(old,nw)
     {var _iU_=caml_call2(Set[7],old[2],nw[2]);
      return [0,merge_marks_offset(old[1],nw[1]),_iU_]}
    function hash$0(m,accu$1)
     {var
       accu$2=hash_combine(caml_call1(Stdlib_hashtbl[27],m[2]),accu$1),
       l=m[1],
       accu=accu$2;
      for(;;)
       {if(l)
         {var
           r=l[2],
           match=l[1],
           i=match[2],
           a=match[1],
           accu$0=hash_combine(a,hash_combine(i,accu)),
           l=r,
           accu=accu$0;
          continue}
        return accu}}
    function _bM_(idx,marks)
     {if(marks)
       {var _iT_=marks[1];
        if(-1 === _iT_[2])
         {var rem=marks[2],a=_iT_[1];return [0,[0,a,idx],_bM_(idx,rem)]}}
      return marks}
    function marks_set_idx(marks,idx)
     {var _iS_=marks[2];return [0,_bM_(idx,marks[1]),_iS_]}
    function pp_marks(ch,t)
     {var _iQ_=t[1];
      if(_iQ_)
       {var r=_iQ_[2],match=_iQ_[1],i=match[2],a=match[1];
        caml_call4(include[123],ch,_bN_,a,i);
        var
         _iR_=
          function(param)
           {var i=param[2],a=param[1];
            return caml_call4(include[123],ch,_bO_,a,i)};
        return caml_call2(Stdlib_list[15],_iR_,r)}
      return 0}
    function pp_sem(ch,k)
     {var _iP_=-730718166 === k?cst_long:332064784 <= k?cst_first:cst_short;
      return caml_call2(include[13],ch,_iP_)}
    function pp_rep_kind(fmt,param)
     {return 620821490 <= param
              ?caml_call2(include[13],fmt,cst_Non_greedy)
              :caml_call2(include[13],fmt,cst_Greedy)}
    function pp$2(ch,e)
     {var _iC_=e[2];
      if(typeof _iC_ === "number")
       return caml_call2(_m_,ch,cst_eps);
      else
       switch(_iC_[0])
        {case 0:var l=_iC_[1];return sexp(ch,cst_cst,pp$0,l);
         case 1:
          var l$0=_iC_[1],_iD_=0;
          return sexp
                  (ch,
                   cst_alt,
                   function(_iN_,_iO_)
                    {return pp_print_list(_iD_,pp$2,_iN_,_iO_)},
                   l$0);
         case 2:
          var e$0=_iC_[3],e$1=_iC_[2],k=_iC_[1],_iE_=[0,k,e$1,e$0];
          return sexp
                  (ch,
                   cst_seq,
                   function(_iL_,_iM_)
                    {return triple(pp_sem,pp$2,pp$2,_iL_,_iM_)},
                   _iE_);
         case 3:
          var e$2=_iC_[3],k$0=_iC_[2],_iF_=[0,k$0,e$2];
          return sexp
                  (ch,
                   cst_rep,
                   function(_iJ_,_iK_){return pair(pp_sem,pp$2,_iJ_,_iK_)},
                   _iF_);
         case 4:var i=_iC_[1];return sexp(ch,cst_mark,_q_,i);
         case 5:
          var e$3=_iC_[2],b=_iC_[1],_iG_=[0,b,e$3];
          return sexp
                  (ch,
                   cst_erase,
                   function(_iH_,_iI_){return pair(_q_,_q_,_iH_,_iI_)},
                   _iG_);
         case 6:var c=_iC_[1];return sexp(ch,cst_before,pp,c);
         case 7:var c$0=_iC_[1];return sexp(ch,cst_after,pp,c$0);
         default:var i$0=_iC_[1];return sexp(ch,cst_pmark,_q_,i$0)}}
    function first(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var r=param$0[2],x=param$0[1],res=caml_call1(f,x);
          if(res)return res;
          var param$0=r;
          continue}
        return 0}}
    function create_ids(param){return [0,0]}
    function mk_expr(ids,def){ids[1]++;return [0,ids[1],def]}
    function empty$1(ids){return mk_expr(ids,_bP_)}
    function cst(ids,s){return is_empty(s)?empty$1(ids):mk_expr(ids,[0,s])}
    function alt(ids,l)
     {if(l){if(l[2])return mk_expr(ids,[1,l]);var c=l[1];return c}
      return empty$1(ids)}
    function seq$0(ids,kind,x,y)
     {var _iA_=x[2],_iB_=y[2];
      if(typeof _iA_ !== "number" && 1 === _iA_[0] && ! _iA_[1])return x;
      if(typeof _iB_ !== "number" && 1 === _iB_[0] && ! _iB_[1])return y;
      if(typeof _iA_ === "number")return y;
      if(typeof _iB_ === "number" && 332064784 === kind)return x;
      return mk_expr(ids,[2,kind,x,y])}
    function is_eps(expr){return typeof expr[2] === "number"?1:0}
    function eps(ids){return mk_expr(ids,0)}
    function rep(ids,kind,sem,x){return mk_expr(ids,[3,kind,sem,x])}
    function mark(ids,m){return mk_expr(ids,[4,m])}
    function pmark(ids,i){return mk_expr(ids,[8,i])}
    function erase(ids,m$0,m){return mk_expr(ids,[5,m$0,m])}
    function before(ids,c){return mk_expr(ids,[6,c])}
    function after(ids,c){return mk_expr(ids,[7,c])}
    function rename(ids,x)
     {var _iw_=x[2];
      if(typeof _iw_ !== "number")
       switch(_iw_[0])
        {case 1:
          var l=_iw_[1],_ix_=function(_iz_){return rename(ids,_iz_)};
          return mk_expr(ids,[1,caml_call2(Stdlib_list[17],_ix_,l)]);
         case 2:
          var z=_iw_[3],y=_iw_[2],k=_iw_[1],_iy_=rename(ids,z);
          return mk_expr(ids,[2,k,rename(ids,y),_iy_]);
         case 3:
          var y$0=_iw_[3],k$0=_iw_[2],g=_iw_[1];
          return mk_expr(ids,[3,g,k$0,rename(ids,y$0)])
         }
      return mk_expr(ids,x[2])}
    function equal$1(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var _id_=l1$0[1];
          switch(_id_[0])
           {case 0:
             if(l2$0)
              {var _ie_=l2$0[1],_if_=l1$0[2],_ig_=_id_[2],_ih_=_id_[1];
               if(0 === _ie_[0])
                {var
                  r2=l2$0[2],
                  e2=_ie_[2],
                  l2$1=_ie_[1],
                  _ii_=_ig_[1] === e2[1]?1:0;
                 if(_ii_)
                  {var _ij_=equal$1(_ih_,l2$1);
                   if(_ij_){var l1$0=_if_,l2$0=r2;continue}
                   var _ik_=_ij_}
                 else
                  var _ik_=_ii_;
                 return _ik_}}
             break;
            case 1:
             if(l2$0)
              {var _il_=l2$0[1],_im_=l1$0[2],_in_=_id_[2],_io_=_id_[1];
               if(1 === _il_[0])
                {var
                  r2$0=l2$0[2],
                  e2$0=_il_[2],
                  marks2=_il_[1],
                  _ip_=_in_[1] === e2$0[1]?1:0;
                 if(_ip_)
                  {var _iq_=caml_equal(_io_,marks2);
                   if(_iq_){var l1$0=_im_,l2$0=r2$0;continue}
                   var _ir_=_iq_}
                 else
                  var _ir_=_ip_;
                 return _ir_}}
             break;
            default:
             if(l2$0)
              {var _is_=l2$0[1],_it_=l1$0[2],_iu_=_id_[1];
               if(2 === _is_[0])
                {var
                  r2$1=l2$0[2],
                  marks2$0=_is_[1],
                  _iv_=caml_equal(_iu_,marks2$0);
                 if(_iv_){var l1$0=_it_,l2$0=r2$1;continue}
                 return _iv_}}}}
        else
         if(! l2$0)return 1;
        return 0}}
    function hash$1(l,accu)
     {var l$0=l,accu$0=accu;
      for(;;)
       {if(l$0)
         {var _ia_=l$0[1];
          switch(_ia_[0])
           {case 0:
             var
              r=l$0[2],
              e=_ia_[2],
              l$1=_ia_[1],
              _ib_=hash$1(l$1,accu$0),
              accu$1=hash_combine(388635598,hash_combine(e[1],_ib_)),
              l$0=r,
              accu$0=accu$1;
             continue;
            case 1:
             var
              r$0=l$0[2],
              e$0=_ia_[2],
              marks=_ia_[1],
              _ic_=hash$0(marks,accu$0),
              accu$2=hash_combine(726404471,hash_combine(e$0[1],_ic_)),
              l$0=r$0,
              accu$0=accu$2;
             continue;
            default:
             var
              r$1=l$0[2],
              marks$0=_ia_[1],
              accu$3=hash_combine(471882453,hash$0(marks$0,accu$0)),
              l$0=r$1,
              accu$0=accu$3;
             continue}}
        return accu$0}}
    function tseq(kind,x,y,rem)
     {if(x)
       {var _h$_=x[1];
        if(1 === _h$_[0] && typeof _h$_[2][2] === "number" && ! x[2])
         {var marks=_h$_[1];return [0,[1,marks,y],rem]}
        return [0,[0,x,y,kind],rem]}
      return rem}
    function print_state_rec(ch,e,y)
     {switch(e[0])
       {case 0:
         var x=e[2],l=e[1];
         caml_call2(include[123],ch,_bQ_);
         print_state_lst(ch,l,x);
         return caml_call4(include[123],ch,_bR_,pp$2,x);
        case 1:
         var _h9_=e[2],_h__=e[1];
         return typeof _h9_[2] === "number"
                 ?caml_call5(include[123],ch,_bS_,y[1],pp_marks,_h__)
                 :caml_call7
                   (include[123],ch,_bT_,_h9_[1],pp_marks,_h__,pp$2,_h9_);
        default:
         var marks=e[1];return caml_call4(include[123],ch,_bU_,pp_marks,marks)}}
    function print_state_lst(ch,l,y)
     {if(l)
       {var rem=l[2],e=l[1];
        print_state_rec(ch,e,y);
        var
         _h8_=
          function(e)
           {caml_call2(include[123],ch,_bV_);return print_state_rec(ch,e,y)};
        return caml_call2(Stdlib_list[15],_h8_,rem)}
      return caml_call2(include[123],ch,_bW_)}
    function pp$3(ch,t){return print_state_lst(ch,[0,t,0],_bX_)}
    var dummy$0=[0,-1,dummy,0,0,-1];
    function mk(idx,cat,desc)
     {return [0,
              idx,
              cat,
              desc,
              0,
              hash$1(desc,hash_combine(idx,hash_combine(cat,0))) & 1073741823]}
    function create(cat,e){return mk(0,cat,[0,[1,empty$0,e],0])}
    function equal$2(x,y)
     {var _h4_=x[5] === y[5]?1:0;
      if(_h4_)
       {var _h5_=x[1] === y[1]?1:0;
        if(_h5_)
         {var _h6_=x[2] === y[2]?1:0;
          if(_h6_)return equal$1(x[3],y[3]);
          var _h7_=_h6_}
        else
         var _h7_=_h5_}
      else
       var _h7_=_h4_;
      return _h7_}
    function hash$2(t){return t[5]}
    var Table=caml_call1(Stdlib_hashtbl[25],[0,equal$2,hash$2]);
    function create_working_area(param){return [0,[0,0]]}
    function index_count(w){return w[1].length - 1}
    function mark_used_indices(tbl)
     {function _hZ_(param)
       {if(0 === param[0])
         {var l=param[1];return caml_call1(mark_used_indices(tbl),l)}
        var marks=param[1],_h0_=marks[1];
        function _h1_(param)
         {var
           i=param[2],
           _h2_=0 <= i?1:0,
           _h3_=_h2_?(caml_check_bound(tbl,i)[1 + i] = 1,0):_h2_;
          return _h3_}
        return caml_call2(Stdlib_list[15],_h1_,_h0_)}
      return caml_call1(Stdlib_list[15],_hZ_)}
    function free_index(tbl_ref,l)
     {var tbl=tbl_ref[1];
      caml_call4(Stdlib_array[9],tbl,0,tbl.length - 1,0);
      caml_call1(mark_used_indices(tbl),l);
      var len=tbl.length - 1,idx=0;
      for(;;)
       {if(idx !== len && caml_check_bound(tbl,idx)[1 + idx])
         {var idx$0=idx + 1 | 0,idx=idx$0;continue}
        if(idx === len)tbl_ref[1] = caml_make_vect(2 * len | 0,0);
        return idx}}
    function _bY_(param){return 2 === param[0]?0:1}
    var remove_matches=caml_call1(Stdlib_list[36],_bY_);
    function split_at_match(l$1)
     {var l=0,param=l$1;
      for(;;)
       {if(param)
         {var _hX_=param[1];
          if(2 === _hX_[0])
           {var r=param[2],_hY_=caml_call1(remove_matches,r);
            return [0,caml_call1(Stdlib_list[9],l),_hY_]}
          var param$0=param[2],l$0=[0,_hX_,l],l=l$0,param=param$0;
          continue}
        throw [0,Assert_failure,_bZ_]}}
    function remove_duplicates(prev,l,y)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var _hV_=l$0[1];
          switch(_hV_[0])
           {case 0:
             var
              r=l$0[2],
              kind=_hV_[3],
              x=_hV_[2],
              l$1=_hV_[1],
              match=remove_duplicates(prev,l$1,x),
              prev$0=match[2],
              l$2=match[1],
              match$0=remove_duplicates(prev$0,r,y),
              prev$1=match$0[2],
              r$0=match$0[1];
             return [0,tseq(kind,l$2,x,r$0),prev$1];
            case 1:
             var _hW_=_hV_[2];
             if(typeof _hW_[2] === "number")
              {var r$1=l$0[2];
               if(caml_call2(Stdlib_list[33],y[1],prev)){var l$0=r$1;continue}
               var
                match$1=remove_duplicates([0,y[1],prev],r$1,y),
                prev$2=match$1[2],
                r$2=match$1[1];
               return [0,[0,_hV_,r$2],prev$2]}
             var r$3=l$0[2];
             if(caml_call2(Stdlib_list[33],_hW_[1],prev))
              {var l$0=r$3;continue}
             var
              match$2=remove_duplicates([0,_hW_[1],prev],r$3,y),
              prev$3=match$2[2],
              r$4=match$2[1];
             return [0,[0,_hV_,r$4],prev$3];
            default:return [0,[0,_hV_,0],prev]}}
        return [0,0,prev]}}
    function set_idx(idx,param)
     {if(param)
       {var _hR_=param[1];
        switch(_hR_[0])
         {case 0:
           var
            r=param[2],
            kind=_hR_[3],
            x=_hR_[2],
            l=_hR_[1],
            _hS_=set_idx(idx,r);
           return [0,[0,set_idx(idx,l),x,kind],_hS_];
          case 1:
           var r$0=param[2],x$0=_hR_[2],marks=_hR_[1],_hT_=set_idx(idx,r$0);
           return [0,[1,marks_set_idx(marks,idx),x$0],_hT_];
          default:
           var r$1=param[2],marks$0=_hR_[1],_hU_=set_idx(idx,r$1);
           return [0,[2,marks_set_idx(marks$0,idx)],_hU_]}}
      return 0}
    function filter_marks(b,e,marks)
     {var _hM_=marks[2],_hN_=marks[1];
      function _hO_(param)
       {var i=param[1],_hP_=i < b?1:0,_hQ_=_hP_ || (e < i?1:0);return _hQ_}
      return [0,caml_call2(Stdlib_list[36],_hO_,_hN_),_hM_]}
    function delta_1$0(counter,init,c,next_cat,prev_cat,x,rem)
     {var _hJ_=x[2];
      if(typeof _hJ_ === "number")
       return [0,[2,init],rem];
      else
       switch(_hJ_[0])
        {case 0:var s=_hJ_[1];return mem(c,s)?[0,[1,init,eps_expr],rem]:rem;
         case 1:
          var l=_hJ_[1];
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return delta_2$0(counter$1,init,c,next_cat,prev_cat,l,rem)}
          return caml_trampoline_return
                  (delta_2$0,[0,init,c,next_cat,prev_cat,l,rem]);
         case 2:
          var
           z=_hJ_[3],
           y=_hJ_[2],
           kind=_hJ_[1],
           y$0=delta_1(init,c,next_cat,prev_cat,y,0);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return delta_seq$0(counter$0,c,next_cat,prev_cat,kind,y$0,z,rem)}
          return caml_trampoline_return
                  (delta_seq$0,[0,c,next_cat,prev_cat,kind,y$0,z,rem]);
         case 3:
          var
           y$1=_hJ_[3],
           kind$0=_hJ_[2],
           rep_kind=_hJ_[1],
           y$2=delta_1(init,c,next_cat,prev_cat,y$1,0),
           match=
            first
             (function(param)
               {if(2 === param[0]){var marks=param[1];return [0,marks]}
                return 0},
              y$2);
          if(match)
           var
            marks=match[1],
            y$3=caml_call1(remove_matches,y$2),
            marks$0=marks;
          else
           var y$3=y$2,marks$0=init;
          return 620821490 <= rep_kind
                  ?[0,[2,init],tseq(kind$0,y$3,x,rem)]
                  :tseq(kind$0,y$3,x,[0,[2,marks$0],rem]);
         case 4:
          var
           i=_hJ_[1],
           _hK_=init[2],
           marks$1=[0,[0,[0,i,-1],caml_call2(Stdlib_list[46],i,init[1])],_hK_];
          return [0,[2,marks$1],rem];
         case 5:
          var e=_hJ_[2],b=_hJ_[1];return [0,[2,filter_marks(b,e,init)],rem];
         case 6:
          var cat=_hJ_[1];return intersect(next_cat,cat)?[0,[2,init],rem]:rem;
         case 7:
          var cat$0=_hJ_[1];
          return intersect(prev_cat,cat$0)?[0,[2,init],rem]:rem;
         default:
          var
           i$0=_hJ_[1],
           _hL_=caml_call2(Set[4],i$0,init[2]),
           marks$2=[0,init[1],_hL_];
          return [0,[2,marks$2],rem]}}
    function delta_2$0(counter,marks,c,next_cat,prev_cat,l,rem)
     {if(l)
       {var r=l[2],y=l[1],_hI_=delta_2(marks,c,next_cat,prev_cat,r,rem);
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return delta_1$0(counter$0,marks,c,next_cat,prev_cat,y,_hI_)}
        return caml_trampoline_return
                (delta_1$0,[0,marks,c,next_cat,prev_cat,y,_hI_])}
      return rem}
    function delta_seq$0(counter,c,next_cat,prev_cat,kind,y,z,rem)
     {var
       match=
        first
         (function(param)
           {if(2 === param[0]){var marks=param[1];return [0,marks]}return 0},
          y);
      if(match)
       {var marks=match[1];
        if(-730718166 === kind)
         {var _hG_=delta_1(marks,c,next_cat,prev_cat,z,rem);
          return tseq(kind,caml_call1(remove_matches,y),z,_hG_)}
        if(332064784 <= kind)
         {var match$0=split_at_match(y),y$0=match$0[2],y$1=match$0[1];
          return tseq
                  (kind,
                   y$1,
                   z,
                   delta_1(marks,c,next_cat,prev_cat,z,tseq(kind,y$0,z,rem)))}
        var _hH_=tseq(kind,caml_call1(remove_matches,y),z,rem);
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return delta_1$0(counter$0,marks,c,next_cat,prev_cat,z,_hH_)}
        return caml_trampoline_return
                (delta_1$0,[0,marks,c,next_cat,prev_cat,z,_hH_])}
      return tseq(kind,y,z,rem)}
    function delta_1(init,c,next_cat,prev_cat,x,rem)
     {return caml_trampoline(delta_1$0(0,init,c,next_cat,prev_cat,x,rem))}
    function delta_2(marks,c,next_cat,prev_cat,l,rem)
     {return caml_trampoline(delta_2$0(0,marks,c,next_cat,prev_cat,l,rem))}
    function delta_seq(c,next_cat,prev_cat,kind,y,z,rem)
     {return caml_trampoline(delta_seq$0(0,c,next_cat,prev_cat,kind,y,z,rem))}
    function delta_4(c,next_cat,prev_cat,l,rem)
     {if(l)
       {var r=l[2],y$1=l[1],rem$0=delta_4(c,next_cat,prev_cat,r,rem);
        switch(y$1[0])
         {case 0:
           var
            kind=y$1[3],
            z=y$1[2],
            y=y$1[1],
            y$0=delta_4(c,next_cat,prev_cat,y,0);
           return delta_seq(c,next_cat,prev_cat,kind,y$0,z,rem$0);
          case 1:
           var e=y$1[2],marks=y$1[1];
           return delta_1(marks,c,next_cat,prev_cat,e,rem$0);
          default:return [0,y$1,rem$0]}}
      return rem}
    function delta(tbl_ref,next_cat,char$0,st)
     {var
       prev_cat=st[2],
       match=
        remove_duplicates
         (0,delta_4(char$0,next_cat,prev_cat,st[3],0),eps_expr),
       expr=match[1],
       idx=free_index(tbl_ref,expr),
       expr$0=set_idx(idx,expr);
      return mk(idx,next_cat,expr$0)}
    function red_tr(l)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var _hF_=l$0[2];
          if(_hF_)
           {var
             rem=_hF_[2],
             tr2=_hF_[1],
             st2=tr2[2],
             s2=tr2[1],
             tr1=l$0[1],
             st1=tr1[2],
             s1=tr1[1];
            if(equal$2(st1,st2))
             {var l$1=[0,[0,union(s1,s2),st1],rem],l$0=l$1;continue}
            return [0,tr1,red_tr([0,tr2,rem])]}}
        return l$0}}
    function _b0_(param,l){var x=param[2],s=param[1];return prepend(s,x,l)}
    var prepend_deriv=caml_call1(Stdlib_list[22],_b0_);
    function restrict(s,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           rem=param$0[2],
           match=param$0[1],
           x=match[2],
           s$0=match[1],
           s$1=inter(s,s$0);
          if(is_empty(s$1)){var param$0=rem;continue}
          return [0,[0,s$1,x],restrict(s,rem)]}
        return 0}}
    function prepend_marks_expr_lst(m,l)
     {function _hE_(param)
       {switch(param[0])
         {case 0:
           var s=param[3],e=param[2],l=param[1];
           return [0,prepend_marks_expr_lst(m,l),e,s];
          case 1:var e$0=param[2],m$0=param[1];return [1,merge(m,m$0),e$0];
          default:var m$1=param[1];return [2,merge(m,m$1)]}}
      return caml_call2(Stdlib_list[17],_hE_,l)}
    function deriv_seq(all_chars,categories,cat,kind,y,z,rem)
     {function _hv_(param)
       {var xl=param[2];
        function _hD_(param){return 2 === param[0]?1:0}
        return caml_call2(Stdlib_list[29],_hD_,xl)}
      if(caml_call2(Stdlib_list[29],_hv_,y))
       {var
         z$0=deriv_1(all_chars,categories,empty$0,cat,z,[0,[0,all_chars,0],0]),
         _hw_=
          function(param,rem)
           {var
             y=param[2],
             s=param[1],
             match=
              first
               (function(param)
                 {if(2 === param[0]){var marks=param[1];return [0,marks]}
                  return 0},
                y);
            if(match)
             {var
               marks=match[1],
               _hy_=
                function(param)
                 {var x=param[2],s=param[1];
                  return [0,s,prepend_marks_expr_lst(marks,x)]},
               z$1=caml_call1(caml_call1(Stdlib_list[17],_hy_),z$0);
              if(-730718166 === kind)
               {var _hz_=caml_call2(prepend_deriv,restrict(s,z$1),rem);
                return prepend
                        (s,tseq(kind,caml_call1(remove_matches,y),z,0),_hz_)}
              if(332064784 <= kind)
               {var
                 match$0=split_at_match(y),
                 y$0=match$0[2],
                 y$1=match$0[1],
                 _hA_=prepend(s,tseq(kind,y$0,z,0),rem),
                 _hB_=caml_call2(prepend_deriv,restrict(s,z$1),_hA_);
                return prepend(s,tseq(kind,y$1,z,0),_hB_)}
              var
               _hC_=
                prepend(s,tseq(kind,caml_call1(remove_matches,y),z,0),rem);
              return caml_call2(prepend_deriv,restrict(s,z$1),_hC_)}
            return prepend(s,tseq(kind,y,z,0),rem)};
        return caml_call3(Stdlib_list[22],_hw_,y,rem)}
      function _hx_(param,rem)
       {var xl=param[2],s=param[1];return prepend(s,tseq(kind,xl,z,0),rem)}
      return caml_call3(Stdlib_list[22],_hx_,y,rem)}
    function deriv_1$0(counter,all_chars,categories,marks,cat,x,rem$1)
     {var _hp_=x[2];
      if(typeof _hp_ === "number")
       return prepend(all_chars,[0,[2,marks],0],rem$1);
      else
       switch(_hp_[0])
        {case 0:
          var s=_hp_[1];return prepend(s,[0,[1,marks,eps_expr],0],rem$1);
         case 1:
          var l=_hp_[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return deriv_2$0(counter$0,all_chars,categories,marks,cat,l,rem$1)}
          return caml_trampoline_return
                  (deriv_2$0,[0,all_chars,categories,marks,cat,l,rem$1]);
         case 2:
          var
           z=_hp_[3],
           y=_hp_[2],
           kind=_hp_[1],
           y$0=deriv_1(all_chars,categories,marks,cat,y,[0,[0,all_chars,0],0]);
          return deriv_seq(all_chars,categories,cat,kind,y$0,z,rem$1);
         case 3:
          var
           y$1=_hp_[3],
           kind$0=_hp_[2],
           rep_kind=_hp_[1],
           y$2=
            deriv_1(all_chars,categories,marks,cat,y$1,[0,[0,all_chars,0],0]),
           _hq_=
            function(param,rem)
             {var
               z=param[2],
               s=param[1],
               match=
                first
                 (function(param)
                   {if(2 === param[0]){var marks=param[1];return [0,marks]}
                    return 0},
                  z);
              if(match)
               var
                marks$0=match[1],
                z$0=caml_call1(remove_matches,z),
                marks$1=marks$0;
              else
               var z$0=z,marks$1=marks;
              var
               _hu_=
                620821490 <= rep_kind
                 ?[0,[2,marks],tseq(kind$0,z$0,x,0)]
                 :tseq(kind$0,z$0,x,[0,[2,marks$1],0]);
              return prepend(s,_hu_,rem)};
          return caml_call3(Stdlib_list[22],_hq_,y$2,rem$1);
         case 4:
          var i=_hp_[1],_hr_=marks[2];
          return prepend
                  (all_chars,
                   [0,
                    [2,
                     [0,[0,[0,i,-1],caml_call2(Stdlib_list[46],i,marks[1])],_hr_]],
                    0],
                   rem$1);
         case 5:
          var
           e$1=_hp_[2],
           b=_hp_[1],
           _ht_=marks[2],
           e=e$1,
           rem=filter_marks(b,e$1,marks)[1],
           _hs_=0;
          for(;;)
           {if(e < b)
             return prepend(all_chars,[0,[2,[0,rem,_ht_]],_hs_],rem$1);
            var rem$0=[0,[0,e,-2],rem],e$0=e - 1 | 0,e=e$0,rem=rem$0;
            continue}
         case 6:
          var cat$0=_hp_[1];
          return prepend
                  (caml_call2(Stdlib_list[41],cat$0,categories),
                   [0,[2,marks],0],
                   rem$1);
         case 7:
          var cat$1=_hp_[1];
          return intersect(cat,cat$1)
                  ?prepend(all_chars,[0,[2,marks],0],rem$1)
                  :rem$1;
         default:return prepend(all_chars,[0,[2,marks],0],rem$1)}}
    function deriv_2$0(counter,all_chars,categories,marks,cat,l,rem)
     {if(l)
       {var r=l[2],y=l[1],_ho_=deriv_2(all_chars,categories,marks,cat,r,rem);
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return deriv_1$0(counter$0,all_chars,categories,marks,cat,y,_ho_)}
        return caml_trampoline_return
                (deriv_1$0,[0,all_chars,categories,marks,cat,y,_ho_])}
      return rem}
    function deriv_1(all_chars,categories,marks,cat,x,rem)
     {return caml_trampoline
              (deriv_1$0(0,all_chars,categories,marks,cat,x,rem))}
    function deriv_2(all_chars,categories,marks,cat,l,rem)
     {return caml_trampoline
              (deriv_2$0(0,all_chars,categories,marks,cat,l,rem))}
    function deriv_4(all_chars,categories,cat,l,rem)
     {if(l)
       {var r=l[2],y$1=l[1],rem$0=deriv_4(all_chars,categories,cat,r,rem);
        switch(y$1[0])
         {case 0:
           var
            kind=y$1[3],
            z=y$1[2],
            y=y$1[1],
            y$0=deriv_4(all_chars,categories,cat,y,[0,[0,all_chars,0],0]);
           return deriv_seq(all_chars,categories,cat,kind,y$0,z,rem$0);
          case 1:
           var e=y$1[2],marks=y$1[1];
           return deriv_1(all_chars,categories,marks,cat,e,rem$0);
          default:return prepend(all_chars,[0,y$1,0],rem$0)}}
      return rem}
    function deriv(tbl_ref,all_chars,categories,st)
     {var
       der=deriv_4(all_chars,categories,st[2],st[3],[0,[0,all_chars,0],0]),
       _hj_=0;
      function _hk_(param,rem)
       {var
         expr=param[2],
         s=param[1],
         match=remove_duplicates(0,expr,eps_expr),
         expr$0=match[1],
         idx=free_index(tbl_ref,expr$0),
         expr$1=set_idx(idx,expr$0);
        function _hn_(param,rem)
         {var s$0=param[2],cat=param[1],s$1=inter(s,s$0);
          return is_empty(s$1)?rem:[0,[0,s$1,mk(idx,cat,expr$1)],rem]}
        return caml_call3(Stdlib_list[22],_hn_,categories,rem)}
      var l=caml_call3(Stdlib_list[22],_hk_,der,_hj_);
      function _hg_(param,_hm_)
       {var st2=_hm_[2],st1=param[2],c=caml_int_compare(st1[5],st2[5]);
        if(0 === c)
         {var c$0=caml_int_compare(st1[2],st2[2]);
          return 0 === c$0?caml_compare(st1[3],st2[3]):c$0}
        return c}
      var _hh_=red_tr(caml_call2(Stdlib_list[49],_hg_,l));
      function _hi_(param,_hl_)
       {var s2=_hl_[1],s1=param[1];return caml_compare(s1,s2)}
      return caml_call2(Stdlib_list[49],_hi_,_hh_)}
    function status(s)
     {var _hb_=s[4];
      if(_hb_){var st=_hb_[1];return st}
      var _hc_=s[3];
      if(_hc_)
       {var _hd_=_hc_[1];
        if(2 === _hd_[0])
         {var
           m=_hd_[1],
           _hf_=m[1],
           _he_=m[2],
           _g__=-1,
           _g$_=
            function(ma,param)
             {var i=param[1];return caml_call2(Stdlib[17],ma,i)},
           ma=caml_call3(Stdlib_list[21],_g$_,_g__,_hf_),
           res=caml_make_vect(ma + 1 | 0,-1),
           _ha_=
            function(param)
             {var v=param[2],i=param[1];
              caml_check_bound(res,i)[1 + i] = v;
              return 0};
          caml_call2(Stdlib_list[15],_ha_,_hf_);
          var st$0=[0,res,_he_]}
        else
         var st$0=1}
      else
       var st$0=0;
      s[4] = [0,st$0];
      return st$0}
    var
     _b1_=[0,dummy$0,create,Table],
     Re_Automata=
      [0,
       pp_sem,
       pp_rep_kind,
       is_eps,
       pp$2,
       create_ids,
       cst,
       empty$1,
       alt,
       seq$0,
       eps,
       rep,
       mark,
       pmark,
       erase,
       before,
       after,
       rename,
       [0],
       [0,pp$3],
       _b1_,
       create_working_area,
       index_count,
       delta,
       deriv,
       status];
    caml_register_global(148,Re_Automata,"Re__Automata");
    function make(param){return caml_call2(Stdlib_bytes[1],257,0)}
    function flatten(cm)
     {var c=caml_create_bytes(256),color_repr=caml_create_bytes(256),v=[0,0];
      caml_bytes_set(c,0,0);
      caml_bytes_set(color_repr,0,0);
      var i=1;
      for(;;)
       {if(0 !== caml_bytes_get(cm,i))v[1]++;
        caml_bytes_set(c,i,caml_call1(Stdlib_char[1],v[1]));
        var _g8_=caml_call1(Stdlib_char[1],i);
        caml_bytes_set(color_repr,v[1],_g8_);
        var _g9_=i + 1 | 0;
        if(255 !== i){var i=_g9_;continue}
        var _g7_=v[1] + 1 | 0;
        return [0,
                c,
                caml_call3(Stdlib_bytes[7],color_repr,0,v[1] + 1 | 0),
                _g7_]}}
    function split(s,cm)
     {return iter
              (s,
               function(i,j)
                {caml_bytes_set(cm,i,1);return caml_bytes_set(cm,j + 1 | 0,1)})}
    var Re_Color_map=[0,make,flatten,split];
    caml_register_global(151,Re_Color_map,"Re__Color_map");
    function offset$0(t,i)
     {if(t[2].length - 1 <= ((2 * i | 0) + 1 | 0))throw Stdlib[8];
      var _g4_=2 * i | 0,m1=caml_check_bound(t[2],_g4_)[1 + _g4_];
      if(-1 === m1)throw Stdlib[8];
      var
       p1=caml_check_bound(t[4],m1)[1 + m1] - 1 | 0,
       _g5_=(2 * i | 0) + 1 | 0,
       _g6_=caml_check_bound(t[2],_g5_)[1 + _g5_],
       p2=caml_check_bound(t[4],_g6_)[1 + _g6_] - 1 | 0;
      return [0,p1,p2]}
    function get(t,i)
     {var match=offset$0(t,i),p2=match[2],p1=match[1];
      return caml_call3(Stdlib_string[4],t[1],p1,p2 - p1 | 0)}
    function start(subs,i){return offset$0(subs,i)[1]}
    function stop(subs,i){return offset$0(subs,i)[2]}
    function test(t,i)
     {if(t[2].length - 1 <= (2 * i | 0))return 0;
      var _g3_=2 * i | 0,idx=caml_check_bound(t[2],_g3_)[1 + _g3_];
      return -1 !== idx?1:0}
    function all_offset(t)
     {var
       res=caml_make_vect(t[5],dummy_offset),
       _gY_=((t[2].length - 1) / 2 | 0) - 1 | 0,
       _gX_=0;
      if(! (_gY_ < 0))
       {var i=_gX_;
        for(;;)
         {var _gZ_=2 * i | 0,m1=caml_check_bound(t[2],_gZ_)[1 + _gZ_];
          if(-1 !== m1)
           {var
             p1=caml_check_bound(t[4],m1)[1 + m1],
             _g0_=(2 * i | 0) + 1 | 0,
             _g1_=caml_check_bound(t[2],_g0_)[1 + _g0_],
             p2=caml_check_bound(t[4],_g1_)[1 + _g1_];
            caml_check_bound(res,i)[1 + i] = [0,p1 - 1 | 0,p2 - 1 | 0]}
          var _g2_=i + 1 | 0;
          if(_gY_ !== i){var i=_g2_;continue}
          break}}
      return res}
    function all(t)
     {var
       res=caml_make_vect(t[5],dummy_string),
       _gR_=((t[2].length - 1) / 2 | 0) - 1 | 0,
       _gQ_=0;
      if(! (_gR_ < 0))
       {var i=_gQ_;
        for(;;)
         {var _gS_=2 * i | 0,m1=caml_check_bound(t[2],_gS_)[1 + _gS_];
          if(-1 !== m1)
           {var
             p1=caml_check_bound(t[4],m1)[1 + m1],
             _gT_=(2 * i | 0) + 1 | 0,
             _gU_=caml_check_bound(t[2],_gT_)[1 + _gT_],
             p2=caml_check_bound(t[4],_gU_)[1 + _gU_],
             _gV_=caml_call3(Stdlib_string[4],t[1],p1 - 1 | 0,p2 - p1 | 0);
            caml_check_bound(res,i)[1 + i] = _gV_}
          var _gW_=i + 1 | 0;
          if(_gR_ !== i){var i=_gW_;continue}
          break}}
      return res}
    function pp$4(fmt,t)
     {var offsets=all_offset(t),strs=all(t);
      function _gK_(i)
       {var _gP_=caml_check_bound(offsets,i)[1 + i];
        return [0,caml_check_bound(strs,i)[1 + i],_gP_]}
      var
       _gL_=caml_call2(Stdlib_array[2],strs.length - 1,_gK_),
       matches=caml_call1(Stdlib_array[11],_gL_);
      function pp_match(fmt,param)
       {var match=param[2],stop=match[2],start=match[1],str=param[1];
        return caml_call5(_bd_,fmt,_b2_,str,start,stop)}
      var _gM_=0;
      return sexp
              (fmt,
               cst_Group,
               function(_gN_,_gO_)
                {return pp_print_list(_gM_,pp_match,_gN_,_gO_)},
               matches)}
    function nb_groups(t){return t[5]}
    var Group=[0,get,offset$0,start,stop,all,all_offset,test,nb_groups,pp$4];
    caml_register_global(153,Group,"Re__Group");
    function iter$0(n,f,v)
     {var n$0=n,v$0=v;
      for(;;)
       {if(0 === n$0)return v$0;
        var v$1=caml_call1(f,v$0),n$1=n$0 - 1 | 0,n$0=n$1,v$0=v$1;
        continue}}
    var unknown=-2,break$0=-3;
    function print_re(ch,re){return pp$2(ch,re[1])}
    function category(re,color)
     {return -1 === color
              ?inexistant
              :color === re[6]?28:from_char(caml_bytes_get(re[4],color))}
    var dummy_next=[0],unknown_state=[0,unknown,0,dummy_next,0,_b1_[1]];
    function mk_state(ncol,desc)
     {var match=status(desc),switch$0=0;
      if(typeof match === "number" && 0 !== match)
       {var break_state=0;switch$0 = 1}
      if(! switch$0)var break_state=1;
      var
       _gG_=0,
       _gH_=break_state?dummy_next:caml_make_vect(ncol,unknown_state),
       _gI_=desc[1],
       _gJ_=break_state?break$0:desc[1];
      return [0,_gJ_,_gI_,_gH_,_gG_,desc]}
    function find_state(re,desc)
     {try
       {var _gE_=caml_call2(_b1_[3][7],re[8],desc);return _gE_}
      catch(_gF_)
       {_gF_ = caml_wrap_exception(_gF_);
        if(_gF_ === Stdlib[8])
         {var st=mk_state(re[5],desc);
          caml_call3(_b1_[3][5],re[8],desc,st);
          return st}
        throw _gF_}}
    function delta$0(info,cat,color,st)
     {var
       desc=delta(info[1][7],cat,color,st[5]),
       len=info[3].length - 1,
       _gC_=desc[1] === len?1:0,
       _gD_=_gC_?0 < len?1:0:_gC_;
      if(_gD_)
       {var pos=info[3];
        info[3] = caml_make_vect(2 * len | 0,0);
        caml_call5(Stdlib_array[10],pos,0,info[3],0,len)}
      return desc}
    function validate(info,s,pos,st)
     {var
       _gB_=caml_string_get(s,pos),
       color=caml_bytes_get(info[2],_gB_),
       cat=category(info[1],color),
       desc=delta$0(info,cat,color,st),
       st$0=find_state(info[1],desc);
      caml_check_bound(st[3],color)[1 + color] = st$0;
      return 0}
    function final$0(info,st,cat)
     {try
       {var _gz_=caml_call2(Stdlib_list[41],cat,st[4]);return _gz_}
      catch(_gA_)
       {_gA_ = caml_wrap_exception(_gA_);
        if(_gA_ === Stdlib[8])
         {var
           st$0=delta$0(info,cat,-1,st),
           _gy_=status(st$0),
           res=[0,st$0[1],_gy_];
          st[4] = [0,[0,cat,res],st[4]];
          return res}
        throw _gA_}}
    function find_initial_state(re,cat)
     {try
       {var _gw_=caml_call2(Stdlib_list[41],cat,re[2]);return _gw_}
      catch(_gx_)
       {_gx_ = caml_wrap_exception(_gx_);
        if(_gx_ === Stdlib[8])
         {var st=find_state(re,caml_call2(_b1_[2],cat,re[1]));
          re[2] = [0,[0,cat,st],re[2]];
          return st}
        throw _gx_}}
    function get_color(re,s,pos)
     {if(0 <= pos)
       {var slen=caml_ml_string_length(s);
        if(slen <= pos)return -1;
        if
         (pos
          ===
          (slen - 1 | 0)
          &&
          -1
          !==
          re[6]
          &&
          10
          ===
          caml_string_get(s,pos))
         return re[6];
        var _gv_=caml_string_get(s,pos);
        return caml_bytes_get(re[3],_gv_)}
      return -1}
    function scan_str(info,s,st$8,groups)
     {var pos$4=info[4],last=info[5];
      if
       (last
        ===
        caml_ml_string_length(s)
        &&
        -1
        !==
        info[1][6]
        &&
        pos$4
        <
        last
        &&
        10
        ===
        caml_string_get(s,last - 1 | 0))
       {var
         info$0=[0,info[1],info[2],info[3],info[4],last - 1 | 0],
         st$9=scan_str(info$0,s,st$8,groups);
        if(st$9[1] === -3)return st$9;
        var pos$5=last - 1 | 0;
        for(;;)
         {var _gs_=info$0[1][6],st$6=caml_check_bound(st$9[3],_gs_)[1 + _gs_];
          if(0 <= st$6[1])
           {if(groups)
             {var _gt_=st$6[1];
              caml_check_bound(info$0[3],_gt_)[1 + _gt_] = pos$5 + 1 | 0}
            return st$6}
          if(st$6[1] === -3)
           {if(groups)
             {var _gu_=st$6[2];
              caml_check_bound(info$0[3],_gu_)[1 + _gu_] = pos$5 + 1 | 0}
            return st$6}
          var
           color=info$0[1][6],
           real_c=caml_bytes_get(info$0[2],10),
           cat=category(info$0[1],color),
           desc=delta$0(info$0,cat,real_c,st$9),
           st$7=find_state(info$0[1],desc);
          caml_check_bound(st$9[3],color)[1 + color] = st$7;
          continue}}
      if(groups)
       {var pos=pos$4,st=st$8;
        a:
        for(;;)
         {if(pos < info[5])
           {var
             _gj_=caml_string_get(s,pos),
             _gk_=caml_bytes_get(info[2],_gj_),
             st$0=caml_check_bound(st[3],_gk_)[1 + _gk_],
             pos$0=pos,
             st$2=st,
             st$1=st$0;
            for(;;)
             {if(0 <= st$1[1])
               {var pos$1=pos$0 + 1 | 0;
                if(pos$1 < info[5])
                 {var
                   _gl_=caml_string_get(s,pos$1),
                   _gm_=caml_bytes_get(info[2],_gl_),
                   st$3=caml_check_bound(st$1[3],_gm_)[1 + _gm_],
                   _gn_=st$1[1];
                  caml_check_bound(info[3],_gn_)[1 + _gn_] = pos$1;
                  var pos$0=pos$1,st$2=st$1,st$1=st$3;
                  continue}
                var _go_=st$1[1];
                caml_check_bound(info[3],_go_)[1 + _go_] = pos$1;
                return st$1}
              if(st$1[1] === -3)
               {var _gp_=st$1[2];
                caml_check_bound(info[3],_gp_)[1 + _gp_] = pos$0 + 1 | 0;
                return st$1}
              validate(info,s,pos$0,st$2);
              var pos=pos$0,st=st$2;
              continue a}}
          return st}}
      var pos$2=pos$4,st$4=st$8;
      for(;;)
       {if(pos$2 < last)
         {var
           _gq_=caml_string_get(s,pos$2),
           _gr_=caml_bytes_get(info[2],_gq_),
           st$5=caml_check_bound(st$4[3],_gr_)[1 + _gr_];
          if(0 <= st$5[1])
           {var pos$3=pos$2 + 1 | 0,pos$2=pos$3,st$4=st$5;continue}
          if(st$5[1] === -3)return st$5;
          validate(info,s,pos$2,st$4);
          continue}
        return st$4}}
    function match_str(groups,partial,re,s,pos,len)
     {var slen=caml_ml_string_length(s),last=-1 === len?slen:pos + len | 0;
      if(groups)
       var
        n=index_count(re[7]) + 1 | 0,
        _gh_=10 < n?caml_make_vect(n,0):_b3_.slice(),
        _gi_=_gh_;
      else
       var _gi_=[0];
      var
       info=[0,re,re[3],_gi_,pos,last],
       initial_cat=0 === pos?33:32 | category(re,get_color(re,s,pos - 1 | 0)),
       initial_state=find_initial_state(re,initial_cat),
       st=scan_str(info,s,initial_state,groups),
       switch$0=0;
      if(st[1] !== -3 && ! partial)
       {var
         final_cat=last === slen?33:32 | category(re,get_color(re,s,last)),
         match=final$0(info,st,final_cat),
         res$0=match[2],
         idx=match[1];
        if(groups)caml_check_bound(info[3],idx)[1 + idx] = last + 1 | 0;
        var res=res$0;
        switch$0 = 1}
      if(! switch$0)var res=status(st[5]);
      if(typeof res === "number")return 0 === res?0:1;
      var pmarks=res[2],marks=res[1];
      return [0,[0,s,marks,pmarks,info[3],re[9]]]}
    function cseq(c$0,c){return seq(c$0,c)}
    function cadd(c,s){return add(c,s)}
    function trans_set(cache,cm,s)
     {var match=one_char(s);
      if(match){var i=match[1];return csingle(caml_bytes_get(cm,i))}
      var v=[0,hash_rec(s),s];
      try
       {var _ge_=caml_call2(CSetMap[27],v,cache[1]);return _ge_}
      catch(_gf_)
       {_gf_ = caml_wrap_exception(_gf_);
        if(_gf_ === Stdlib[8])
         {var
           l=
            fold_right
             (s,
              empty,
              function(param,l)
               {var j=param[2],i=param[1],_gg_=caml_bytes_get(cm,j);
                return union(cseq(caml_bytes_get(cm,i),_gg_),l)});
          cache[1] = caml_call3(CSetMap[4],v,l,cache[1]);
          return l}
        throw _gf_}}
    function view(t){return t}
    var View=[0,view];
    function pp$5(fmt,t)
     {function var$0(s,re){return sexp(fmt,s,pp$5,re)}
      function seq(s,rel)
       {var _gb_=0;
        return sexp
                (fmt,
                 s,
                 function(_gc_,_gd_)
                  {return pp_print_list(_gb_,pp$5,_gc_,_gd_)},
                 rel)}
      if(typeof t === "number")
       switch(t)
        {case 0:return caml_call2(_m_,fmt,cst_Beg_of_line);
         case 1:return caml_call2(_m_,fmt,cst_End_of_line);
         case 2:return caml_call2(_m_,fmt,cst_Beg_of_word);
         case 3:return caml_call2(_m_,fmt,cst_End_of_word);
         case 4:return caml_call2(_m_,fmt,cst_Not_bound);
         case 5:return caml_call2(_m_,fmt,cst_Beg_of_str);
         case 6:return caml_call2(_m_,fmt,cst_End_of_str);
         case 7:return caml_call2(_m_,fmt,cst_Last_end_of_line);
         case 8:return caml_call2(_m_,fmt,cst_Start);
         default:return caml_call2(_m_,fmt,cst_Stop)}
      else
       switch(t[0])
        {case 0:var s=t[1];return sexp(fmt,cst_Set,pp$0,s);
         case 1:var sq=t[1];return seq(cst_Sequence,sq);
         case 2:var alt=t[1];return seq(cst_Alternative,alt);
         case 3:
          var
           stop=t[3],
           start=t[2],
           re=t[1],
           pp=
            function(fmt,param)
             {return caml_call7(_bd_,fmt,_b4_,pp$5,re,start,optint,stop)};
          return sexp(fmt,cst_Repeat,pp,0);
         case 4:
          var re$0=t[2],sem=t[1],_f1_=[0,sem,re$0];
          return sexp
                  (fmt,
                   cst_Sem,
                   function(_f9_,_f__){return pair(pp_sem,pp$5,_f9_,_f__)},
                   _f1_);
         case 5:
          var re$1=t[2],k=t[1],_f2_=[0,k,re$1];
          return sexp
                  (fmt,
                   cst_Sem_greedy,
                   function(_f7_,_f8_){return pair(pp_rep_kind,pp$5,_f7_,_f8_)},
                   _f2_);
         case 6:var c=t[1];return var$0(cst_Group$0,c);
         case 7:var c$0=t[1];return var$0(cst_No_group,c$0);
         case 8:var c$1=t[1];return var$0(cst_Nest,c$1);
         case 9:var c$2=t[1];return var$0(cst_Case,c$2);
         case 10:var c$3=t[1];return var$0(cst_No_case,c$3);
         case 11:var c$4=t[1];return seq(cst_Intersection,c$4);
         case 12:var c$5=t[1];return seq(cst_Complement,c$5);
         case 13:
          var b=t[2],a=t[1],_f3_=[0,a,b];
          return sexp
                  (fmt,
                   cst_Difference,
                   function(_f5_,_f6_){return pair(pp$5,pp$5,_f5_,_f6_)},
                   _f3_);
         default:
          var r=t[2],m=t[1],_f4_=[0,m,r];
          return sexp
                  (fmt,
                   cst_Pmark,
                   function(_f$_,_ga_){return pair(pp$1,pp$5,_f$_,_ga_)},
                   _f4_)}}
    function is_charset(param)
     {var param$0=param;
      for(;;)
       {var switch$0=0;
        if(typeof param$0 === "number")
         switch$0 = 1;
        else
         switch(param$0[0])
          {case 0:return 1;
           case 13:
            var r=param$0[2],r$0=param$0[1],_f0_=is_charset(r$0);
            if(_f0_){var param$0=r;continue}
            return _f0_;
           case 4:
           case 5:var param$1=param$0[2];break;
           case 2:
           case 11:
           case 12:
            var l=param$0[1];return caml_call2(Stdlib_list[28],is_charset,l);
           case 7:
           case 9:
           case 10:var param$1=param$0[1];break;
           default:switch$0 = 1}
        if(switch$0)return 0;
        var param$0=param$1;
        continue}}
    var
     _b5_=cseq(216,222),
     _b6_=union(cseq(192,214),_b5_),
     cupper=union(cseq(65,90),_b6_),
     clower=offset(32,cupper),
     _b7_=union(clower,cupper),
     calpha=caml_call3(Stdlib_list[22],cadd,_b8_,_b7_),
     cdigit=cseq(48,57),
     calnum=union(calpha,cdigit),
     cword=cadd(95,calnum);
    function eq_list(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             r2=l2$0[2],
             x2=l2$0[1],
             r1=l1$0[2],
             x1=l1$0[1],
             _fZ_=equal$3(x1,x2);
            if(_fZ_){var l1$0=r1,l2$0=r2;continue}
            return _fZ_}}
        else
         if(! l2$0)return 1;
        return 0}}
    function equal$3(x1,x2)
     {var x1$0=x1,x2$0=x2;
      for(;;)
       {var switch$0=0;
        if(typeof x1$0 === "number")
         switch(x1$0)
          {case 0:
            if(typeof x2$0 === "number" && 0 === x2$0)switch$0 = 1;break;
           case 1:
            if(typeof x2$0 === "number" && 1 === x2$0)switch$0 = 1;break;
           case 2:
            if(typeof x2$0 === "number" && 2 === x2$0)switch$0 = 1;break;
           case 3:
            if(typeof x2$0 === "number" && 3 === x2$0)switch$0 = 1;break;
           case 4:
            if(typeof x2$0 === "number" && 4 === x2$0)switch$0 = 1;break;
           case 5:
            if(typeof x2$0 === "number" && 5 === x2$0)switch$0 = 1;break;
           case 6:
            if(typeof x2$0 === "number" && 6 === x2$0)switch$0 = 1;break;
           case 7:
            if(typeof x2$0 === "number" && 7 === x2$0)switch$0 = 1;break;
           case 8:
            if(typeof x2$0 === "number" && 8 === x2$0)switch$0 = 1;break;
           default:if(typeof x2$0 === "number" && 9 <= x2$0)switch$0 = 1}
        else
         switch(x1$0[0])
          {case 0:
            if(typeof x2$0 !== "number" && 0 === x2$0[0])
             {var s2=x2$0[1],s1=x1$0[1];return caml_equal(s1,s2)}
            break;
           case 1:
            if(typeof x2$0 !== "number" && 1 === x2$0[0])
             {var l2=x2$0[1],l1=x1$0[1];return eq_list(l1,l2)}
            break;
           case 2:
            if(typeof x2$0 !== "number" && 2 === x2$0[0])
             {var l2$0=x2$0[1],l1$0=x1$0[1];return eq_list(l1$0,l2$0)}
            break;
           case 3:
            if(typeof x2$0 !== "number" && 3 === x2$0[0])
             {var
               j2=x2$0[3],
               i2=x2$0[2],
               x2$1=x2$0[1],
               j1=x1$0[3],
               i1=x1$0[2],
               x1$1=x1$0[1],
               _fS_=i1 === i2?1:0;
              if(_fS_)
               {var _fT_=caml_equal(j1,j2);
                if(_fT_){var x1$0=x1$1,x2$0=x2$1;continue}
                var _fU_=_fT_}
              else
               var _fU_=_fS_;
              return _fU_}
            break;
           case 4:
            if(typeof x2$0 !== "number" && 4 === x2$0[0])
             {var
               x2$2=x2$0[2],
               sem2=x2$0[1],
               x1$2=x1$0[2],
               sem1=x1$0[1],
               _fV_=sem1 === sem2?1:0;
              if(_fV_){var x1$0=x1$2,x2$0=x2$2;continue}
              return _fV_}
            break;
           case 5:
            if(typeof x2$0 !== "number" && 5 === x2$0[0])
             {var
               x2$3=x2$0[2],
               k2=x2$0[1],
               x1$3=x1$0[2],
               k1=x1$0[1],
               _fW_=k1 === k2?1:0;
              if(_fW_){var x1$0=x1$3,x2$0=x2$3;continue}
              return _fW_}
            break;
           case 6:if(typeof x2$0 !== "number" && 6 === x2$0[0])return 0;break;
           case 7:
            if(typeof x2$0 !== "number" && 7 === x2$0[0])
             {var x2$4=x2$0[1],x1$4=x1$0[1],x1$0=x1$4,x2$0=x2$4;continue}
            break;
           case 8:
            if(typeof x2$0 !== "number" && 8 === x2$0[0])
             {var x2$5=x2$0[1],x1$5=x1$0[1],x1$0=x1$5,x2$0=x2$5;continue}
            break;
           case 9:
            if(typeof x2$0 !== "number" && 9 === x2$0[0])
             {var x2$6=x2$0[1],x1$6=x1$0[1],x1$0=x1$6,x2$0=x2$6;continue}
            break;
           case 10:
            if(typeof x2$0 !== "number" && 10 === x2$0[0])
             {var x2$7=x2$0[1],x1$7=x1$0[1],x1$0=x1$7,x2$0=x2$7;continue}
            break;
           case 11:
            if(typeof x2$0 !== "number" && 11 === x2$0[0])
             {var l2$1=x2$0[1],l1$1=x1$0[1];return eq_list(l1$1,l2$1)}
            break;
           case 12:
            if(typeof x2$0 !== "number" && 12 === x2$0[0])
             {var l2$2=x2$0[1],l1$2=x1$0[1];return eq_list(l1$2,l2$2)}
            break;
           case 13:
            if(typeof x2$0 !== "number" && 13 === x2$0[0])
             {var
               x2$8=x2$0[2],
               x2$9=x2$0[1],
               x1$8=x1$0[2],
               x1$9=x1$0[1],
               _fX_=equal$3(x1$9,x2$9);
              if(_fX_){var x1$0=x1$8,x2$0=x2$8;continue}
              return _fX_}
            break;
           default:
            if(typeof x2$0 !== "number" && 14 === x2$0[0])
             {var
               r2=x2$0[2],
               m2=x2$0[1],
               r1=x1$0[2],
               m1=x1$0[1],
               _fY_=m1 === m2?1:0;
              if(_fY_){var x1$0=r1,x2$0=r2;continue}
              return _fY_}}
        return switch$0?1:0}}
    function sequence(l){if(l && ! l[2]){var x=l[1];return x}return [1,l]}
    function merge_sequences(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _fN_=param$0[1];
          if(typeof _fN_ !== "number")
           switch(_fN_[0])
            {case 1:
              var _fO_=_fN_[1];
              if(_fO_)
               {var
                 r$0=param$0[2],
                 y=_fO_[2],
                 x=_fO_[1],
                 r$1=merge_sequences(r$0);
                if(r$1)
                 {var _fP_=r$1[1],switch$0=0;
                  if(typeof _fP_ === "number" || ! (1 === _fP_[0]))
                   switch$0 = 1;
                  else
                   {var _fQ_=_fP_[1];
                    if(_fQ_)
                     {var r$2=r$1[2],y$0=_fQ_[2],x$0=_fQ_[1];
                      if(equal$3(x,x$0))
                       {var _fR_=[0,sequence(y$0),0];
                        return [0,[1,[0,x,[0,[2,[0,sequence(y),_fR_]],0]]],r$2]}}}}
                return [0,[1,[0,x,y]],r$1]}
              break;
             case 2:
              var
               r$3=param$0[2],
               l=_fN_[1],
               param$1=caml_call2(Stdlib[37],l,r$3),
               param$0=param$1;
              continue
             }
          var r=param$0[2];
          return [0,_fN_,merge_sequences(r)]}
        return 0}}
    function enforce_kind(ids,kind,k,cr)
     {return 332064784 === kind?332064784 === k?cr:seq$0(ids,k,cr,eps(ids)):cr}
    function translate(ids,kind,ign_group,ign_case,greedy,pos,cache,c,param)
     {var ign_group$0=ign_group,greedy$0=greedy,param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        switch(param$0)
         {case 0:return [0,after(ids,9),kind];
          case 1:return [0,before(ids,9),kind];
          case 2:
           var _fE_=before(ids,3);
           return [0,seq$0(ids,332064784,after(ids,5),_fE_),kind];
          case 3:
           var _fF_=before(ids,5);
           return [0,seq$0(ids,332064784,after(ids,3),_fF_),kind];
          case 4:
           var
            _fG_=before(ids,letter),
            _fH_=[0,seq$0(ids,332064784,after(ids,letter),_fG_),0],
            _fI_=before(ids,letter);
           return [0,
                   alt
                    (ids,[0,seq$0(ids,332064784,after(ids,letter),_fI_),_fH_]),
                   kind];
          case 5:return [0,after(ids,inexistant),kind];
          case 6:return [0,before(ids,inexistant),kind];
          case 7:return [0,before(ids,17),kind];
          case 8:return [0,after(ids,search_boundary),kind];
          default:return [0,before(ids,search_boundary),kind]}
       else
        switch(param$0[0])
         {case 0:
           var s=param$0[1];return [0,cst(ids,trans_set(cache,c,s)),kind];
          case 1:
           var l=param$0[1];
           return [0,
                   trans_seq
                    (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,l),
                   kind];
          case 2:
           var l$0=param$0[1],merged_sequences=merge_sequences(l$0);
           if(merged_sequences && ! merged_sequences[2])
            {var
              r=merged_sequences[1],
              match=
               translate(ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r),
              kind$0=match[2],
              cr=match[1];
             return [0,enforce_kind(ids,kind,kind$0,cr),kind]}
           var
            _fJ_=
             function(r)
              {var
                match=
                 translate
                  (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r),
                kind$0=match[2],
                cr=match[1];
               return enforce_kind(ids,kind,kind$0,cr)};
           return [0,
                   alt(ids,caml_call2(Stdlib_list[17],_fJ_,merged_sequences)),
                   kind];
          case 3:
           var
            j=param$0[3],
            i=param$0[2],
            r$0=param$0[1],
            match$0=
             translate(ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$0),
            kind$1=match$0[2],
            cr$0=match$0[1];
           if(j)
            var
             j$0=j[1],
             f=
              620821490 <= greedy$0
               ?function(rem)
                 {var _fL_=[0,seq$0(ids,kind$1,rename(ids,cr$0),rem),0];
                  return alt(ids,[0,eps(ids),_fL_])}
               :function(rem)
                 {var _fM_=[0,eps(ids),0];
                  return alt
                          (ids,[0,seq$0(ids,kind$1,rename(ids,cr$0),rem),_fM_])},
             rem=iter$0(j$0 - i | 0,f,eps(ids));
           else
            var rem=rep(ids,greedy$0,kind$1,cr$0);
           return [0,
                   iter$0
                    (i,
                     function(rem){return seq$0(ids,kind$1,rename(ids,cr$0),rem)},
                     rem),
                   kind];
          case 4:
           var
            r$1=param$0[2],
            kind$2=param$0[1],
            match$1=
             translate
              (ids,kind$2,ign_group$0,ign_case,greedy$0,pos,cache,c,r$1),
            kind$3=match$1[2],
            cr$1=match$1[1];
           return [0,enforce_kind(ids,kind$2,kind$3,cr$1),kind$2];
          case 5:
           var
            param$1=param$0[2],
            greedy$1=param$0[1],
            greedy$0=greedy$1,
            param$0=param$1;
           continue;
          case 6:
           var r$2=param$0[1];
           if(ign_group$0){var param$0=r$2;continue}
           var p=pos[1];
           pos[1] = pos[1] + 2 | 0;
           var
            match$2=
             translate(ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$2),
            kind$4=match$2[2],
            cr$2=match$2[1],
            _fK_=seq$0(ids,332064784,cr$2,mark(ids,p + 1 | 0));
           return [0,seq$0(ids,332064784,mark(ids,p),_fK_),kind$4];
          case 7:
           var param$2=param$0[1],ign_group$0=1,param$0=param$2;continue;
          case 8:
           var
            r$3=param$0[1],
            b=pos[1],
            match$3=
             translate(ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$3),
            kind$5=match$3[2],
            cr$3=match$3[1],
            e=pos[1] - 1 | 0;
           return e < b
                   ?[0,cr$3,kind$5]
                   :[0,seq$0(ids,332064784,erase(ids,b,e),cr$3),kind$5];
          case 14:
           var
            r$4=param$0[2],
            i$0=param$0[1],
            match$4=
             translate(ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$4),
            kind$6=match$4[2],
            cr$4=match$4[1];
           return [0,seq$0(ids,332064784,pmark(ids,i$0),cr$4),kind$6];
          default:throw [0,Assert_failure,_b__]}}
    function trans_seq(ids,kind,ign_group,ign_case,greedy,pos,cache,c,param)
     {if(param)
       {var _fC_=param[2],_fD_=param[1];
        if(_fC_)
         {var
           match=
            translate(ids,kind,ign_group,ign_case,greedy,pos,cache,c,_fD_),
           kind$0=match[2],
           cr=match[1],
           cr$0=trans_seq(ids,kind,ign_group,ign_case,greedy,pos,cache,c,_fC_);
          return is_eps(cr$0)?cr:is_eps(cr)?cr$0:seq$0(ids,kind$0,cr,cr$0)}
        var
         match$0=
          translate(ids,kind,ign_group,ign_case,greedy,pos,cache,c,_fD_),
         kind$1=match$0[2],
         cr$1=match$0[1];
        return enforce_kind(ids,kind,kind$1,cr$1)}
      return eps(ids)}
    function as_set(param)
     {if(typeof param !== "number" && 0 === param[0]){var s=param[1];return s}
      throw [0,Assert_failure,_b$_]}
    function handle_case(ign_case,r)
     {var ign_case$0=ign_case,r$0=r;
      for(;;)
       if(typeof r$0 === "number")
        return r$0;
       else
        switch(r$0[0])
         {case 0:
           var s=r$0[1];
           if(ign_case$0)
            var
             _fq_=offset(-32,inter(s,clower)),
             _fr_=union(s,union(offset(32,inter(s,cupper)),_fq_));
           else
            var _fr_=s;
           return [0,_fr_];
          case 1:
           var
            l=r$0[1],
            _fs_=function(_fB_){return handle_case(ign_case$0,_fB_)};
           return [1,caml_call2(Stdlib_list[17],_fs_,l)];
          case 2:
           var
            l$0=r$0[1],
            _ft_=function(_fA_){return handle_case(ign_case$0,_fA_)},
            l$1=caml_call2(Stdlib_list[17],_ft_,l$0);
           if(is_charset([2,l$1]))
            {var _fu_=function(s,r){return union(s,as_set(r))};
             return [0,caml_call3(Stdlib_list[21],_fu_,empty,l$1)]}
           return [2,l$1];
          case 3:
           var j=r$0[3],i=r$0[2],r$1=r$0[1];
           return [3,handle_case(ign_case$0,r$1),i,j];
          case 4:
           var r$2=r$0[2],k=r$0[1],r$3=handle_case(ign_case$0,r$2);
           return is_charset(r$3)?r$3:[4,k,r$3];
          case 5:
           var r$4=r$0[2],k$0=r$0[1],r$5=handle_case(ign_case$0,r$4);
           return is_charset(r$5)?r$5:[5,k$0,r$5];
          case 6:var r$6=r$0[1];return [6,handle_case(ign_case$0,r$6)];
          case 7:
           var r$7=r$0[1],r$8=handle_case(ign_case$0,r$7);
           return is_charset(r$8)?r$8:[7,r$8];
          case 8:
           var r$9=r$0[1],r$10=handle_case(ign_case$0,r$9);
           return is_charset(r$10)?r$10:[8,r$10];
          case 9:var r$11=r$0[1],ign_case$0=0,r$0=r$11;continue;
          case 10:var r$12=r$0[1],ign_case$0=1,r$0=r$12;continue;
          case 11:
           var
            l$2=r$0[1],
            _fv_=function(r){return handle_case(ign_case$0,r)},
            l$3=caml_call2(Stdlib_list[17],_fv_,l$2),
            _fw_=function(s,r){return inter(s,as_set(r))};
           return [0,caml_call3(Stdlib_list[21],_fw_,cany,l$3)];
          case 12:
           var
            l$4=r$0[1],
            _fx_=function(r){return handle_case(ign_case$0,r)},
            l$5=caml_call2(Stdlib_list[17],_fx_,l$4),
            _fy_=function(s,r){return union(s,as_set(r))};
           return [0,diff(cany,caml_call3(Stdlib_list[21],_fy_,empty,l$5))];
          case 13:
           var
            r$13=r$0[2],
            r$14=r$0[1],
            _fz_=diff(cany,as_set(handle_case(ign_case$0,r$13)));
           return [0,inter(as_set(handle_case(ign_case$0,r$14)),_fz_)];
          default:
           var r$15=r$0[2],i$0=r$0[1];
           return [14,i$0,handle_case(ign_case$0,r$15)]}}
    function anchored(param)
     {var param$0=param;
      for(;;)
       {var switch$0=0;
        if(typeof param$0 === "number")
         switch(param$0){case 5:case 8:return 1}
        else
         switch(param$0[0])
          {case 1:
            var l=param$0[1];return caml_call2(Stdlib_list[29],anchored,l);
           case 2:
            var l$0=param$0[1];
            return caml_call2(Stdlib_list[28],anchored,l$0);
           case 3:
            var i=param$0[2],r=param$0[1],_fp_=0 < i?1:0;
            if(_fp_){var param$0=r;continue}
            return _fp_;
           case 4:
           case 5:
           case 14:var param$1=param$0[2];switch$0 = 1;break;
           case 0:
           case 11:
           case 12:
           case 13:break;
           default:var param$1=param$0[1];switch$0 = 1}
        if(switch$0){var param$0=param$1;continue}
        return 0}}
    function str(s)
     {var l=[0,0],_fm_=caml_ml_string_length(s) - 1 | 0;
      if(! (_fm_ < 0))
       {var i=_fm_;
        for(;;)
         {var _fn_=l[1];
          l[1] = [0,[0,csingle(caml_string_get(s,i))],_fn_];
          var _fo_=i - 1 | 0;
          if(0 !== i){var i=_fo_;continue}
          break}}
      return [1,l[1]]}
    function char$0(c){return [0,csingle(c)]}
    function alt$0(l){if(l && ! l[2]){var r=l[1];return r}return [2,l]}
    function seq$1(l){if(l && ! l[2]){var r=l[1];return r}return [1,l]}
    var empty$2=alt$0(0),epsilon=seq$1(0);
    function repn(r,i,j)
     {if(i < 0)caml_call1(Stdlib[1],cst_Re_repn);
      var switch$0=0;
      if(j)
       {var j$0=j[1];
        if(j$0 < i){caml_call1(Stdlib[1],cst_Re_repn$0);switch$0 = 1}}
      return [3,r,i,j]}
    function rep$0(r){return repn(r,0,0)}
    function rep1(r){return repn(r,1,0)}
    function opt(r){return repn(r,0,_ca_)}
    var bol=0,eol=1,bow=2,eow=3;
    function word(r){return seq$1([0,bow,[0,r,[0,eow,0]]])}
    var not_boundary=4,bos=5,eos=6;
    function whole_string(r){return seq$1([0,bos,[0,r,[0,eos,0]]])}
    var leol=7,start$0=8,stop$0=9;
    function longest(r){return [4,-730718166,r]}
    function shortest(r){return [4,-1034406550,r]}
    function first$0(r){return [4,332064784,r]}
    function greedy(r){return [5,-904640576,r]}
    function non_greedy(r){return [5,620821490,r]}
    function group(r){return [6,r]}
    function no_group(r){return [7,r]}
    function nest(r){return [8,r]}
    function mark$0(r){var i=gen(0);return [0,i,[14,i,r]]}
    function set(str)
     {var s=[0,empty],_fj_=caml_ml_string_length(str) - 1 | 0,_fi_=0;
      if(! (_fj_ < 0))
       {var i=_fi_;
        for(;;)
         {var _fk_=s[1];
          s[1] = union(csingle(caml_string_get(str,i)),_fk_);
          var _fl_=i + 1 | 0;
          if(_fj_ !== i){var i=_fl_;continue}
          break}}
      return [0,s[1]]}
    function rg(c$0,c){return [0,cseq(c$0,c)]}
    function inter$0(l)
     {var r=[11,l];return is_charset(r)?r:caml_call1(Stdlib[1],cst_Re_inter)}
    function compl(l)
     {var r=[12,l];return is_charset(r)?r:caml_call1(Stdlib[1],cst_Re_compl)}
    function diff$0(r$0,r)
     {var r$1=[13,r$0,r];
      return is_charset(r$1)?r$1:caml_call1(Stdlib[1],cst_Re_diff)}
    var
     any=[0,cany],
     notnl=[0,diff(cany,csingle(10))],
     _cb_=[0,rg(248,255),0],
     _cc_=[0,rg(223,246),_cb_],
     _cd_=[0,char$0(181),_cc_],
     lower=alt$0([0,rg(97,122),_cd_]),
     _ce_=[0,rg(216,222),0],
     _cf_=[0,rg(192,214),_ce_],
     upper=alt$0([0,rg(65,90),_cf_]),
     _cg_=[0,char$0(186),0],
     alpha=alt$0([0,lower,[0,upper,[0,char$0(170),_cg_]]]),
     digit=rg(48,57),
     alnum=alt$0([0,alpha,[0,digit,0]]),
     wordc=alt$0([0,alnum,[0,char$0(95),0]]),
     ascii=rg(0,127),
     blank=set(cst$0),
     _ch_=[0,rg(127,159),0],
     cntrl=alt$0([0,rg(0,31),_ch_]),
     _ci_=[0,rg(160,255),0],
     graph=alt$0([0,rg(33,126),_ci_]),
     _cj_=[0,rg(160,255),0],
     print=alt$0([0,rg(32,126),_cj_]),
     _ck_=[0,char$0(247),0],
     _cl_=[0,char$0(215),_ck_],
     _cm_=[0,rg(187,191),_cl_],
     _cn_=[0,rg(182,185),_cm_],
     _co_=[0,rg(171,180),_cn_],
     _cp_=[0,rg(160,169),_co_],
     _cq_=[0,rg(123,126),_cp_],
     _cr_=[0,rg(91,96),_cq_],
     _cs_=[0,rg(58,64),_cr_],
     punct=alt$0([0,rg(33,47),_cs_]),
     _ct_=[0,rg(9,13),0],
     space=alt$0([0,char$0(32),_ct_]),
     _cu_=[0,rg(65,70),0],
     xdigit=alt$0([0,digit,[0,rg(97,102),_cu_]]);
    function case$0(r){return [9,r]}
    function no_case(r){return [10,r]}
    function compile(r$0)
     {var
       _fh_=
        anchored(r$0)?[6,r$0]:seq$1([0,shortest(rep$0(any)),[0,[6,r$0],0]]),
       regexp=handle_case(0,_fh_),
       c=make(0),
       lnl=[0,0];
      function colorize(regexp)
       {var regexp$0=regexp;
        for(;;)
         {if(typeof regexp$0 === "number")
           switch(regexp$0)
            {case 7:lnl[1] = 1;return 0;
             case 0:
             case 1:return split(csingle(10),c);
             case 2:
             case 3:
             case 4:return split(cword,c);
             default:return 0}
          else
           switch(regexp$0[0])
            {case 0:var s=regexp$0[1];return split(s,c);
             case 1:
              var l=regexp$0[1];return caml_call2(Stdlib_list[15],colorize,l);
             case 2:
              var l$0=regexp$0[1];
              return caml_call2(Stdlib_list[15],colorize,l$0);
             case 3:var regexp$1=regexp$0[1],regexp$0=regexp$1;continue;
             case 4:
             case 5:
             case 14:var regexp$2=regexp$0[2];break;
             case 6:
             case 7:
             case 8:var regexp$2=regexp$0[1];break;
             default:throw [0,Assert_failure,_b9_]}
          var regexp$0=regexp$2;
          continue}}
      colorize(regexp);
      var
       _fg_=lnl[1],
       match=flatten(c),
       ncolor=match[3],
       color_repr=match[2],
       colors=match[1],
       lnl$0=_fg_?ncolor:-1,
       ncolor$0=_fg_?ncolor + 1 | 0:ncolor,
       ids=create_ids(0),
       pos=[0,0],
       match$0=
        translate
         (ids,332064784,0,0,-904640576,pos,[0,CSetMap[1]],colors,regexp),
       kind=match$0[2],
       r=match$0[1],
       initial=enforce_kind(ids,332064784,kind,r),
       group_count=pos[1] / 2 | 0,
       _ff_=caml_call1(_b1_[3][1],97);
      return [0,
              initial,
              0,
              colors,
              color_repr,
              ncolor$0,
              lnl$0,
              create_working_area(0),
              _ff_,
              group_count]}
    function exec_internal(name,opt,_fb_,partial,groups,re,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(_fb_)var sth$0=_fb_[1],len=sth$0;else var len=-1;
      var _fc_=pos < 0?1:0;
      if(_fc_)
       var _fd_=_fc_;
      else
       var
        _fe_=len < -1?1:0,
        _fd_=_fe_ || (caml_ml_string_length(s) < (pos + len | 0)?1:0);
      if(_fd_)caml_call1(Stdlib[1],name);
      return match_str(groups,partial,re,s,pos,len)}
    function exec(pos,len,re,s)
     {var match=exec_internal(cst_Re_exec,pos,len,0,1,re,s);
      if(typeof match === "number")throw Stdlib[8];
      var substr=match[1];
      return substr}
    function exec_opt(pos,len,re,s)
     {var match=exec_internal(cst_Re_exec_opt,pos,len,0,1,re,s);
      if(typeof match === "number")return 0;
      var substr=match[1];
      return [0,substr]}
    function execp(pos,len,re,s)
     {var match=exec_internal(cst_Re_execp,pos,len,0,0,re,s);
      return typeof match === "number"?0:1}
    function exec_partial(pos,len,re,s)
     {var match=exec_internal(cst_Re_exec_partial,pos,len,1,0,re,s);
      return typeof match === "number"
              ?0 === match?-1062743954:939392865
              :782112175}
    function marked(g,p){return caml_call2(Set[3],p,g[3])}
    function mark_set(g){return g[3]}
    function all_seq(opt,len,re,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(pos < 0)caml_call1(Stdlib[1],cst_Re_all);
      if(len)
       {var
         l=len[1],
         _e9_=l < 0?1:0,
         _e__=_e9_ || (caml_ml_string_length(s) < (pos + l | 0)?1:0);
        if(_e__)caml_call1(Stdlib[1],cst_Re_all$0);
        var limit=pos + l | 0}
      else
       var limit=caml_ml_string_length(s);
      function aux(pos,param)
       {if(limit <= pos)return 0;
        var match=match_str(1,0,re,s,pos,limit - pos | 0);
        if(typeof match === "number")return 0;
        var
         substr=match[1],
         match$0=caml_call2(Group[2],substr,0),
         p2=match$0[2],
         p1=match$0[1],
         pos$0=p1 === p2?p2 + 1 | 0:p2;
        return [0,substr,function(_fa_){return aux(pos$0,_fa_)}]}
      return function(_e$_){return aux(pos,_e$_)}}
    function matches_seq(pos,len,re,s)
     {var _e7_=all_seq(pos,len,re,s);
      function _e8_(sub){return caml_call2(Group[1],sub,0)}
      return caml_call2(Stdlib_seq[3],_e8_,_e7_)}
    function split_full_seq(opt,len,re,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(pos < 0)caml_call1(Stdlib[1],cst_Re_split);
      if(len)
       {var
         l=len[1],
         _eW_=l < 0?1:0,
         _eX_=_eW_ || (caml_ml_string_length(s) < (pos + l | 0)?1:0);
        if(_eX_)caml_call1(Stdlib[1],cst_Re_split$0);
        var limit=pos + l | 0}
      else
       var limit=caml_ml_string_length(s);
      function aux(state,i,pos$0,param)
       {if(typeof state === "number")
         {if(limit <= pos$0)
           {if(i < limit)
             {var
               sub=caml_call3(Stdlib_string[4],s,i,limit - i | 0),
               _e0_=i + 1 | 0;
              return [0,
                      [0,936573133,sub],
                      function(_e6_){return aux(state,_e0_,pos$0,_e6_)}]}
            return 0}
          var match=match_str(1,0,re,s,pos$0,limit - pos$0 | 0);
          if(typeof match === "number")
           {if(0 === match)
             {if(i < limit)
               {var text=caml_call3(Stdlib_string[4],s,i,limit - i | 0);
                return [0,
                        [0,936573133,text],
                        function(_e5_){return aux(state,limit,pos$0,_e5_)}]}
              return 0}
            return 0}
          var
           substr=match[1],
           match$0=caml_call2(Group[2],substr,0),
           p2=match$0[2],
           p1=match$0[1],
           pos$1=p1 === p2?p2 + 1 | 0:p2;
          if(pos < p1)
           {var
             text$0=caml_call3(Stdlib_string[4],s,i,p1 - i | 0),
             state$0=[0,73271853,[0,-363573681,substr]];
            return [0,
                    [0,936573133,text$0],
                    function(_e4_){return aux(state$0,p2,pos$1,_e4_)}]}
          return [0,
                  [0,-363573681,substr],
                  function(_e3_){return aux(state,p2,pos$1,_e3_)}]}
        var x=state[2],_e1_=814535476;
        return [0,x,function(_e2_){return aux(_e1_,i,pos$0,_e2_)}]}
      var _eY_=814535476;
      return function(_eZ_){return aux(_eY_,pos,pos,_eZ_)}}
    function split_seq(pos,len,re,s)
     {var seq=split_full_seq(pos,len,re,s);
      function filter(seq,param)
       {var seq$0=seq;
        for(;;)
         {var match=caml_call1(seq$0,0);
          if(match)
           {var _eU_=match[1];
            if(936573133 <= _eU_[1])
             {var tl=match[2],s=_eU_[2];
              return [0,s,function(_eV_){return filter(tl,_eV_)}]}
            var seq$1=match[2],seq$0=seq$1;
            continue}
          return 0}}
      return function(_eT_){return filter(seq,_eT_)}}
    function list_of_seq(s)
     {var _eQ_=0;
      function _eR_(l,x){return [0,x,l]}
      var _eS_=caml_call3(Stdlib_seq[7],_eR_,_eQ_,s);
      return caml_call1(Stdlib_list[9],_eS_)}
    function all$0(pos,len,re,s){return list_of_seq(all_seq(pos,len,re,s))}
    function matches(pos,len,re,s)
     {return list_of_seq(matches_seq(pos,len,re,s))}
    function split_full(pos,len,re,s)
     {return list_of_seq(split_full_seq(pos,len,re,s))}
    function split$0(pos,len,re,s)
     {return list_of_seq(split_seq(pos,len,re,s))}
    function gen_of_seq(s)
     {var r=[0,s];
      return function(param)
       {var match=caml_call1(r[1],0);
        if(match){var tl=match[2],x=match[1];r[1] = tl;return [0,x]}
        return 0}}
    function split_gen(pos,len,re,s)
     {return gen_of_seq(split_seq(pos,len,re,s))}
    function split_full_gen(pos,len,re,s)
     {return gen_of_seq(split_full_seq(pos,len,re,s))}
    function all_gen(pos,len,re,s){return gen_of_seq(all_seq(pos,len,re,s))}
    function matches_gen(pos,len,re,s)
     {return gen_of_seq(matches_seq(pos,len,re,s))}
    function replace(opt,len,_eM_,re,f,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(_eM_)var sth$0=_eM_[1],all=sth$0;else var all=1;
      if(pos < 0)caml_call1(Stdlib[1],cst_Re_replace);
      if(len)
       {var
         l=len[1],
         _eN_=l < 0?1:0,
         _eO_=_eN_ || (caml_ml_string_length(s) < (pos + l | 0)?1:0);
        if(_eO_)caml_call1(Stdlib[1],cst_Re_replace$0);
        var limit=pos + l | 0}
      else
       var limit=caml_ml_string_length(s);
      var buf=caml_call1(Stdlib_buffer[1],caml_ml_string_length(s)),pos$0=pos;
      for(;;)
       {if(pos$0 < limit)
         {var match=match_str(1,0,re,s,pos$0,limit - pos$0 | 0);
          if(typeof match === "number")
           {if(0 === match)
             caml_call4(Stdlib_buffer[16],buf,s,pos$0,limit - pos$0 | 0)}
          else
           {var
             substr=match[1],
             match$0=caml_call2(Group[2],substr,0),
             p2=match$0[2],
             p1=match$0[1];
            caml_call4(Stdlib_buffer[16],buf,s,pos$0,p1 - pos$0 | 0);
            var replacing=caml_call1(f,substr);
            caml_call2(Stdlib_buffer[14],buf,replacing);
            if(all)
             {if(p1 === p2)
               {if(p2 < limit)
                 {var _eP_=caml_string_get(s,p2);
                  caml_call2(Stdlib_buffer[10],buf,_eP_)}
                var pos$1=p2 + 1 | 0}
              else
               var pos$1=p2;
              var pos$0=pos$1;
              continue}
            caml_call4(Stdlib_buffer[16],buf,s,p2,limit - p2 | 0)}}
        return caml_call1(Stdlib_buffer[2],buf)}}
    function replace_string(pos,len,all,re,by,s)
     {return replace(pos,len,all,re,function(param){return by},s)}
    function witness(t)
     {function witness(param)
       {var param$0=param;
        for(;;)
         {if(typeof param$0 === "number")
           return cst$1;
          else
           switch(param$0[0])
            {case 0:
              var
               c=param$0[1],
               _eG_=pick(c),
               _eH_=caml_call1(Stdlib_char[1],_eG_);
              return caml_call2(Stdlib_string[1],1,_eH_);
             case 1:
              var xs=param$0[1],_eI_=caml_call2(Stdlib_list[17],witness,xs);
              return caml_call2(Stdlib_string[7],cst$2,_eI_);
             case 2:
              var _eJ_=param$0[1];
              if(_eJ_){var param$1=_eJ_[1],param$0=param$1;continue}
              throw [0,Assert_failure,_cv_];
             case 3:
              var
               from=param$0[2],
               r=param$0[1],
               w=witness(r),
               b=
                caml_call1
                 (Stdlib_buffer[1],
                  runtime.caml_mul(caml_ml_string_length(w),from)),
               _eK_=1;
              if(! (from < 1))
               {var i=_eK_;
                for(;;)
                 {caml_call2(Stdlib_buffer[14],b,w);
                  var _eL_=i + 1 | 0;
                  if(from !== i){var i=_eL_;continue}
                  break}}
              return caml_call1(Stdlib_buffer[2],b);
             case 10:var param$3=param$0[1],param$0=param$3;continue;
             case 4:
             case 5:
             case 14:var param$2=param$0[2];break;
             case 11:
             case 12:
             case 13:throw [0,Assert_failure,_cw_];
             default:var param$2=param$0[1]}
          var param$0=param$2;
          continue}}
      return witness(handle_case(0,t))}
    var
     get$0=Group[1],
     get_ofs=Group[2],
     get_all=Group[5],
     get_all_ofs=Group[6],
     test$0=Group[7],
     Seq=[0,all_seq,matches_seq,split_seq,split_full_seq],
     Mark=[0,marked,Set,mark_set,equal$0,compare$1],
     include$0=
      [0,
       Group,
       compile,
       exec,
       exec_opt,
       execp,
       exec_partial,
       Mark,
       Seq,
       all$0,
       all_gen,
       all_seq,
       matches,
       matches_gen,
       matches_seq,
       split$0,
       split_gen,
       split_seq,
       split_full,
       split_full_gen,
       split_full_seq,
       replace,
       replace_string,
       str,
       char$0,
       alt$0,
       seq$1,
       empty$2,
       epsilon,
       rep$0,
       rep1,
       repn,
       opt,
       bol,
       eol,
       bow,
       eow,
       bos,
       eos,
       leol,
       start$0,
       stop$0,
       word,
       not_boundary,
       whole_string,
       longest,
       shortest,
       first$0,
       greedy,
       non_greedy,
       group,
       no_group,
       nest,
       mark$0,
       set,
       rg,
       inter$0,
       diff$0,
       compl,
       any,
       notnl,
       alnum,
       wordc,
       alpha,
       ascii,
       blank,
       cntrl,
       digit,
       graph,
       lower,
       print,
       punct,
       space,
       upper,
       xdigit,
       case$0,
       no_case,
       pp$5,
       print_re,
       print_re,
       View,
       witness,
       get$0,
       get_ofs,
       get_all,
       get_all_ofs,
       test$0,
       marked,
       mark_set];
    caml_register_global(155,include$0,"Re__Core");
    var
     Parse_error=[248,cst_Re_Emacs_Parse_error,caml_fresh_oo_id(0)],
     Not_supported=[248,cst_Re_Emacs_Not_supported,caml_fresh_oo_id(0)];
    function re(opt$0,s)
     {if(opt$0)var sth=opt$0[1],case$0=sth;else var case$0=1;
      var i=[0,0],l=caml_ml_string_length(s);
      function eos$0(param){return i[1] === l?1:0}
      function test2(c$0,c)
       {var _eD_=(i[1] + 1 | 0) < l?1:0;
        if(_eD_)
         var
          _eE_=caml_string_get(s,i[1]) === c$0?1:0,
          _eF_=_eE_?caml_string_get(s,i[1] + 1 | 0) === c?1:0:_eE_;
        else
         var _eF_=_eD_;
        return _eF_}
      function accept(c)
       {var
         _eB_=1 - eos$0(0),
         _eC_=_eB_?caml_string_get(s,i[1]) === c?1:0:_eB_;
        if(_eC_)i[1]++;
        return _eC_}
      function accept2(c$0,c)
       {var r=test2(c$0,c);if(r)i[1] = i[1] + 2 | 0;return r}
      function get(param){var r=caml_string_get(s,i[1]);i[1]++;return r}
      function regexp(param)
       {var left=branch(0),left$0=left;
        for(;;)
         {if(accept2(92,124))
           {var left$1=alt$0([0,left$0,[0,branch(0),0]]),left$0=left$1;
            continue}
          return left$0}}
      function branch(param)
       {var left=0;
        for(;;)
         {if(! eos$0(0) && ! test2(92,124) && ! test2(92,41))
           {if(accept(46))
             var r=notnl;
            else
             if(accept(94))
              var r=bol;
             else
              if(accept(36))
               var r=eol;
              else
               if(accept(91))
                var r=accept(94)?compl(bracket(0)):alt$0(bracket(0));
               else
                if(accept(92))
                 if(accept(40))
                  {var r$0=regexp(0);
                   if(1 - accept2(92,41))throw Parse_error;
                   var r=[6,r$0]}
                 else
                  if(accept(96))
                   var r=bos;
                  else
                   if(accept(39))
                    var r=eos;
                   else
                    if(accept(61))
                     var r=start$0;
                    else
                     if(accept(98))
                      var r=alt$0([0,bow,[0,eow,0]]);
                     else
                      if(accept(66))
                       var r=not_boundary;
                      else
                       if(accept(60))
                        var r=bow;
                       else
                        if(accept(62))
                         var r=eow;
                        else
                         if(accept(119))
                          var r=alt$0([0,alnum,[0,char$0(95),0]]);
                         else
                          if(accept(87))
                           var r=compl([0,alnum,[0,char$0(95),0]]);
                          else
                           {if(eos$0(0))throw Parse_error;
                            var c=get(0),switch$0=0;
                            if(63 <= c)
                             {if(91 <= c)
                               {if(! (95 <= c))switch$0 = 1}
                              else
                               if(! (64 <= c))switch$0 = 1}
                            else
                             if(48 <= c)
                              {if(! (58 <= c))throw Not_supported}
                             else
                              if(36 <= c)
                               switch(c - 36 | 0)
                                {case 0:case 6:case 7:case 10:switch$0 = 1;break}
                            if(! switch$0)throw Parse_error;
                            var r=char$0(c)}
                else
                 {if(eos$0(0))throw Parse_error;
                  var c$0=get(0),switch$1=0;
                  if(44 <= c$0)
                   {if(63 === c$0)switch$1 = 1}
                  else
                   if(42 <= c$0)switch$1 = 1;
                  if(switch$1)throw Parse_error;
                  var r=char$0(c$0)}
            var
             _eA_=accept(42)?rep$0(r):accept(43)?rep1(r):accept(63)?opt(r):r,
             left$0=[0,_eA_,left],
             left=left$0;
            continue}
          return seq$1(caml_call1(Stdlib_list[9],left))}}
      function bracket(s)
       {var s$0=s;
        for(;;)
         {if(0 !== s$0 && accept(93))return s$0;
          var c=char$1(0);
          if(accept(45))
           {if(accept(93))
             {var _ez_=[0,char$0(45),s$0];return [0,char$0(c),_ez_]}
            var c$0=char$1(0),s$1=[0,rg(c,c$0),s$0],s$0=s$1;
            continue}
          var s$2=[0,char$0(c),s$0],s$0=s$2;
          continue}}
      function char$1(param){if(eos$0(0))throw Parse_error;return get(0)}
      var r=regexp(0);
      if(1 - eos$0(0))throw Parse_error;
      return case$0?r:[10,r]}
    function compile_pat(opt,s)
     {if(opt)var sth=opt[1],case$0=sth;else var case$0=1;
      return compile(re([0,case$0],s))}
    var Re_Emacs=[0,Parse_error,Not_supported,re,compile,compile_pat];
    caml_register_global(156,Re_Emacs,"Re__Emacs");
    function compile_regexp(s,c)
     {var
       re$0=re([0,1 - c],s),
       _ew_=[246,function(_ey_){return compile(re$0)}];
      return [0,
              re$0,
              [246,
               function(_ex_){return compile(seq$1([0,start$0,[0,re$0,0]]))}],
              _ew_]}
    var state=[0,0];
    function string_match(re,s,p)
     {try
       {var
         _er_=re[2],
         _es_=caml_obj_tag(_er_),
         _et_=
          250 === _es_
           ?_er_[1]
           :246 === _es_?caml_call1(CamlinternalLazy[2],_er_):_er_;
        state[1] = [0,exec([0,p],0,_et_,s)];
        var _eu_=1;
        return _eu_}
      catch(_ev_)
       {_ev_ = caml_wrap_exception(_ev_);
        if(_ev_ === Stdlib[8]){state[1] = 0;return 0}
        throw _ev_}}
    function string_partial_match(re,s,p)
     {var
       _eo_=re[2],
       _ep_=caml_obj_tag(_eo_),
       _eq_=
        250 === _ep_
         ?_eo_[1]
         :246 === _ep_?caml_call1(CamlinternalLazy[2],_eo_):_eo_,
       match=exec_partial([0,p],0,_eq_,s);
      return 782112175 === match?string_match(re,s,p):939392865 <= match?1:0}
    function search_forward(re,s,p)
     {try
       {var
         _ej_=re[3],
         _ek_=caml_obj_tag(_ej_),
         _el_=
          250 === _ek_
           ?_ej_[1]
           :246 === _ek_?caml_call1(CamlinternalLazy[2],_ej_):_ej_,
         res=exec([0,p],0,_el_,s);
        state[1] = [0,res];
        var _em_=caml_call2(Group[2],res,0)[1];
        return _em_}
      catch(_en_)
       {_en_ = caml_wrap_exception(_en_);
        if(_en_ === Stdlib[8]){state[1] = 0;throw Stdlib[8]}
        throw _en_}}
    function search_backward(re,s,p)
     {var p$0=p;
      for(;;)
       try
        {var
          _ef_=re[2],
          _eg_=caml_obj_tag(_ef_),
          _eh_=
           250 === _eg_
            ?_ef_[1]
            :246 === _eg_?caml_call1(CamlinternalLazy[2],_ef_):_ef_,
          res=exec([0,p$0],0,_eh_,s);
         state[1] = [0,res];
         return p$0}
       catch(_ei_)
        {_ei_ = caml_wrap_exception(_ei_);
         if(_ei_ === Stdlib[8])
          {state[1] = 0;
           if(0 === p$0)throw Stdlib[8];
           var p$1=p$0 - 1 | 0,p$0=p$1;
           continue}
         throw _ei_}}
    function valid_group(n)
     {var _eb_=0 <= n?1:0;
      if(_eb_)
       {var _ec_=n < 10?1:0;
        if(_ec_)
         {var _ed_=state[1];
          if(_ed_){var m=_ed_[1];return n < caml_call1(Group[8],m)?1:0}
          var _ee_=0}
        else
         var _ee_=_ec_}
      else
       var _ee_=_eb_;
      return _ee_}
    function offset_group(i)
     {var _ea_=state[1];
      if(_ea_){var m=_ea_[1];return caml_call2(Group[2],m,i)}
      throw Stdlib[8]}
    function group_len(i)
     {try
       {var match=offset_group(i),e=match[2],b=match[1],_d__=e - b | 0;
        return _d__}
      catch(_d$_)
       {_d$_ = caml_wrap_exception(_d$_);
        if(_d$_ === Stdlib[8])return 0;
        throw _d$_}}
    function replace$0(orig,repl,p,res,q,len)
     {var p$0=p,q$0=q;
      for(;;)
       {var _d7_=p$0 < len?1:0;
        if(_d7_)
         {var c=caml_string_get(repl,p$0);
          if(92 === c)
           {var c$0=caml_string_get(repl,p$0 + 1 | 0);
            if(58 <= c$0)
             {if(92 === c$0)
               {caml_bytes_set(res,q$0,92);
                var q$1=q$0 + 1 | 0,p$1=p$0 + 2 | 0,p$0=p$1,q$0=q$1;
                continue}}
            else
             if(48 <= c$0)
              {try
                {var
                  match=offset_group(c$0 - 48 | 0),
                  e=match[2],
                  b=match[1],
                  d$0=e - b | 0;
                 if(0 < d$0)caml_call5(Stdlib_string[6],orig,b,res,q$0,d$0);
                 var d=d$0}
               catch(_d9_)
                {_d9_ = caml_wrap_exception(_d9_);
                 if(_d9_ !== Stdlib[8])throw _d9_;
                 var d=0,_d8_=_d9_}
               var q$3=q$0 + d | 0,p$3=p$0 + 2 | 0,p$0=p$3,q$0=q$3;
               continue}
            caml_bytes_set(res,q$0,92);
            caml_bytes_set(res,q$0 + 1 | 0,c$0);
            var q$2=q$0 + 2 | 0,p$2=p$0 + 2 | 0,p$0=p$2,q$0=q$2;
            continue}
          caml_bytes_set(res,q$0,c);
          var q$4=q$0 + 1 | 0,p$4=p$0 + 1 | 0,p$0=p$4,q$0=q$4;
          continue}
        return _d7_}}
    function replacement_text(repl,orig)
     {var len=caml_ml_string_length(repl),p=0,q=0;
      for(;;)
       {if(p < len)
         {if(92 === caml_string_get(repl,p))
           {var p$0=p + 1 | 0;
            if(p$0 === len)
             caml_call1(Stdlib[2],cst_Str_replace_illegal_backsl);
            var c=caml_string_get(repl,p$0),switch$0=0;
            if(58 <= c)
             if(92 === c)var q$0=q + 1 | 0;else switch$0 = 1;
            else
             if(48 <= c)
              var q$0=q + group_len(c - 48 | 0) | 0;
             else
              switch$0 = 1;
            if(switch$0)var q$0=q + 2 | 0;
            var p$1=p$0 + 1 | 0,p=p$1,q=q$0;
            continue}
          var q$1=q + 1 | 0,p$2=p + 1 | 0,p=p$2,q=q$1;
          continue}
        var res=caml_create_bytes(q);
        replace$0(orig,repl,0,res,0,caml_ml_string_length(repl));
        return caml_call1(Stdlib_bytes[42],res)}}
    function quote$0(s)
     {var
       len=caml_ml_string_length(s),
       buf=caml_call1(Stdlib_buffer[1],2 * len | 0),
       _d3_=len - 1 | 0,
       _d2_=0;
      if(! (_d3_ < 0))
       {var i=_d2_;
        for(;;)
         {var c=caml_string_get(s,i),_d4_=c - 63 | 0,switch$0=0;
          if(31 < _d4_ >>> 0)
           {var _d5_=_d4_ + 27 | 0;
            if(! (10 < _d5_ >>> 0))
             switch(_d5_){case 0:case 6:case 7:case 10:switch$0 = 1;break}}
          else
           if(26 < (_d4_ - 1 | 0) >>> 0)switch$0 = 1;
          if(switch$0)
           {caml_call2(Stdlib_buffer[10],buf,92);
            caml_call2(Stdlib_buffer[10],buf,c)}
          else
           caml_call2(Stdlib_buffer[10],buf,c);
          var _d6_=i + 1 | 0;
          if(_d3_ !== i){var i=_d6_;continue}
          break}}
      return caml_call1(Stdlib_buffer[2],buf)}
    function string_before(s,n){return caml_call3(Stdlib_string[4],s,0,n)}
    function string_after(s,n)
     {return caml_call3(Stdlib_string[4],s,n,caml_ml_string_length(s) - n | 0)}
    function first_chars(s,n){return caml_call3(Stdlib_string[4],s,0,n)}
    function last_chars(s,n)
     {return caml_call3(Stdlib_string[4],s,caml_ml_string_length(s) - n | 0,n)}
    function regexp(e){return compile_regexp(e,0)}
    function regexp_case_fold(e){return compile_regexp(e,1)}
    function regexp_string(s){return compile_regexp(quote$0(s),0)}
    function regexp_string_case_fold(s){return compile_regexp(quote$0(s),1)}
    function group_beginning(n)
     {if(1 - valid_group(n))caml_call1(Stdlib[1],cst_Str_group_beginning);
      var pos=offset_group(n)[1];
      if(-1 === pos)throw Stdlib[8];
      return pos}
    function group_end(n)
     {if(1 - valid_group(n))caml_call1(Stdlib[1],cst_Str_group_end);
      var pos=offset_group(n)[2];
      if(-1 === pos)throw Stdlib[8];
      return pos}
    function matched_group(n,txt)
     {var match=offset_group(n),e=match[2],b=match[1];
      return caml_call3(Stdlib_string[4],txt,b,e - b | 0)}
    function replace_matched(repl,matched)
     {return replacement_text(repl,matched)}
    function match_beginning(param){return group_beginning(0)}
    function match_end(param){return group_end(0)}
    function matched_string(txt){return matched_group(0,txt)}
    function substitute_first(expr,repl_fun,text)
     {try
       {var
         pos=search_forward(expr,text,0),
         _dX_=[0,string_after(text,match_end(0)),0],
         _dY_=[0,caml_call1(repl_fun,text),_dX_],
         _dZ_=[0,string_before(text,pos),_dY_],
         _d0_=caml_call2(Stdlib_string[7],cst$3,_dZ_);
        return _d0_}
      catch(_d1_)
       {_d1_ = caml_wrap_exception(_d1_);
        if(_d1_ === Stdlib[8])return text;
        throw _d1_}}
    function global_substitute(expr,repl_fun,text)
     {function replace(accu,start,last_was_empty)
       {try
         {var startpos=last_was_empty?start + 1 | 0:start;
          if(caml_ml_string_length(text) < startpos)throw Stdlib[8];
          var
           pos=search_forward(expr,text,startpos),
           end_pos=match_end(0),
           repl_text=caml_call1(repl_fun,text),
           _dV_=
            replace
             ([0,
               repl_text,
               [0,
                caml_call3(Stdlib_string[4],text,start,pos - start | 0),
                accu]],
              end_pos,
              end_pos === pos?1:0);
          return _dV_}
        catch(_dW_)
         {_dW_ = caml_wrap_exception(_dW_);
          if(_dW_ === Stdlib[8])return [0,string_after(text,start),accu];
          throw _dW_}}
      var _dT_=replace(0,0,0),_dU_=caml_call1(Stdlib_list[9],_dT_);
      return caml_call2(Stdlib_string[7],cst$4,_dU_)}
    function global_replace(expr,repl,text)
     {return global_substitute
              (expr,function(_dS_){return replacement_text(repl,_dS_)},text)}
    function replace_first(expr,repl,text)
     {return substitute_first
              (expr,function(_dR_){return replacement_text(repl,_dR_)},text)}
    function search_forward_progress(re,s,p)
     {var pos=search_forward(re,s,p);
      if(p < match_end(0))return pos;
      if(p < caml_ml_string_length(s))return search_forward(re,s,p + 1 | 0);
      throw Stdlib[8]}
    function bounded_split(expr,text,num)
     {var start=string_match(expr,text,0)?match_end(0):0;
      function split(accu,start,n)
       {if(caml_ml_string_length(text) <= start)return accu;
        if(1 === n)return [0,string_after(text,start),accu];
        try
         {var
           pos=search_forward_progress(expr,text,start),
           _dO_=match_end(0),
           _dP_=
            split
             ([0,caml_call3(Stdlib_string[4],text,start,pos - start | 0),accu],
              _dO_,
              n - 1 | 0);
          return _dP_}
        catch(_dQ_)
         {_dQ_ = caml_wrap_exception(_dQ_);
          if(_dQ_ === Stdlib[8])return [0,string_after(text,start),accu];
          throw _dQ_}}
      var _dN_=split(0,start,num);
      return caml_call1(Stdlib_list[9],_dN_)}
    function split$1(expr,text){return bounded_split(expr,text,0)}
    function bounded_split_delim(expr,text,num)
     {function split(accu,start,n)
       {if(caml_ml_string_length(text) < start)return accu;
        if(1 === n)return [0,string_after(text,start),accu];
        try
         {var
           pos=search_forward_progress(expr,text,start),
           _dK_=match_end(0),
           _dL_=
            split
             ([0,caml_call3(Stdlib_string[4],text,start,pos - start | 0),accu],
              _dK_,
              n - 1 | 0);
          return _dL_}
        catch(_dM_)
         {_dM_ = caml_wrap_exception(_dM_);
          if(_dM_ === Stdlib[8])return [0,string_after(text,start),accu];
          throw _dM_}}
      if(runtime.caml_string_equal(text,cst$5))return 0;
      var _dJ_=split(0,0,num);
      return caml_call1(Stdlib_list[9],_dJ_)}
    function split_delim(expr,text){return bounded_split_delim(expr,text,0)}
    function bounded_full_split(expr,text,num)
     {function split(accu,start,n)
       {if(caml_ml_string_length(text) <= start)return accu;
        if(1 === n)return [0,[0,string_after(text,start)],accu];
        try
         {var
           pos=search_forward_progress(expr,text,start),
           s=matched_string(text);
          if(start < pos)
           var
            _dG_=match_end(0),
            _dH_=
             split
              ([0,
                [1,s],
                [0,
                 [0,caml_call3(Stdlib_string[4],text,start,pos - start | 0)],
                 accu]],
               _dG_,
               n - 1 | 0);
          else
           var _dH_=split([0,[1,s],accu],match_end(0),n - 1 | 0);
          return _dH_}
        catch(_dI_)
         {_dI_ = caml_wrap_exception(_dI_);
          if(_dI_ === Stdlib[8])return [0,[0,string_after(text,start)],accu];
          throw _dI_}}
      var _dF_=split(0,0,num);
      return caml_call1(Stdlib_list[9],_dF_)}
    function full_split(expr,text){return bounded_full_split(expr,text,0)}
    var
     Re_Str=
      [0,
       regexp,
       regexp_case_fold,
       quote$0,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search_forward,
       search_backward,
       string_partial_match,
       matched_string,
       match_beginning,
       match_end,
       matched_group,
       group_beginning,
       group_end,
       global_replace,
       replace_first,
       global_substitute,
       substitute_first,
       replace_matched,
       split$1,
       bounded_split,
       split_delim,
       bounded_split_delim,
       full_split,
       bounded_full_split,
       string_before,
       string_after,
       first_chars,
       last_chars];
    caml_register_global(158,Re_Str,"Re__Str");
    var Parse_error$0=[248,cst_Re_Glob_Parse_error,caml_fresh_oo_id(0)];
    function mul(l$0,l)
     {function _dC_(s)
       {function _dE_(s$0){return caml_call2(Stdlib[28],s,s$0)}
        return caml_call2(Stdlib_list[17],_dE_,l)}
      var _dD_=caml_call2(Stdlib_list[17],_dC_,l$0);
      return caml_call1(Stdlib_list[14],_dD_)}
    function explicit_period(t)
     {var _dy_=t[6];
      if(_dy_)
       {var _dz_=t[3];
        if(_dz_)var _dA_=_dz_;else var _dB_=t[4],_dA_=_dB_?t[5]:_dB_}
      else
       var _dA_=_dy_;
      return _dA_}
    function append(opt,t,piece)
     {if(opt)
       var sth=opt[1],am_at_start_of_component=sth;
      else
       var am_at_start_of_component=0;
      return [0,[0,piece,t[1]],t[2],0,am_at_start_of_component,t[5],t[6]]}
    function next(t)
     {var _dx_=t[2];
      if(_dx_)
       {var remaining=_dx_[2],piece=_dx_[1];
        return [0,[0,piece,[0,t[1],remaining,t[3],t[4],t[5],t[6]]]]}
      return 0}
    function one(explicit_slash,explicit_period)
     {var
       _dt_=0,
       _du_=explicit_period?[0,char$0(46),0]:0,
       _dv_=[0,_du_,_dt_],
       _dw_=explicit_slash?[0,char$0(47),0]:0;
      return compl(caml_call1(Stdlib_list[13],[0,_dw_,_dv_]))}
    function enclosed(enclosed)
     {if(0 === enclosed[0]){var c=enclosed[1];return char$0(c)}
      var high=enclosed[2],low=enclosed[1];
      return rg(low,high)}
    function enclosed_set(explicit_slash,explicit_period,kind,set)
     {var
       set$0=caml_call2(Stdlib_list[17],enclosed,set),
       enclosure=596216810 <= kind?alt$0(set$0):compl(set$0);
      return inter$0([0,enclosure,[0,one(explicit_slash,explicit_period),0]])}
    function exactly(state,c){return append([0,47 === c?1:0],state,char$0(c))}
    function glob(opt$0,_dh_,_dg_,_df_,s)
     {if(opt$0)var sth=opt$0[1],anchored=sth;else var anchored=0;
      if(_dh_)var sth$0=_dh_[1],pathname=sth$0;else var pathname=1;
      if(_dg_)var sth$1=_dg_[1],period=sth$1;else var period=1;
      if(_df_)var sth$2=_df_[1],expand_braces=sth$2;else var expand_braces=0;
      function to_re(s)
       {var i=[0,0],l=caml_ml_string_length(s);
        function eos(param){return i[1] === l?1:0}
        function read(c)
         {var _ds_=1 - eos(0),r=_ds_?caml_string_get(s,i[1]) === c?1:0:_ds_;
          if(r)i[1]++;
          return r}
        function char$0(param)
         {read(92);
          if(eos(0))throw Parse_error$0;
          var r=caml_string_get(s,i[1]);
          i[1]++;
          return r}
        function enclosed(param)
         {var s=0;
          for(;;)
           {if(0 !== s && read(93))return s;
            var c=char$0(0);
            if(read(45))
             {if(read(93))return [0,[0,c],[0,_cx_,s]];
              var c$0=char$0(0),s$0=[0,[1,c,c$0],s],s=s$0;
              continue}
            var s$1=[0,[0,c],s],s=s$1;
            continue}}
        var pieces=0;
        for(;;)
         {if(eos(0))
           {var
             glob=caml_call1(Stdlib_list[9],pieces),
             state=[0,0,glob,1,1,pathname,period],
             state$7=state;
            for(;;)
             {var match$0=next(state$7);
              if(match$0)
               {var
                 match$1=match$0[1],
                 state$8=match$1[2],
                 p=match$1[1],
                 explicit_slash$0=state$8[5],
                 explicit_period$1=explicit_period(state$8);
                if(typeof p === "number")
                 if(0 === p)
                  var
                   state$9=
                    append(0,state$8,one(explicit_slash$0,explicit_period$1));
                 else
                  {var
                    explicit_slash=state$8[5],
                    explicit_period$0=explicit_period(state$8);
                   if(explicit_period$0)
                    if(explicit_slash)
                     {var
                       _dl_=[0,rep$0(one(1,0)),0],
                       not_empty=seq$1([0,one(1,1),_dl_]),
                       maybe_empty=opt(not_empty),
                       enclosed_set$1=
                        function(not_empty)
                         {function enclosed_set$0(state,kind,set)
                           {var
                             _dr_=
                              [0,seq$1([0,not_empty,[0,enclosed_set(1,0,kind,set),0]]),0];
                            return append
                                    (0,state,alt$0([0,enclosed_set(1,1,kind,set),_dr_]))}
                          return enclosed_set$0},
                       enclosed_set$0=enclosed_set$1(not_empty),
                       state$0=state$8;
                      for(;;)
                       {var match=next(state$0);
                        if(match)
                         {var _dm_=match[1],_dn_=_dm_[1];
                          if(typeof _dn_ === "number")
                           {if(0 !== _dn_)
                             {var state$2=_dm_[2],state$0=state$2;continue}
                            var state$1=_dm_[2],_do_=append(0,state$1,not_empty)}
                          else
                           switch(_dn_[0])
                            {case 0:
                              var
                               state$3=_dm_[2],
                               c=_dn_[1],
                               not_empty$0=46 === c?not_empty:maybe_empty,
                               state$4=append(0,state$3,not_empty$0),
                               _do_=exactly(state$4,c);
                              break;
                             case 1:
                              var
                               state$5=_dm_[2],
                               enclosed$0=_dn_[1],
                               _do_=enclosed_set$0(state$5,596216810,enclosed$0);
                              break;
                             default:
                              var
                               state$6=_dm_[2],
                               enclosed$1=_dn_[1],
                               _do_=enclosed_set$0(state$6,-188280562,enclosed$1)}}
                        else
                         var _do_=append(0,state$0,maybe_empty);
                        var _dq_=_do_;
                        break}}
                    else
                     var
                      _dp_=[0,rep$0(one(0,0)),0],
                      _dq_=
                       append
                        (0,state$8,opt(seq$1([0,one(0,explicit_period$0),_dp_])));
                   else
                    var
                     _dq_=
                      append
                       (0,state$8,rep$0(one(explicit_slash,explicit_period$0)));
                   var state$9=_dq_}
                else
                 switch(p[0])
                  {case 0:var c$0=p[1],state$9=exactly(state$8,c$0);break;
                   case 1:
                    var
                     enclosed$2=p[1],
                     state$9=
                      append
                       (0,
                        state$8,
                        enclosed_set
                         (explicit_slash$0,explicit_period$1,596216810,enclosed$2));
                    break;
                   default:
                    var
                     enclosed$3=p[1],
                     state$9=
                      append
                       (0,
                        state$8,
                        enclosed_set
                         (explicit_slash$0,explicit_period$1,-188280562,enclosed$3))}
                var state$7=state$9;
                continue}
              var re=seq$1(caml_call1(Stdlib_list[9],state$7[1]));
              return anchored?whole_string(re):re}}
          if(read(42))
           var _dk_=1;
          else
           if(read(63))
            var _dk_=0;
           else
            if(read(91))
             {var switch$0=0;
              if(read(94) || read(33))
               switch$0 = 1;
              else
               var _dk_=[1,enclosed(0)];
              if(switch$0)var _dk_=[2,enclosed(0)]}
            else
             var _dk_=[0,char$0(0)];
          var pieces$0=[0,_dk_,pieces],pieces=pieces$0;
          continue}}
      if(expand_braces)
       {var
         l=caml_ml_string_length(s),
         expl=
          function(inner,s$0,i,acc,beg$0)
           {var s$1=s$0,i$0=i,acc$0=acc,beg$1=beg$0;
            for(;;)
             {if(l <= i$0)
               {if(inner)throw Parse_error$0;
                return [0,
                        mul
                         (beg$1,
                          [0,caml_call3(Stdlib_string[4],s,s$1,i$0 - s$1 | 0),0]),
                        i$0]}
              var match=caml_string_get(s,i$0);
              if(44 === match)
               {if(inner)
                 {var
                   _di_=
                    mul
                     (beg$1,
                      [0,caml_call3(Stdlib_string[4],s,s$1,i$0 - s$1 | 0),0]),
                   acc$1=caml_call2(Stdlib[37],_di_,acc$0),
                   i$1=i$0 + 1 | 0,
                   s$2=i$0 + 1 | 0,
                   s$1=s$2,
                   i$0=i$1,
                   acc$0=acc$1,
                   beg$1=beg;
                  continue}}
              else
               if(123 <= match)
                {if(! (126 <= match))
                  {var switcher=match - 123 | 0;
                   switch(switcher)
                    {case 0:
                      var
                       match$0=expl(1,i$0 + 1 | 0,i$0 + 1 | 0,0,_cy_),
                       i$3=match$0[2],
                       t=match$0[1],
                       beg$2=
                        mul
                         (beg$1,
                          mul
                           ([0,caml_call3(Stdlib_string[4],s,s$1,i$0 - s$1 | 0),0],t)),
                       s$1=i$3,
                       i$0=i$3,
                       beg$1=beg$2;
                      continue;
                     case 1:break;
                     default:
                      if(inner)
                       {var
                         _dj_=
                          mul
                           (beg$1,
                            [0,caml_call3(Stdlib_string[4],s,s$1,i$0 - s$1 | 0),0]);
                        return [0,caml_call2(Stdlib[37],_dj_,acc$0),i$0 + 1 | 0]}}}}
               else
                if(92 === match){var i$4=i$0 + 2 | 0,i$0=i$4;continue}
              var i$2=i$0 + 1 | 0,i$0=i$2;
              continue}},
         _dd_=expl(0,0,0,0,_cz_)[1],
         _de_=caml_call1(Stdlib_list[9],_dd_);
        return alt$0(caml_call2(Stdlib_list[17],to_re,_de_))}
      return to_re(s)}
    function glob$0(anchored,period,s){return glob(anchored,0,[0,period],0,s)}
    function globx(anchored,s){return glob(anchored,0,0,_cA_,s)}
    function globx$0(anchored,period,s)
     {return glob(anchored,0,[0,period],_cB_,s)}
    var Re_Glob=[0,Parse_error$0,glob,glob$0,globx,globx$0];
    caml_register_global(159,Re_Glob,"Re__Glob");
    var
     Parse_error$1=[248,cst_Re_Perl_Parse_error,caml_fresh_oo_id(0)],
     Not_supported$0=[248,cst_Re_Perl_Not_supported,caml_fresh_oo_id(0)];
    function posix_class_of_string(class$0)
     {var switch$0=runtime.caml_string_compare(class$0,cst_lower);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return lower;
        if(! caml_string_notequal(class$0,cst_print))return print;
        if(! caml_string_notequal(class$0,cst_punct))return punct;
        if(! caml_string_notequal(class$0,cst_space))return space;
        if(! caml_string_notequal(class$0,cst_upper))return upper;
        if(! caml_string_notequal(class$0,cst_word))return wordc;
        if(! caml_string_notequal(class$0,cst_xdigit))return xdigit}
      else
       {if(! caml_string_notequal(class$0,cst_alnum))return alnum;
        if(! caml_string_notequal(class$0,cst_ascii))return ascii;
        if(! caml_string_notequal(class$0,cst_blank))return blank;
        if(! caml_string_notequal(class$0,cst_cntrl))return cntrl;
        if(! caml_string_notequal(class$0,cst_digit))return digit;
        if(! caml_string_notequal(class$0,cst_graph))return graph}
      var _dc_=caml_call2(Stdlib[28],cst_Invalid_pcre_class,class$0);
      return caml_call1(Stdlib[1],_dc_)}
    function re$0(opt$0,s)
     {if(opt$0)var sth=opt$0[1],opts=sth;else var opts=0;
      var
       ungreedy=caml_call2(Stdlib_list[33],-243745063,opts),
       dotall=caml_call2(Stdlib_list[33],-424303016,opts),
       dollar_endonly=caml_call2(Stdlib_list[33],-712595228,opts),
       multiline=caml_call2(Stdlib_list[33],1071952589,opts),
       i=[0,0],
       l=caml_ml_string_length(s);
      function eos$0(param){return i[1] === l?1:0}
      function test(c)
       {var
         _da_=1 - eos$0(0),
         _db_=_da_?caml_string_get(s,i[1]) === c?1:0:_da_;
        return _db_}
      function accept(c){var r=test(c);if(r)i[1]++;return r}
      function accept_s(s$0)
       {var len=caml_ml_string_length(s$0);
        try
         {var _c6_=len - 1 | 0,_c5_=0;
          if(! (_c6_ < 0))
           {var j=_c5_;
            for(;;)
             {try
               {var _c8_=caml_string_get(s,i[1] + j | 0);
                if(caml_string_get(s$0,j) !== _c8_)throw Stdlib[3]}
              catch(_c$_){throw Stdlib[3]}
              var _c9_=j + 1 | 0;
              if(_c6_ !== j){var j=_c9_;continue}
              break}}
          i[1] = i[1] + len | 0;
          var _c7_=1;
          return _c7_}
        catch(_c__)
         {_c__ = caml_wrap_exception(_c__);
          if(_c__ === Stdlib[3])return 0;
          throw _c__}}
      function get(param){var r=caml_string_get(s,i[1]);i[1]++;return r}
      function unget(param){i[1] += -1;return 0}
      function greedy_mod(r)
       {var gr=accept(63),gr$0=ungreedy?1 - gr:gr;
        return gr$0?non_greedy(r):greedy(r)}
      function regexp(param)
       {var left=branch(0),left$0=left;
        for(;;)
         {if(accept(124))
           {var left$1=alt$0([0,left$0,[0,branch(0),0]]),left$0=left$1;
            continue}
          return left$0}}
      function branch(param)
       {var left=0;
        for(;;)
         {if(! eos$0(0) && ! test(124) && ! test(41))
           {if(accept(46))
             var r=dotall?any:notnl;
            else
             if(accept(40))
              if(accept(63))
               if(accept(58))
                {var r$0=regexp(0);
                 if(1 - accept(41))throw Parse_error$1;
                 var r=r$0}
               else
                {if(! accept(35))throw Parse_error$1;
                 for(;;)
                  {if(eos$0(0))throw Parse_error$1;
                   if(! accept(41)){i[1]++;continue}
                   var r=epsilon;
                   break}}
              else
               {var r$1=regexp(0);
                if(1 - accept(41))throw Parse_error$1;
                var r=[6,r$1]}
             else
              if(accept(94))
               var r=multiline?bol:bos;
              else
               if(accept(36))
                var r=multiline?eol:dollar_endonly?leol:eos;
               else
                if(accept(91))
                 var r=accept(94)?compl(bracket(0)):alt$0(bracket(0));
                else
                 if(accept(92))
                  {if(eos$0(0))throw Parse_error$1;
                   var c=get(0),switcher=c - 48 | 0,switch$0=0;
                   if(74 < switcher >>> 0)
                    switch$0 = 1;
                   else
                    switch(switcher)
                     {case 17:var r=bos;break;
                      case 18:var r=not_boundary;break;
                      case 20:var r=compl([0,digit,0]);break;
                      case 23:var r=start$0;break;
                      case 35:var r=compl([0,space,0]);break;
                      case 39:var r=compl([0,alnum,[0,char$0(95),0]]);break;
                      case 42:var r=leol;break;
                      case 50:var r=alt$0([0,bow,[0,eow,0]]);break;
                      case 52:var r=digit;break;
                      case 67:var r=space;break;
                      case 71:var r=alt$0([0,alnum,[0,char$0(95),0]]);break;
                      case 74:var r=eos;break;
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 6:
                      case 7:
                      case 8:
                      case 9:throw Not_supported$0;
                      case 10:
                      case 11:
                      case 12:
                      case 13:
                      case 14:
                      case 15:
                      case 16:
                      case 43:
                      case 44:
                      case 45:
                      case 46:
                      case 47:
                      case 48:switch$0 = 1;break;
                      default:throw Parse_error$1}
                   if(switch$0)var r=char$0(c)}
                 else
                  {if(eos$0(0))throw Parse_error$1;
                   var c$0=get(0),switch$1=0;
                   if(64 <= c$0)
                    {if(92 !== c$0 && 123 !== c$0)switch$1 = 1}
                   else
                    if(44 <= c$0)
                     {if(! (63 <= c$0))switch$1 = 1}
                    else
                     if(! (42 <= c$0))switch$1 = 1;
                   if(! switch$1)throw Parse_error$1;
                   var r=char$0(c$0)}
            if(accept(42))
             var _c4_=greedy_mod(rep$0(r));
            else
             if(accept(43))
              var _c4_=greedy_mod(rep1(r));
             else
              if(accept(63))
               var _c4_=greedy_mod(opt(r));
              else
               if(accept(123))
                {var match=integer(0);
                 if(match)
                  {var i$0=match[1],j=accept(44)?integer(0):[0,i$0];
                   if(1 - accept(125))throw Parse_error$1;
                   if(j){var j$0=j[1];if(j$0 < i$0)throw Parse_error$1}
                   var _c4_=greedy_mod(repn(r,i$0,j))}
                 else
                  {unget(0);var _c4_=r}}
               else
                var _c4_=r;
            var left$0=[0,_c4_,left],left=left$0;
            continue}
          return seq$1(caml_call1(Stdlib_list[9],left))}}
      function integer(param)
       {if(eos$0(0))return 0;
        var d=get(0),switcher=d - 48 | 0;
        if(9 < switcher >>> 0){unget(0);return 0}
        var i=d - 48 | 0,i$0=i;
        for(;;)
         {if(eos$0(0))return [0,i$0];
          var d$0=get(0),switcher$0=d$0 - 48 | 0;
          if(9 < switcher$0 >>> 0){unget(0);return [0,i$0]}
          var i$1=(10 * i$0 | 0) + (d$0 - 48 | 0) | 0;
          if(i$1 < i$0)throw Parse_error$1;
          var i$0=i$1;
          continue}}
      function bracket(s)
       {var s$0=s;
        for(;;)
         {if(0 !== s$0 && accept(93))return s$0;
          var match=char$1(0);
          if(748194550 <= match[1])
           {var c=match[2];
            if(accept(45))
             {if(accept(93))
               {var _c2_=[0,char$0(45),s$0];return [0,char$0(c),_c2_]}
              var match$0=char$1(0);
              if(748194550 <= match$0[1])
               {var c$0=match$0[2],s$1=[0,rg(c,c$0),s$0],s$0=s$1;continue}
              var
               st=match$0[2],
               _c3_=[0,char$0(45),[0,st,s$0]],
               s$2=[0,char$0(c),_c3_],
               s$0=s$2;
              continue}
            var s$3=[0,char$0(c),s$0],s$0=s$3;
            continue}
          var st$0=match[2],s$4=[0,st$0,s$0],s$0=s$4;
          continue}}
      function char$1(param)
       {if(eos$0(0))throw Parse_error$1;
        var c=get(0);
        if(91 === c)
         {if(accept(61))throw Not_supported$0;
          if(accept(58))
           {var compl$0=accept(94);
            try
             {var cls=caml_call2(Stdlib_list[34],accept_s,posix_class_strings)}
            catch(_c1_)
             {_c1_ = caml_wrap_exception(_c1_);
              if(_c1_ === Stdlib[8])throw Parse_error$1;
              throw _c1_}
            if(1 - accept_s(cst$6))throw Parse_error$1;
            var
             posix_class=posix_class_of_string(cls),
             re=compl$0?compl([0,posix_class,0]):posix_class;
            return [0,4150146,re]}
          if(accept(46))
           {if(eos$0(0))throw Parse_error$1;
            var c$0=get(0);
            if(1 - accept(46))throw Not_supported$0;
            if(1 - accept(93))throw Parse_error$1;
            return [0,748194550,c$0]}
          return [0,748194550,c]}
        if(92 === c)
         {if(eos$0(0))throw Parse_error$1;
          var c$1=get(0);
          if(58 <= c$1)
           {if(! (123 <= c$1))
             {var switcher=c$1 - 58 | 0;
              switch(switcher)
               {case 10:return [0,4150146,compl([0,digit,0])];
                case 25:return [0,4150146,compl([0,space,0])];
                case 29:return [0,4150146,compl([0,alnum,[0,char$0(95),0]])];
                case 40:return _cC_;
                case 42:return [0,4150146,digit];
                case 52:return _cD_;
                case 56:return _cE_;
                case 57:return [0,4150146,space];
                case 58:return _cF_;
                case 61:return [0,4150146,alt$0([0,alnum,[0,char$0(95),0]])];
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:break;
                default:throw Parse_error$1}}}
          else
           if(48 <= c$1)throw Not_supported$0;
          return [0,748194550,c$1]}
        return [0,748194550,c]}
      var r=regexp(0);
      if(1 - eos$0(0))throw Parse_error$1;
      var
       r$0=
        caml_call2(Stdlib_list[33],616470068,opts)
         ?seq$1([0,start$0,[0,r,0]])
         :r,
       r$1=caml_call2(Stdlib_list[33],604571177,opts)?[10,r$0]:r$0;
      return r$1}
    function compile_pat$0(opt,s)
     {if(opt)var sth=opt[1],opts=sth;else var opts=0;
      return compile(re$0([0,opts],s))}
    var Re_Perl=[0,Parse_error$1,Not_supported$0,re$0,compile,compile_pat$0];
    caml_register_global(160,Re_Perl,"Re__Perl");
    function re$1(opt,pat)
     {if(opt)var sth=opt[1],flags=sth;else var flags=0;
      function _c0_(param)
       {return 601676297 === param
                ?604571177
                :613575188 <= param?616470068:1071952589}
      var opts=caml_call2(Stdlib_list[17],_c0_,flags);
      return re$0([0,opts],pat)}
    function regexp$0(flags,pat){return compile(re$1(flags,pat))}
    function extract(rex,s)
     {var _cZ_=exec(0,0,rex,s);return caml_call1(Group[5],_cZ_)}
    function exec$0(rex,pos,s){return exec(pos,0,rex,s)}
    function get_substring(s,i){return caml_call2(Group[1],s,i)}
    function get_substring_ofs(s,i){return caml_call2(Group[2],s,i)}
    function pmatch(rex,s){return execp(0,0,rex,s)}
    function substitute(rex,subst,str)
     {var b=caml_call1(Stdlib_buffer[1],1024),pos=0;
      for(;;)
       {if(caml_ml_string_length(str) <= pos)
         return caml_call1(Stdlib_buffer[2],b);
        if(execp([0,pos],0,rex,str))
         {var
           ss=exec([0,pos],0,rex,str),
           match=caml_call2(Group[2],ss,0),
           fin=match[2],
           start=match[1],
           pat=caml_call2(Group[1],ss,0);
          caml_call4(Stdlib_buffer[16],b,str,pos,start - pos | 0);
          var _cY_=caml_call1(subst,pat);
          caml_call2(Stdlib_buffer[14],b,_cY_);
          var pos=fin;
          continue}
        caml_call4
         (Stdlib_buffer[16],b,str,pos,caml_ml_string_length(str) - pos | 0);
        var pos$0=caml_ml_string_length(str),pos=pos$0;
        continue}}
    function split$2(rex,str)
     {var accu=0,pos=0;
      for(;;)
       {if(caml_ml_string_length(str) <= pos)
         return caml_call1(Stdlib_list[9],accu);
        if(execp([0,pos],0,rex,str))
         {var
           ss=exec([0,pos],0,rex,str),
           match=caml_call2(Group[2],ss,0),
           fin=match[2],
           start=match[1],
           s=caml_call3(Stdlib_string[4],str,pos,start - pos | 0),
           accu$0=[0,s,accu],
           accu=accu$0,
           pos=fin;
          continue}
        var
         s$0=
          caml_call3
           (Stdlib_string[4],str,pos,caml_ml_string_length(str) - pos | 0),
         pos$0=caml_ml_string_length(str),
         accu$1=[0,s$0,accu],
         accu=accu$1,
         pos=pos$0;
        continue}}
    function quote$1(s)
     {var
       len=caml_ml_string_length(s),
       s$0=caml_create_bytes(len << 1),
       pos=[0,0],
       _cU_=len - 1 | 0,
       _cT_=0;
      if(! (_cU_ < 0))
       {var i=_cT_;
        for(;;)
         {var c=runtime.caml_string_unsafe_get(s,i),switch$0=0;
          if(91 <= c)
           {var _cW_=c - 93 | 0;
            if(29 < _cW_ >>> 0)
             {if(! (32 <= _cW_))switch$0 = 1}
            else
             if(1 === _cW_)switch$0 = 1}
          else
           if(47 <= c)
            {if(63 === c)switch$0 = 1}
           else
            if(36 <= c)
             switch(c - 36 | 0)
              {case 1:case 2:case 3:case 8:case 9:break;default:switch$0 = 1}
          if(switch$0)
           {caml_bytes_unsafe_set(s$0,pos[1],92);
            pos[1]++;
            caml_bytes_unsafe_set(s$0,pos[1],c);
            pos[1]++}
          else
           {caml_bytes_unsafe_set(s$0,pos[1],c);pos[1]++}
          var _cX_=i + 1 | 0;
          if(_cU_ !== i){var i=_cX_;continue}
          break}}
      var _cV_=pos[1],r=caml_create_bytes(_cV_);
      runtime.caml_blit_bytes(s$0,0,r,0,_cV_);
      return caml_call1(Stdlib_bytes[42],r)}
    function full_split$0(opt,rex,s)
     {if(opt)var sth=opt[1],max=sth;else var max=0;
      if(0 === caml_ml_string_length(s))return 0;
      if(1 === max)return [0,[0,s],0];
      var results=split_full(0,0,rex,s);
      function _cN_(param)
       {if(936573133 <= param[1]){var s=param[2];return [0,[0,s],0]}
        var
         d=param[2],
         matches=caml_call1(Group[6],d),
         delim=caml_call2(Group[1],d,0),
         l=[0,0],
         _cP_=matches.length - 1 - 1 | 0,
         _cO_=1;
        if(! (_cP_ < 1))
         {var i=_cO_;
          for(;;)
           {var
             _cQ_=l[1],
             _cR_=
              caml_equal(caml_check_bound(matches,i)[1 + i],_cG_)
               ?0
               :[2,i,caml_call2(Group[1],d,i)];
            l[1] = [0,_cR_,_cQ_];
            var _cS_=i + 1 | 0;
            if(_cP_ !== i){var i=_cS_;continue}
            break}}
        return [0,[1,delim],caml_call1(Stdlib_list[9],l[1])]}
      var matches=caml_call2(Stdlib_list[17],_cN_,results);
      return caml_call1(Stdlib_list[13],matches)}
    var
     Re_Pcre=
      [0,
       re$1,
       regexp$0,
       extract,
       exec$0,
       get_substring,
       get_substring_ofs,
       pmatch,
       substitute,
       full_split$0,
       split$2,
       quote$1];
    caml_register_global(161,Re_Pcre,"Re__Pcre");
    var
     Parse_error$2=[248,cst_Re_Posix_Parse_error,caml_fresh_oo_id(0)],
     Not_supported$1=[248,cst_Re_Posix_Not_supported,caml_fresh_oo_id(0)];
    function re$2(opt$0,s)
     {if(opt$0)var sth=opt$0[1],opts=sth;else var opts=0;
      var
       newline=caml_call2(Stdlib_list[33],-638074828,opts),
       i=[0,0],
       l=caml_ml_string_length(s);
      function eos$0(param){return i[1] === l?1:0}
      function test(c)
       {var
         _cL_=1 - eos$0(0),
         _cM_=_cL_?caml_string_get(s,i[1]) === c?1:0:_cL_;
        return _cM_}
      function accept(c){var r=test(c);if(r)i[1]++;return r}
      function get(param){var r=caml_string_get(s,i[1]);i[1]++;return r}
      function unget(param){i[1] += -1;return 0}
      function regexp(param)
       {var left=branch(0),left$0=left;
        for(;;)
         {if(accept(124))
           {var left$1=alt$0([0,left$0,[0,branch(0),0]]),left$0=left$1;
            continue}
          return left$0}}
      function branch(param)
       {var left=0;
        for(;;)
         {if(! eos$0(0) && ! test(124) && ! test(41))
           {if(accept(46))
             var r=newline?notnl:any;
            else
             if(accept(40))
              {var r$0=regexp(0);
               if(1 - accept(41))throw Parse_error$2;
               var r=[6,r$0]}
             else
              if(accept(94))
               var r=newline?bol:bos;
              else
               if(accept(36))
                var r=newline?eol:eos;
               else
                if(accept(91))
                 if(accept(94))
                  var _cJ_=char$0(10),r=diff$0(compl(bracket(0)),_cJ_);
                 else
                  var r=alt$0(bracket(0));
                else
                 if(accept(92))
                  {if(eos$0(0))throw Parse_error$2;
                   var c=get(0),switch$0=0;
                   if(91 <= c)
                    {var _cK_=c - 93 | 0;
                     if(29 < _cK_ >>> 0)
                      {if(! (32 <= _cK_))switch$0 = 1}
                     else
                      if(1 === _cK_)switch$0 = 1}
                   else
                    if(47 <= c)
                     {if(63 === c)switch$0 = 1}
                    else
                     if(36 <= c)
                      switch(c - 36 | 0)
                       {case 1:
                        case 2:
                        case 3:
                        case 8:
                        case 9:break;
                        default:switch$0 = 1}
                   if(! switch$0)throw Parse_error$2;
                   var r=char$0(c)}
                 else
                  {if(eos$0(0))throw Parse_error$2;
                   var c$0=get(0),switch$1=0;
                   if(64 <= c$0)
                    {if(92 !== c$0 && 123 !== c$0)switch$1 = 1}
                   else
                    if(44 <= c$0)
                     {if(! (63 <= c$0))switch$1 = 1}
                    else
                     if(! (42 <= c$0))switch$1 = 1;
                   if(! switch$1)throw Parse_error$2;
                   var r=char$0(c$0)}
            if(accept(42))
             var _cI_=rep$0([8,r]);
            else
             if(accept(43))
              var _cI_=rep1([8,r]);
             else
              if(accept(63))
               var _cI_=opt(r);
              else
               if(accept(123))
                {var match=integer(0);
                 if(match)
                  {var i=match[1],j=accept(44)?integer(0):[0,i];
                   if(1 - accept(125))throw Parse_error$2;
                   if(j){var j$0=j[1];if(j$0 < i)throw Parse_error$2}
                   var _cI_=repn([8,r],i,j)}
                 else
                  {unget(0);var _cI_=r}}
               else
                var _cI_=r;
            var left$0=[0,_cI_,left],left=left$0;
            continue}
          return seq$1(caml_call1(Stdlib_list[9],left))}}
      function integer(param)
       {if(eos$0(0))return 0;
        var d=get(0),switcher=d - 48 | 0;
        if(9 < switcher >>> 0){unget(0);return 0}
        var i=d - 48 | 0,i$0=i;
        for(;;)
         {if(eos$0(0))return [0,i$0];
          var d$0=get(0),switcher$0=d$0 - 48 | 0;
          if(9 < switcher$0 >>> 0){unget(0);return [0,i$0]}
          var i$1=(10 * i$0 | 0) + (d$0 - 48 | 0) | 0;
          if(i$1 < i$0)throw Parse_error$2;
          var i$0=i$1;
          continue}}
      function bracket(s)
       {var s$0=s;
        for(;;)
         {if(0 !== s$0 && accept(93))return s$0;
          var c=char$1(0);
          if(accept(45))
           {if(accept(93))
             {var _cH_=[0,char$0(45),s$0];return [0,char$0(c),_cH_]}
            var c$0=char$1(0),s$1=[0,rg(c,c$0),s$0],s$0=s$1;
            continue}
          var s$2=[0,char$0(c),s$0],s$0=s$2;
          continue}}
      function char$1(param)
       {if(eos$0(0))throw Parse_error$2;
        var c=get(0);
        if(91 === c)
         {if(accept(61))throw Not_supported$1;
          if(accept(58))throw Not_supported$1;
          if(accept(46))
           {if(eos$0(0))throw Parse_error$2;
            var c$0=get(0);
            if(1 - accept(46))throw Not_supported$1;
            if(1 - accept(93))throw Parse_error$2;
            return c$0}
          return c}
        return c}
      var r=regexp(0);
      if(1 - eos$0(0))throw Parse_error$2;
      var
       r$0=caml_call2(Stdlib_list[33],886285209,opts)?[10,r]:r,
       r$1=caml_call2(Stdlib_list[33],853495711,opts)?[7,r$0]:r$0;
      return r$1}
    function compile$0(re){return compile(longest(re))}
    function compile_pat$1(opt,s)
     {if(opt)var sth=opt[1],opts=sth;else var opts=0;
      return compile$0(re$2([0,opts],s))}
    var
     Re_Posix=
      [0,Parse_error$2,Not_supported$1,re$2,compile$0,compile_pat$1];
    caml_register_global(162,Re_Posix,"Re__Posix");
    var
     Re$0=
      [0,
       Group,
       compile,
       exec,
       exec_opt,
       execp,
       exec_partial,
       Mark,
       Seq,
       all$0,
       all_gen,
       all_seq,
       matches,
       matches_gen,
       matches_seq,
       split$0,
       split_gen,
       split_seq,
       split_full,
       split_full_gen,
       split_full_seq,
       replace,
       replace_string,
       str,
       char$0,
       alt$0,
       seq$1,
       empty$2,
       epsilon,
       rep$0,
       rep1,
       repn,
       opt,
       bol,
       eol,
       bow,
       eow,
       bos,
       eos,
       leol,
       start$0,
       stop$0,
       word,
       not_boundary,
       whole_string,
       longest,
       shortest,
       first$0,
       greedy,
       non_greedy,
       group,
       no_group,
       nest,
       mark$0,
       set,
       rg,
       inter$0,
       diff$0,
       compl,
       any,
       notnl,
       alnum,
       wordc,
       alpha,
       ascii,
       blank,
       cntrl,
       digit,
       graph,
       lower,
       print,
       punct,
       space,
       upper,
       xdigit,
       case$0,
       no_case,
       pp$5,
       print_re,
       print_re,
       View,
       witness,
       get$0,
       get_ofs,
       get_all,
       get_all_ofs,
       test$0,
       marked,
       mark_set];
    caml_register_global(163,Re$0,"Re");
    return}
  (function(){return this}()));


//# 1 "../../.js/tyxml.functor/tyxml_f.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_register_global=runtime.caml_register_global,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call11(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
     {return f.length == 11
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Xml_stream_Malformed_strea=
      caml_string_of_jsbytes("Xml_stream.Malformed_stream"),
     cst_xmlns$1=caml_string_of_jsbytes("xmlns"),
     cst$30=caml_string_of_jsbytes(""),
     cst_xmlns$2=caml_string_of_jsbytes("xmlns"),
     cst$26=caml_string_of_jsbytes(""),
     cst$27=caml_string_of_jsbytes(" -->\n"),
     cst$28=caml_string_of_jsbytes("<!-- "),
     cst$29=caml_string_of_jsbytes("\n"),
     cst$12=caml_string_of_jsbytes(" "),
     cst$13=caml_string_of_jsbytes(" />"),
     cst$14=caml_string_of_jsbytes("<"),
     cst$15=caml_string_of_jsbytes(">"),
     cst$16=caml_string_of_jsbytes("><\/"),
     cst$17=caml_string_of_jsbytes("<"),
     cst$18=caml_string_of_jsbytes(">"),
     cst$19=caml_string_of_jsbytes("<\/"),
     cst$20=caml_string_of_jsbytes(">"),
     cst$21=caml_string_of_jsbytes("<"),
     cst$22=caml_string_of_jsbytes("-->"),
     cst$23=caml_string_of_jsbytes("<!--"),
     cst$24=caml_string_of_jsbytes(";"),
     cst$25=caml_string_of_jsbytes("&"),
     cst$11=caml_string_of_jsbytes(", "),
     cst$10=caml_string_of_jsbytes(" "),
     cst_xmlns=caml_string_of_jsbytes("xmlns"),
     cst_xmlns$0=caml_string_of_jsbytes("xmlns"),
     partial=[12,62,0],
     cst$9=caml_string_of_jsbytes(" "),
     cst_lt$0=caml_string_of_jsbytes("&lt;"),
     cst_gt$4=caml_string_of_jsbytes("&gt;"),
     cst_amp$0=caml_string_of_jsbytes("&amp;"),
     cst_quot$0=caml_string_of_jsbytes("&quot;"),
     cst_Infinity=caml_string_of_jsbytes("Infinity"),
     cst_Infinity$0=caml_string_of_jsbytes("-Infinity"),
     cst_NaN=caml_string_of_jsbytes("NaN"),
     cst$5=caml_string_of_jsbytes("--!>"),
     cst$6=caml_string_of_jsbytes("-->"),
     cst$7=caml_string_of_jsbytes("->"),
     cst$8=caml_string_of_jsbytes(">"),
     cst_gt$0=caml_string_of_jsbytes("&gt;"),
     cst_gt$1=caml_string_of_jsbytes("-&gt;"),
     cst_gt$2=caml_string_of_jsbytes("--&gt;"),
     cst_gt$3=caml_string_of_jsbytes("--!&gt;"),
     cst_1_0=caml_string_of_jsbytes("1.0"),
     cst_UTF_8=caml_string_of_jsbytes("UTF-8"),
     cst_64=caml_string_of_jsbytes("&#64;"),
     cst_lt=caml_string_of_jsbytes("&lt;"),
     cst_gt=caml_string_of_jsbytes("&gt;"),
     cst_amp=caml_string_of_jsbytes("&amp;"),
     cst_quot=caml_string_of_jsbytes("&quot;"),
     cst=caml_string_of_jsbytes("&#"),
     cst$0=caml_string_of_jsbytes(";"),
     cst$1=caml_string_of_jsbytes("--!>"),
     cst$2=caml_string_of_jsbytes("-->"),
     cst$3=caml_string_of_jsbytes("->"),
     cst$4=caml_string_of_jsbytes(">"),
     cst$38=caml_string_of_jsbytes(" "),
     cst$37=caml_string_of_jsbytes(""),
     partial$0=[12,32,[8,[0,0,3],0,0,[12,41,0]]],
     partial$1=[0,0,3],
     cst_none$1=caml_string_of_jsbytes("none"),
     cst_auto$2=caml_string_of_jsbytes("auto"),
     cst$36=caml_string_of_jsbytes("%"),
     cst_strokePaint=caml_string_of_jsbytes("strokePaint"),
     cst_sourceAlpha=caml_string_of_jsbytes("sourceAlpha"),
     cst_fillPaint=caml_string_of_jsbytes("fillPaint"),
     cst_sourceGraphic=caml_string_of_jsbytes("sourceGraphic"),
     cst_backgroundImage=caml_string_of_jsbytes("backgroundImage"),
     cst_backgroundAlpha=caml_string_of_jsbytes("backgroundAlpha"),
     cst_nochange=caml_string_of_jsbytes("nochange"),
     cst_alphabetic$1=caml_string_of_jsbytes("alphabetic"),
     cst_auto$1=caml_string_of_jsbytes("auto"),
     cst_hanging$1=caml_string_of_jsbytes("hanging"),
     cst_mathematical$1=caml_string_of_jsbytes("mathematical"),
     cst_inherit$1=caml_string_of_jsbytes("inherit"),
     cst_middle$1=caml_string_of_jsbytes("middle"),
     cst_central$0=caml_string_of_jsbytes("central"),
     cst_usescript=caml_string_of_jsbytes("usescript"),
     cst_ideographic$1=caml_string_of_jsbytes("ideographic"),
     cst_textbeforeedge=caml_string_of_jsbytes("textbeforeedge"),
     cst_resetsize=caml_string_of_jsbytes("resetsize"),
     cst_textafteredge=caml_string_of_jsbytes("textafteredge"),
     cst_stitch=caml_string_of_jsbytes("stitch"),
     cst_onRequest=caml_string_of_jsbytes("onRequest"),
     cst_repeat=caml_string_of_jsbytes("repeat"),
     cst_wrap=caml_string_of_jsbytes("wrap"),
     cst_remove=caml_string_of_jsbytes("remove"),
     cst_reflect=caml_string_of_jsbytes("reflect"),
     cst_noStitch=caml_string_of_jsbytes("noStitch"),
     cst$35=caml_string_of_jsbytes(""),
     cst_over=caml_string_of_jsbytes("over"),
     cst_none$0=caml_string_of_jsbytes("none"),
     cst_medial=caml_string_of_jsbytes("medial"),
     cst_never=caml_string_of_jsbytes("never"),
     cst_butt=caml_string_of_jsbytes("butt"),
     cst_auto$0=caml_string_of_jsbytes("auto"),
     cst_atop=caml_string_of_jsbytes("atop"),
     cst_arithmetic=caml_string_of_jsbytes("arithmetic"),
     cst_underline=caml_string_of_jsbytes("underline"),
     cst_gamma=caml_string_of_jsbytes("gamma"),
     cst_linear=caml_string_of_jsbytes("linear"),
     cst_overline=caml_string_of_jsbytes("overline"),
     cst_onLoad=caml_string_of_jsbytes("onLoad"),
     cst_turbulence=caml_string_of_jsbytes("turbulence"),
     cst_table=caml_string_of_jsbytes("table"),
     cst_geometricPrecision=caml_string_of_jsbytes("geometricPrecision"),
     cst_optimizeSpeed=caml_string_of_jsbytes("optimizeSpeed"),
     cst_miter=caml_string_of_jsbytes("miter"),
     cst_initial=caml_string_of_jsbytes("initial"),
     cst_start=caml_string_of_jsbytes("start"),
     cst_whenNotActive=caml_string_of_jsbytes("whenNotActive"),
     cst_identity=caml_string_of_jsbytes("identity"),
     cst_skewY=caml_string_of_jsbytes("skewY"),
     cst_skewX=caml_string_of_jsbytes("skewX"),
     cst_square=caml_string_of_jsbytes("square"),
     cst_scale$0=caml_string_of_jsbytes("scale"),
     cst_exact=caml_string_of_jsbytes("exact"),
     cst_perceptual=caml_string_of_jsbytes("perceptual"),
     cst_discrete=caml_string_of_jsbytes("discrete"),
     cst_erode=caml_string_of_jsbytes("erode"),
     cst_middle$0=caml_string_of_jsbytes("middle"),
     cst_round=caml_string_of_jsbytes("round"),
     cst_xor=caml_string_of_jsbytes("xor"),
     cst_XML=caml_string_of_jsbytes("XML"),
     cst_sum=caml_string_of_jsbytes("sum"),
     cst_pad=caml_string_of_jsbytes("pad"),
     cst_out=caml_string_of_jsbytes("out"),
     cst_new=caml_string_of_jsbytes("new"),
     cst_end=caml_string_of_jsbytes("end"),
     cst_CSS=caml_string_of_jsbytes("CSS"),
     cst_in$1=caml_string_of_jsbytes("in"),
     cst_v=caml_string_of_jsbytes("v"),
     cst_r$0=caml_string_of_jsbytes("r"),
     cst_h=caml_string_of_jsbytes("h"),
     cst_g$0=caml_string_of_jsbytes("g"),
     cst_b=caml_string_of_jsbytes("b"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_rotate$0=caml_string_of_jsbytes("rotate"),
     cst_disable=caml_string_of_jsbytes("disable"),
     cst_screen=caml_string_of_jsbytes("screen"),
     cst_absolute_colorimetric=caml_string_of_jsbytes("absolute_colorimetric"),
     cst_inherit$0=caml_string_of_jsbytes("inherit"),
     cst_always=caml_string_of_jsbytes("always"),
     cst_spacingAndGlyphs=caml_string_of_jsbytes("spacingAndGlyphs"),
     cst_replace=caml_string_of_jsbytes("replace"),
     cst_multiply=caml_string_of_jsbytes("multiply"),
     cst_spline=caml_string_of_jsbytes("spline"),
     cst_matrix=caml_string_of_jsbytes("matrix"),
     cst_saturation=caml_string_of_jsbytes("saturation"),
     cst_dilate=caml_string_of_jsbytes("dilate"),
     cst_translate=caml_string_of_jsbytes("translate"),
     cst_default=caml_string_of_jsbytes("default"),
     cst_lighten=caml_string_of_jsbytes("lighten"),
     cst_normal=caml_string_of_jsbytes("normal"),
     cst_freeze=caml_string_of_jsbytes("freeze"),
     cst_magnify=caml_string_of_jsbytes("magnify"),
     cst_hueRotate=caml_string_of_jsbytes("hueRotate"),
     cst_spacing$0=caml_string_of_jsbytes("spacing"),
     cst_fractalNoise=caml_string_of_jsbytes("fractalNoise"),
     cst_saturate=caml_string_of_jsbytes("saturate"),
     cst_userSpaceOnUse=caml_string_of_jsbytes("userSpaceOnUse"),
     cst_objectBoundingBox=caml_string_of_jsbytes("objectBoundingBox"),
     cst_darken=caml_string_of_jsbytes("darken"),
     cst_paced=caml_string_of_jsbytes("paced"),
     cst_isolated=caml_string_of_jsbytes("isolated"),
     cst_optimizeLegibility=caml_string_of_jsbytes("optimizeLegibility"),
     cst_luminanceToAlpha=caml_string_of_jsbytes("luminanceToAlpha"),
     cst_line_through=caml_string_of_jsbytes("line-through"),
     cst_other=caml_string_of_jsbytes("other"),
     cst_terminal=caml_string_of_jsbytes("terminal"),
     cst_blink=caml_string_of_jsbytes("blink"),
     cst_stroke_width$0=caml_string_of_jsbytes("stroke-width"),
     cst_stretch=caml_string_of_jsbytes("stretch"),
     cst_bevel=caml_string_of_jsbytes("bevel"),
     cst_duplicate=caml_string_of_jsbytes("duplicate"),
     cst_preserve=caml_string_of_jsbytes("preserve"),
     cst_relative_colorimetric=caml_string_of_jsbytes("relative_colorimetric"),
     cst_after_edge=caml_string_of_jsbytes("after-edge"),
     cst_alphabetic$0=caml_string_of_jsbytes("alphabetic"),
     cst_auto=caml_string_of_jsbytes("auto"),
     cst_hanging$0=caml_string_of_jsbytes("hanging"),
     cst_mathematical$0=caml_string_of_jsbytes("mathematical"),
     cst_inherit=caml_string_of_jsbytes("inherit"),
     cst_middle=caml_string_of_jsbytes("middle"),
     cst_baseline=caml_string_of_jsbytes("baseline"),
     cst_central=caml_string_of_jsbytes("central"),
     cst_ideographic$0=caml_string_of_jsbytes("ideographic"),
     cst_text_before_edge=caml_string_of_jsbytes("text-before-edge"),
     cst_before_edge=caml_string_of_jsbytes("before-edge"),
     cst_text_after_edge=caml_string_of_jsbytes("text-after-edge"),
     cst_http_www_w3_org_1999_xlink=
      caml_string_of_jsbytes("http://www.w3.org/1999/xlink"),
     cst_xmlns_xlink=caml_string_of_jsbytes("xmlns:xlink"),
     cst_http_www_w3_org_2000_svg=
      caml_string_of_jsbytes("http://www.w3.org/2000/svg"),
     cst_xmlns$3=caml_string_of_jsbytes("xmlns"),
     cst_svg$0=caml_string_of_jsbytes("svg"),
     cst_stroke_dasharray=caml_string_of_jsbytes("stroke-dasharray"),
     cst_stroke_linejoin=caml_string_of_jsbytes("stroke-linejoin"),
     cst_stroke_linecap=caml_string_of_jsbytes("stroke-linecap"),
     cst_dominant_baseline=caml_string_of_jsbytes("dominant-baseline"),
     cst_alignment_baseline=caml_string_of_jsbytes("alignment-baseline"),
     cst_arabic_form=caml_string_of_jsbytes("arabic-form"),
     cst_orientation=caml_string_of_jsbytes("orientation"),
     cst_accumulate=caml_string_of_jsbytes("accumulate"),
     cst_additive=caml_string_of_jsbytes("additive"),
     cst_calcMode=caml_string_of_jsbytes("calcMode"),
     cst_fill$0=caml_string_of_jsbytes("fill"),
     cst_restart=caml_string_of_jsbytes("restart"),
     cst_attributeType=caml_string_of_jsbytes("attributeType"),
     cst_xlink_actuate=caml_string_of_jsbytes("xlink:actuate"),
     cst_xlink_show=caml_string_of_jsbytes("xlink:show"),
     cst_type$2=caml_string_of_jsbytes("type"),
     cst_stitchTiles=caml_string_of_jsbytes("stitchTiles"),
     cst_operator$0=caml_string_of_jsbytes("operator"),
     cst_yChannelSelector=caml_string_of_jsbytes("yChannelSelector"),
     cst_xChannelSelector=caml_string_of_jsbytes("xChannelSelector"),
     cst_targetY$0=caml_string_of_jsbytes("targetY"),
     cst_operator=caml_string_of_jsbytes("operator"),
     cst_type$1=caml_string_of_jsbytes("type"),
     cst_type$0=caml_string_of_jsbytes("type"),
     cst_mode=caml_string_of_jsbytes("mode"),
     cst_in2=caml_string_of_jsbytes("in2"),
     cst_in$0=caml_string_of_jsbytes("in"),
     cst_primitiveUnits=caml_string_of_jsbytes("primitiveUnits"),
     cst_maskContentUnits=caml_string_of_jsbytes("maskContentUnits"),
     cst_maskUnits=caml_string_of_jsbytes("maskUnits"),
     cst_clipPathUnits=caml_string_of_jsbytes("clipPathUnits"),
     cst_patternTransform=caml_string_of_jsbytes("patternTransform"),
     cst_patternContentUnits=caml_string_of_jsbytes("patternContentUnits"),
     cst_patternUnits=caml_string_of_jsbytes("patternUnits"),
     cst_offset=caml_string_of_jsbytes("offset"),
     cst_spreadMethod=caml_string_of_jsbytes("spreadMethod"),
     cst_gradientUnits=caml_string_of_jsbytes("gradientUnits"),
     cst_rendering_intent=caml_string_of_jsbytes("rendering-intent"),
     cst_orient=caml_string_of_jsbytes("orient"),
     cst_markerUnits=caml_string_of_jsbytes("markerUnits"),
     cst_spacing=caml_string_of_jsbytes("spacing"),
     cst_method=caml_string_of_jsbytes("method"),
     cst_text_rendering=caml_string_of_jsbytes("text-rendering"),
     cst_text_decoration=caml_string_of_jsbytes("text-decoration"),
     cst_text_anchor=caml_string_of_jsbytes("text-anchor"),
     cst_lengthAdjust=caml_string_of_jsbytes("lengthAdjust"),
     cst_xml_space=caml_string_of_jsbytes("xml:space"),
     cst_data=caml_string_of_jsbytes("data-"),
     cst_zoomAndSpan=caml_string_of_jsbytes("zoomAndSpan"),
     cst_foreignObject=caml_string_of_jsbytes("foreignObject"),
     cst_metadata=caml_string_of_jsbytes("metadata"),
     content_type=caml_string_of_jsbytes("image/svg+xml"),
     version=caml_string_of_jsbytes("SVG 1.1"),
     standard=caml_string_of_jsbytes("http://www.w3.org/TR/svg11/"),
     namespace=caml_string_of_jsbytes("http://www.w3.org/2000/svg"),
     cst_svg=caml_string_of_jsbytes("svg"),
     cst_version=caml_string_of_jsbytes("version"),
     cst_baseProfile=caml_string_of_jsbytes("baseProfile"),
     cst_x=caml_string_of_jsbytes("x"),
     cst_y=caml_string_of_jsbytes("y"),
     cst_width=caml_string_of_jsbytes("width"),
     cst_height=caml_string_of_jsbytes("height"),
     cst_preserveAspectRatio=caml_string_of_jsbytes("preserveAspectRatio"),
     cst_contentScriptType=caml_string_of_jsbytes("contentScriptType"),
     cst_contentStyleType=caml_string_of_jsbytes("contentStyleType"),
     cst_href=caml_string_of_jsbytes("href"),
     cst_xlink_href=caml_string_of_jsbytes("xlink:href"),
     cst_requiredFeatures=caml_string_of_jsbytes("requiredFeatures"),
     cst_requiredExtension=caml_string_of_jsbytes("requiredExtension"),
     cst_systemLanguage=caml_string_of_jsbytes("systemLanguage"),
     cst_externalRessourcesRequired=
      caml_string_of_jsbytes("externalRessourcesRequired"),
     cst_id=caml_string_of_jsbytes("id"),
     cst_xml_base=caml_string_of_jsbytes("xml:base"),
     cst_xml_lang=caml_string_of_jsbytes("xml:lang"),
     cst_type=caml_string_of_jsbytes("type"),
     cst_media=caml_string_of_jsbytes("media"),
     cst_xlink_title=caml_string_of_jsbytes("xlink:title"),
     cst_class=caml_string_of_jsbytes("class"),
     cst_style=caml_string_of_jsbytes("style"),
     cst_transform=caml_string_of_jsbytes("transform"),
     cst_viewBox=caml_string_of_jsbytes("viewBox"),
     cst_d=caml_string_of_jsbytes("d"),
     cst_pathLength=caml_string_of_jsbytes("pathLength"),
     cst_rx=caml_string_of_jsbytes("rx"),
     cst_ry=caml_string_of_jsbytes("ry"),
     cst_cx=caml_string_of_jsbytes("cx"),
     cst_cy=caml_string_of_jsbytes("cy"),
     cst_r=caml_string_of_jsbytes("r"),
     cst_x1=caml_string_of_jsbytes("x1"),
     cst_y1=caml_string_of_jsbytes("y1"),
     cst_x2=caml_string_of_jsbytes("x2"),
     cst_y2=caml_string_of_jsbytes("y2"),
     cst_points=caml_string_of_jsbytes("points"),
     cst_x$0=caml_string_of_jsbytes("x"),
     cst_y$0=caml_string_of_jsbytes("y"),
     cst_dx=caml_string_of_jsbytes("dx"),
     cst_dy=caml_string_of_jsbytes("dy"),
     cst_dx$0=caml_string_of_jsbytes("dx"),
     cst_dy$0=caml_string_of_jsbytes("dy"),
     cst_textLength=caml_string_of_jsbytes("textLength"),
     cst_rotate=caml_string_of_jsbytes("rotate"),
     cst_startOffset=caml_string_of_jsbytes("startOffset"),
     cst_glyphRef=caml_string_of_jsbytes("glyphRef"),
     cst_format=caml_string_of_jsbytes("format"),
     cst_refX=caml_string_of_jsbytes("refX"),
     cst_refY=caml_string_of_jsbytes("refY"),
     cst_markerWidth=caml_string_of_jsbytes("markerWidth"),
     cst_markerHeight=caml_string_of_jsbytes("markerHeight"),
     cst_local=caml_string_of_jsbytes("local"),
     cst_gradientTransform=caml_string_of_jsbytes("gradientTransform"),
     cst_fx=caml_string_of_jsbytes("fx"),
     cst_fy=caml_string_of_jsbytes("fy"),
     cst_filterResUnits=caml_string_of_jsbytes("filterResUnits"),
     cst_result=caml_string_of_jsbytes("result"),
     cst_azimuth=caml_string_of_jsbytes("azimuth"),
     cst_elevation=caml_string_of_jsbytes("elevation"),
     cst_pointsAtX=caml_string_of_jsbytes("pointsAtX"),
     cst_pointsAtY=caml_string_of_jsbytes("pointsAtY"),
     cst_pointsAtZ=caml_string_of_jsbytes("pointsAtZ"),
     cst_specularExponent=caml_string_of_jsbytes("specularExponent"),
     cst_specularConstant=caml_string_of_jsbytes("specularConstant"),
     cst_limitingConeAngle=caml_string_of_jsbytes("limitingConeAngle"),
     cst_values=caml_string_of_jsbytes("values"),
     cst_tableValues=caml_string_of_jsbytes("tableValues"),
     cst_intercept=caml_string_of_jsbytes("intercept"),
     cst_amplitude=caml_string_of_jsbytes("amplitude"),
     cst_exponent=caml_string_of_jsbytes("exponent"),
     cst_offset$0=caml_string_of_jsbytes("offset"),
     cst_k1=caml_string_of_jsbytes("k1"),
     cst_k2=caml_string_of_jsbytes("k2"),
     cst_k3=caml_string_of_jsbytes("k3"),
     cst_k4=caml_string_of_jsbytes("k4"),
     cst_order=caml_string_of_jsbytes("order"),
     cst_kernelMatrix=caml_string_of_jsbytes("kernelMatrix"),
     cst_divisor=caml_string_of_jsbytes("divisor"),
     cst_bias=caml_string_of_jsbytes("bias"),
     cst_kernelUnitLength=caml_string_of_jsbytes("kernelUnitLength"),
     cst_targetX=caml_string_of_jsbytes("targetX"),
     cst_targetY=caml_string_of_jsbytes("targetY"),
     cst_preserveAlpha=caml_string_of_jsbytes("preserveAlpha"),
     cst_surfaceScale=caml_string_of_jsbytes("surfaceScale"),
     cst_diffuseConstant=caml_string_of_jsbytes("diffuseConstant"),
     cst_scale=caml_string_of_jsbytes("scale"),
     cst_stdDeviation=caml_string_of_jsbytes("stdDeviation"),
     cst_radius=caml_string_of_jsbytes("radius"),
     cst_baseFrequency=caml_string_of_jsbytes("baseFrequency"),
     cst_numOctaves=caml_string_of_jsbytes("numOctaves"),
     cst_seed=caml_string_of_jsbytes("seed"),
     cst_xlink_target=caml_string_of_jsbytes("xlink:target"),
     cst_viewTarget=caml_string_of_jsbytes("viewTarget"),
     cst_attributeName=caml_string_of_jsbytes("attributeName"),
     cst_begin=caml_string_of_jsbytes("begin"),
     cst_dur=caml_string_of_jsbytes("dur"),
     cst_min=caml_string_of_jsbytes("min"),
     cst_max=caml_string_of_jsbytes("max"),
     cst_repeatCount=caml_string_of_jsbytes("repeatCount"),
     cst_repeatDur=caml_string_of_jsbytes("repeatDur"),
     cst_fill=caml_string_of_jsbytes("fill"),
     cst_values$0=caml_string_of_jsbytes("values"),
     cst_keyTimes=caml_string_of_jsbytes("keyTimes"),
     cst_keySplines=caml_string_of_jsbytes("keySplines"),
     cst_from=caml_string_of_jsbytes("from"),
     cst_to=caml_string_of_jsbytes("to"),
     cst_by=caml_string_of_jsbytes("by"),
     cst_keyPoints=caml_string_of_jsbytes("keyPoints"),
     cst_path=caml_string_of_jsbytes("path"),
     cst_type$3=caml_string_of_jsbytes("type"),
     cst_horiz_origin_x=caml_string_of_jsbytes("horiz-origin-x"),
     cst_horiz_origin_y=caml_string_of_jsbytes("horiz-origin-y"),
     cst_horiz_adv_x=caml_string_of_jsbytes("horiz-adv-x"),
     cst_vert_origin_x=caml_string_of_jsbytes("vert-origin-x"),
     cst_vert_origin_y=caml_string_of_jsbytes("vert-origin-y"),
     cst_vert_adv_y=caml_string_of_jsbytes("vert-adv-y"),
     cst_unicode=caml_string_of_jsbytes("unicode"),
     cst_glyphname=caml_string_of_jsbytes("glyphname"),
     cst_lang=caml_string_of_jsbytes("lang"),
     cst_u1=caml_string_of_jsbytes("u1"),
     cst_u2=caml_string_of_jsbytes("u2"),
     cst_g1=caml_string_of_jsbytes("g1"),
     cst_g2=caml_string_of_jsbytes("g2"),
     cst_k=caml_string_of_jsbytes("k"),
     cst_font_family=caml_string_of_jsbytes("font-family"),
     cst_font_style=caml_string_of_jsbytes("font-style"),
     cst_font_variant=caml_string_of_jsbytes("font-variant"),
     cst_font_weight=caml_string_of_jsbytes("font-weight"),
     cst_font_stretch=caml_string_of_jsbytes("font-stretch"),
     cst_font_size=caml_string_of_jsbytes("font-size"),
     cst_unicode_range=caml_string_of_jsbytes("unicode-range"),
     cst_units_per_em=caml_string_of_jsbytes("units-per-em"),
     cst_stemv=caml_string_of_jsbytes("stemv"),
     cst_stemh=caml_string_of_jsbytes("stemh"),
     cst_slope=caml_string_of_jsbytes("slope"),
     cst_cap_height=caml_string_of_jsbytes("cap-height"),
     cst_x_height=caml_string_of_jsbytes("x-height"),
     cst_accent_height=caml_string_of_jsbytes("accent-height"),
     cst_ascent=caml_string_of_jsbytes("ascent"),
     cst_widths=caml_string_of_jsbytes("widths"),
     cst_bbox=caml_string_of_jsbytes("bbox"),
     cst_ideographic=caml_string_of_jsbytes("ideographic"),
     cst_alphabetic=caml_string_of_jsbytes("alphabetic"),
     cst_mathematical=caml_string_of_jsbytes("mathematical"),
     cst_hanging=caml_string_of_jsbytes("hanging"),
     cst_v_ideographic=caml_string_of_jsbytes("v-ideographic"),
     cst_v_alphabetic=caml_string_of_jsbytes("v-alphabetic"),
     cst_v_mathematical=caml_string_of_jsbytes("v-mathematical"),
     cst_v_hanging=caml_string_of_jsbytes("v-hanging"),
     cst_underline_position=caml_string_of_jsbytes("underline-position"),
     cst_underline_thickness=caml_string_of_jsbytes("underline-thickness"),
     cst_strikethrough_position=
      caml_string_of_jsbytes("strikethrough-position"),
     cst_strikethrough_thickness=
      caml_string_of_jsbytes("strikethrough-thickness"),
     cst_overline_position=caml_string_of_jsbytes("overline-position"),
     cst_overline_thickness=caml_string_of_jsbytes("overline-thickness"),
     cst_string=caml_string_of_jsbytes("string"),
     cst_name=caml_string_of_jsbytes("name"),
     cst_onabort=caml_string_of_jsbytes("onabort"),
     cst_onactivate=caml_string_of_jsbytes("onactivate"),
     cst_onbegin=caml_string_of_jsbytes("onbegin"),
     cst_onend=caml_string_of_jsbytes("onend"),
     cst_onerror=caml_string_of_jsbytes("onerror"),
     cst_onfocusin=caml_string_of_jsbytes("onfocusin"),
     cst_onfocusout=caml_string_of_jsbytes("onfocusout"),
     cst_onload=caml_string_of_jsbytes("onload"),
     cst_onrepeat=caml_string_of_jsbytes("onrepeat"),
     cst_onresize=caml_string_of_jsbytes("onresize"),
     cst_onscroll=caml_string_of_jsbytes("onscroll"),
     cst_onunload=caml_string_of_jsbytes("onunload"),
     cst_onzoom=caml_string_of_jsbytes("onzoom"),
     cst_onclick=caml_string_of_jsbytes("onclick"),
     cst_onmousedown=caml_string_of_jsbytes("onmousedown"),
     cst_onmouseup=caml_string_of_jsbytes("onmouseup"),
     cst_onmouseover=caml_string_of_jsbytes("onmouseover"),
     cst_onmouseout=caml_string_of_jsbytes("onmouseout"),
     cst_onmousemove=caml_string_of_jsbytes("onmousemove"),
     cst_ontouchstart=caml_string_of_jsbytes("ontouchstart"),
     cst_ontouchend=caml_string_of_jsbytes("ontouchend"),
     cst_ontouchmove=caml_string_of_jsbytes("ontouchmove"),
     cst_ontouchcancel=caml_string_of_jsbytes("ontouchcancel"),
     cst_stop_color=caml_string_of_jsbytes("stop-color"),
     cst_stop_opacity=caml_string_of_jsbytes("stop-opacity"),
     cst_stroke=caml_string_of_jsbytes("stroke"),
     cst_stroke_width=caml_string_of_jsbytes("stroke-width"),
     cst_stroke_miterlimit=caml_string_of_jsbytes("stroke-miterlimit"),
     cst_stroke_dashoffset=caml_string_of_jsbytes("stroke-dashoffset"),
     cst_stroke_opacity=caml_string_of_jsbytes("stroke-opacity"),
     cst_g=caml_string_of_jsbytes("g"),
     cst_defs=caml_string_of_jsbytes("defs"),
     cst_desc=caml_string_of_jsbytes("desc"),
     cst_title=caml_string_of_jsbytes("title"),
     cst_symbol=caml_string_of_jsbytes("symbol"),
     cst_use=caml_string_of_jsbytes("use"),
     cst_image=caml_string_of_jsbytes("image"),
     cst_switch=caml_string_of_jsbytes("switch"),
     cst_style$0=caml_string_of_jsbytes("style"),
     cst_path$0=caml_string_of_jsbytes("path"),
     cst_rect=caml_string_of_jsbytes("rect"),
     cst_circle=caml_string_of_jsbytes("circle"),
     cst_ellipse=caml_string_of_jsbytes("ellipse"),
     cst_line=caml_string_of_jsbytes("line"),
     cst_polyline=caml_string_of_jsbytes("polyline"),
     cst_polygon=caml_string_of_jsbytes("polygon"),
     cst_text=caml_string_of_jsbytes("text"),
     cst_tspan=caml_string_of_jsbytes("tspan"),
     cst_tref=caml_string_of_jsbytes("tref"),
     cst_textPath=caml_string_of_jsbytes("textPath"),
     cst_altGlyph=caml_string_of_jsbytes("altGlyph"),
     cst_altGlyphDef=caml_string_of_jsbytes("altGlyphDef"),
     cst_altGlyphItem=caml_string_of_jsbytes("altGlyphItem"),
     cst_glyphRef$0=caml_string_of_jsbytes("glyphRef"),
     cst_marker=caml_string_of_jsbytes("marker"),
     cst_color_profile=caml_string_of_jsbytes("color-profile"),
     cst_linearGradient=caml_string_of_jsbytes("linearGradient"),
     cst_radialGradient=caml_string_of_jsbytes("radialGradient"),
     cst_stop=caml_string_of_jsbytes("stop"),
     cst_pattern=caml_string_of_jsbytes("pattern"),
     cst_clipPath=caml_string_of_jsbytes("clipPath"),
     cst_filter=caml_string_of_jsbytes("filter"),
     cst_feDistantLight=caml_string_of_jsbytes("feDistantLight"),
     cst_fePointLight=caml_string_of_jsbytes("fePointLight"),
     cst_feSpotLight=caml_string_of_jsbytes("feSpotLight"),
     cst_feBlend=caml_string_of_jsbytes("feBlend"),
     cst_feColorMatrix=caml_string_of_jsbytes("feColorMatrix"),
     cst_feComponentTransfer=caml_string_of_jsbytes("feComponentTransfer"),
     cst_feFuncA=caml_string_of_jsbytes("feFuncA"),
     cst_feFuncG=caml_string_of_jsbytes("feFuncG"),
     cst_feFuncB=caml_string_of_jsbytes("feFuncB"),
     cst_feFuncR=caml_string_of_jsbytes("feFuncR"),
     cst_feComposite=caml_string_of_jsbytes("feComposite"),
     cst_feConvolveMatrix=caml_string_of_jsbytes("feConvolveMatrix"),
     cst_feDiffuseLighting=caml_string_of_jsbytes("feDiffuseLighting"),
     cst_feDisplacementMap=caml_string_of_jsbytes("feDisplacementMap"),
     cst_feFlood=caml_string_of_jsbytes("feFlood"),
     cst_feGaussianBlur=caml_string_of_jsbytes("feGaussianBlur"),
     cst_feImage=caml_string_of_jsbytes("feImage"),
     cst_feMerge=caml_string_of_jsbytes("feMerge"),
     cst_feMorphology=caml_string_of_jsbytes("feMorphology"),
     cst_feOffset=caml_string_of_jsbytes("feOffset"),
     cst_feSpecularLighting=caml_string_of_jsbytes("feSpecularLighting"),
     cst_feTile=caml_string_of_jsbytes("feTile"),
     cst_feTurbulence=caml_string_of_jsbytes("feTurbulence"),
     cst_cursor=caml_string_of_jsbytes("cursor"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_view=caml_string_of_jsbytes("view"),
     cst_script=caml_string_of_jsbytes("script"),
     cst_animate=caml_string_of_jsbytes("animate"),
     cst_set=caml_string_of_jsbytes("set"),
     cst_animateMotion=caml_string_of_jsbytes("animateMotion"),
     cst_mpath=caml_string_of_jsbytes("mpath"),
     cst_animateColor=caml_string_of_jsbytes("animateColor"),
     cst_animateTransform=caml_string_of_jsbytes("animateTransform"),
     cst_font=caml_string_of_jsbytes("font"),
     cst_glyph=caml_string_of_jsbytes("glyph"),
     cst_missing_glyph=caml_string_of_jsbytes("missing-glyph"),
     cst_hkern=caml_string_of_jsbytes("hkern"),
     cst_vkern=caml_string_of_jsbytes("vkern"),
     cst_font_face=caml_string_of_jsbytes("font-face"),
     cst_font_face_src=caml_string_of_jsbytes("font-face-src"),
     cst_font_face_uri=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_uri$0=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_name=caml_string_of_jsbytes("font-face-name"),
     cst$34=caml_string_of_jsbytes(" "),
     cst_none=caml_string_of_jsbytes("none"),
     cst_currentColor=caml_string_of_jsbytes("currentColor"),
     cst$33=caml_string_of_jsbytes(" "),
     sep=caml_string_of_jsbytes(" "),
     cst_px=caml_string_of_jsbytes("px"),
     cst_pt=caml_string_of_jsbytes("pt"),
     cst_pc=caml_string_of_jsbytes("pc"),
     cst_in=caml_string_of_jsbytes("in"),
     cst_mm=caml_string_of_jsbytes("mm"),
     cst_ex=caml_string_of_jsbytes("ex"),
     cst_em=caml_string_of_jsbytes("em"),
     cst_cm=caml_string_of_jsbytes("cm"),
     cst$32=caml_string_of_jsbytes("%"),
     cst_grad=caml_string_of_jsbytes("grad"),
     cst_deg=caml_string_of_jsbytes("deg"),
     cst_rad=caml_string_of_jsbytes("rad"),
     cst$31=caml_string_of_jsbytes(""),
     cst$46=caml_string_of_jsbytes(", "),
     cst$45=caml_string_of_jsbytes(" "),
     cst$44=caml_string_of_jsbytes(", "),
     cst$43=caml_string_of_jsbytes(","),
     cst$42=caml_string_of_jsbytes(" "),
     cst$41=caml_string_of_jsbytes(" "),
     cst_any$1=caml_string_of_jsbytes("any"),
     cst_any$0=caml_string_of_jsbytes("any"),
     cst$40=caml_string_of_jsbytes(""),
     cst_on=caml_string_of_jsbytes("on"),
     cst_off=caml_string_of_jsbytes("off"),
     cst_week=caml_string_of_jsbytes("week"),
     cst_time$0=caml_string_of_jsbytes("time"),
     cst_text$0=caml_string_of_jsbytes("text"),
     cst_file=caml_string_of_jsbytes("file"),
     cst_date=caml_string_of_jsbytes("date"),
     cst_datetime_local=caml_string_of_jsbytes("datetime-local"),
     cst_password=caml_string_of_jsbytes("password"),
     cst_month=caml_string_of_jsbytes("month"),
     cst_search$1=caml_string_of_jsbytes("search"),
     cst_button$0=caml_string_of_jsbytes("button"),
     cst_checkbox$0=caml_string_of_jsbytes("checkbox"),
     cst_email$0=caml_string_of_jsbytes("email"),
     cst_hidden$1=caml_string_of_jsbytes("hidden"),
     cst_url$0=caml_string_of_jsbytes("url"),
     cst_tel$0=caml_string_of_jsbytes("tel"),
     cst_reset=caml_string_of_jsbytes("reset"),
     cst_range=caml_string_of_jsbytes("range"),
     cst_radio$0=caml_string_of_jsbytes("radio"),
     cst_readonly$1=caml_string_of_jsbytes("readonly"),
     cst_color=caml_string_of_jsbytes("color"),
     cst_number=caml_string_of_jsbytes("number"),
     cst_image$0=caml_string_of_jsbytes("image"),
     cst_submit=caml_string_of_jsbytes("submit"),
     cst_datetime$0=caml_string_of_jsbytes("datetime"),
     cst_external$0=caml_string_of_jsbytes("external"),
     cst_0=caml_string_of_jsbytes("0"),
     cst_formnovalidate$0=caml_string_of_jsbytes("formnovalidate"),
     cst_audio$0=caml_string_of_jsbytes("audio"),
     cst_async$0=caml_string_of_jsbytes("async"),
     cst_toolbar=caml_string_of_jsbytes("toolbar"),
     cst_soft=caml_string_of_jsbytes("soft"),
     cst_rows$0=caml_string_of_jsbytes("rows"),
     cst_rect$0=caml_string_of_jsbytes("rect"),
     cst_prev$0=caml_string_of_jsbytes("prev"),
     cst_POST=caml_string_of_jsbytes("POST"),
     cst_poly=caml_string_of_jsbytes("poly"),
     cst_open$0=caml_string_of_jsbytes("open"),
     cst_none$2=caml_string_of_jsbytes("none"),
     cst_next$0=caml_string_of_jsbytes("next"),
     cst_loop$0=caml_string_of_jsbytes("loop"),
     cst_left=caml_string_of_jsbytes("left"),
     cst_last$0=caml_string_of_jsbytes("last"),
     cst_kana=caml_string_of_jsbytes("kana"),
     cst_icon$1=caml_string_of_jsbytes("icon"),
     cst_help$0=caml_string_of_jsbytes("help"),
     cst_hard=caml_string_of_jsbytes("hard"),
     cst_cols$0=caml_string_of_jsbytes("cols"),
     cst_char$0=caml_string_of_jsbytes("char"),
     cst_auto$3=caml_string_of_jsbytes("auto"),
     cst_noreferrer$0=caml_string_of_jsbytes("noreferrer"),
     cst_author$0=caml_string_of_jsbytes("author"),
     cst_muted$0=caml_string_of_jsbytes("muted"),
     cst_autoplay$0=caml_string_of_jsbytes("autoplay"),
     cst_anonymous=caml_string_of_jsbytes("anonymous"),
     cst_metadata$0=caml_string_of_jsbytes("metadata"),
     cst_license$0=caml_string_of_jsbytes("license"),
     cst_search$0=caml_string_of_jsbytes("search"),
     cst_first$0=caml_string_of_jsbytes("first"),
     cst_novalidate$0=caml_string_of_jsbytes("novalidate"),
     cst_controls$0=caml_string_of_jsbytes("controls"),
     cst_bookmark$0=caml_string_of_jsbytes("bookmark"),
     cst_required$0=caml_string_of_jsbytes("required"),
     cst_selected$0=caml_string_of_jsbytes("selected"),
     cst_circle$0=caml_string_of_jsbytes("circle"),
     cst_rowgroup=caml_string_of_jsbytes("rowgroup"),
     cst_checkbox=caml_string_of_jsbytes("checkbox"),
     cst_katakana=caml_string_of_jsbytes("katakana"),
     cst_email=caml_string_of_jsbytes("email"),
     cst_latin=caml_string_of_jsbytes("latin"),
     cst_hidden$0=caml_string_of_jsbytes("hidden"),
     cst_yes=caml_string_of_jsbytes("yes"),
     cst_url=caml_string_of_jsbytes("url"),
     cst_tel=caml_string_of_jsbytes("tel"),
     cst_tag$0=caml_string_of_jsbytes("tag"),
     cst_rtl=caml_string_of_jsbytes("rtl"),
     cst_row=caml_string_of_jsbytes("row"),
     cst_1=caml_string_of_jsbytes("1"),
     cst_ltr=caml_string_of_jsbytes("ltr"),
     cst_GET=caml_string_of_jsbytes("GET"),
     cst_col$0=caml_string_of_jsbytes("col"),
     cst_any=caml_string_of_jsbytes("any"),
     cst_all$0=caml_string_of_jsbytes("all"),
     cst_up$0=caml_string_of_jsbytes("up"),
     cst_no=caml_string_of_jsbytes("no"),
     cst_right=caml_string_of_jsbytes("right"),
     cst_scoped$0=caml_string_of_jsbytes("scoped"),
     cst_numeric=caml_string_of_jsbytes("numeric"),
     cst_pingback$0=caml_string_of_jsbytes("pingback"),
     cst_radio=caml_string_of_jsbytes("radio"),
     cst_pubdate$0=caml_string_of_jsbytes("pubdate"),
     cst_multiple$0=caml_string_of_jsbytes("multiple"),
     cst_latin_name=caml_string_of_jsbytes("latin-name"),
     cst_autofocus$0=caml_string_of_jsbytes("autofocus"),
     cst_nofollow$0=caml_string_of_jsbytes("nofollow"),
     cst_defer$0=caml_string_of_jsbytes("defer"),
     cst_full_width_latin=caml_string_of_jsbytes("full-width-latin"),
     cst_default$0=caml_string_of_jsbytes("default"),
     cst_context=caml_string_of_jsbytes("context"),
     cst_verbatim=caml_string_of_jsbytes("verbatim"),
     cst_checked$0=caml_string_of_jsbytes("checked"),
     cst_stylesheet$0=caml_string_of_jsbytes("stylesheet"),
     cst_reserved$0=caml_string_of_jsbytes("reserved"),
     cst_alternate$0=caml_string_of_jsbytes("alternate"),
     cst_http_www_w3_org_1999_xhtml=
      caml_string_of_jsbytes("http://www.w3.org/1999/xhtml"),
     cst_disabled$0=caml_string_of_jsbytes("disabled"),
     cst_ismap$0=caml_string_of_jsbytes("ismap"),
     cst_use_credentials=caml_string_of_jsbytes("use-credentials"),
     cst_index$0=caml_string_of_jsbytes("index"),
     cst_justify=caml_string_of_jsbytes("justify"),
     cst_groups=caml_string_of_jsbytes("groups"),
     cst_command$0=caml_string_of_jsbytes("command"),
     cst_sidebar$0=caml_string_of_jsbytes("sidebar"),
     cst_latin_prose=caml_string_of_jsbytes("latin-prose"),
     cst_readonly$0=caml_string_of_jsbytes("readonly"),
     cst_colgroup$0=caml_string_of_jsbytes("colgroup"),
     cst_archives$0=caml_string_of_jsbytes("archives"),
     cst_seamless$0=caml_string_of_jsbytes("seamless"),
     cst_preserve$0=caml_string_of_jsbytes("preserve"),
     cst_prefetch$0=caml_string_of_jsbytes("prefetch"),
     cst_same_origin=caml_string_of_jsbytes("same-origin"),
     cst_origin_when_cross_origin=
      caml_string_of_jsbytes("origin-when-cross-origin"),
     cst_no_referrer_when_downgrade=
      caml_string_of_jsbytes("no-referrer-when-downgrade"),
     cst_no_referrer=caml_string_of_jsbytes("no-referrer"),
     cst_unsafe_url=caml_string_of_jsbytes("unsafe-url"),
     cst$39=caml_string_of_jsbytes(""),
     cst_origin=caml_string_of_jsbytes("origin"),
     cst_strict_origin=caml_string_of_jsbytes("strict-origin"),
     cst_strict_origin_when_cross_o=
      caml_string_of_jsbytes("strict-origin-when-cross-origin"),
     cst_projection=caml_string_of_jsbytes("projection"),
     cst_aural=caml_string_of_jsbytes("aural"),
     cst_handheld=caml_string_of_jsbytes("handheld"),
     cst_embossed=caml_string_of_jsbytes("embossed"),
     cst_tty=caml_string_of_jsbytes("tty"),
     cst_all=caml_string_of_jsbytes("all"),
     cst_tv=caml_string_of_jsbytes("tv"),
     cst_screen$0=caml_string_of_jsbytes("screen"),
     cst_speech=caml_string_of_jsbytes("speech"),
     cst_print=caml_string_of_jsbytes("print"),
     cst_braille=caml_string_of_jsbytes("braille"),
     cst_external=caml_string_of_jsbytes("external"),
     cst_canonical=caml_string_of_jsbytes("canonical"),
     cst_prev=caml_string_of_jsbytes("prev"),
     cst_next=caml_string_of_jsbytes("next"),
     cst_last=caml_string_of_jsbytes("last"),
     cst_icon$0=caml_string_of_jsbytes("icon"),
     cst_help=caml_string_of_jsbytes("help"),
     cst_noreferrer=caml_string_of_jsbytes("noreferrer"),
     cst_author=caml_string_of_jsbytes("author"),
     cst_license=caml_string_of_jsbytes("license"),
     cst_search=caml_string_of_jsbytes("search"),
     cst_noopener=caml_string_of_jsbytes("noopener"),
     cst_first=caml_string_of_jsbytes("first"),
     cst_bookmark=caml_string_of_jsbytes("bookmark"),
     cst_tag=caml_string_of_jsbytes("tag"),
     cst_up=caml_string_of_jsbytes("up"),
     cst_pingback=caml_string_of_jsbytes("pingback"),
     cst_nofollow=caml_string_of_jsbytes("nofollow"),
     cst_stylesheet=caml_string_of_jsbytes("stylesheet"),
     cst_alternate=caml_string_of_jsbytes("alternate"),
     cst_index=caml_string_of_jsbytes("index"),
     cst_sidebar=caml_string_of_jsbytes("sidebar"),
     cst_archives=caml_string_of_jsbytes("archives"),
     cst_prefetch=caml_string_of_jsbytes("prefetch"),
     cst_allow_same_origin=caml_string_of_jsbytes("allow-same-origin"),
     cst_allow_popups=caml_string_of_jsbytes("allow-popups"),
     cst_allow_forms=caml_string_of_jsbytes("allow-forms"),
     cst_allow_pointer_lock=caml_string_of_jsbytes("allow-pointer-lock"),
     cst_allow_script=caml_string_of_jsbytes("allow-script"),
     cst_allow_top_navigation=caml_string_of_jsbytes("allow-top-navigation"),
     cst_link=caml_string_of_jsbytes("link"),
     cst_style$2=caml_string_of_jsbytes("style"),
     cst_img=caml_string_of_jsbytes("img"),
     cst_object=caml_string_of_jsbytes("object"),
     cst_table$0=caml_string_of_jsbytes("table"),
     cst_figure=caml_string_of_jsbytes("figure"),
     cst_optgroup=caml_string_of_jsbytes("optgroup"),
     cst_fieldset=caml_string_of_jsbytes("fieldset"),
     cst_details=caml_string_of_jsbytes("details"),
     cst_datalist=caml_string_of_jsbytes("datalist"),
     cst_menu=caml_string_of_jsbytes("menu"),
     cst_command=caml_string_of_jsbytes("command"),
     cst_area=caml_string_of_jsbytes("area"),
     cst_coords=caml_string_of_jsbytes("coords"),
     cst_shape=caml_string_of_jsbytes("shape"),
     cst_bdo=caml_string_of_jsbytes("bdo"),
     cst_nbsp=caml_string_of_jsbytes("nbsp"),
     cst_html$0=caml_string_of_jsbytes("html"),
     cst_aria=caml_string_of_jsbytes("aria-"),
     cst_scrolling=caml_string_of_jsbytes("scrolling"),
     cst_frameborder=caml_string_of_jsbytes("frameborder"),
     cst_char=caml_string_of_jsbytes("char"),
     cst_rules=caml_string_of_jsbytes("rules"),
     cst_scope=caml_string_of_jsbytes("scope"),
     cst_align=caml_string_of_jsbytes("align"),
     cst_type$8=caml_string_of_jsbytes("type"),
     cst_type$7=caml_string_of_jsbytes("type"),
     cst_type$6=caml_string_of_jsbytes("type"),
     cst_type$5=caml_string_of_jsbytes("type"),
     cst_wrap$0=caml_string_of_jsbytes("wrap"),
     cst_step=caml_string_of_jsbytes("step"),
     cst_sizes=caml_string_of_jsbytes("sizes"),
     cst_spellcheck=caml_string_of_jsbytes("spellcheck"),
     cst_sandbox=caml_string_of_jsbytes("sandbox"),
     cst_preload=caml_string_of_jsbytes("preload"),
     cst_inputmode=caml_string_of_jsbytes("inputmode"),
     cst_draggable=caml_string_of_jsbytes("draggable"),
     cst_dir=caml_string_of_jsbytes("dir"),
     cst_contenteditable=caml_string_of_jsbytes("contenteditable"),
     cst_crossorigin=caml_string_of_jsbytes("crossorigin"),
     cst_autocomplete=caml_string_of_jsbytes("autocomplete"),
     cst_referrerpolicy=caml_string_of_jsbytes("referrerpolicy"),
     cst_method$0=caml_string_of_jsbytes("method"),
     cst_width$0=caml_string_of_jsbytes("width"),
     cst_height$0=caml_string_of_jsbytes("height"),
     cst_download=caml_string_of_jsbytes("download"),
     cst_accesskey=caml_string_of_jsbytes("accesskey"),
     cst_xml_space$0=caml_string_of_jsbytes("xml:space"),
     cst_xmlns$4=caml_string_of_jsbytes("xmlns"),
     cst_data$0=caml_string_of_jsbytes("data-"),
     content_type$0=caml_string_of_jsbytes("text/html"),
     alternative_content_types=
      [0,
       caml_string_of_jsbytes("application/xhtml+xml"),
       [0,
        caml_string_of_jsbytes("application/xml"),
        [0,caml_string_of_jsbytes("text/xml"),0]]],
     version$0=caml_string_of_jsbytes("HTML5-draft"),
     standard$0=caml_string_of_jsbytes("http://www.w3.org/TR/html5/"),
     namespace$0=caml_string_of_jsbytes("http://www.w3.org/1999/xhtml"),
     cst_html=caml_string_of_jsbytes("html"),
     emptytags=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("area"),
         caml_string_of_jsbytes("base"),
         caml_string_of_jsbytes("br"),
         caml_string_of_jsbytes("col"),
         caml_string_of_jsbytes("command"),
         caml_string_of_jsbytes("embed"),
         caml_string_of_jsbytes("hr"),
         caml_string_of_jsbytes("img"),
         caml_string_of_jsbytes("input"),
         caml_string_of_jsbytes("keygen"),
         caml_string_of_jsbytes("link"),
         caml_string_of_jsbytes("meta"),
         caml_string_of_jsbytes("param"),
         caml_string_of_jsbytes("source"),
         caml_string_of_jsbytes("wbr")]),
     cst_class$0=caml_string_of_jsbytes("class"),
     cst_id$0=caml_string_of_jsbytes("id"),
     cst_title$0=caml_string_of_jsbytes("title"),
     cst_xml_lang$0=caml_string_of_jsbytes("xml:lang"),
     cst_lang$0=caml_string_of_jsbytes("lang"),
     cst_style$1=caml_string_of_jsbytes("style"),
     cst_property=caml_string_of_jsbytes("property"),
     cst_onabort$0=caml_string_of_jsbytes("onabort"),
     cst_onafterprint=caml_string_of_jsbytes("onafterprint"),
     cst_onbeforeprint=caml_string_of_jsbytes("onbeforeprint"),
     cst_onbeforeunload=caml_string_of_jsbytes("onbeforeunload"),
     cst_onblur=caml_string_of_jsbytes("onblur"),
     cst_oncanplay=caml_string_of_jsbytes("oncanplay"),
     cst_oncanplaythrough=caml_string_of_jsbytes("oncanplaythrough"),
     cst_onchange=caml_string_of_jsbytes("onchange"),
     cst_ondurationchange=caml_string_of_jsbytes("ondurationchange"),
     cst_onemptied=caml_string_of_jsbytes("onemptied"),
     cst_onended=caml_string_of_jsbytes("onended"),
     cst_onerror$0=caml_string_of_jsbytes("onerror"),
     cst_onfocus=caml_string_of_jsbytes("onfocus"),
     cst_onformchange=caml_string_of_jsbytes("onformchange"),
     cst_onforminput=caml_string_of_jsbytes("onforminput"),
     cst_onhashchange=caml_string_of_jsbytes("onhashchange"),
     cst_oninput=caml_string_of_jsbytes("oninput"),
     cst_oninvalid=caml_string_of_jsbytes("oninvalid"),
     cst_onoffline=caml_string_of_jsbytes("onoffline"),
     cst_ononline=caml_string_of_jsbytes("ononline"),
     cst_onpause=caml_string_of_jsbytes("onpause"),
     cst_onplay=caml_string_of_jsbytes("onplay"),
     cst_onplaying=caml_string_of_jsbytes("onplaying"),
     cst_onpagehide=caml_string_of_jsbytes("onpagehide"),
     cst_onpageshow=caml_string_of_jsbytes("onpageshow"),
     cst_onpopstate=caml_string_of_jsbytes("onpopstate"),
     cst_onprogress=caml_string_of_jsbytes("onprogress"),
     cst_onratechange=caml_string_of_jsbytes("onratechange"),
     cst_onreadystatechange=caml_string_of_jsbytes("onreadystatechange"),
     cst_onredo=caml_string_of_jsbytes("onredo"),
     cst_onresize$0=caml_string_of_jsbytes("onresize"),
     cst_onscroll$0=caml_string_of_jsbytes("onscroll"),
     cst_onseeked=caml_string_of_jsbytes("onseeked"),
     cst_onseeking=caml_string_of_jsbytes("onseeking"),
     cst_onselect=caml_string_of_jsbytes("onselect"),
     cst_onshow=caml_string_of_jsbytes("onshow"),
     cst_onstalled=caml_string_of_jsbytes("onstalled"),
     cst_onstorage=caml_string_of_jsbytes("onstorage"),
     cst_onsubmit=caml_string_of_jsbytes("onsubmit"),
     cst_onsuspend=caml_string_of_jsbytes("onsuspend"),
     cst_ontimeupdate=caml_string_of_jsbytes("ontimeupdate"),
     cst_onundo=caml_string_of_jsbytes("onundo"),
     cst_onunload$0=caml_string_of_jsbytes("onunload"),
     cst_onvolumechange=caml_string_of_jsbytes("onvolumechange"),
     cst_onwaiting=caml_string_of_jsbytes("onwaiting"),
     cst_onload$0=caml_string_of_jsbytes("onload"),
     cst_onloadeddata=caml_string_of_jsbytes("onloadeddata"),
     cst_onloadedmetadata=caml_string_of_jsbytes("onloadedmetadata"),
     cst_onloadstart=caml_string_of_jsbytes("onloadstart"),
     cst_onmessage=caml_string_of_jsbytes("onmessage"),
     cst_onmousewheel=caml_string_of_jsbytes("onmousewheel"),
     cst_onclick$0=caml_string_of_jsbytes("onclick"),
     cst_oncontextmenu=caml_string_of_jsbytes("oncontextmenu"),
     cst_ondblclick=caml_string_of_jsbytes("ondblclick"),
     cst_ondrag=caml_string_of_jsbytes("ondrag"),
     cst_ondragend=caml_string_of_jsbytes("ondragend"),
     cst_ondragenter=caml_string_of_jsbytes("ondragenter"),
     cst_ondragleave=caml_string_of_jsbytes("ondragleave"),
     cst_ondragover=caml_string_of_jsbytes("ondragover"),
     cst_ondragstart=caml_string_of_jsbytes("ondragstart"),
     cst_ondrop=caml_string_of_jsbytes("ondrop"),
     cst_onmousedown$0=caml_string_of_jsbytes("onmousedown"),
     cst_onmouseup$0=caml_string_of_jsbytes("onmouseup"),
     cst_onmouseover$0=caml_string_of_jsbytes("onmouseover"),
     cst_onmousemove$0=caml_string_of_jsbytes("onmousemove"),
     cst_onmouseout$0=caml_string_of_jsbytes("onmouseout"),
     cst_ontouchstart$0=caml_string_of_jsbytes("ontouchstart"),
     cst_ontouchend$0=caml_string_of_jsbytes("ontouchend"),
     cst_ontouchmove$0=caml_string_of_jsbytes("ontouchmove"),
     cst_ontouchcancel$0=caml_string_of_jsbytes("ontouchcancel"),
     cst_onkeypress=caml_string_of_jsbytes("onkeypress"),
     cst_onkeydown=caml_string_of_jsbytes("onkeydown"),
     cst_onkeyup=caml_string_of_jsbytes("onkeyup"),
     cst_version$0=caml_string_of_jsbytes("version"),
     cst_manifest=caml_string_of_jsbytes("manifest"),
     cst_cite=caml_string_of_jsbytes("cite"),
     cst_charset=caml_string_of_jsbytes("charset"),
     cst_accept_charset=caml_string_of_jsbytes("accept-charset"),
     cst_accept=caml_string_of_jsbytes("accept"),
     cst_href$0=caml_string_of_jsbytes("href"),
     cst_hreflang=caml_string_of_jsbytes("hreflang"),
     cst_rel=caml_string_of_jsbytes("rel"),
     cst_tabindex=caml_string_of_jsbytes("tabindex"),
     cst_type$4=caml_string_of_jsbytes("type"),
     cst_alt=caml_string_of_jsbytes("alt"),
     cst_src=caml_string_of_jsbytes("src"),
     cst_for=caml_string_of_jsbytes("for"),
     cst_for$0=caml_string_of_jsbytes("for"),
     cst_selected=caml_string_of_jsbytes("selected"),
     cst_value=caml_string_of_jsbytes("value"),
     cst_value$0=caml_string_of_jsbytes("value"),
     cst_value$1=caml_string_of_jsbytes("value"),
     cst_value$2=caml_string_of_jsbytes("value"),
     cst_action=caml_string_of_jsbytes("action"),
     cst_enctype=caml_string_of_jsbytes("enctype"),
     cst_checked=caml_string_of_jsbytes("checked"),
     cst_disabled=caml_string_of_jsbytes("disabled"),
     cst_readonly=caml_string_of_jsbytes("readonly"),
     cst_maxlength=caml_string_of_jsbytes("maxlength"),
     cst_minlength=caml_string_of_jsbytes("minlength"),
     cst_name$0=caml_string_of_jsbytes("name"),
     cst_allowfullscreen=caml_string_of_jsbytes("allowfullscreen"),
     cst_allowpaymentrequest=caml_string_of_jsbytes("allowpaymentrequest"),
     cst_async=caml_string_of_jsbytes("async"),
     cst_autofocus=caml_string_of_jsbytes("autofocus"),
     cst_autoplay=caml_string_of_jsbytes("autoplay"),
     cst_muted=caml_string_of_jsbytes("muted"),
     cst_integrity=caml_string_of_jsbytes("integrity"),
     cst_mediagroup=caml_string_of_jsbytes("mediagroup"),
     cst_challenge=caml_string_of_jsbytes("challenge"),
     cst_contextmenu=caml_string_of_jsbytes("contextmenu"),
     cst_controls=caml_string_of_jsbytes("controls"),
     cst_form=caml_string_of_jsbytes("form"),
     cst_formaction=caml_string_of_jsbytes("formaction"),
     cst_formenctype=caml_string_of_jsbytes("formenctype"),
     cst_formnovalidate=caml_string_of_jsbytes("formnovalidate"),
     cst_formtarget=caml_string_of_jsbytes("formtarget"),
     cst_hidden=caml_string_of_jsbytes("hidden"),
     cst_high=caml_string_of_jsbytes("high"),
     cst_icon=caml_string_of_jsbytes("icon"),
     cst_ismap=caml_string_of_jsbytes("ismap"),
     cst_keytype=caml_string_of_jsbytes("keytype"),
     cst_list=caml_string_of_jsbytes("list"),
     cst_loop=caml_string_of_jsbytes("loop"),
     cst_low=caml_string_of_jsbytes("low"),
     cst_max$0=caml_string_of_jsbytes("max"),
     cst_max$1=caml_string_of_jsbytes("max"),
     cst_min$0=caml_string_of_jsbytes("min"),
     cst_min$1=caml_string_of_jsbytes("min"),
     cst_novalidate=caml_string_of_jsbytes("novalidate"),
     cst_open=caml_string_of_jsbytes("open"),
     cst_optimum=caml_string_of_jsbytes("optimum"),
     cst_pattern$0=caml_string_of_jsbytes("pattern"),
     cst_placeholder=caml_string_of_jsbytes("placeholder"),
     cst_poster=caml_string_of_jsbytes("poster"),
     cst_pubdate=caml_string_of_jsbytes("pubdate"),
     cst_radiogroup=caml_string_of_jsbytes("radiogroup"),
     cst_required=caml_string_of_jsbytes("required"),
     cst_reserved=caml_string_of_jsbytes("reserved"),
     cst_scoped=caml_string_of_jsbytes("scoped"),
     cst_seamless=caml_string_of_jsbytes("seamless"),
     cst_span=caml_string_of_jsbytes("span"),
     cst_xml_lang$1=caml_string_of_jsbytes("xml:lang"),
     cst_srcset=caml_string_of_jsbytes("srcset"),
     cst_sizes$0=caml_string_of_jsbytes("sizes"),
     cst_start$0=caml_string_of_jsbytes("start"),
     cst_size=caml_string_of_jsbytes("size"),
     cst_multiple=caml_string_of_jsbytes("multiple"),
     cst_cols=caml_string_of_jsbytes("cols"),
     cst_rows=caml_string_of_jsbytes("rows"),
     cst_summary=caml_string_of_jsbytes("summary"),
     cst_axis=caml_string_of_jsbytes("axis"),
     cst_colspan=caml_string_of_jsbytes("colspan"),
     cst_headers=caml_string_of_jsbytes("headers"),
     cst_rowspan=caml_string_of_jsbytes("rowspan"),
     cst_border=caml_string_of_jsbytes("border"),
     cst_data$1=caml_string_of_jsbytes("data"),
     cst_codetype=caml_string_of_jsbytes("codetype"),
     cst_marginheight=caml_string_of_jsbytes("marginheight"),
     cst_marginwidth=caml_string_of_jsbytes("marginwidth"),
     cst_target=caml_string_of_jsbytes("target"),
     cst_content=caml_string_of_jsbytes("content"),
     cst_http_equiv=caml_string_of_jsbytes("http-equiv"),
     cst_media$0=caml_string_of_jsbytes("media"),
     cst_role=caml_string_of_jsbytes("role"),
     cst_body=caml_string_of_jsbytes("body"),
     cst_head=caml_string_of_jsbytes("head"),
     cst_title$1=caml_string_of_jsbytes("title"),
     cst_footer=caml_string_of_jsbytes("footer"),
     cst_header=caml_string_of_jsbytes("header"),
     cst_section=caml_string_of_jsbytes("section"),
     cst_nav=caml_string_of_jsbytes("nav"),
     cst_h1=caml_string_of_jsbytes("h1"),
     cst_h2=caml_string_of_jsbytes("h2"),
     cst_h3=caml_string_of_jsbytes("h3"),
     cst_h4=caml_string_of_jsbytes("h4"),
     cst_h5=caml_string_of_jsbytes("h5"),
     cst_h6=caml_string_of_jsbytes("h6"),
     cst_hgroup=caml_string_of_jsbytes("hgroup"),
     cst_address=caml_string_of_jsbytes("address"),
     cst_blockquote=caml_string_of_jsbytes("blockquote"),
     cst_div=caml_string_of_jsbytes("div"),
     cst_p=caml_string_of_jsbytes("p"),
     cst_pre=caml_string_of_jsbytes("pre"),
     cst_abbr=caml_string_of_jsbytes("abbr"),
     cst_br=caml_string_of_jsbytes("br"),
     cst_cite$0=caml_string_of_jsbytes("cite"),
     cst_code=caml_string_of_jsbytes("code"),
     cst_dfn=caml_string_of_jsbytes("dfn"),
     cst_em$0=caml_string_of_jsbytes("em"),
     cst_kbd=caml_string_of_jsbytes("kbd"),
     cst_q=caml_string_of_jsbytes("q"),
     cst_samp=caml_string_of_jsbytes("samp"),
     cst_span$0=caml_string_of_jsbytes("span"),
     cst_strong=caml_string_of_jsbytes("strong"),
     cst_time=caml_string_of_jsbytes("time"),
     cst_var=caml_string_of_jsbytes("var"),
     cst_a$1=caml_string_of_jsbytes("a"),
     cst_dl=caml_string_of_jsbytes("dl"),
     cst_ol=caml_string_of_jsbytes("ol"),
     cst_ul=caml_string_of_jsbytes("ul"),
     cst_dd=caml_string_of_jsbytes("dd"),
     cst_dt=caml_string_of_jsbytes("dt"),
     cst_li=caml_string_of_jsbytes("li"),
     cst_hr=caml_string_of_jsbytes("hr"),
     cst_b$0=caml_string_of_jsbytes("b"),
     cst_i=caml_string_of_jsbytes("i"),
     cst_u=caml_string_of_jsbytes("u"),
     cst_small=caml_string_of_jsbytes("small"),
     cst_sub=caml_string_of_jsbytes("sub"),
     cst_sup=caml_string_of_jsbytes("sup"),
     cst_mark=caml_string_of_jsbytes("mark"),
     cst_rp=caml_string_of_jsbytes("rp"),
     cst_rt=caml_string_of_jsbytes("rt"),
     cst_ruby=caml_string_of_jsbytes("ruby"),
     cst_wbr=caml_string_of_jsbytes("wbr"),
     cst_datetime=caml_string_of_jsbytes("datetime"),
     cst_usemap=caml_string_of_jsbytes("usemap"),
     cst_defer=caml_string_of_jsbytes("defer"),
     cst_label=caml_string_of_jsbytes("label"),
     cst_map=caml_string_of_jsbytes("map"),
     cst_del=caml_string_of_jsbytes("del"),
     cst_ins=caml_string_of_jsbytes("ins"),
     cst_script$0=caml_string_of_jsbytes("script"),
     cst_noscript=caml_string_of_jsbytes("noscript"),
     cst_template=caml_string_of_jsbytes("template"),
     cst_article=caml_string_of_jsbytes("article"),
     cst_aside=caml_string_of_jsbytes("aside"),
     cst_main=caml_string_of_jsbytes("main"),
     cst_audio=caml_string_of_jsbytes("audio"),
     cst_video=caml_string_of_jsbytes("video"),
     cst_canvas=caml_string_of_jsbytes("canvas"),
     cst_embed=caml_string_of_jsbytes("embed"),
     cst_source=caml_string_of_jsbytes("source"),
     cst_meter=caml_string_of_jsbytes("meter"),
     cst_output=caml_string_of_jsbytes("output"),
     cst_form$0=caml_string_of_jsbytes("form"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_keygen=caml_string_of_jsbytes("keygen"),
     cst_label$0=caml_string_of_jsbytes("label"),
     cst_option=caml_string_of_jsbytes("option"),
     cst_select=caml_string_of_jsbytes("select"),
     cst_textarea=caml_string_of_jsbytes("textarea"),
     cst_button=caml_string_of_jsbytes("button"),
     cst_progress=caml_string_of_jsbytes("progress"),
     cst_legend=caml_string_of_jsbytes("legend"),
     cst_summary$0=caml_string_of_jsbytes("summary"),
     cst_figcaption=caml_string_of_jsbytes("figcaption"),
     cst_caption=caml_string_of_jsbytes("caption"),
     cst_td=caml_string_of_jsbytes("td"),
     cst_th=caml_string_of_jsbytes("th"),
     cst_tr=caml_string_of_jsbytes("tr"),
     cst_colgroup=caml_string_of_jsbytes("colgroup"),
     cst_col=caml_string_of_jsbytes("col"),
     cst_thead=caml_string_of_jsbytes("thead"),
     cst_tbody=caml_string_of_jsbytes("tbody"),
     cst_tfoot=caml_string_of_jsbytes("tfoot"),
     cst_iframe=caml_string_of_jsbytes("iframe"),
     cst_param=caml_string_of_jsbytes("param"),
     cst_meta=caml_string_of_jsbytes("meta"),
     cst_base=caml_string_of_jsbytes("base"),
     Stdlib=global_data.Stdlib,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_seq=global_data.Stdlib__seq,
     Stdlib_printf=global_data.Stdlib__printf,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_format=global_data.Stdlib__format,
     Stdlib_set=global_data.Stdlib__set,
     Stdlib_uchar=global_data.Stdlib__uchar,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Uutf=global_data.Uutf,
     Re=global_data.Re,
     _L_=[0,[2,0,[12,61,[2,0,0]]],caml_string_of_jsbytes("%s=%s")],
     _H_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _I_=[0,[12,34,[4,0,0,0,[12,34,0]]],caml_string_of_jsbytes('"%d"')],
     _J_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _K_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _F_=
      [0,
       [2,0,[17,[0,caml_string_of_jsbytes("@,"),0,0],0]],
       caml_string_of_jsbytes("%s@,")],
     _G_=
      [0,
       [11,
        caml_string_of_jsbytes("<!-- "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" -->"),
          [17,[0,caml_string_of_jsbytes("@,"),0,0],0]]]],
       caml_string_of_jsbytes("<!-- %s -->@,")],
     _C_=
      [0,
       [12,
        60,
        [16,
         [15,
          [12,
           62,
           [16,
            [15,[16,[16,[11,caml_string_of_jsbytes("<\/"),[2,0,partial]]]]]]]]]],
       caml_string_of_jsbytes("<%t%a>%t%a%t%t<\/%s>")],
     _D_=
      [0,
       [11,
        caml_string_of_jsbytes("<!--"),
        [2,0,[11,caml_string_of_jsbytes("-->"),0]]],
       caml_string_of_jsbytes("<!--%s-->")],
     _E_=[0,[12,38,[2,0,[12,59,0]]],caml_string_of_jsbytes("&%s;")],
     _A_=
      [0,
       [12,60,[15,[11,caml_string_of_jsbytes("/>"),0]]],
       caml_string_of_jsbytes("<%a/>")],
     _B_=
      [0,
       [12,
        60,
        [15,[12,62,[16,[11,caml_string_of_jsbytes("<\/"),[2,0,[12,62,0]]]]]]],
       caml_string_of_jsbytes("<%a>%t<\/%s>")],
     _z_=[0,[2,0,[15,[16,0]]],caml_string_of_jsbytes("%s%a%t")],
     _y_=[0,[16,[2,0,[12,61,[15,0]]]],caml_string_of_jsbytes("%t%s=%a")],
     _u_=[0,[12,34,[15,[12,34,0]]],caml_string_of_jsbytes('"%a"')],
     _v_=[0,[12,34,[4,0,0,0,[12,34,0]]],caml_string_of_jsbytes('"%d"')],
     _w_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _x_=[0,[12,34,[15,[12,34,0]]],caml_string_of_jsbytes('"%a"')],
     _t_=[0,[12,44,[16,0]],caml_string_of_jsbytes(",%t")],
     _s_=
      [0,
       [18,[1,[0,0,caml_string_of_jsbytes("")]],[15,[17,0,0]]],
       caml_string_of_jsbytes("@[%a@]")],
     _r_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _n_=[0,[4,0,0,0,[12,101,[4,0,0,0,0]]],caml_string_of_jsbytes("%de%d")],
     _o_=[0,[8,[0,0,3],0,[0,12],0],caml_string_of_jsbytes("%.12g")],
     _p_=[0,[8,[0,0,3],0,[0,15],0],caml_string_of_jsbytes("%.15g")],
     _q_=[0,[8,[0,0,3],0,[0,18],0],caml_string_of_jsbytes("%.18g")],
     _m_=[0,1],
     _c_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _d_=
      [0,
       [11,caml_string_of_jsbytes(" PUBLIC "),[15,0]],
       caml_string_of_jsbytes(" PUBLIC %a")],
     _e_=
      [0,
       [11,caml_string_of_jsbytes("<!DOCTYPE "),[2,0,[15,[12,62,0]]]],
       caml_string_of_jsbytes("<!DOCTYPE %s%a>")],
     _b_=
      [0,
       [11,
        caml_string_of_jsbytes('<?xml version="'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('" encoding="'),
          [2,0,[11,caml_string_of_jsbytes('"?>\\n'),0]]]]],
       caml_string_of_jsbytes('<?xml version="%s" encoding="%s"?>\\n')],
     _X_=
      [0,
       [11,caml_string_of_jsbytes("skewY("),[2,0,[12,41,0]]],
       caml_string_of_jsbytes("skewY(%s)")],
     _Y_=
      [0,
       [11,caml_string_of_jsbytes("skewX("),[2,0,[12,41,0]]],
       caml_string_of_jsbytes("skewX(%s)")],
     _Z_=
      [0,
       [11,caml_string_of_jsbytes("scale("),[2,0,[12,41,0]]],
       caml_string_of_jsbytes("scale(%s)")],
     ___=
      [0,
       [8,[0,0,3],0,0,[12,32,[8,[0,0,3],0,0,0]]],
       caml_string_of_jsbytes("%g %g")],
     _$_=
      [0,
       [11,caml_string_of_jsbytes("rotate("),[2,0,[12,32,[2,0,[12,41,0]]]]],
       caml_string_of_jsbytes("rotate(%s %s)")],
     _aa_=
      [0,
       [11,
        caml_string_of_jsbytes("matrix("),
        [8,
         [0,0,3],
         0,
         0,
         [12,
          32,
          [8,
           [0,0,3],
           0,
           0,
           [12,
            32,
            [8,
             [0,0,3],
             0,
             0,
             [12,32,[8,[0,0,3],0,0,[12,32,[8,partial$1,0,0,partial$0]]]]]]]]]],
       caml_string_of_jsbytes("matrix(%g %g %g %g %g %g)")],
     _ab_=
      [0,
       [11,caml_string_of_jsbytes("translate("),[2,0,[12,41,0]]],
       caml_string_of_jsbytes("translate(%s)")],
     _U_=
      [0,
       [8,[0,0,3],0,0,[11,caml_string_of_jsbytes(", "),[8,[0,0,3],0,0,0]]],
       caml_string_of_jsbytes("%g, %g")],
     _V_=[0,[8,[0,0,3],0,0,0],caml_string_of_jsbytes("%g")],
     _T_=
      [0,
       [2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,0]]]]]]],
       caml_string_of_jsbytes("%s %s %s %s")],
     _S_=
      [0,
       [8,[0,0,3],0,0,[11,caml_string_of_jsbytes(", "),[8,[0,0,3],0,0,0]]],
       caml_string_of_jsbytes("%g, %g")],
     _W_=[0,caml_string_of_jsbytes("; ")],
     _R_=
      [0,
       caml_string_of_jsbytes("-//W3C//DTD SVG 1.1//EN"),
       [0,
        caml_string_of_jsbytes
         ("http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"),
        0]],
     _Q_=[0,[8,[0,0,3],0,0,[2,0,0]],caml_string_of_jsbytes("%g%s")],
     _P_=
      [0,
       [11,caml_string_of_jsbytes("url("),[2,0,[12,41,0]]],
       caml_string_of_jsbytes("url(%s)")],
     _ag_=[0,[2,0,[12,32,[2,0,[12,120,0]]]],caml_string_of_jsbytes("%s %sx")],
     _af_=[0,[2,0,[12,32,[2,0,[12,119,0]]]],caml_string_of_jsbytes("%s %sw")],
     _ae_=[0,[4,0,0,0,[12,120,[4,0,0,0,0]]],caml_string_of_jsbytes("%dx%d")];
    function fmap(f){return f}
    function nil(param){return 0}
    function singleton(x){return [0,x,0]}
    function cons(x,xs){return [0,x,xs]}
    function append(x,y){return caml_call2(Stdlib[37],x,y)}
    var
     map=Stdlib_list[17],
     Xml_wrap=
      [0,[0,function(_nk_){return _nk_},fmap,nil,singleton,cons,append,map]];
    caml_register_global(1084,Xml_wrap,"Xml_wrap");
    var
     Malformed_stream=
      [248,cst_Xml_stream_Malformed_strea,runtime.caml_fresh_oo_id(0)];
    function _a_(Xml)
     {function of_list(l)
       {var _nh_=caml_call1(Xml[1][3],0);
        function _ni_(a,b)
         {var _nj_=caml_call1(Xml[1][1],a);
          return caml_call2(Xml[1][5],_nj_,b)}
        return caml_call3(Stdlib_list[22],_ni_,l,_nh_)}
      function mk(children,seq)
       {var children$0=children,seq$0=seq;
        for(;;)
         {var match=caml_call1(seq$0,0);
          if(match)
           {var _m$_=match[1];
            if(typeof _m$_ === "number")
             {var rest=match[2];
              return [0,of_list(caml_call1(Stdlib_list[9],children$0)),rest]}
            var _na_=_m$_[1];
            if(856096383 === _na_)
             {var
               q=match[2],
               _nb_=_m$_[2],
               attrs=_nb_[2],
               match$0=_nb_[1],
               name=match$0[2],
               f=
                function(param)
                 {var
                   v=param[2],
                   match=param[1],
                   name=match[2],
                   _ng_=caml_call1(Xml[1][1],v);
                  return caml_call2(Xml[6],name,_ng_)},
               a=caml_call2(Stdlib_list[17],f,attrs),
               match$1=mk(0,q),
               rest$0=match$1[2],
               sub_children=match$1[1],
               children$1=
                [0,caml_call3(Xml[21],[0,a],name,sub_children),children$0],
               children$0=children$1,
               seq$0=rest$0;
              continue}
            if(936573133 <= _na_)
             {var
               q$0=match[2],
               s=_m$_[2],
               _nc_=
                function(x)
                 {var _nf_=caml_call1(Xml[1][1],x);
                  return caml_call1(Xml[17],_nf_)},
               _nd_=caml_call2(Stdlib_list[17],_nc_,s),
               children$2=caml_call2(Stdlib[37],_nd_,children$0),
               children$0=children$2,
               seq$0=q$0;
              continue}
            var
             q$1=match[2],
             s$0=_m$_[2],
             children$3=[0,caml_call1(Xml[16],s$0),children$0],
             children$0=children$3,
             seq$0=q$1;
            continue}
          var _ne_=Stdlib_seq[1];
          return [0,of_list(caml_call1(Stdlib_list[9],children$0)),_ne_]}}
      function of_seq(seq)
       {var
         match=mk(0,seq),
         rest=match[2],
         l=match[1],
         match$0=caml_call1(rest,0);
        if(match$0)throw Malformed_stream;
        return l}
      return [0,of_seq]}
    var Xml_stream=[0,Malformed_stream,_a_];
    caml_register_global(1086,Xml_stream,"Xml_stream");
    function add_unsafe_char(b,c)
     {if(34 === c)return caml_call2(Stdlib_buffer[14],b,cst_quot);
      if(60 <= c)
       {if(! (63 <= c))
         {var switcher=c - 60 | 0;
          switch(switcher)
           {case 0:return caml_call2(Stdlib_buffer[14],b,cst_lt);
            case 1:break;
            default:return caml_call2(Stdlib_buffer[14],b,cst_gt)}}}
      else
       if(38 === c)return caml_call2(Stdlib_buffer[14],b,cst_amp);
      var _m4_=c <= 8?1:0;
      if(_m4_)
       var _m5_=_m4_;
      else
       {var _m6_=11 === c?1:0;
        if(_m6_)
         var _m5_=_m6_;
        else
         {var _m7_=12 === c?1:0;
          if(_m7_)
           var _m5_=_m7_;
          else
           var
            _m8_=14 <= c?1:0,
            _m9_=_m8_?c <= 31?1:0:_m8_,
            _m5_=_m9_ || (127 === c?1:0)}}
      if(_m5_)
       {caml_call2(Stdlib_buffer[14],b,cst);
        var _m__=caml_call1(Stdlib[33],c);
        caml_call2(Stdlib_buffer[14],b,_m__);
        return caml_call2(Stdlib_buffer[14],b,cst$0)}
      return caml_call2(Stdlib_buffer[10],b,c)}
    function encode_unsafe_char(s)
     {var b=caml_call1(Stdlib_buffer[1],caml_ml_string_length(s));
      function _m2_(_m3_){return add_unsafe_char(b,_m3_)}
      caml_call2(Stdlib_string[8],_m2_,s);
      return caml_call1(Stdlib_buffer[2],b)}
    function encode_unsafe_char_and_at(s)
     {var b=caml_call1(Stdlib_buffer[1],caml_ml_string_length(s));
      function f(c)
       {return 64 === c
                ?caml_call2(Stdlib_buffer[14],b,cst_64)
                :add_unsafe_char(b,c)}
      caml_call2(Stdlib_string[8],f,s);
      return caml_call1(Stdlib_buffer[2],b)}
    function compose_decl(opt,_m1_,param)
     {if(opt)var sth=opt[1],version=sth;else var version=cst_1_0;
      if(_m1_)var sth$0=_m1_[1],encoding=sth$0;else var encoding=cst_UTF_8;
      return caml_call3(Stdlib_format[126],_b_,version,encoding)}
    function compose_doctype(dt,args)
     {function pp_args(fmt,l)
       {if(l)
         {var
           _mZ_=function(fmt){return caml_call2(Stdlib_format[123],fmt,_c_)},
           _m0_=caml_call2(Stdlib_format[119],[0,Stdlib_format[25]],_mZ_);
          return caml_call4(Stdlib_format[123],fmt,_d_,_m0_,l)}
        return 0}
      return caml_call4(Stdlib_format[127],_e_,dt,pp_args,args)}
    var
     _f_=[0,caml_call1(Re[23],cst$1),0],
     _g_=[0,caml_call1(Re[23],cst$2),_f_],
     _h_=[0,caml_call1(Re[23],cst$3),0],
     _i_=[0,caml_call1(Re[26],[0,Re[37],_h_]),_g_],
     _j_=[0,caml_call1(Re[23],cst$4),0],
     _k_=[0,caml_call1(Re[26],[0,Re[37],_j_]),_i_],
     _l_=caml_call1(Re[25],_k_),
     re_end_comment=caml_call1(Re[2],_l_);
    function pp_number(fmt,v)
     {if(v == Stdlib[22])
       return caml_call2(Stdlib_format[13],fmt,cst_Infinity);
      if(v == Stdlib[23])
       return caml_call2(Stdlib_format[13],fmt,cst_Infinity$0);
      if(v != v)return caml_call2(Stdlib_format[13],fmt,cst_NaN);
      var n=v | 0;
      if(n == v)
       {var n$0=n,i=0;
        for(;;)
         {if(0 !== n$0 && 0 === (n$0 % 10 | 0))
           {var i$0=i + 1 | 0,n$1=n$0 / 10 | 0,n$0=n$1,i=i$0;continue}
          return 2 < i
                  ?caml_call4(Stdlib_format[123],fmt,_n_,n$0,i)
                  :caml_call2(Stdlib_format[17],fmt,n)}}
      var s1=caml_call2(Stdlib_printf[4],_o_,v);
      if(v == caml_float_of_string(s1))
       return caml_call2(Stdlib_format[13],fmt,s1);
      var s2=caml_call2(Stdlib_printf[4],_p_,v);
      return v == caml_float_of_string(s2)
              ?caml_call2(Stdlib_format[13],fmt,s2)
              :caml_call3(Stdlib_format[123],fmt,_q_,v)}
    function string_of_number(v)
     {return caml_call3(Stdlib_format[127],_r_,pp_number,v)}
    function normalize(src)
     {var
       warn=[0,0],
       buffer=caml_call1(Stdlib_buffer[1],caml_ml_string_length(src)),
       _mV_=0;
      function _mW_(param,_mY_,d)
       {if(852405675 <= d[1])
         {var code=d[2];return caml_call2(Uutf[23][1],buffer,code)}
        caml_call2(Uutf[23][1],buffer,Uutf[2]);
        warn[1] = 1;
        return 0}
      caml_call5(Uutf[22][2],0,0,_mW_,_mV_,src);
      var _mX_=warn[1];
      return [0,caml_call1(Stdlib_buffer[2],buffer),_mX_]}
    function normalize_html(src)
     {var l=caml_ml_string_length(src),i=0;
      for(;;)
       {var _mP_=i < l?1:0;
        if(_mP_)
         {var match=runtime.caml_string_get(src,i),switch$0=0;
          if(35 <= match)
           {if(61 <= match)
             {if(62 === match)switch$0 = 1;else if(127 <= match)switch$0 = 2}
            else
             if(38 === match || 60 <= match)switch$0 = 1}
          else
           if(11 <= match)
            {if(32 <= match)
              {if(34 <= match)switch$0 = 1}
             else
              if(13 !== match)switch$0 = 2}
           else
            if(! (9 <= match))switch$0 = 2;
          switch(switch$0)
           {case 2:var _mQ_=1;break;
            case 1:var _mQ_=1;break;
            default:var i$0=i + 1 | 0,i=i$0;continue}}
        else
         var _mQ_=_mP_;
        if(_mQ_)
         {var
           warn=[0,0],
           buffer=caml_call1(Stdlib_buffer[1],caml_ml_string_length(src)),
           _mR_=0,
           _mS_=
            function(param,_mU_,d)
             {if(852405675 <= d[1])
               {var u=d[2],code=caml_call1(Stdlib_uchar[10],u);
                if(34 === code)
                 return caml_call2(Stdlib_buffer[14],buffer,cst_quot$0);
                if(60 <= code)
                 {if(! (63 <= code))
                   {var switcher=code - 60 | 0;
                    switch(switcher)
                     {case 0:
                       return caml_call2(Stdlib_buffer[14],buffer,cst_lt$0);
                      case 1:break;
                      default:return caml_call2(Stdlib_buffer[14],buffer,cst_gt$4)}}}
                else
                 if(38 === code)
                  return caml_call2(Stdlib_buffer[14],buffer,cst_amp$0);
                var switch$0=0;
                if(! (31 < code) && 9 !== code && 10 !== code && 13 !== code)
                 switch$0 = 1;
                var switch$1=0;
                if(! switch$0)
                 {var switch$2=0;
                  if(127 <= code && ! (159 < code))switch$2 = 1;
                  if
                   (!
                    switch$2
                    &&
                    65534
                    !==
                    (code & 65535)
                    &&
                    65535
                    !==
                    (code & 65535))
                   {var u$0=u;switch$1 = 1}}
                if(! switch$1){warn[1] = 1;var u$0=Uutf[2]}
                return caml_call2(Uutf[23][1],buffer,u$0)}
              caml_call2(Uutf[23][1],buffer,Uutf[2]);
              warn[1] = 1;
              return 0};
          caml_call5(Uutf[22][2],0,0,_mS_,_mR_,src);
          var _mT_=warn[1];
          return [0,caml_call1(Stdlib_buffer[2],buffer),_mT_]}
        return [0,src,0]}}
    function pp_noop(fmt,param){return 0}
    function Make_fmt(Xml,_lY_)
     {function open_box(indent,fmt)
       {return indent?caml_call2(Stdlib_format[1],fmt,0):0}
      function close_box(indent,fmt)
       {return indent?caml_call2(Stdlib_format[3],fmt,0):0}
      function sp(indent,fmt)
       {return indent
                ?caml_call2(Stdlib_format[25],fmt,0)
                :caml_call2(Stdlib_format[13],fmt,cst$9)}
      function cut(indent,fmt)
       {return indent?caml_call2(Stdlib_format[27],fmt,0):0}
      var S=caml_call1(Stdlib_set[1],[0,Stdlib_string[33]]),_lZ_=_lY_[1];
      if(_lZ_)
       var
        _l0_=S[1],
        _l1_=function(s,x){return caml_call2(S[4],x,s)},
        set=caml_call3(Stdlib_list[21],_l1_,_l0_,_lZ_),
        is_emptytag=function(x){return caml_call2(S[3],x,set)};
      else
       var is_emptytag=function(param){return 0};
      function pp_encode(encode,indent,fmt,s)
       {var s$0=caml_call1(encode,s);
        return indent
                ?caml_call4(Stdlib_format[123],fmt,_s_,Stdlib_format[120],s$0)
                :caml_call2(Stdlib_format[13],fmt,s$0)}
      function pp_sep(indent,param)
       {return 0 === param
                ?function(fmt,param){return sp(indent,fmt)}
                :function(fmt,param)
                  {function _mN_(_mO_){return sp(indent,_mO_)}
                   return caml_call3(Stdlib_format[123],fmt,_t_,_mN_)}}
      function pp_attrib_value(encode,indent,fmt,a)
       {var match=caml_call1(Xml[26],a);
        switch(match[0])
         {case 0:
           var f=match[1];
           return caml_call4(Stdlib_format[123],fmt,_u_,pp_number,f);
          case 1:
           var i=match[1];return caml_call3(Stdlib_format[123],fmt,_v_,i);
          case 2:
           var s=match[1],_mH_=caml_call1(encode,s);
           return caml_call3(Stdlib_format[123],fmt,_w_,_mH_);
          default:
           var
            slist=match[2],
            sep=match[1],
            _mI_=
             function(_mL_,_mM_){return pp_encode(encode,indent,_mL_,_mM_)},
            _mJ_=[0,pp_sep(indent,sep)],
            _mK_=caml_call2(Stdlib_format[119],_mJ_,_mI_);
           return caml_call4(Stdlib_format[123],fmt,_x_,_mK_,slist)}}
      function pp_attrib(encode,indent,fmt,a)
       {function _mB_(_mF_,_mG_)
         {return pp_attrib_value(encode,indent,_mF_,_mG_)}
        var _mC_=caml_call1(Xml[25],a);
        function _mD_(_mE_){return sp(indent,_mE_)}
        return caml_call6(Stdlib_format[123],fmt,_y_,_mD_,_mC_,_mB_,a)}
      function pp_attribs(encode,indent)
       {function _my_(_mz_,_mA_){return pp_attrib(encode,indent,_mz_,_mA_)}
        return caml_call2(Stdlib_format[119],[0,pp_noop],_my_)}
      function pp_tag_and_attribs(encode,indent,fmt,param)
       {var attrs=param[2],tag=param[1];
        open_box(indent,fmt);
        function _mv_(_mx_){return cut(indent,_mx_)}
        var _mw_=pp_attribs(encode,indent);
        caml_call6(Stdlib_format[123],fmt,_z_,tag,_mw_,attrs,_mv_);
        return close_box(indent,fmt)}
      function pp_closedtag(encode,indent,fmt,tag,attrs)
       {if(is_emptytag(tag))
         {var
           _ml_=[0,tag,attrs],
           _mm_=
            function(_mt_,_mu_)
             {return pp_tag_and_attribs(encode,indent,_mt_,_mu_)};
          return caml_call4(Stdlib_format[123],fmt,_A_,_mm_,_ml_)}
        open_box(indent,fmt);
        function _mn_(_ms_){return cut(indent,_ms_)}
        var _mo_=[0,tag,attrs];
        function _mp_(_mq_,_mr_)
         {return pp_tag_and_attribs(encode,indent,_mq_,_mr_)}
        caml_call6(Stdlib_format[123],fmt,_B_,_mp_,_mo_,_mn_,tag);
        return close_box(indent,fmt)}
      function pp_tag(encode,indent,fmt,tag,attrs,children)
       {if(children)
         {open_box(indent,fmt);
          var
           _l__=function(_mk_){return cut(indent,_mk_)},
           _l$_=function(_mj_){return close_box(indent,_mj_)},
           _ma_=pp_elts(encode,indent),
           _mb_=function(_mi_){return cut(indent,_mi_)},
           _mc_=[0,tag,attrs],
           _md_=
            function(_mg_,_mh_)
             {return pp_tag_and_attribs(encode,indent,_mg_,_mh_)},
           _me_=function(_mf_){return open_box(indent,_mf_)};
          caml_call11
           (Stdlib_format[123],
            fmt,
            _C_,
            _me_,
            _md_,
            _mc_,
            _mb_,
            _ma_,
            children,
            _l$_,
            _l__,
            tag);
          return close_box(indent,fmt)}
        return pp_closedtag(encode,indent,fmt,tag,attrs)}
      function pp_elt(encode,indent,fmt,elt)
       {var match=caml_call1(Xml[27],elt);
        if(typeof match === "number")
         return 0;
        else
         switch(match[0])
          {case 0:
            var
             texte=match[1],
             f=
              function(g)
               {var s=caml_call2(Re[1][1],g,0);
                return caml_string_notequal(s,cst$5)
                        ?caml_string_notequal(s,cst$6)
                          ?caml_string_notequal(s,cst$7)
                            ?caml_string_notequal(s,cst$8)?s:cst_gt$0
                            :cst_gt$1
                          :cst_gt$2
                        :cst_gt$3},
             _l9_=caml_call6(Re[21],0,0,_m_,re_end_comment,f,texte);
            return caml_call3(Stdlib_format[123],fmt,_D_,_l9_);
           case 1:
            var texte$0=match[1];
            return caml_call2(Stdlib_format[13],fmt,texte$0);
           case 2:
            var texte$1=match[1];return pp_encode(encode,indent,fmt,texte$1);
           case 3:
            var e=match[1];return caml_call3(Stdlib_format[123],fmt,_E_,e);
           case 4:
            var xh_attrs=match[2],name=match[1];
            return pp_closedtag(encode,indent,fmt,name,xh_attrs);
           default:
            var xh_taglist=match[3],xh_attrs$0=match[2],name$0=match[1];
            return pp_tag(encode,indent,fmt,name$0,xh_attrs$0,xh_taglist)}}
      function pp_elts(encode,indent)
       {function _l5_(_l7_,_l8_){return pp_elt(encode,indent,_l7_,_l8_)}
        var _l6_=[0,function(fmt,param){return cut(indent,fmt)}];
        return caml_call2(Stdlib_format[119],_l6_,_l5_)}
      function pp(opt,_l2_,param)
       {if(opt)var sth=opt[1],encode=sth;else var encode=encode_unsafe_char;
        if(_l2_)var sth$0=_l2_[1],indent=sth$0;else var indent=0;
        return function(_l3_,_l4_){return pp_elt(encode,indent,_l3_,_l4_)}}
      return [0,
              open_box,
              close_box,
              sp,
              cut,
              S,
              is_emptytag,
              pp_encode,
              pp_sep,
              pp_attrib_value,
              pp_attrib,
              pp_attribs,
              pp_tag_and_attribs,
              pp_closedtag,
              pp_tag,
              pp_elt,
              pp_elts,
              pp]}
    function Make(Xml,I,O)
     {var symbol=O[2];
      function separator_to_string(param){return 0 === param?cst$10:cst$11}
      function attrib_value_to_string(encode,a)
       {var match=caml_call1(Xml[26],a);
        switch(match[0])
         {case 0:
           var f=match[1],_lU_=string_of_number(f);
           return caml_call2(Stdlib_printf[4],_H_,_lU_);
          case 1:var i=match[1];return caml_call2(Stdlib_printf[4],_I_,i);
          case 2:
           var s=match[1],_lV_=caml_call1(encode,s);
           return caml_call2(Stdlib_printf[4],_J_,_lV_);
          default:
           var
            slist=match[2],
            sep=match[1],
            _lW_=separator_to_string(sep),
            _lX_=caml_call1(encode,caml_call2(Stdlib_string[7],_lW_,slist));
           return caml_call2(Stdlib_printf[4],_K_,_lX_)}}
      function attrib_to_string(encode,a)
       {var _lS_=attrib_value_to_string(encode,a),_lT_=caml_call1(Xml[25],a);
        return caml_call3(Stdlib_printf[4],_L_,_lT_,_lS_)}
      function xh_print_attrs(encode,attrs)
       {if(attrs)
         {var
           queue=attrs[2],
           attr=attrs[1],
           _lP_=xh_print_attrs(encode,queue),
           _lQ_=attrib_to_string(encode,attr),
           _lR_=caml_call2(Stdlib[28],cst$12,_lQ_);
          return caml_call2(symbol,caml_call1(O[3],_lR_),_lP_)}
        return O[1]}
      function xh_print_closedtag(encode,tag,attrs)
       {if(0 !== I[1] && ! caml_call2(Stdlib_list[32],tag,I[1]))
         {var
           _lK_=caml_call2(Stdlib[28],tag,cst$15),
           _lL_=caml_call2(Stdlib[28],cst$16,_lK_),
           _lM_=caml_call1(O[3],_lL_),
           _lN_=xh_print_attrs(encode,attrs),
           _lO_=caml_call2(Stdlib[28],cst$17,tag);
          return caml_call2
                  (symbol,caml_call2(symbol,caml_call1(O[3],_lO_),_lN_),_lM_)}
        var
         _lH_=caml_call1(O[3],cst$13),
         _lI_=xh_print_attrs(encode,attrs),
         _lJ_=caml_call2(Stdlib[28],cst$14,tag);
        return caml_call2
                (symbol,caml_call2(symbol,caml_call1(O[3],_lJ_),_lI_),_lH_)}
      function xh_print_tag(encode,tag,attrs,taglist)
       {if(0 === taglist)return xh_print_closedtag(encode,tag,attrs);
        var
         _lA_=caml_call2(Stdlib[28],tag,cst$18),
         _lB_=caml_call2(Stdlib[28],cst$19,_lA_),
         _lC_=caml_call1(O[3],_lB_),
         _lD_=xh_print_taglist(encode,taglist),
         _lE_=caml_call1(O[3],cst$20),
         _lF_=xh_print_attrs(encode,attrs),
         _lG_=caml_call2(Stdlib[28],cst$21,tag);
        return caml_call2
                (symbol,
                 caml_call2
                  (symbol,
                   caml_call2
                    (symbol,caml_call2(symbol,caml_call1(O[3],_lG_),_lF_),_lE_),
                   _lD_),
                 _lC_)}
      function print_nodes(encode,name,xh_attrs,xh_taglist,queue)
       {var _lz_=xh_print_taglist(encode,queue);
        return caml_call2
                (symbol,xh_print_tag(encode,name,xh_attrs,xh_taglist),_lz_)}
      function xh_print_taglist(encode,taglist)
       {var taglist$0=taglist;
        for(;;)
         {if(taglist$0)
           {var
             queue=taglist$0[2],
             elt=taglist$0[1],
             match=caml_call1(Xml[27],elt);
            if(typeof match === "number")
             {var taglist$0=queue;continue}
            else
             switch(match[0])
              {case 0:
                var
                 texte=match[1],
                 _lp_=xh_print_taglist(encode,queue),
                 _lq_=caml_call1(encode,texte),
                 _lr_=caml_call2(Stdlib[28],_lq_,cst$22),
                 _ls_=caml_call2(Stdlib[28],cst$23,_lr_);
                return caml_call2(symbol,caml_call1(O[3],_ls_),_lp_);
               case 1:
                var texte$0=match[1],_lt_=xh_print_taglist(encode,queue);
                return caml_call2(symbol,caml_call1(O[3],texte$0),_lt_);
               case 2:
                var
                 texte$1=match[1],
                 _lu_=xh_print_taglist(encode,queue),
                 _lv_=caml_call1(encode,texte$1);
                return caml_call2(symbol,caml_call1(O[3],_lv_),_lu_);
               case 3:
                var
                 e=match[1],
                 _lw_=xh_print_taglist(encode,queue),
                 _lx_=caml_call2(Stdlib[28],e,cst$24),
                 _ly_=caml_call2(Stdlib[28],cst$25,_lx_);
                return caml_call2(symbol,caml_call1(O[3],_ly_),_lw_);
               case 4:
                var xh_attrs=match[2],name=match[1];
                return print_nodes(encode,name,xh_attrs,0,queue);
               default:
                var xh_taglist=match[3],xh_attrs$0=match[2],name$0=match[1];
                return print_nodes(encode,name$0,xh_attrs$0,xh_taglist,queue)}}
          return O[1]}}
      function print_list(opt,foret)
       {if(opt)var sth=opt[1],encode=sth;else var encode=encode_unsafe_char;
        var _lo_=xh_print_taglist(encode,foret);
        return caml_call1(O[4],_lo_)}
      return [0,
              symbol,
              separator_to_string,
              attrib_value_to_string,
              attrib_to_string,
              xh_print_attrs,
              xh_print_closedtag,
              xh_print_tag,
              print_nodes,
              xh_print_taglist,
              print_list]}
    function Make_typed(Xml,Typed_xml,O)
     {var P=Make(Xml,[0,Typed_xml[1][7]],O),symbol=O[2];
      function print_list(opt,foret)
       {if(opt)var sth=opt[1],encode=sth;else var encode=encode_unsafe_char;
        var
         _lm_=caml_call2(Stdlib_list[17],Typed_xml[2],foret),
         _ln_=caml_call2(P[9],encode,_lm_);
        return caml_call1(O[4],_ln_)}
      function print(opt,_lf_,doc)
       {if(opt)var sth=opt[1],encode=sth;else var encode=encode_unsafe_char;
        if(_lf_)var sth$0=_lf_[1],advert=sth$0;else var advert=cst$30;
        var
         doc$0=caml_call1(Typed_xml[3],doc),
         match=caml_call1(Xml[27],doc$0),
         switch$0=0;
        if(typeof match !== "number" && 5 === match[0])
         {var
           c=match[3],
           a=match[2],
           n=match[1],
           _ll_=
            function(a)
             {return caml_string_equal(caml_call1(Xml[25],a),cst_xmlns$1)},
           a$0=
            caml_call2(Stdlib_list[29],_ll_,a)
             ?a
             :[0,caml_call2(Xml[6],cst_xmlns$2,Typed_xml[1][5]),a],
           doc$1=caml_call3(Xml[21],[0,a$0],n,c);
          switch$0 = 1}
        if(! switch$0)var doc$1=doc$0;
        var _lg_=caml_call2(P[9],encode,[0,doc$1,0]);
        if(caml_string_notequal(advert,cst$26))
         var
          _lh_=caml_call2(Stdlib[28],advert,cst$27),
          _li_=caml_call2(Stdlib[28],cst$28,_lh_);
        else
         var _li_=cst$29;
        var
         _lj_=caml_call1(O[3],_li_),
         _lk_=
          caml_call2
           (symbol,
            caml_call2(symbol,caml_call1(O[3],Typed_xml[1][6]),_lj_),
            _lg_);
        return caml_call1(O[4],_lk_)}
      return [0,P,symbol,print_list,print]}
    function Simple_output(M)
     {function empty(param){return 0}
      function concat(f1,f2,param){caml_call1(f1,0);return caml_call1(f2,0)}
      function put(s,param){return caml_call1(M[1],s)}
      function make(f){return caml_call1(f,0)}
      return [0,empty,concat,put,make]}
    function Make_simple(Xml,I)
     {function print_list(output)
       {return Make(Xml,I,Simple_output([0,output]))[10]}
      return [0,print_list]}
    function Make_typed_simple(Xml,Typed_xml)
     {function print_list(output)
       {return Make_typed(Xml,Typed_xml,Simple_output([0,output]))[3]}
      function print(output)
       {return Make_typed(Xml,Typed_xml,Simple_output([0,output]))[4]}
      return [0,print_list,print]}
    function _M_(_ld_,_lc_,_lb_)
     {var _le_=Make_typed(_ld_,_lc_,_lb_);return [0,_le_[3],_le_[4]]}
    function _N_(_la_,_k$_,_k__){return [0,Make(_la_,_k$_,_k__)[10]]}
    function _O_(_k9_,_k8_){return [0,Make_fmt(_k9_,_k8_)[17]]}
    var
     Xml_print=
      [0,
       encode_unsafe_char,
       encode_unsafe_char_and_at,
       [0,normalize,normalize_html],
       compose_decl,
       compose_doctype,
       string_of_number,
       pp_number,
       function(Xml,Typed_xml)
        {var P=Make_fmt(Xml,[0,Typed_xml[1][7]]);
         function pp_elt(opt,_k6_,param,fmt,foret)
          {if(opt)
            var sth=opt[1],encode=sth;
           else
            var encode=encode_unsafe_char;
           if(_k6_)var sth$0=_k6_[1],indent=sth$0;else var indent=0;
           var _k7_=caml_call1(Typed_xml[2],foret);
           return caml_call4(P[15],encode,indent,fmt,_k7_)}
         function pp(opt,_k4_,advert,param,fmt,doc$0)
          {if(opt)
            var sth=opt[1],encode=sth;
           else
            var encode=encode_unsafe_char;
           if(_k4_)var sth$0=_k4_[1],indent=sth$0;else var indent=0;
           caml_call2(Stdlib_format[7],fmt,0);
           caml_call3(Stdlib_format[123],fmt,_F_,Typed_xml[1][6]);
           if(advert)
            {var s=advert[1];caml_call3(Stdlib_format[123],fmt,_G_,s)}
           var
            doc=caml_call1(Typed_xml[3],doc$0),
            match=caml_call1(Xml[27],doc),
            switch$0=0;
           if(typeof match !== "number" && 5 === match[0])
            {var
              c=match[3],
              a=match[2],
              n=match[1],
              _k3_=
               function(a)
                {return caml_string_equal(caml_call1(Xml[25],a),cst_xmlns)},
              a$0=
               caml_call2(Stdlib_list[29],_k3_,a)
                ?a
                :[0,caml_call2(Xml[6],cst_xmlns$0,Typed_xml[1][5]),a],
              _k5_=caml_call3(Xml[21],[0,a$0],n,c);
             switch$0 = 1}
           if(! switch$0)var _k5_=doc;
           caml_call4(P[15],encode,indent,fmt,_k5_);
           return caml_call2(Stdlib_format[3],fmt,0)}
         return [0,pp_elt,pp]},
       _O_,
       _N_,
       _M_,
       Make_simple,
       Make_typed_simple];
    caml_register_global(1095,Xml_print,"Xml_print");
    var
     Xml_iter=
      [0,
       function(Xml)
        {function amap1(f,n)
          {var match=caml_call1(Xml[27],n);
           if(typeof match !== "number")
            switch(match[0])
             {case 4:
               var
                attribs=match[2],
                name=match[1],
                _k1_=[0,caml_call2(f,name,attribs)];
               return caml_call2(Xml[20],_k1_,name);
              case 5:
               var
                elts=match[3],
                attribs$0=match[2],
                name$0=match[1],
                _k2_=[0,caml_call2(f,name$0,attribs$0)];
               return caml_call3(Xml[21],_k2_,name$0,elts)
              }
           return n}
         function amap(f,n)
          {var match=caml_call1(Xml[27],n);
           if(typeof match !== "number")
            switch(match[0])
             {case 4:
               var
                attribs=match[2],
                name=match[1],
                _kW_=[0,caml_call2(f,name,attribs)];
               return caml_call2(Xml[20],_kW_,name);
              case 5:
               var
                elts=match[3],
                attribs$0=match[2],
                name$0=match[1],
                _kX_=function(_k0_){return amap(f,_k0_)},
                _kY_=caml_call2(Stdlib_list[17],_kX_,elts),
                _kZ_=[0,caml_call2(f,name$0,attribs$0)];
               return caml_call3(Xml[21],_kZ_,name$0,_kY_)
              }
           return n}
         function add_float_attrib(name,value,param)
          {if(param)
            {var tail=param[2],head=param[1];
             return caml_string_equal(caml_call1(Xml[25],head),name)
                     ?[0,caml_call2(Xml[4],name,value),tail]
                     :[0,head,add_float_attrib(name,value,tail)]}
           return [0,caml_call2(Xml[4],name,value),0]}
         function map_float_attrib(is_attrib,f,l)
          {function aux(head)
            {var match=caml_call1(Xml[26],head);
             if(0 === match[0])
              {var value=match[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {var _kU_=caml_call1(f,value),_kV_=caml_call1(Xml[25],head);
                 return caml_call2(Xml[4],_kV_,_kU_)}}
             return head}
           return caml_call2(Stdlib_list[17],aux,l)}
         function add_int_attrib(name,value,param)
          {if(param)
            {var tail=param[2],head=param[1];
             return caml_string_equal(caml_call1(Xml[25],head),name)
                     ?[0,caml_call2(Xml[5],name,value),tail]
                     :[0,head,add_int_attrib(name,value,tail)]}
           return [0,caml_call2(Xml[5],name,value),0]}
         function rm_attrib(is_attrib,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var tail=param$0[2],head=param$0[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {var param$0=tail;continue}
               return [0,head,rm_attrib(is_attrib,tail)]}
             return 0}}
         function map_int_attrib(is_attrib,f,l)
          {function aux(head)
            {var match=caml_call1(Xml[26],head);
             if(1 === match[0])
              {var value=match[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {var _kS_=caml_call1(f,value),_kT_=caml_call1(Xml[25],head);
                 return caml_call2(Xml[5],_kT_,_kS_)}}
             return head}
           return caml_call2(Stdlib_list[17],aux,l)}
         function add_string_attrib(name,value,param)
          {if(param)
            {var tail=param[2],head=param[1];
             return caml_string_equal(caml_call1(Xml[25],head),name)
                     ?[0,caml_call2(Xml[6],name,value),tail]
                     :[0,head,add_string_attrib(name,value,tail)]}
           return [0,caml_call2(Xml[6],name,value),0]}
         function map_string_attrib(is_attrib,f,l)
          {function aux(head)
            {var match=caml_call1(Xml[26],head);
             if(2 === match[0])
              {var value=match[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {var _kQ_=caml_call1(f,value),_kR_=caml_call1(Xml[25],head);
                 return caml_call2(Xml[6],_kR_,_kQ_)}}
             return head}
           return caml_call2(Stdlib_list[17],aux,l)}
         function add_space_sep_attrib(name,value,param)
          {if(param)
            {var tail=param[2],head=param[1],match=caml_call1(Xml[26],head);
             if(3 === match[0] && 0 === match[1])
              {var values=match[2];
               if(caml_string_equal(caml_call1(Xml[25],head),name))
                return [0,caml_call2(Xml[7],name,[0,value,values]),tail]}
             return caml_string_equal(caml_call1(Xml[25],head),name)
                     ?[0,caml_call2(Xml[7],name,[0,value,0]),tail]
                     :[0,head,add_space_sep_attrib(name,value,tail)]}
           return [0,caml_call2(Xml[7],name,[0,value,0]),0]}
         function add_comma_sep_attrib(name,value,param)
          {if(param)
            {var tail=param[2],head=param[1],match=caml_call1(Xml[26],head);
             if(3 === match[0] && 0 !== match[1])
              {var values=match[2];
               if(caml_string_equal(caml_call1(Xml[25],head),name))
                return [0,caml_call2(Xml[8],name,[0,value,values]),tail]}
             return caml_string_equal(caml_call1(Xml[25],head),name)
                     ?[0,caml_call2(Xml[8],name,[0,value,0]),tail]
                     :[0,head,add_comma_sep_attrib(name,value,tail)]}
           return [0,caml_call2(Xml[8],name,[0,value,0]),0]}
         function rm_attrib_from_list(is_attrib,is_value,param)
          {if(param)
            {var tail=param[2],head=param[1],match=caml_call1(Xml[26],head);
             if(3 === match[0])
              {var values=match[2],sep=match[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {var
                  _kN_=function(v){return 1 - caml_call1(is_value,v)},
                  values$0=caml_call2(Stdlib_list[36],_kN_,values);
                 if(values$0)
                  {if(0 === sep)
                    {var _kO_=caml_call1(Xml[25],head);
                     return [0,caml_call2(Xml[7],_kO_,values$0),tail]}
                   var _kP_=caml_call1(Xml[25],head);
                   return [0,caml_call2(Xml[8],_kP_,values$0),tail]}
                 return tail}}
             return [0,head,rm_attrib_from_list(is_attrib,is_value,tail)]}
           return 0}
         function map_string_attrib_in_list(is_attrib,f,l)
          {function aux(head)
            {var match=caml_call1(Xml[26],head);
             if(3 === match[0])
              {var values=match[2],sep=match[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {if(0 === sep)
                  {var
                    _kJ_=caml_call2(Stdlib_list[17],f,values),
                    _kK_=caml_call1(Xml[25],head);
                   return caml_call2(Xml[7],_kK_,_kJ_)}
                 var
                  _kL_=caml_call2(Stdlib_list[17],f,values),
                  _kM_=caml_call1(Xml[25],head);
                 return caml_call2(Xml[8],_kM_,_kL_)}}
             return head}
           return caml_call2(Stdlib_list[17],aux,l)}
         function fold
          (of_empty,
           of_comment,
           of_txt,
           of_encodedpcdata,
           of_entity,
           of_leaf,
           of_node,
           n)
          {var match=caml_call1(Xml[27],n);
           if(typeof match === "number")
            return caml_call1(of_empty,0);
           else
            switch(match[0])
             {case 0:var s=match[1];return caml_call1(of_comment,s);
              case 1:var s$0=match[1];return caml_call1(of_encodedpcdata,s$0);
              case 2:var s$1=match[1];return caml_call1(of_txt,s$1);
              case 3:var s$2=match[1];return caml_call1(of_entity,s$2);
              case 4:
               var attribs=match[2],name=match[1];
               return caml_call2(of_leaf,name,attribs);
              default:
               var
                elts=match[3],
                attribs$0=match[2],
                name$0=match[1],
                _kH_=
                 function(_kI_)
                  {return fold
                           (of_empty,
                            of_comment,
                            of_txt,
                            of_encodedpcdata,
                            of_entity,
                            of_leaf,
                            of_node,
                            _kI_)};
               return caml_call3
                       (of_node,
                        name$0,
                        attribs$0,
                        caml_call2(Stdlib_list[17],_kH_,elts))}}
         function all_entities(elt)
          {function f(param){return 0}
           function _kG_(ename,attribs,elts)
            {return caml_call1(Stdlib_list[14],elts)}
           return fold(f,f,f,f,f,function(ename,attribs){return 0},_kG_,elt)}
         function flatmap(f,l)
          {var _kF_=caml_call2(Stdlib_list[17],f,l);
           return caml_call1(Stdlib_list[13],_kF_)}
         function translate
          (root_leaf,root_node,sub_leaf,sub_node,update_state,state,n)
          {function translate(state,n)
            {var match=caml_call1(Xml[27],n);
             if(typeof match !== "number")
              switch(match[0])
               {case 4:
                 var attribs=match[2],name=match[1];
                 return caml_call3(sub_leaf,state,name,attribs);
                case 5:
                 var
                  elts=match[3],
                  attribs$0=match[2],
                  name$0=match[1],
                  _kD_=caml_call3(update_state,name$0,attribs$0,state);
                 return caml_call4
                         (sub_node,
                          state,
                          name$0,
                          attribs$0,
                          flatmap(function(_kE_){return translate(_kD_,_kE_)},elts))
                }
             return [0,n,0]}
           var match=caml_call1(Xml[27],n);
           if(typeof match !== "number")
            switch(match[0])
             {case 4:
               var attribs=match[2],name=match[1];
               return caml_call2(root_leaf,name,attribs);
              case 5:
               var elts=match[3],attribs$0=match[2],name$0=match[1];
               return caml_call3
                       (root_node,
                        name$0,
                        attribs$0,
                        flatmap(function(_kC_){return translate(state,_kC_)},elts))
              }
           return n}
         return [0,
                 amap,
                 amap1,
                 rm_attrib,
                 rm_attrib_from_list,
                 map_int_attrib,
                 map_float_attrib,
                 map_string_attrib,
                 map_string_attrib_in_list,
                 add_int_attrib,
                 add_float_attrib,
                 add_string_attrib,
                 add_comma_sep_attrib,
                 add_space_sep_attrib,
                 fold,
                 all_entities,
                 translate]}];
    caml_register_global(1096,Xml_iter,"Xml_iter");
    function string_of_iri(x){return caml_call2(Stdlib_printf[4],_P_,x)}
    function to_string(f,param)
     {var unit=param[2],n=param[1];
      if(unit)
       var unit$0=unit[1],_kB_=caml_call1(f,unit$0);
      else
       var _kB_=cst$31;
      return caml_call3(Stdlib_printf[4],_Q_,n,_kB_)}
    function angle_names(param)
     {return 4099509 === param?cst_rad:793050094 <= param?cst_grad:cst_deg}
    function string_of_angle(a){return to_string(angle_names,a)}
    function length_names(param)
     {return 16389 <= param
              ?17280 === param
                ?cst_mm
                :17956 <= param
                  ?17960 <= param?cst_px:cst_pt
                  :17939 <= param?cst_pc:cst_in
              :15496 <= param
                ?15507 <= param?cst_ex:cst_em
                :15050 <= param?cst_cm:cst$32}
    function string_of_length(a){return to_string(length_names,a)}
    function list(opt,f,l)
     {if(opt)var sth=opt[1],sep=sth;else var sep=cst$33;
      var _kA_=caml_call2(Stdlib_list[17],f,l);
      return caml_call2(Stdlib_string[7],sep,_kA_)}
    function string_of_paint_whitout_icc(param)
     {if(typeof param === "number")
       return 870530776 <= param?cst_none:cst_currentColor;
      var match=param[2],icc=match[2],c=match[1];
      if(icc)
       {var x=icc[1],_kz_=caml_call2(Stdlib[28],sep,x);
        return caml_call2(Stdlib[28],c,_kz_)}
      return c}
    function string_of_paint(c)
     {if(typeof c !== "number" && 3652393 <= c[1])
       {var _kt_=c[2],_ku_=_kt_[2],_kv_=_kt_[1];
        if(_ku_)
         {var
           b=_ku_[1],
           _kw_=string_of_paint_whitout_icc(b),
           _kx_=caml_call2(Stdlib[28],cst$34,_kw_),
           _ky_=string_of_iri(_kv_);
          return caml_call2(Stdlib[28],_ky_,_kx_)}
        return string_of_iri(_kv_)}
      return string_of_paint_whitout_icc(c)}
    function Make_with_wrapped_functions(Xml,C)
     {var
       doctype=compose_doctype(cst_svg,_R_),
       Info=[0,content_type,0,0,version,standard,namespace,doctype],
       _fk_=Xml[2],
       _fl_=Xml[3];
      function tot(x){return x}
      function totl(x){return x}
      function toelt(x){return x}
      function toeltl(x){return x}
      function to_attrib(x){return x}
      function nullary(tag,a,param)
       {var _ks_=caml_call1(Xml[1][3],0);
        return caml_call3(Xml[21],a,tag,_ks_)}
      function unary(tag,a,elt)
       {var _kr_=caml_call1(Xml[1][4],elt);
        return caml_call3(Xml[21],a,tag,_kr_)}
      function star(tag,a,elts){return caml_call3(Xml[21],a,tag,elts)}
      function to_xmlattribs(x){return x}
      var _fm_=Xml[4],_fn_=Xml[6],_fo_=C[10],_fp_=C[10],_fq_=C[11];
      function user_attrib(f,name,v)
       {var _kq_=caml_call2(Xml[1][2],f,v);
        return caml_call2(Xml[6],name,_kq_)}
      var _fr_=Xml[6];
      function metadata(a,children)
       {return caml_call3(Xml[21],a,cst_metadata,children)}
      function foreignObject(a,children)
       {return caml_call3(Xml[21],a,cst_foreignObject,children)}
      function pcdata(s){return caml_call1(Xml[17],s)}
      var
       a_version=caml_call1(_fn_,cst_version),
       a_baseProfile=caml_call1(_fn_,cst_baseProfile);
      function a_x(_kp_){return user_attrib(_fo_,cst_x,_kp_)}
      function a_y(_ko_){return user_attrib(_fo_,cst_y,_ko_)}
      function a_width(_kn_){return user_attrib(_fp_,cst_width,_kn_)}
      function a_height(_km_){return user_attrib(_fp_,cst_height,_km_)}
      var
       a_preserveAspectRatio=caml_call1(_fn_,cst_preserveAspectRatio),
       a_contentScriptType=caml_call1(_fn_,cst_contentScriptType),
       a_contentStyleType=caml_call1(_fn_,cst_contentStyleType);
      function a_zoomAndPan(x){return user_attrib(C[4],cst_zoomAndSpan,x)}
      var
       a_href=caml_call1(_fn_,cst_href),
       a_xlink_href=caml_call1(_fn_,cst_xlink_href),
       a_requiredFeatures=caml_call1(Xml[7],cst_requiredFeatures),
       a_requiredExtensions=caml_call1(Xml[7],cst_requiredExtension),
       a_systemLanguage=caml_call1(Xml[8],cst_systemLanguage),
       _fs_=C[3];
      function a_externalRessourcesRequired(_kl_)
       {return user_attrib(_fs_,cst_externalRessourcesRequired,_kl_)}
      var a_id=caml_call1(_fn_,cst_id);
      function a_user_data(name)
       {return caml_call1(_fn_,caml_call2(Stdlib[28],cst_data,name))}
      var
       a_xml_base=caml_call1(_fn_,cst_xml_base),
       a_xml_lang=caml_call1(_fn_,cst_xml_lang);
      function a_xml_space(x){return user_attrib(C[4],cst_xml_space,x)}
      var
       a_type=caml_call1(_fn_,cst_type),
       a_media=caml_call1(Xml[8],cst_media),
       a_xlink_title=caml_call1(_fn_,cst_xlink_title),
       a_class=caml_call1(Xml[7],cst_class),
       a_style=caml_call1(_fn_,cst_style),
       _ft_=C[21];
      function a_transform(_kk_){return user_attrib(_ft_,cst_transform,_kk_)}
      var _fu_=C[7];
      function a_viewBox(_kj_){return user_attrib(_fu_,cst_viewBox,_kj_)}
      var
       a_d=caml_call1(_fn_,cst_d),
       a_pathLength=caml_call1(_fm_,cst_pathLength);
      function a_rx(_ki_){return user_attrib(_fp_,cst_rx,_ki_)}
      function a_ry(_kh_){return user_attrib(_fp_,cst_ry,_kh_)}
      function a_cx(_kg_){return user_attrib(_fp_,cst_cx,_kg_)}
      function a_cy(_kf_){return user_attrib(_fp_,cst_cy,_kf_)}
      function a_r(_ke_){return user_attrib(_fp_,cst_r,_ke_)}
      function a_x1(_kd_){return user_attrib(_fo_,cst_x1,_kd_)}
      function a_y1(_kc_){return user_attrib(_fo_,cst_y1,_kc_)}
      function a_x2(_kb_){return user_attrib(_fo_,cst_x2,_kb_)}
      function a_y2(_ka_){return user_attrib(_fo_,cst_y2,_ka_)}
      var _fv_=C[5];
      function a_points(_j$_){return user_attrib(_fv_,cst_points,_j$_)}
      function a_x_list(_j__){return user_attrib(_fq_,cst_x$0,_j__)}
      function a_y_list(_j9_){return user_attrib(_fq_,cst_y$0,_j9_)}
      var _fw_=C[12];
      function a_dx(_j8_){return user_attrib(_fw_,cst_dx,_j8_)}
      var _fx_=C[12];
      function a_dy(_j7_){return user_attrib(_fx_,cst_dy,_j7_)}
      function a_dx_list(_j6_){return user_attrib(_fq_,cst_dx$0,_j6_)}
      function a_dy_list(_j5_){return user_attrib(_fq_,cst_dy$0,_j5_)}
      function a_lengthAdjust(x){return user_attrib(C[4],cst_lengthAdjust,x)}
      function a_textLength(_j4_)
       {return user_attrib(_fp_,cst_textLength,_j4_)}
      function a_text_anchor(x){return user_attrib(C[4],cst_text_anchor,x)}
      function a_text_decoration(x)
       {return user_attrib(C[4],cst_text_decoration,x)}
      function a_text_rendering(x)
       {return user_attrib(C[4],cst_text_rendering,x)}
      var _fy_=C[14];
      function a_rotate(_j3_){return user_attrib(_fy_,cst_rotate,_j3_)}
      function a_startOffset(_j2_)
       {return user_attrib(_fp_,cst_startOffset,_j2_)}
      function a_method(x){return user_attrib(C[4],cst_method,x)}
      function a_spacing(x){return user_attrib(C[4],cst_spacing,x)}
      var
       a_glyphRef=caml_call1(_fn_,cst_glyphRef),
       a_format=caml_call1(_fn_,cst_format);
      function a_markerUnits(x){return user_attrib(C[4],cst_markerUnits,x)}
      function a_refX(_j1_){return user_attrib(_fo_,cst_refX,_j1_)}
      function a_refY(_j0_){return user_attrib(_fo_,cst_refY,_j0_)}
      function a_markerWidth(_jZ_)
       {return user_attrib(_fp_,cst_markerWidth,_jZ_)}
      function a_markerHeight(_jY_)
       {return user_attrib(_fp_,cst_markerHeight,_jY_)}
      function a_orient(x){return user_attrib(C[17],cst_orient,x)}
      var a_local=caml_call1(_fn_,cst_local);
      function a_rendering_intent(x)
       {return user_attrib(C[4],cst_rendering_intent,x)}
      function a_gradientUnits(x)
       {return user_attrib(C[4],cst_gradientUnits,x)}
      var _fz_=C[21];
      function a_gradientTransform(_jX_)
       {return user_attrib(_fz_,cst_gradientTransform,_jX_)}
      function a_spreadMethod(x){return user_attrib(C[4],cst_spreadMethod,x)}
      function a_fx(_jW_){return user_attrib(_fo_,cst_fx,_jW_)}
      function a_fy(_jV_){return user_attrib(_fo_,cst_fy,_jV_)}
      function a_offset(x){return user_attrib(C[16],cst_offset,x)}
      function a_patternUnits(x){return user_attrib(C[4],cst_patternUnits,x)}
      function a_patternContentUnits(x)
       {return user_attrib(C[4],cst_patternContentUnits,x)}
      function a_patternTransform(x)
       {return user_attrib(C[21],cst_patternTransform,x)}
      function a_clipPathUnits(x)
       {return user_attrib(C[4],cst_clipPathUnits,x)}
      function a_maskUnits(x){return user_attrib(C[4],cst_maskUnits,x)}
      function a_maskContentUnits(x)
       {return user_attrib(C[4],cst_maskContentUnits,x)}
      function a_primitiveUnits(x)
       {return user_attrib(C[4],cst_primitiveUnits,x)}
      var _fA_=C[13];
      function a_filterRes(_jU_)
       {return user_attrib(_fA_,cst_filterResUnits,_jU_)}
      var a_result=caml_call1(_fn_,cst_result);
      function a_in(x){return user_attrib(C[8],cst_in$0,x)}
      function a_in2(x){return user_attrib(C[8],cst_in2,x)}
      var
       a_azimuth=caml_call1(_fm_,cst_azimuth),
       a_elevation=caml_call1(_fm_,cst_elevation),
       a_pointsAtX=caml_call1(_fm_,cst_pointsAtX),
       a_pointsAtY=caml_call1(_fm_,cst_pointsAtY),
       a_pointsAtZ=caml_call1(_fm_,cst_pointsAtZ),
       a_specularExponent=caml_call1(_fm_,cst_specularExponent),
       a_specularConstant=caml_call1(_fm_,cst_specularConstant),
       a_limitingConeAngle=caml_call1(_fm_,cst_limitingConeAngle);
      function a_mode(x){return user_attrib(C[4],cst_mode,x)}
      function a_feColorMatrix_type(x){return user_attrib(C[4],cst_type$0,x)}
      var _fB_=C[14];
      function a_values(_jT_){return user_attrib(_fB_,cst_values,_jT_)}
      function a_transfer_type(x){return user_attrib(C[4],cst_type$1,x)}
      var _fC_=C[14];
      function a_tableValues(_jS_)
       {return user_attrib(_fC_,cst_tableValues,_jS_)}
      var _fD_=C[12];
      function a_intercept(_jR_){return user_attrib(_fD_,cst_intercept,_jR_)}
      var _fE_=C[12];
      function a_amplitude(_jQ_){return user_attrib(_fE_,cst_amplitude,_jQ_)}
      var _fF_=C[12];
      function a_exponent(_jP_){return user_attrib(_fF_,cst_exponent,_jP_)}
      var _fG_=C[12];
      function a_transfer_offset(_jO_)
       {return user_attrib(_fG_,cst_offset$0,_jO_)}
      function a_feComposite_operator(x)
       {return user_attrib(C[4],cst_operator,x)}
      var _fH_=C[12];
      function a_k1(_jN_){return user_attrib(_fH_,cst_k1,_jN_)}
      var _fI_=C[12];
      function a_k2(_jM_){return user_attrib(_fI_,cst_k2,_jM_)}
      var _fJ_=C[12];
      function a_k3(_jL_){return user_attrib(_fJ_,cst_k3,_jL_)}
      var _fK_=C[12];
      function a_k4(_jK_){return user_attrib(_fK_,cst_k4,_jK_)}
      var _fL_=C[13];
      function a_order(_jJ_){return user_attrib(_fL_,cst_order,_jJ_)}
      var _fM_=C[14];
      function a_kernelMatrix(_jI_)
       {return user_attrib(_fM_,cst_kernelMatrix,_jI_)}
      var _fN_=C[12];
      function a_divisor(_jH_){return user_attrib(_fN_,cst_divisor,_jH_)}
      var _fO_=C[12];
      function a_bias(_jG_){return user_attrib(_fO_,cst_bias,_jG_)}
      var _fP_=C[13];
      function a_kernelUnitLength(_jF_)
       {return user_attrib(_fP_,cst_kernelUnitLength,_jF_)}
      var _fQ_=C[9];
      function a_targetX(_jE_){return user_attrib(_fQ_,cst_targetX,_jE_)}
      var _fR_=C[9];
      function a_targetY(_jD_){return user_attrib(_fR_,cst_targetY,_jD_)}
      function a_edgeMode(x){return user_attrib(C[4],cst_targetY$0,x)}
      var _fS_=C[3];
      function a_preserveAlpha(_jC_)
       {return user_attrib(_fS_,cst_preserveAlpha,_jC_)}
      var _fT_=C[12];
      function a_surfaceScale(_jB_)
       {return user_attrib(_fT_,cst_surfaceScale,_jB_)}
      var _fU_=C[12];
      function a_diffuseConstant(_jA_)
       {return user_attrib(_fU_,cst_diffuseConstant,_jA_)}
      var _fV_=C[12];
      function a_scale(_jz_){return user_attrib(_fV_,cst_scale,_jz_)}
      function a_xChannelSelector(x)
       {return user_attrib(C[4],cst_xChannelSelector,x)}
      function a_yChannelSelector(x)
       {return user_attrib(C[4],cst_yChannelSelector,x)}
      var _fW_=C[13];
      function a_stdDeviation(_jy_)
       {return user_attrib(_fW_,cst_stdDeviation,_jy_)}
      function a_feMorphology_operator(x)
       {return user_attrib(C[4],cst_operator$0,x)}
      var _fX_=C[13];
      function a_radius(_jx_){return user_attrib(_fX_,cst_radius,_jx_)}
      var _fY_=C[13];
      function a_baseFrenquency(_jw_)
       {return user_attrib(_fY_,cst_baseFrequency,_jw_)}
      var _fZ_=C[9];
      function a_numOctaves(_jv_)
       {return user_attrib(_fZ_,cst_numOctaves,_jv_)}
      var _f0_=C[12];
      function a_seed(_ju_){return user_attrib(_f0_,cst_seed,_ju_)}
      function a_stitchTiles(x){return user_attrib(C[4],cst_stitchTiles,x)}
      function a_feTurbulence_type(x){return user_attrib(C[4],cst_type$2,x)}
      function a_xlink_show(x){return user_attrib(C[4],cst_xlink_show,x)}
      function a_xlink_actuate(x)
       {return user_attrib(C[4],cst_xlink_actuate,x)}
      var
       a_target=caml_call1(_fn_,cst_xlink_target),
       a_viewTarget=caml_call1(_fn_,cst_viewTarget),
       a_attributeName=caml_call1(_fn_,cst_attributeName);
      function a_attributeType(x)
       {return user_attrib(C[4],cst_attributeType,x)}
      var
       a_begin=caml_call1(_fn_,cst_begin),
       a_dur=caml_call1(_fn_,cst_dur),
       a_min=caml_call1(_fn_,cst_min),
       a_max=caml_call1(_fn_,cst_max);
      function a_restart(x){return user_attrib(C[4],cst_restart,x)}
      var
       a_repeatCount=caml_call1(_fn_,cst_repeatCount),
       a_repeatDur=caml_call1(_fn_,cst_repeatDur),
       _f1_=C[18];
      function a_fill(_jt_){return user_attrib(_f1_,cst_fill,_jt_)}
      function a_animation_fill(x){return user_attrib(C[4],cst_fill$0,x)}
      function a_calcMode(x){return user_attrib(C[4],cst_calcMode,x)}
      var
       a_animation_values=caml_call1(Xml[8],cst_values$0),
       a_keyTimes=caml_call1(Xml[8],cst_keyTimes),
       a_keySplines=caml_call1(Xml[8],cst_keySplines),
       a_from=caml_call1(_fn_,cst_from),
       a_to=caml_call1(_fn_,cst_to),
       a_by=caml_call1(_fn_,cst_by);
      function a_additive(x){return user_attrib(C[4],cst_additive,x)}
      function a_accumulate(x){return user_attrib(C[4],cst_accumulate,x)}
      var _f2_=C[15];
      function a_keyPoints(_js_){return user_attrib(_f2_,cst_keyPoints,_js_)}
      var a_path=caml_call1(_fn_,cst_path),_f3_=C[4];
      function a_animateTransform_type(_jr_)
       {return user_attrib(_f3_,cst_type$3,_jr_)}
      var _f4_=C[12];
      function a_horiz_origin_x(_jq_)
       {return user_attrib(_f4_,cst_horiz_origin_x,_jq_)}
      var _f5_=C[12];
      function a_horiz_origin_y(_jp_)
       {return user_attrib(_f5_,cst_horiz_origin_y,_jp_)}
      var _f6_=C[12];
      function a_horiz_adv_x(_jo_)
       {return user_attrib(_f6_,cst_horiz_adv_x,_jo_)}
      var _f7_=C[12];
      function a_vert_origin_x(_jn_)
       {return user_attrib(_f7_,cst_vert_origin_x,_jn_)}
      var _f8_=C[12];
      function a_vert_origin_y(_jm_)
       {return user_attrib(_f8_,cst_vert_origin_y,_jm_)}
      var _f9_=C[12];
      function a_vert_adv_y(_jl_)
       {return user_attrib(_f9_,cst_vert_adv_y,_jl_)}
      var
       a_unicode=caml_call1(_fn_,cst_unicode),
       a_glyph_name=caml_call1(_fn_,cst_glyphname);
      function a_orientation(x){return user_attrib(C[4],cst_orientation,x)}
      function a_arabic_form(x){return user_attrib(C[4],cst_arabic_form,x)}
      var
       a_lang=caml_call1(_fn_,cst_lang),
       a_u1=caml_call1(_fn_,cst_u1),
       a_u2=caml_call1(_fn_,cst_u2),
       a_g1=caml_call1(_fn_,cst_g1),
       a_g2=caml_call1(_fn_,cst_g2),
       a_k=caml_call1(_fn_,cst_k),
       a_font_family=caml_call1(_fn_,cst_font_family),
       a_font_style=caml_call1(_fn_,cst_font_style),
       a_font_variant=caml_call1(_fn_,cst_font_variant),
       a_font_weight=caml_call1(_fn_,cst_font_weight),
       a_font_stretch=caml_call1(_fn_,cst_font_stretch),
       a_font_size=caml_call1(_fn_,cst_font_size),
       a_unicode_range=caml_call1(_fn_,cst_unicode_range),
       a_units_per_em=caml_call1(_fn_,cst_units_per_em),
       _f__=C[12];
      function a_stemv(_jk_){return user_attrib(_f__,cst_stemv,_jk_)}
      var _f$_=C[12];
      function a_stemh(_jj_){return user_attrib(_f$_,cst_stemh,_jj_)}
      var _ga_=C[12];
      function a_slope(_ji_){return user_attrib(_ga_,cst_slope,_ji_)}
      var _gb_=C[12];
      function a_cap_height(_jh_)
       {return user_attrib(_gb_,cst_cap_height,_jh_)}
      var _gc_=C[12];
      function a_x_height(_jg_){return user_attrib(_gc_,cst_x_height,_jg_)}
      var _gd_=C[12];
      function a_accent_height(_jf_)
       {return user_attrib(_gd_,cst_accent_height,_jf_)}
      var _ge_=C[12];
      function a_ascent(_je_){return user_attrib(_ge_,cst_ascent,_je_)}
      var
       a_widths=caml_call1(_fn_,cst_widths),
       a_bbox=caml_call1(_fn_,cst_bbox),
       _gf_=C[12];
      function a_ideographic(_jd_)
       {return user_attrib(_gf_,cst_ideographic,_jd_)}
      var _gg_=C[12];
      function a_alphabetic(_jc_)
       {return user_attrib(_gg_,cst_alphabetic,_jc_)}
      var _gh_=C[12];
      function a_mathematical(_jb_)
       {return user_attrib(_gh_,cst_mathematical,_jb_)}
      var _gi_=C[12];
      function a_hanging(_ja_){return user_attrib(_gi_,cst_hanging,_ja_)}
      var _gj_=C[12];
      function a_videographic(_i$_)
       {return user_attrib(_gj_,cst_v_ideographic,_i$_)}
      var _gk_=C[12];
      function a_v_alphabetic(_i__)
       {return user_attrib(_gk_,cst_v_alphabetic,_i__)}
      var _gl_=C[12];
      function a_v_mathematical(_i9_)
       {return user_attrib(_gl_,cst_v_mathematical,_i9_)}
      var _gm_=C[12];
      function a_v_hanging(_i8_){return user_attrib(_gm_,cst_v_hanging,_i8_)}
      var _gn_=C[12];
      function a_underline_position(_i7_)
       {return user_attrib(_gn_,cst_underline_position,_i7_)}
      var _go_=C[12];
      function a_underline_thickness(_i6_)
       {return user_attrib(_go_,cst_underline_thickness,_i6_)}
      var _gp_=C[12];
      function a_strikethrough_position(_i5_)
       {return user_attrib(_gp_,cst_strikethrough_position,_i5_)}
      var _gq_=C[12];
      function a_strikethrough_thickness(_i4_)
       {return user_attrib(_gq_,cst_strikethrough_thickness,_i4_)}
      var _gr_=C[12];
      function a_overline_position(_i3_)
       {return user_attrib(_gr_,cst_overline_position,_i3_)}
      var _gs_=C[12];
      function a_overline_thickness(_i2_)
       {return user_attrib(_gs_,cst_overline_thickness,_i2_)}
      var
       a_string=caml_call1(_fn_,cst_string),
       a_name=caml_call1(_fn_,cst_name);
      function a_alignment_baseline(x)
       {return user_attrib(C[2],cst_alignment_baseline,x)}
      function a_dominant_baseline(x)
       {return user_attrib(C[6],cst_dominant_baseline,x)}
      var
       a_onabort=caml_call1(Xml[9],cst_onabort),
       a_onactivate=caml_call1(Xml[9],cst_onactivate),
       a_onbegin=caml_call1(Xml[9],cst_onbegin),
       a_onend=caml_call1(Xml[9],cst_onend),
       a_onerror=caml_call1(Xml[9],cst_onerror),
       a_onfocusin=caml_call1(Xml[9],cst_onfocusin),
       a_onfocusout=caml_call1(Xml[9],cst_onfocusout),
       a_onload=caml_call1(Xml[9],cst_onload),
       a_onrepeat=caml_call1(Xml[9],cst_onrepeat),
       a_onresize=caml_call1(Xml[9],cst_onresize),
       a_onscroll=caml_call1(Xml[9],cst_onscroll),
       a_onunload=caml_call1(Xml[9],cst_onunload),
       a_onzoom=caml_call1(Xml[9],cst_onzoom),
       a_onclick=caml_call1(Xml[10],cst_onclick),
       a_onmousedown=caml_call1(Xml[10],cst_onmousedown),
       a_onmouseup=caml_call1(Xml[10],cst_onmouseup),
       a_onmouseover=caml_call1(Xml[10],cst_onmouseover),
       a_onmouseout=caml_call1(Xml[10],cst_onmouseout),
       a_onmousemove=caml_call1(Xml[10],cst_onmousemove),
       a_ontouchstart=caml_call1(Xml[12],cst_ontouchstart),
       a_ontouchend=caml_call1(Xml[12],cst_ontouchend),
       a_ontouchmove=caml_call1(Xml[12],cst_ontouchmove),
       a_ontouchcancel=caml_call1(Xml[12],cst_ontouchcancel),
       a_stop_color=caml_call1(_fr_,cst_stop_color),
       _gt_=C[12];
      function a_stop_opacity(_i1_)
       {return user_attrib(_gt_,cst_stop_opacity,_i1_)}
      var _gu_=C[18];
      function a_stroke(_i0_){return user_attrib(_gu_,cst_stroke,_i0_)}
      var _gv_=C[10];
      function a_stroke_width(_iZ_)
       {return user_attrib(_gv_,cst_stroke_width,_iZ_)}
      function a_stroke_linecap(x)
       {return user_attrib(C[4],cst_stroke_linecap,x)}
      function a_stroke_linejoin(x)
       {return user_attrib(C[4],cst_stroke_linejoin,x)}
      var _gw_=C[12];
      function a_stroke_miterlimit(_iY_)
       {return user_attrib(_gw_,cst_stroke_miterlimit,_iY_)}
      function a_stroke_dasharray(x)
       {return user_attrib(C[19],cst_stroke_dasharray,x)}
      var _gx_=C[10];
      function a_stroke_dashoffset(_iX_)
       {return user_attrib(_gx_,cst_stroke_dashoffset,_iX_)}
      var _gy_=C[12];
      function a_stroke_opacity(_iW_)
       {return user_attrib(_gy_,cst_stroke_opacity,_iW_)}
      function svg(opt,children)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var
         _iV_=
          [0,
           caml_call2
            (_fn_,
             cst_xmlns_xlink,
             caml_call1(Xml[1][1],cst_http_www_w3_org_1999_xlink)),
           a],
         attribs=
          [0,
           caml_call2
            (_fn_,
             cst_xmlns$3,
             caml_call1(Xml[1][1],cst_http_www_w3_org_2000_svg)),
           _iV_];
        return star(cst_svg$0,[0,attribs],children)}
      function g(_iT_,_iU_){return star(cst_g,_iT_,_iU_)}
      function defs(_iR_,_iS_){return star(cst_defs,_iR_,_iS_)}
      function desc(_iP_,_iQ_){return unary(cst_desc,_iP_,_iQ_)}
      function title(_iN_,_iO_){return unary(cst_title,_iN_,_iO_)}
      function symbol(_iL_,_iM_){return star(cst_symbol,_iL_,_iM_)}
      function use(_iJ_,_iK_){return star(cst_use,_iJ_,_iK_)}
      function image(_iH_,_iI_){return star(cst_image,_iH_,_iI_)}
      function switch$0(_iF_,_iG_){return star(cst_switch,_iF_,_iG_)}
      function style(_iD_,_iE_){return unary(cst_style$0,_iD_,_iE_)}
      function path(_iB_,_iC_){return star(cst_path$0,_iB_,_iC_)}
      function rect(_iz_,_iA_){return star(cst_rect,_iz_,_iA_)}
      function circle(_ix_,_iy_){return star(cst_circle,_ix_,_iy_)}
      function ellipse(_iv_,_iw_){return star(cst_ellipse,_iv_,_iw_)}
      function line(_it_,_iu_){return star(cst_line,_it_,_iu_)}
      function polyline(_ir_,_is_){return star(cst_polyline,_ir_,_is_)}
      function polygon(_ip_,_iq_){return star(cst_polygon,_ip_,_iq_)}
      function text(_in_,_io_){return star(cst_text,_in_,_io_)}
      function tspan(_il_,_im_){return star(cst_tspan,_il_,_im_)}
      function tref(_ij_,_ik_){return star(cst_tref,_ij_,_ik_)}
      function textPath(_ih_,_ii_){return star(cst_textPath,_ih_,_ii_)}
      function altGlyph(_if_,_ig_){return unary(cst_altGlyph,_if_,_ig_)}
      function altGlyphDef(_id_,_ie_){return unary(cst_altGlyphDef,_id_,_ie_)}
      function altGlyphItem(_ib_,_ic_)
       {return star(cst_altGlyphItem,_ib_,_ic_)}
      function glyphRef(_h$_,_ia_){return nullary(cst_glyphRef$0,_h$_,_ia_)}
      function marker(_h9_,_h__){return star(cst_marker,_h9_,_h__)}
      function color_profile(_h7_,_h8_)
       {return star(cst_color_profile,_h7_,_h8_)}
      function linearGradient(_h5_,_h6_)
       {return star(cst_linearGradient,_h5_,_h6_)}
      function radialGradient(_h3_,_h4_)
       {return star(cst_radialGradient,_h3_,_h4_)}
      function stop(_h1_,_h2_){return star(cst_stop,_h1_,_h2_)}
      function pattern(_hZ_,_h0_){return star(cst_pattern,_hZ_,_h0_)}
      function clipPath(_hX_,_hY_){return star(cst_clipPath,_hX_,_hY_)}
      function filter(_hV_,_hW_){return star(cst_filter,_hV_,_hW_)}
      function feDistantLight(_hT_,_hU_)
       {return star(cst_feDistantLight,_hT_,_hU_)}
      function fePointLight(_hR_,_hS_)
       {return star(cst_fePointLight,_hR_,_hS_)}
      function feSpotLight(_hP_,_hQ_){return star(cst_feSpotLight,_hP_,_hQ_)}
      function feBlend(_hN_,_hO_){return star(cst_feBlend,_hN_,_hO_)}
      function feColorMatrix(_hL_,_hM_)
       {return star(cst_feColorMatrix,_hL_,_hM_)}
      function feComponentTransfer(_hJ_,_hK_)
       {return star(cst_feComponentTransfer,_hJ_,_hK_)}
      function feFuncA(_hH_,_hI_){return star(cst_feFuncA,_hH_,_hI_)}
      function feFuncG(_hF_,_hG_){return star(cst_feFuncG,_hF_,_hG_)}
      function feFuncB(_hD_,_hE_){return star(cst_feFuncB,_hD_,_hE_)}
      function feFuncR(_hB_,_hC_){return star(cst_feFuncR,_hB_,_hC_)}
      function feComposite(_hz_,_hA_){return star(cst_feComposite,_hz_,_hA_)}
      function feConvolveMatrix(_hx_,_hy_)
       {return star(cst_feConvolveMatrix,_hx_,_hy_)}
      function feDiffuseLighting(_hv_,_hw_)
       {return star(cst_feDiffuseLighting,_hv_,_hw_)}
      function feDisplacementMap(_ht_,_hu_)
       {return star(cst_feDisplacementMap,_ht_,_hu_)}
      function feFlood(_hr_,_hs_){return star(cst_feFlood,_hr_,_hs_)}
      function feGaussianBlur(_hp_,_hq_)
       {return star(cst_feGaussianBlur,_hp_,_hq_)}
      function feImage(_hn_,_ho_){return star(cst_feImage,_hn_,_ho_)}
      function feMerge(_hl_,_hm_){return star(cst_feMerge,_hl_,_hm_)}
      function feMorphology(_hj_,_hk_)
       {return star(cst_feMorphology,_hj_,_hk_)}
      function feOffset(_hh_,_hi_){return star(cst_feOffset,_hh_,_hi_)}
      function feSpecularLighting(_hf_,_hg_)
       {return star(cst_feSpecularLighting,_hf_,_hg_)}
      function feTile(_hd_,_he_){return star(cst_feTile,_hd_,_he_)}
      function feTurbulence(_hb_,_hc_)
       {return star(cst_feTurbulence,_hb_,_hc_)}
      function cursor(_g$_,_ha_){return star(cst_cursor,_g$_,_ha_)}
      function a(_g9_,_g__){return star(cst_a,_g9_,_g__)}
      function view(_g7_,_g8_){return star(cst_view,_g7_,_g8_)}
      function script(_g5_,_g6_){return unary(cst_script,_g5_,_g6_)}
      function animation(_g3_,_g4_){return star(cst_animate,_g3_,_g4_)}
      function set(_g1_,_g2_){return star(cst_set,_g1_,_g2_)}
      function animateMotion(_gZ_,_g0_)
       {return star(cst_animateMotion,_gZ_,_g0_)}
      function mpath(_gX_,_gY_){return star(cst_mpath,_gX_,_gY_)}
      function animateColor(_gV_,_gW_)
       {return star(cst_animateColor,_gV_,_gW_)}
      function animateTransform(_gT_,_gU_)
       {return star(cst_animateTransform,_gT_,_gU_)}
      function font(_gR_,_gS_){return star(cst_font,_gR_,_gS_)}
      function glyph(_gP_,_gQ_){return star(cst_glyph,_gP_,_gQ_)}
      function missing_glyph(_gN_,_gO_)
       {return star(cst_missing_glyph,_gN_,_gO_)}
      function hkern(_gL_,_gM_){return nullary(cst_hkern,_gL_,_gM_)}
      function vkern(_gJ_,_gK_){return nullary(cst_vkern,_gJ_,_gK_)}
      function font_face(_gH_,_gI_){return nullary(cst_font_face,_gH_,_gI_)}
      function font_face_src(_gF_,_gG_)
       {return star(cst_font_face_src,_gF_,_gG_)}
      function font_face_uri(_gD_,_gE_)
       {return star(cst_font_face_uri,_gD_,_gE_)}
      function font_face_format(_gB_,_gC_)
       {return nullary(cst_font_face_uri$0,_gB_,_gC_)}
      function font_face_name(_gz_,_gA_)
       {return nullary(cst_font_face_name,_gz_,_gA_)}
      function doc_toelt(x){return x}
      var I=_a_(Xml);
      function of_seq(s){return caml_call1(I[1],s)}
      function data(s){return caml_call1(Xml[18],s)}
      function leaf(tag,a,param){return caml_call2(Xml[20],a,tag)}
      function node(tag,a,elts){return caml_call3(Xml[21],a,tag,elts)}
      function coerce_elt(x){return x}
      var float_attrib=Xml[4],int_attrib=Xml[5],string_attrib=Xml[6];
      function uri_attrib(a,s){return caml_call2(Xml[13],a,s)}
      var
       space_sep_attrib=Xml[7],
       comma_sep_attrib=Xml[8],
       Unsafe=
        [0,
         data,
         leaf,
         node,
         coerce_elt,
         float_attrib,
         int_attrib,
         string_attrib,
         uri_attrib,
         space_sep_attrib,
         comma_sep_attrib];
      return [0,
              Xml,
              Info,
              _fk_,
              _fl_,
              tot,
              totl,
              toelt,
              toeltl,
              to_attrib,
              nullary,
              unary,
              star,
              to_xmlattribs,
              _fm_,
              _fn_,
              _fo_,
              _fp_,
              _fq_,
              user_attrib,
              _fm_,
              _fr_,
              metadata,
              foreignObject,
              pcdata,
              pcdata,
              a_version,
              a_baseProfile,
              a_x,
              a_y,
              a_width,
              a_height,
              a_preserveAspectRatio,
              a_contentScriptType,
              a_contentStyleType,
              a_zoomAndPan,
              a_href,
              a_xlink_href,
              a_requiredFeatures,
              a_requiredExtensions,
              a_systemLanguage,
              a_externalRessourcesRequired,
              a_id,
              a_user_data,
              a_xml_base,
              a_xml_lang,
              a_xml_space,
              a_type,
              a_media,
              a_xlink_title,
              a_class,
              a_style,
              a_transform,
              a_viewBox,
              a_d,
              a_pathLength,
              a_rx,
              a_ry,
              a_cx,
              a_cy,
              a_r,
              a_x1,
              a_y1,
              a_x2,
              a_y2,
              a_points,
              a_x_list,
              a_y_list,
              a_dx,
              a_dy,
              a_dx_list,
              a_dy_list,
              a_lengthAdjust,
              a_textLength,
              a_text_anchor,
              a_text_decoration,
              a_text_rendering,
              a_rotate,
              a_startOffset,
              a_method,
              a_spacing,
              a_glyphRef,
              a_format,
              a_markerUnits,
              a_refX,
              a_refY,
              a_markerWidth,
              a_markerHeight,
              a_orient,
              a_local,
              a_rendering_intent,
              a_gradientUnits,
              a_gradientTransform,
              a_spreadMethod,
              a_fx,
              a_fy,
              a_offset,
              a_patternUnits,
              a_patternContentUnits,
              a_patternTransform,
              a_clipPathUnits,
              a_maskUnits,
              a_maskContentUnits,
              a_primitiveUnits,
              a_filterRes,
              a_result,
              a_in,
              a_in2,
              a_azimuth,
              a_elevation,
              a_pointsAtX,
              a_pointsAtY,
              a_pointsAtZ,
              a_specularExponent,
              a_specularConstant,
              a_limitingConeAngle,
              a_mode,
              a_feColorMatrix_type,
              a_values,
              a_transfer_type,
              a_tableValues,
              a_intercept,
              a_amplitude,
              a_exponent,
              a_transfer_offset,
              a_feComposite_operator,
              a_k1,
              a_k2,
              a_k3,
              a_k4,
              a_order,
              a_kernelMatrix,
              a_divisor,
              a_bias,
              a_kernelUnitLength,
              a_targetX,
              a_targetY,
              a_edgeMode,
              a_preserveAlpha,
              a_surfaceScale,
              a_diffuseConstant,
              a_scale,
              a_xChannelSelector,
              a_yChannelSelector,
              a_stdDeviation,
              a_feMorphology_operator,
              a_radius,
              a_baseFrenquency,
              a_numOctaves,
              a_seed,
              a_stitchTiles,
              a_feTurbulence_type,
              a_xlink_show,
              a_xlink_actuate,
              a_target,
              a_viewTarget,
              a_attributeName,
              a_attributeType,
              a_begin,
              a_dur,
              a_min,
              a_max,
              a_restart,
              a_repeatCount,
              a_repeatDur,
              a_fill,
              a_animation_fill,
              a_calcMode,
              a_animation_values,
              a_keyTimes,
              a_keySplines,
              a_from,
              a_to,
              a_by,
              a_additive,
              a_accumulate,
              a_keyPoints,
              a_path,
              a_animateTransform_type,
              a_horiz_origin_x,
              a_horiz_origin_y,
              a_horiz_adv_x,
              a_vert_origin_x,
              a_vert_origin_y,
              a_vert_adv_y,
              a_unicode,
              a_glyph_name,
              a_orientation,
              a_arabic_form,
              a_lang,
              a_u1,
              a_u2,
              a_g1,
              a_g2,
              a_k,
              a_font_family,
              a_font_style,
              a_font_variant,
              a_font_weight,
              a_font_stretch,
              a_font_size,
              a_unicode_range,
              a_units_per_em,
              a_stemv,
              a_stemh,
              a_slope,
              a_cap_height,
              a_x_height,
              a_accent_height,
              a_ascent,
              a_widths,
              a_bbox,
              a_ideographic,
              a_alphabetic,
              a_mathematical,
              a_hanging,
              a_videographic,
              a_v_alphabetic,
              a_v_mathematical,
              a_v_hanging,
              a_underline_position,
              a_underline_thickness,
              a_strikethrough_position,
              a_strikethrough_thickness,
              a_overline_position,
              a_overline_thickness,
              a_string,
              a_name,
              a_alignment_baseline,
              a_dominant_baseline,
              a_onabort,
              a_onactivate,
              a_onbegin,
              a_onend,
              a_onerror,
              a_onfocusin,
              a_onfocusout,
              a_onload,
              a_onrepeat,
              a_onresize,
              a_onscroll,
              a_onunload,
              a_onzoom,
              a_onclick,
              a_onmousedown,
              a_onmouseup,
              a_onmouseover,
              a_onmouseout,
              a_onmousemove,
              a_ontouchstart,
              a_ontouchend,
              a_ontouchmove,
              a_ontouchcancel,
              a_stop_color,
              a_stop_opacity,
              a_stroke,
              a_stroke_width,
              a_stroke_linecap,
              a_stroke_linejoin,
              a_stroke_miterlimit,
              a_stroke_dasharray,
              a_stroke_dashoffset,
              a_stroke_opacity,
              svg,
              g,
              defs,
              desc,
              title,
              symbol,
              use,
              image,
              switch$0,
              style,
              path,
              rect,
              circle,
              ellipse,
              line,
              polyline,
              polygon,
              text,
              tspan,
              tref,
              textPath,
              altGlyph,
              altGlyphDef,
              altGlyphItem,
              glyphRef,
              marker,
              color_profile,
              linearGradient,
              radialGradient,
              stop,
              pattern,
              clipPath,
              filter,
              feDistantLight,
              fePointLight,
              feSpotLight,
              feBlend,
              feColorMatrix,
              feComponentTransfer,
              feFuncA,
              feFuncG,
              feFuncB,
              feFuncR,
              feComposite,
              feConvolveMatrix,
              feDiffuseLighting,
              feDisplacementMap,
              feFlood,
              feGaussianBlur,
              feImage,
              feMerge,
              feMorphology,
              feOffset,
              feSpecularLighting,
              feTile,
              feTurbulence,
              cursor,
              a,
              view,
              script,
              animation,
              set,
              animateMotion,
              mpath,
              animateColor,
              animateTransform,
              font,
              glyph,
              missing_glyph,
              hkern,
              vkern,
              font_face,
              font_face_src,
              font_face_uri,
              font_face_format,
              font_face_name,
              doc_toelt,
              I,
              of_seq,
              Unsafe]}
    function Wrapped_functions(Xml)
     {function string_of_alignment_baseline(param)
       {return -72987685 <= param
                ?354434192 <= param
                  ?881373037 <= param
                    ?1018879136 <= param?cst_after_edge:cst_alphabetic$0
                    :726666127 <= param?cst_auto:cst_hanging$0
                  :15943541 === param
                    ?cst_middle
                    :218255880 <= param?cst_mathematical$0:cst_inherit
                :-840627829 <= param
                  ?-415175851 <= param
                    ?-354838363 <= param?cst_baseline:cst_central
                    :-693588957 <= param?cst_ideographic$0:cst_text_before_edge
                  :-863864035 <= param?cst_before_edge:cst_text_after_edge}
      function string_of_big_variant(param)
       {return 3350435 <= param
                ?476616093 <= param
                  ?744337004 <= param
                    ?914009117 <= param
                      ?970483178 <= param
                        ?1040349136 <= param
                          ?1071251601 <= param?cst_stitch:cst_onRequest
                          :990972795 <= param?cst_repeat:cst_wrap
                        :958206052 <= param?cst_remove:cst_reflect
                      :870530776 <= param
                        ?884917925 <= param
                          ?889668530 <= param?cst_noStitch:cst$35
                          :881966452 <= param?cst_over:cst_none$0
                        :861714216 <= param?cst_medial:cst_never
                    :568588039 <= param
                      ?716799946 <= param
                        ?726666127 <= param
                          ?737755699 <= param?cst_butt:cst_auto$0
                          :726615284 <= param?cst_atop:cst_arithmetic
                        :698610924 <= param?cst_underline:cst_gamma
                      :512807795 <= param
                        ?518168424 <= param
                          ?557106693 <= param?cst_linear:cst_overline
                          :517347077 <= param?cst_onLoad:cst_turbulence
                        :504440814 <= param?cst_table:cst_geometricPrecision
                  :163178525 <= param
                    ?316735838 <= param
                      ?389604418 <= param
                        ?463106021 <= param
                          ?466749770 <= param?cst_optimizeSpeed:cst_miter
                          :418396260 <= param?cst_initial:cst_start
                        :384893183 <= param?cst_whenNotActive:cst_identity
                      :201080426 <= param
                        ?289998318 <= param
                          ?289998319 <= param?cst_skewY:cst_skewX
                          :226915517 <= param?cst_square:cst_scale$0
                        :172069535 <= param?cst_exact:cst_perceptual
                    :4393399 <= param
                      ?9660462 <= param
                        ?106228547 <= param
                          ?118574553 <= param?cst_discrete:cst_erode
                          :15943541 <= param?cst_middle$0:cst_round
                        :4401019 <= param?cst_xor:cst_XML
                      :3901504 <= param
                        ?4000051 <= param
                          ?4153707 <= param?cst_sum:cst_pad
                          :3954798 <= param?cst_out:cst_new
                        :3455931 <= param?cst_end:cst_CSS
                :-453122489 <= param
                  ?-72987685 <= param
                    ?66 <= param
                      ?72 <= param
                        ?86 <= param
                          ?16389 <= param?cst_in$1:cst_v
                          :82 <= param?cst_r$0:cst_h
                        :71 <= param?cst_g$0:cst_b
                      :-68046964 <= param
                        ?-4932997 <= param
                          ?65 <= param?cst_a$0:cst_rotate$0
                          :-22441528 <= param?cst_disable:cst_screen
                        :-72678338 <= param?cst_absolute_colorimetric:cst_inherit$0
                    :-262362527 <= param
                      ?-197222844 <= param
                        ?-115006565 <= param
                          ?-76840209 <= param?cst_always:cst_spacingAndGlyphs
                          :-126259180 <= param?cst_replace:cst_multiply
                        :-197983439 <= param?cst_spline:cst_matrix
                      :-384499551 <= param
                        ?-318472885 <= param
                          ?-313337870 <= param?cst_saturation:cst_dilate
                          :-346900690 <= param?cst_translate:cst_default
                        :-415993185 <= param?cst_lighten:cst_normal
                  :-839430911 <= param
                    ?-672592881 <= param
                      ?-552838301 <= param
                        ?-505547199 <= param
                          ?-474415497 <= param?cst_freeze:cst_magnify
                          :-543144685 <= param?cst_hueRotate:cst_spacing$0
                        :-621842423 <= param?cst_fractalNoise:cst_saturate
                      :-797470191 <= param
                        ?-699926424 <= param
                          ?-689066995 <= param
                            ?cst_userSpaceOnUse
                            :cst_objectBoundingBox
                          :-707876225 <= param?cst_darken:cst_paced
                        :-824137927 <= param?cst_isolated:cst_optimizeLegibility
                    :-951087346 <= param
                      ?-912466532 <= param
                        ?-851306022 <= param
                          ?-851300629 <= param?cst_luminanceToAlpha:cst_line_through
                          :-912009552 <= param?cst_other:cst_terminal
                        :-937074372 <= param?cst_blink:cst_stroke_width$0
                      :-1044642615 === param
                        ?cst_relative_colorimetric
                        :-1014056864 <= param
                          ?-1012636187 <= param?cst_stretch:cst_bevel
                          :-1024851605 <= param?cst_duplicate:cst_preserve}
      var _eX_=Stdlib[30];
      function _eY_(param)
       {var b=param[2],a=param[1];return caml_call3(Stdlib_printf[4],_S_,a,b)}
      var _eZ_=0;
      function string_of_coords(_fj_){return list(_eZ_,_eY_,_fj_)}
      function string_of_dominant_baseline(param)
       {return -72987685 <= param
                ?354434192 <= param
                  ?881373037 <= param
                    ?945233102 <= param?cst_nochange:cst_alphabetic$1
                    :726666127 <= param?cst_auto$1:cst_hanging$1
                  :15943541 === param
                    ?cst_middle$1
                    :218255880 <= param?cst_mathematical$1:cst_inherit$1
                :-840627829 <= param
                  ?-504734109 <= param
                    ?-415175851 <= param?cst_central$0:cst_usescript
                    :-693588957 <= param?cst_ideographic$1:cst_textbeforeedge
                  :-880506735 <= param?cst_resetsize:cst_textafteredge}
      function string_of_in_value(param)
       {if(typeof param === "number")
         return 198492909 <= param
                 ?885982307 <= param
                   ?976982182 <= param?cst_strokePaint:cst_sourceAlpha
                   :768130555 <= param?cst_fillPaint:cst_sourceGraphic
                 :-522189715 <= param?cst_backgroundImage:cst_backgroundAlpha;
        var svg=param[2];
        return svg}
      var _e0_=Stdlib[33],_e1_=0;
      function string_of_lengths(_fi_)
       {return list(_e1_,string_of_length,_fi_)}
      function string_of_percentage(x)
       {var _fh_=string_of_number(x);
        return caml_call2(Stdlib[28],_fh_,cst$36)}
      function string_of_fourfloats(param)
       {var
         d=param[4],
         c=param[3],
         b=param[2],
         a=param[1],
         _fd_=string_of_number(d),
         _fe_=string_of_number(c),
         _ff_=string_of_number(b),
         _fg_=string_of_number(a);
        return caml_call5(Stdlib_printf[4],_T_,_fg_,_ff_,_fe_,_fd_)}
      function string_of_number_optional_numb(param)
       {var _fb_=param[2],_fc_=param[1];
        if(_fb_){var y=_fb_[1];return caml_call3(Stdlib_printf[4],_U_,_fc_,y)}
        return caml_call2(Stdlib_printf[4],_V_,_fc_)}
      var _e2_=0;
      function string_of_numbers(_fa_)
       {return list(_e2_,string_of_number,_fa_)}
      function string_of_numbers_semicolon(_e$_)
       {return list(_W_,string_of_number,_e$_)}
      function string_of_offset(param)
       {if(-488794310 <= param[1])
         {var x=param[2];return string_of_percentage(x)}
        var x$0=param[2];
        return string_of_number(x$0)}
      function string_of_orient(param)
       {if(param){var svg=param[1];return string_of_angle(svg)}
        return cst_auto$2}
      function string_of_strokedasharray(l)
       {return l?list(0,string_of_length,l):cst_none$1}
      function string_of_transform(param)
       {var _e4_=param[1];
        if(-4932997 <= _e4_)
         {if(289998318 <= _e4_)
           {if(289998319 <= _e4_)
             {var angle=param[2],_e5_=string_of_angle(angle);
              return caml_call2(Stdlib_printf[4],_X_,_e5_)}
            var angle$0=param[2],_e6_=string_of_angle(angle$0);
            return caml_call2(Stdlib_printf[4],_Y_,_e6_)}
          if(201080426 <= _e4_)
           {var x=param[2],_e7_=string_of_number_optional_numb(x);
            return caml_call2(Stdlib_printf[4],_Z_,_e7_)}
          var match=param[2],x$0=match[2],angle$1=match[1];
          if(x$0)
           var
            match$0=x$0[1],
            y=match$0[2],
            x$1=match$0[1],
            _e8_=caml_call3(Stdlib_printf[4],___,x$1,y);
          else
           var _e8_=cst$37;
          var _e9_=string_of_angle(angle$1);
          return caml_call3(Stdlib_printf[4],_$_,_e9_,_e8_)}
        if(-262362527 <= _e4_)
         {var
           match$1=param[2],
           f=match$1[6],
           e=match$1[5],
           d=match$1[4],
           c=match$1[3],
           b=match$1[2],
           a=match$1[1];
          return caml_call7(Stdlib_printf[4],_aa_,a,b,c,d,e,f)}
        var x$2=param[2],_e__=string_of_number_optional_numb(x$2);
        return caml_call2(Stdlib_printf[4],_ab_,_e__)}
      function string_of_transforms(l)
       {var _e3_=caml_call2(Stdlib_list[17],string_of_transform,l);
        return caml_call2(Stdlib_string[7],cst$38,_e3_)}
      return [0,
              Xml,
              string_of_alignment_baseline,
              string_of_big_variant,
              _eX_,
              string_of_coords,
              string_of_dominant_baseline,
              string_of_in_value,
              _e0_,
              string_of_length,
              string_of_lengths,
              string_of_number,
              string_of_percentage,
              string_of_fourfloats,
              string_of_number_optional_numb,
              string_of_numbers,
              string_of_numbers_semicolon,
              string_of_offset,
              string_of_orient,
              string_of_paint,
              string_of_strokedasharray,
              string_of_transform,
              string_of_transforms]}
    function _ac_(_eT_,_eS_)
     {var
       _eU_=Make_with_wrapped_functions(_eT_,_eS_),
       _eV_=_eU_[342],
       _eW_=_eU_[2];
      return [0,
              _eU_[1],
              [0,_eW_[1],_eW_[2],_eW_[4],_eW_[5],_eW_[6],_eW_[7],_eW_[3]],
              _eU_[3],
              _eU_[4],
              _eU_[26],
              _eU_[27],
              _eU_[28],
              _eU_[29],
              _eU_[30],
              _eU_[31],
              _eU_[32],
              _eU_[33],
              _eU_[34],
              _eU_[35],
              _eU_[36],
              _eU_[37],
              _eU_[38],
              _eU_[39],
              _eU_[40],
              _eU_[41],
              _eU_[42],
              _eU_[43],
              _eU_[44],
              _eU_[45],
              _eU_[46],
              _eU_[47],
              _eU_[48],
              _eU_[49],
              _eU_[50],
              _eU_[51],
              _eU_[52],
              _eU_[53],
              _eU_[54],
              _eU_[55],
              _eU_[56],
              _eU_[57],
              _eU_[58],
              _eU_[59],
              _eU_[60],
              _eU_[61],
              _eU_[62],
              _eU_[63],
              _eU_[64],
              _eU_[65],
              _eU_[66],
              _eU_[67],
              _eU_[68],
              _eU_[69],
              _eU_[70],
              _eU_[71],
              _eU_[72],
              _eU_[73],
              _eU_[74],
              _eU_[75],
              _eU_[76],
              _eU_[77],
              _eU_[78],
              _eU_[79],
              _eU_[80],
              _eU_[81],
              _eU_[82],
              _eU_[83],
              _eU_[84],
              _eU_[85],
              _eU_[86],
              _eU_[87],
              _eU_[88],
              _eU_[89],
              _eU_[90],
              _eU_[91],
              _eU_[92],
              _eU_[93],
              _eU_[94],
              _eU_[95],
              _eU_[96],
              _eU_[97],
              _eU_[98],
              _eU_[99],
              _eU_[100],
              _eU_[101],
              _eU_[102],
              _eU_[103],
              _eU_[104],
              _eU_[105],
              _eU_[106],
              _eU_[107],
              _eU_[108],
              _eU_[109],
              _eU_[110],
              _eU_[111],
              _eU_[112],
              _eU_[113],
              _eU_[114],
              _eU_[115],
              _eU_[116],
              _eU_[117],
              _eU_[118],
              _eU_[119],
              _eU_[120],
              _eU_[121],
              _eU_[122],
              _eU_[123],
              _eU_[124],
              _eU_[125],
              _eU_[126],
              _eU_[127],
              _eU_[128],
              _eU_[129],
              _eU_[130],
              _eU_[131],
              _eU_[132],
              _eU_[133],
              _eU_[134],
              _eU_[135],
              _eU_[136],
              _eU_[137],
              _eU_[138],
              _eU_[139],
              _eU_[140],
              _eU_[141],
              _eU_[142],
              _eU_[143],
              _eU_[144],
              _eU_[145],
              _eU_[146],
              _eU_[147],
              _eU_[148],
              _eU_[149],
              _eU_[150],
              _eU_[151],
              _eU_[152],
              _eU_[153],
              _eU_[154],
              _eU_[155],
              _eU_[156],
              _eU_[157],
              _eU_[158],
              _eU_[159],
              _eU_[160],
              _eU_[161],
              _eU_[162],
              _eU_[163],
              _eU_[164],
              _eU_[165],
              _eU_[166],
              _eU_[167],
              _eU_[168],
              _eU_[169],
              _eU_[170],
              _eU_[171],
              _eU_[172],
              _eU_[173],
              _eU_[174],
              _eU_[175],
              _eU_[176],
              _eU_[177],
              _eU_[178],
              _eU_[179],
              _eU_[180],
              _eU_[181],
              _eU_[182],
              _eU_[183],
              _eU_[184],
              _eU_[185],
              _eU_[186],
              _eU_[187],
              _eU_[188],
              _eU_[189],
              _eU_[190],
              _eU_[191],
              _eU_[192],
              _eU_[193],
              _eU_[194],
              _eU_[195],
              _eU_[196],
              _eU_[197],
              _eU_[198],
              _eU_[199],
              _eU_[200],
              _eU_[201],
              _eU_[202],
              _eU_[203],
              _eU_[204],
              _eU_[205],
              _eU_[206],
              _eU_[207],
              _eU_[208],
              _eU_[209],
              _eU_[210],
              _eU_[211],
              _eU_[212],
              _eU_[213],
              _eU_[214],
              _eU_[215],
              _eU_[216],
              _eU_[217],
              _eU_[218],
              _eU_[219],
              _eU_[220],
              _eU_[221],
              _eU_[222],
              _eU_[223],
              _eU_[224],
              _eU_[225],
              _eU_[226],
              _eU_[227],
              _eU_[228],
              _eU_[229],
              _eU_[253],
              _eU_[254],
              _eU_[255],
              _eU_[256],
              _eU_[257],
              _eU_[258],
              _eU_[259],
              _eU_[260],
              _eU_[261],
              _eU_[262],
              _eU_[230],
              _eU_[231],
              _eU_[232],
              _eU_[233],
              _eU_[234],
              _eU_[235],
              _eU_[236],
              _eU_[237],
              _eU_[238],
              _eU_[239],
              _eU_[240],
              _eU_[241],
              _eU_[242],
              _eU_[243],
              _eU_[244],
              _eU_[245],
              _eU_[246],
              _eU_[247],
              _eU_[248],
              _eU_[249],
              _eU_[250],
              _eU_[251],
              _eU_[252],
              _eU_[24],
              _eU_[263],
              _eU_[264],
              _eU_[265],
              _eU_[266],
              _eU_[267],
              _eU_[268],
              _eU_[269],
              _eU_[270],
              _eU_[271],
              _eU_[272],
              _eU_[273],
              _eU_[274],
              _eU_[275],
              _eU_[276],
              _eU_[277],
              _eU_[278],
              _eU_[279],
              _eU_[280],
              _eU_[281],
              _eU_[282],
              _eU_[283],
              _eU_[284],
              _eU_[285],
              _eU_[286],
              _eU_[287],
              _eU_[288],
              _eU_[289],
              _eU_[290],
              _eU_[291],
              _eU_[292],
              _eU_[293],
              _eU_[294],
              _eU_[295],
              _eU_[296],
              _eU_[297],
              _eU_[298],
              _eU_[299],
              _eU_[300],
              _eU_[301],
              _eU_[302],
              _eU_[303],
              _eU_[304],
              _eU_[305],
              _eU_[306],
              _eU_[307],
              _eU_[308],
              _eU_[309],
              _eU_[310],
              _eU_[311],
              _eU_[312],
              _eU_[313],
              _eU_[314],
              _eU_[315],
              _eU_[316],
              _eU_[317],
              _eU_[318],
              _eU_[319],
              _eU_[320],
              _eU_[321],
              _eU_[322],
              _eU_[323],
              _eU_[324],
              _eU_[325],
              _eU_[326],
              _eU_[327],
              _eU_[328],
              _eU_[329],
              _eU_[330],
              _eU_[331],
              _eU_[332],
              _eU_[333],
              _eU_[334],
              _eU_[335],
              _eU_[336],
              _eU_[337],
              _eU_[338],
              _eU_[22],
              _eU_[23],
              _eU_[25],
              _eU_[341],
              _eU_[5],
              _eU_[6],
              _eU_[7],
              _eU_[8],
              _eU_[339],
              _eU_[13],
              _eU_[9],
              [0,
               _eV_[1],
               _eV_[3],
               _eV_[2],
               _eV_[4],
               _eV_[7],
               _eV_[5],
               _eV_[6],
               _eV_[8],
               _eV_[9],
               _eV_[10]]]}
    function _ad_(_eQ_)
     {var _eR_=Wrapped_functions(_eQ_);
      return [0,
              _eR_[1],
              _eR_[2],
              _eR_[4],
              _eR_[3],
              _eR_[5],
              _eR_[6],
              _eR_[13],
              _eR_[7],
              _eR_[8],
              _eR_[9],
              _eR_[10],
              _eR_[11],
              _eR_[14],
              _eR_[15],
              _eR_[16],
              _eR_[17],
              _eR_[18],
              _eR_[19],
              _eR_[20],
              _eR_[21],
              _eR_[22]]}
    var
     Svg_f=
      [0,
       function(_eM_)
        {var
          _eL_=Wrapped_functions(_eM_),
          _eP_=
           Make_with_wrapped_functions
            (_eM_,
             [0,
              _eL_[1],
              _eL_[2],
              _eL_[4],
              _eL_[3],
              _eL_[5],
              _eL_[6],
              _eL_[13],
              _eL_[7],
              _eL_[8],
              _eL_[9],
              _eL_[10],
              _eL_[11],
              _eL_[14],
              _eL_[15],
              _eL_[16],
              _eL_[17],
              _eL_[18],
              _eL_[19],
              _eL_[20],
              _eL_[21],
              _eL_[22]]),
          _eN_=_eP_[342],
          _eO_=_eP_[2];
         return [0,
                 _eP_[1],
                 [0,_eO_[1],_eO_[2],_eO_[4],_eO_[5],_eO_[6],_eO_[7],_eO_[3]],
                 _eP_[3],
                 _eP_[4],
                 _eP_[26],
                 _eP_[27],
                 _eP_[28],
                 _eP_[29],
                 _eP_[30],
                 _eP_[31],
                 _eP_[32],
                 _eP_[33],
                 _eP_[34],
                 _eP_[35],
                 _eP_[36],
                 _eP_[37],
                 _eP_[38],
                 _eP_[39],
                 _eP_[40],
                 _eP_[41],
                 _eP_[42],
                 _eP_[43],
                 _eP_[44],
                 _eP_[45],
                 _eP_[46],
                 _eP_[47],
                 _eP_[48],
                 _eP_[49],
                 _eP_[50],
                 _eP_[51],
                 _eP_[52],
                 _eP_[53],
                 _eP_[54],
                 _eP_[55],
                 _eP_[56],
                 _eP_[57],
                 _eP_[58],
                 _eP_[59],
                 _eP_[60],
                 _eP_[61],
                 _eP_[62],
                 _eP_[63],
                 _eP_[64],
                 _eP_[65],
                 _eP_[66],
                 _eP_[67],
                 _eP_[68],
                 _eP_[69],
                 _eP_[70],
                 _eP_[71],
                 _eP_[72],
                 _eP_[73],
                 _eP_[74],
                 _eP_[75],
                 _eP_[76],
                 _eP_[77],
                 _eP_[78],
                 _eP_[79],
                 _eP_[80],
                 _eP_[81],
                 _eP_[82],
                 _eP_[83],
                 _eP_[84],
                 _eP_[85],
                 _eP_[86],
                 _eP_[87],
                 _eP_[88],
                 _eP_[89],
                 _eP_[90],
                 _eP_[91],
                 _eP_[92],
                 _eP_[93],
                 _eP_[94],
                 _eP_[95],
                 _eP_[96],
                 _eP_[97],
                 _eP_[98],
                 _eP_[99],
                 _eP_[100],
                 _eP_[101],
                 _eP_[102],
                 _eP_[103],
                 _eP_[104],
                 _eP_[105],
                 _eP_[106],
                 _eP_[107],
                 _eP_[108],
                 _eP_[109],
                 _eP_[110],
                 _eP_[111],
                 _eP_[112],
                 _eP_[113],
                 _eP_[114],
                 _eP_[115],
                 _eP_[116],
                 _eP_[117],
                 _eP_[118],
                 _eP_[119],
                 _eP_[120],
                 _eP_[121],
                 _eP_[122],
                 _eP_[123],
                 _eP_[124],
                 _eP_[125],
                 _eP_[126],
                 _eP_[127],
                 _eP_[128],
                 _eP_[129],
                 _eP_[130],
                 _eP_[131],
                 _eP_[132],
                 _eP_[133],
                 _eP_[134],
                 _eP_[135],
                 _eP_[136],
                 _eP_[137],
                 _eP_[138],
                 _eP_[139],
                 _eP_[140],
                 _eP_[141],
                 _eP_[142],
                 _eP_[143],
                 _eP_[144],
                 _eP_[145],
                 _eP_[146],
                 _eP_[147],
                 _eP_[148],
                 _eP_[149],
                 _eP_[150],
                 _eP_[151],
                 _eP_[152],
                 _eP_[153],
                 _eP_[154],
                 _eP_[155],
                 _eP_[156],
                 _eP_[157],
                 _eP_[158],
                 _eP_[159],
                 _eP_[160],
                 _eP_[161],
                 _eP_[162],
                 _eP_[163],
                 _eP_[164],
                 _eP_[165],
                 _eP_[166],
                 _eP_[167],
                 _eP_[168],
                 _eP_[169],
                 _eP_[170],
                 _eP_[171],
                 _eP_[172],
                 _eP_[173],
                 _eP_[174],
                 _eP_[175],
                 _eP_[176],
                 _eP_[177],
                 _eP_[178],
                 _eP_[179],
                 _eP_[180],
                 _eP_[181],
                 _eP_[182],
                 _eP_[183],
                 _eP_[184],
                 _eP_[185],
                 _eP_[186],
                 _eP_[187],
                 _eP_[188],
                 _eP_[189],
                 _eP_[190],
                 _eP_[191],
                 _eP_[192],
                 _eP_[193],
                 _eP_[194],
                 _eP_[195],
                 _eP_[196],
                 _eP_[197],
                 _eP_[198],
                 _eP_[199],
                 _eP_[200],
                 _eP_[201],
                 _eP_[202],
                 _eP_[203],
                 _eP_[204],
                 _eP_[205],
                 _eP_[206],
                 _eP_[207],
                 _eP_[208],
                 _eP_[209],
                 _eP_[210],
                 _eP_[211],
                 _eP_[212],
                 _eP_[213],
                 _eP_[214],
                 _eP_[215],
                 _eP_[216],
                 _eP_[217],
                 _eP_[218],
                 _eP_[219],
                 _eP_[220],
                 _eP_[221],
                 _eP_[222],
                 _eP_[223],
                 _eP_[224],
                 _eP_[225],
                 _eP_[226],
                 _eP_[227],
                 _eP_[228],
                 _eP_[229],
                 _eP_[253],
                 _eP_[254],
                 _eP_[255],
                 _eP_[256],
                 _eP_[257],
                 _eP_[258],
                 _eP_[259],
                 _eP_[260],
                 _eP_[261],
                 _eP_[262],
                 _eP_[230],
                 _eP_[231],
                 _eP_[232],
                 _eP_[233],
                 _eP_[234],
                 _eP_[235],
                 _eP_[236],
                 _eP_[237],
                 _eP_[238],
                 _eP_[239],
                 _eP_[240],
                 _eP_[241],
                 _eP_[242],
                 _eP_[243],
                 _eP_[244],
                 _eP_[245],
                 _eP_[246],
                 _eP_[247],
                 _eP_[248],
                 _eP_[249],
                 _eP_[250],
                 _eP_[251],
                 _eP_[252],
                 _eP_[24],
                 _eP_[263],
                 _eP_[264],
                 _eP_[265],
                 _eP_[266],
                 _eP_[267],
                 _eP_[268],
                 _eP_[269],
                 _eP_[270],
                 _eP_[271],
                 _eP_[272],
                 _eP_[273],
                 _eP_[274],
                 _eP_[275],
                 _eP_[276],
                 _eP_[277],
                 _eP_[278],
                 _eP_[279],
                 _eP_[280],
                 _eP_[281],
                 _eP_[282],
                 _eP_[283],
                 _eP_[284],
                 _eP_[285],
                 _eP_[286],
                 _eP_[287],
                 _eP_[288],
                 _eP_[289],
                 _eP_[290],
                 _eP_[291],
                 _eP_[292],
                 _eP_[293],
                 _eP_[294],
                 _eP_[295],
                 _eP_[296],
                 _eP_[297],
                 _eP_[298],
                 _eP_[299],
                 _eP_[300],
                 _eP_[301],
                 _eP_[302],
                 _eP_[303],
                 _eP_[304],
                 _eP_[305],
                 _eP_[306],
                 _eP_[307],
                 _eP_[308],
                 _eP_[309],
                 _eP_[310],
                 _eP_[311],
                 _eP_[312],
                 _eP_[313],
                 _eP_[314],
                 _eP_[315],
                 _eP_[316],
                 _eP_[317],
                 _eP_[318],
                 _eP_[319],
                 _eP_[320],
                 _eP_[321],
                 _eP_[322],
                 _eP_[323],
                 _eP_[324],
                 _eP_[325],
                 _eP_[326],
                 _eP_[327],
                 _eP_[328],
                 _eP_[329],
                 _eP_[330],
                 _eP_[331],
                 _eP_[332],
                 _eP_[333],
                 _eP_[334],
                 _eP_[335],
                 _eP_[336],
                 _eP_[337],
                 _eP_[338],
                 _eP_[22],
                 _eP_[23],
                 _eP_[25],
                 _eP_[341],
                 _eP_[5],
                 _eP_[6],
                 _eP_[7],
                 _eP_[8],
                 _eP_[339],
                 _eP_[13],
                 _eP_[9],
                 [0,
                  _eN_[1],
                  _eN_[3],
                  _eN_[2],
                  _eN_[4],
                  _eN_[7],
                  _eN_[5],
                  _eN_[6],
                  _eN_[8],
                  _eN_[9],
                  _eN_[10]]]},
       _ad_,
       _ac_];
    caml_register_global(1097,Svg_f,"Svg_f");
    function Make_with_wrapped_functions$0(Xml,C,Svg)
     {var
       doctype=compose_doctype(cst_html,0),
       Info=
        [0,
         content_type$0,
         alternative_content_types,
         version$0,
         standard$0,
         namespace$0,
         doctype,
         emptytags],
       _aH_=Xml[2],
       _aI_=Xml[3];
      function to_xmlattribs(x){return x}
      function to_attrib(x){return x}
      var _aJ_=Xml[4],_aK_=Xml[5],_aL_=Xml[6];
      function uri_attrib(a,s){return caml_call2(Xml[13],a,s)}
      var _aM_=Xml[7],_aN_=Xml[8];
      function user_attrib(f,name,v)
       {var _eK_=caml_call2(Xml[1][2],f,v);
        return caml_call2(Xml[6],name,_eK_)}
      var _aO_=C[3];
      function bool_attrib(_eI_,_eJ_){return user_attrib(_aO_,_eI_,_eJ_)}
      function constant_attrib(a,param)
       {return caml_call2(_aL_,a,caml_call1(Xml[1][1],a))}
      function linktypes_attrib(name,x){return user_attrib(C[8],name,x)}
      function mediadesc_attrib(name,x){return user_attrib(C[9],name,x)}
      function srcset_attrib(name,x){return user_attrib(C[14],name,x)}
      var a_class=caml_call1(_aM_,cst_class$0),a_id=caml_call1(_aL_,cst_id$0);
      function a_user_data(name)
       {return caml_call1(_aL_,caml_call2(Stdlib[28],cst_data$0,name))}
      var
       a_title=caml_call1(_aL_,cst_title$0),
       a_xml_lang=caml_call1(_aL_,cst_xml_lang$0),
       a_lang=caml_call1(_aL_,cst_lang$0),
       a_style=caml_call1(_aL_,cst_style$1),
       a_property=caml_call1(_aL_,cst_property),
       a_onabort=caml_call1(Xml[9],cst_onabort$0),
       a_onafterprint=caml_call1(Xml[9],cst_onafterprint),
       a_onbeforeprint=caml_call1(Xml[9],cst_onbeforeprint),
       a_onbeforeunload=caml_call1(Xml[9],cst_onbeforeunload),
       a_onblur=caml_call1(Xml[9],cst_onblur),
       a_oncanplay=caml_call1(Xml[9],cst_oncanplay),
       a_oncanplaythrough=caml_call1(Xml[9],cst_oncanplaythrough),
       a_onchange=caml_call1(Xml[9],cst_onchange),
       a_ondurationchange=caml_call1(Xml[9],cst_ondurationchange),
       a_onemptied=caml_call1(Xml[9],cst_onemptied),
       a_onended=caml_call1(Xml[9],cst_onended),
       a_onerror=caml_call1(Xml[9],cst_onerror$0),
       a_onfocus=caml_call1(Xml[9],cst_onfocus),
       a_onformchange=caml_call1(Xml[9],cst_onformchange),
       a_onforminput=caml_call1(Xml[9],cst_onforminput),
       a_onhashchange=caml_call1(Xml[9],cst_onhashchange),
       a_oninput=caml_call1(Xml[9],cst_oninput),
       a_oninvalid=caml_call1(Xml[9],cst_oninvalid),
       a_onoffline=caml_call1(Xml[9],cst_onoffline),
       a_ononline=caml_call1(Xml[9],cst_ononline),
       a_onpause=caml_call1(Xml[9],cst_onpause),
       a_onplay=caml_call1(Xml[9],cst_onplay),
       a_onplaying=caml_call1(Xml[9],cst_onplaying),
       a_onpagehide=caml_call1(Xml[9],cst_onpagehide),
       a_onpageshow=caml_call1(Xml[9],cst_onpageshow),
       a_onpopstate=caml_call1(Xml[9],cst_onpopstate),
       a_onprogress=caml_call1(Xml[9],cst_onprogress),
       a_onratechange=caml_call1(Xml[9],cst_onratechange),
       a_onreadystatechange=caml_call1(Xml[9],cst_onreadystatechange),
       a_onredo=caml_call1(Xml[9],cst_onredo),
       a_onresize=caml_call1(Xml[9],cst_onresize$0),
       a_onscroll=caml_call1(Xml[9],cst_onscroll$0),
       a_onseeked=caml_call1(Xml[9],cst_onseeked),
       a_onseeking=caml_call1(Xml[9],cst_onseeking),
       a_onselect=caml_call1(Xml[9],cst_onselect),
       a_onshow=caml_call1(Xml[9],cst_onshow),
       a_onstalled=caml_call1(Xml[9],cst_onstalled),
       a_onstorage=caml_call1(Xml[9],cst_onstorage),
       a_onsubmit=caml_call1(Xml[9],cst_onsubmit),
       a_onsuspend=caml_call1(Xml[9],cst_onsuspend),
       a_ontimeupdate=caml_call1(Xml[9],cst_ontimeupdate),
       a_onundo=caml_call1(Xml[9],cst_onundo),
       a_onunload=caml_call1(Xml[9],cst_onunload$0),
       a_onvolumechange=caml_call1(Xml[9],cst_onvolumechange),
       a_onwaiting=caml_call1(Xml[9],cst_onwaiting),
       a_onload=caml_call1(Xml[9],cst_onload$0),
       a_onloadeddata=caml_call1(Xml[9],cst_onloadeddata),
       a_onloadedmetadata=caml_call1(Xml[9],cst_onloadedmetadata),
       a_onloadstart=caml_call1(Xml[9],cst_onloadstart),
       a_onmessage=caml_call1(Xml[9],cst_onmessage),
       a_onmousewheel=caml_call1(Xml[9],cst_onmousewheel),
       a_onclick=caml_call1(Xml[10],cst_onclick$0),
       a_oncontextmenu=caml_call1(Xml[10],cst_oncontextmenu),
       a_ondblclick=caml_call1(Xml[10],cst_ondblclick),
       a_ondrag=caml_call1(Xml[10],cst_ondrag),
       a_ondragend=caml_call1(Xml[10],cst_ondragend),
       a_ondragenter=caml_call1(Xml[10],cst_ondragenter),
       a_ondragleave=caml_call1(Xml[10],cst_ondragleave),
       a_ondragover=caml_call1(Xml[10],cst_ondragover),
       a_ondragstart=caml_call1(Xml[10],cst_ondragstart),
       a_ondrop=caml_call1(Xml[10],cst_ondrop),
       a_onmousedown=caml_call1(Xml[10],cst_onmousedown$0),
       a_onmouseup=caml_call1(Xml[10],cst_onmouseup$0),
       a_onmouseover=caml_call1(Xml[10],cst_onmouseover$0),
       a_onmousemove=caml_call1(Xml[10],cst_onmousemove$0),
       a_onmouseout=caml_call1(Xml[10],cst_onmouseout$0),
       a_ontouchstart=caml_call1(Xml[12],cst_ontouchstart$0),
       a_ontouchend=caml_call1(Xml[12],cst_ontouchend$0),
       a_ontouchmove=caml_call1(Xml[12],cst_ontouchmove$0),
       a_ontouchcancel=caml_call1(Xml[12],cst_ontouchcancel$0),
       a_onkeypress=caml_call1(Xml[11],cst_onkeypress),
       a_onkeydown=caml_call1(Xml[11],cst_onkeydown),
       a_onkeyup=caml_call1(Xml[11],cst_onkeyup),
       a_version=caml_call1(_aL_,cst_version$0);
      function a_xmlns(x){return user_attrib(C[2],cst_xmlns$4,x)}
      function a_manifest(_eH_){return uri_attrib(cst_manifest,_eH_)}
      function a_cite(_eG_){return uri_attrib(cst_cite,_eG_)}
      function a_xml_space(x){return user_attrib(C[2],cst_xml_space$0,x)}
      function a_accesskey(c){return user_attrib(C[5],cst_accesskey,c)}
      var
       a_charset=caml_call1(_aL_,cst_charset),
       a_accept_charset=caml_call1(_aM_,cst_accept_charset),
       a_accept=caml_call1(_aN_,cst_accept);
      function a_href(_eF_){return uri_attrib(cst_href$0,_eF_)}
      var a_hreflang=caml_call1(_aL_,cst_hreflang);
      function a_download(file){return user_attrib(C[16],cst_download,file)}
      function a_rel(_eE_){return linktypes_attrib(cst_rel,_eE_)}
      var
       a_tabindex=caml_call1(_aK_,cst_tabindex),
       a_mime_type=caml_call1(_aL_,cst_type$4),
       a_alt=caml_call1(_aL_,cst_alt);
      function a_height(p){return caml_call2(_aK_,cst_height$0,p)}
      function a_src(_eD_){return uri_attrib(cst_src,_eD_)}
      function a_width(p){return caml_call2(_aK_,cst_width$0,p)}
      var
       a_for=caml_call1(_aL_,cst_for),
       a_for_list=caml_call1(_aM_,cst_for$0);
      function a_selected(_eC_){return constant_attrib(cst_selected,_eC_)}
      var
       a_text_value=caml_call1(_aL_,cst_value),
       a_int_value=caml_call1(_aK_,cst_value$0),
       a_value=caml_call1(_aL_,cst_value$1),
       a_float_value=caml_call1(_aJ_,cst_value$2);
      function a_action(_eB_){return uri_attrib(cst_action,_eB_)}
      function a_formmethod(x){return user_attrib(C[2],cst_method$0,x)}
      var a_enctype=caml_call1(_aL_,cst_enctype);
      function a_checked(_eA_){return constant_attrib(cst_checked,_eA_)}
      function a_disabled(_ez_){return constant_attrib(cst_disabled,_ez_)}
      function a_readonly(_ey_){return constant_attrib(cst_readonly,_ey_)}
      var
       a_maxlength=caml_call1(_aK_,cst_maxlength),
       a_minlength=caml_call1(_aK_,cst_minlength),
       a_name=caml_call1(_aL_,cst_name$0);
      function a_allowfullscreen(_ex_)
       {return constant_attrib(cst_allowfullscreen,_ex_)}
      function a_allowpaymentrequest(_ew_)
       {return constant_attrib(cst_allowpaymentrequest,_ew_)}
      function a_referrerpolicy(x)
       {return user_attrib(C[10],cst_referrerpolicy,x)}
      function a_autocomplete(x){return user_attrib(C[4],cst_autocomplete,x)}
      function a_async(_ev_){return constant_attrib(cst_async,_ev_)}
      function a_autofocus(_eu_){return constant_attrib(cst_autofocus,_eu_)}
      function a_autoplay(_et_){return constant_attrib(cst_autoplay,_et_)}
      function a_muted(_es_){return constant_attrib(cst_muted,_es_)}
      function a_crossorigin(x){return user_attrib(C[2],cst_crossorigin,x)}
      var
       a_integrity=caml_call1(_aL_,cst_integrity),
       a_mediagroup=caml_call1(_aL_,cst_mediagroup),
       a_challenge=caml_call1(_aL_,cst_challenge);
      function a_contenteditable(ce)
       {return bool_attrib(cst_contenteditable,ce)}
      var a_contextmenu=caml_call1(_aL_,cst_contextmenu);
      function a_controls(_er_){return constant_attrib(cst_controls,_er_)}
      function a_dir(x){return user_attrib(C[2],cst_dir,x)}
      function a_draggable(d){return bool_attrib(cst_draggable,d)}
      var a_form=caml_call1(_aL_,cst_form);
      function a_formaction(_eq_){return uri_attrib(cst_formaction,_eq_)}
      var a_formenctype=caml_call1(_aL_,cst_formenctype);
      function a_formnovalidate(_ep_)
       {return constant_attrib(cst_formnovalidate,_ep_)}
      var a_formtarget=caml_call1(_aL_,cst_formtarget);
      function a_hidden(_eo_){return constant_attrib(cst_hidden,_eo_)}
      var a_high=caml_call1(_aJ_,cst_high);
      function a_icon(_en_){return uri_attrib(cst_icon,_en_)}
      function a_ismap(_em_){return constant_attrib(cst_ismap,_em_)}
      var
       a_keytype=caml_call1(_aL_,cst_keytype),
       a_list=caml_call1(_aL_,cst_list);
      function a_loop(_el_){return constant_attrib(cst_loop,_el_)}
      var
       a_low=caml_call1(_aJ_,cst_low),
       a_max=caml_call1(_aJ_,cst_max$0),
       _aP_=C[7];
      function a_input_max(_ek_){return user_attrib(_aP_,cst_max$1,_ek_)}
      var a_min=caml_call1(_aJ_,cst_min$0),_aQ_=C[7];
      function a_input_min(_ej_){return user_attrib(_aQ_,cst_min$1,_ej_)}
      function a_inputmode(x){return user_attrib(C[2],cst_inputmode,x)}
      function a_novalidate(_ei_){return constant_attrib(cst_novalidate,_ei_)}
      function a_open(_eh_){return constant_attrib(cst_open,_eh_)}
      var
       a_optimum=caml_call1(_aJ_,cst_optimum),
       a_pattern=caml_call1(_aL_,cst_pattern$0),
       a_placeholder=caml_call1(_aL_,cst_placeholder);
      function a_poster(_eg_){return uri_attrib(cst_poster,_eg_)}
      function a_preload(x){return user_attrib(C[2],cst_preload,x)}
      function a_pubdate(_ef_){return constant_attrib(cst_pubdate,_ef_)}
      var a_radiogroup=caml_call1(_aL_,cst_radiogroup);
      function a_required(_ee_){return constant_attrib(cst_required,_ee_)}
      function a_reversed(_ed_){return constant_attrib(cst_reserved,_ed_)}
      function a_sandbox(x){return user_attrib(C[12],cst_sandbox,x)}
      function a_spellcheck(sc){return bool_attrib(cst_spellcheck,sc)}
      function a_scoped(_ec_){return constant_attrib(cst_scoped,_ec_)}
      function a_seamless(_eb_){return constant_attrib(cst_seamless,_eb_)}
      function a_sizes(sizes){return user_attrib(C[13],cst_sizes,sizes)}
      var
       a_span=caml_call1(_aK_,cst_span),
       a_srclang=caml_call1(_aL_,cst_xml_lang$1);
      function a_srcset(_ea_){return srcset_attrib(cst_srcset,_ea_)}
      var
       a_img_sizes=caml_call1(_aN_,cst_sizes$0),
       a_start=caml_call1(_aK_,cst_start$0);
      function a_step(step){return user_attrib(C[15],cst_step,step)}
      function a_wrap(x){return user_attrib(C[2],cst_wrap$0,x)}
      var a_size=caml_call1(_aK_,cst_size);
      function a_input_type(it){return user_attrib(C[6],cst_type$5,it)}
      function a_menu_type(x){return user_attrib(C[2],cst_type$6,x)}
      function a_command_type(x){return user_attrib(C[2],cst_type$7,x)}
      function a_button_type(bt){return user_attrib(C[6],cst_type$8,bt)}
      function a_multiple(_d$_){return constant_attrib(cst_multiple,_d$_)}
      var
       a_cols=caml_call1(_aK_,cst_cols),
       a_rows=caml_call1(_aK_,cst_rows),
       a_summary=caml_call1(_aL_,cst_summary);
      function a_align(x){return user_attrib(C[2],cst_align,x)}
      var
       a_axis=caml_call1(_aL_,cst_axis),
       a_colspan=caml_call1(_aK_,cst_colspan),
       a_headers=caml_call1(_aM_,cst_headers),
       a_rowspan=caml_call1(_aK_,cst_rowspan);
      function a_scope(x){return user_attrib(C[2],cst_scope,x)}
      var a_border=caml_call1(_aK_,cst_border);
      function a_rules(x){return user_attrib(C[2],cst_rules,x)}
      function a_char(c){return user_attrib(C[5],cst_char,c)}
      function a_data(_d__){return uri_attrib(cst_data$1,_d__)}
      var a_codetype=caml_call1(_aL_,cst_codetype);
      function a_frameborder(x){return user_attrib(C[2],cst_frameborder,x)}
      var
       a_marginheight=caml_call1(_aK_,cst_marginheight),
       a_marginwidth=caml_call1(_aK_,cst_marginwidth);
      function a_scrolling(x){return user_attrib(C[2],cst_scrolling,x)}
      var
       a_target=caml_call1(_aL_,cst_target),
       a_content=caml_call1(_aL_,cst_content),
       a_http_equiv=caml_call1(_aL_,cst_http_equiv);
      function a_media(_d9_){return mediadesc_attrib(cst_media$0,_d9_)}
      var a_role=caml_call1(_aM_,cst_role);
      function a_aria(name)
       {return caml_call1(_aM_,caml_call2(Stdlib[28],cst_aria,name))}
      function terminal(tag,a,param){return caml_call2(Xml[20],a,tag)}
      function unary(tag,a,elt)
       {var _d8_=caml_call1(Xml[1][4],elt);
        return caml_call3(Xml[21],a,tag,_d8_)}
      function star(tag,a,elts){return caml_call3(Xml[21],a,tag,elts)}
      function plus(tag,a,elt,elts)
       {var _d7_=caml_call2(Xml[1][5],elt,elts);
        return caml_call3(Xml[21],a,tag,_d7_)}
      function option_cons(opt,elts)
       {if(opt){var x=opt[1];return caml_call2(Xml[1][5],x,elts)}return elts}
      function body(_d5_,_d6_){return star(cst_body,_d5_,_d6_)}
      function head(_d2_,_d3_,_d4_){return plus(cst_head,_d2_,_d3_,_d4_)}
      function title(_d0_,_d1_){return unary(cst_title$1,_d0_,_d1_)}
      function html(a,head,body)
       {var
         _dZ_=caml_call1(Xml[1][4],body),
         content=caml_call2(Xml[1][5],head,_dZ_);
        return caml_call3(Xml[21],a,cst_html$0,content)}
      function footer(_dX_,_dY_){return star(cst_footer,_dX_,_dY_)}
      function header(_dV_,_dW_){return star(cst_header,_dV_,_dW_)}
      function section(_dT_,_dU_){return star(cst_section,_dT_,_dU_)}
      function nav(_dR_,_dS_){return star(cst_nav,_dR_,_dS_)}
      function pcdata(s){return caml_call1(Xml[17],s)}
      var _aR_=Xml[19];
      function space(param){return caml_call1(_aR_,cst_nbsp)}
      var _aS_=Xml[22],_aT_=Xml[23],_aU_=Xml[24];
      function h1(_dP_,_dQ_){return star(cst_h1,_dP_,_dQ_)}
      function h2(_dN_,_dO_){return star(cst_h2,_dN_,_dO_)}
      function h3(_dL_,_dM_){return star(cst_h3,_dL_,_dM_)}
      function h4(_dJ_,_dK_){return star(cst_h4,_dJ_,_dK_)}
      function h5(_dH_,_dI_){return star(cst_h5,_dH_,_dI_)}
      function h6(_dF_,_dG_){return star(cst_h6,_dF_,_dG_)}
      function hgroup(_dD_,_dE_){return star(cst_hgroup,_dD_,_dE_)}
      function address(_dB_,_dC_){return star(cst_address,_dB_,_dC_)}
      function blockquote(_dz_,_dA_){return star(cst_blockquote,_dz_,_dA_)}
      function div(_dx_,_dy_){return star(cst_div,_dx_,_dy_)}
      function p(_dv_,_dw_){return star(cst_p,_dv_,_dw_)}
      function pre(_dt_,_du_){return star(cst_pre,_dt_,_du_)}
      function abbr(_dr_,_ds_){return star(cst_abbr,_dr_,_ds_)}
      function br(_dp_,_dq_){return terminal(cst_br,_dp_,_dq_)}
      function cite(_dn_,_do_){return star(cst_cite$0,_dn_,_do_)}
      function code(_dl_,_dm_){return star(cst_code,_dl_,_dm_)}
      function dfn(_dj_,_dk_){return star(cst_dfn,_dj_,_dk_)}
      function em(_dh_,_di_){return star(cst_em$0,_dh_,_di_)}
      function kbd(_df_,_dg_){return star(cst_kbd,_df_,_dg_)}
      function q(_dd_,_de_){return star(cst_q,_dd_,_de_)}
      function samp(_db_,_dc_){return star(cst_samp,_db_,_dc_)}
      function span(_c$_,_da_){return star(cst_span$0,_c$_,_da_)}
      function strong(_c9_,_c__){return star(cst_strong,_c9_,_c__)}
      function time(_c7_,_c8_){return star(cst_time,_c7_,_c8_)}
      function var$0(_c5_,_c6_){return star(cst_var,_c5_,_c6_)}
      function a(_c3_,_c4_){return star(cst_a$1,_c3_,_c4_)}
      function dl(_c1_,_c2_){return star(cst_dl,_c1_,_c2_)}
      function ol(_cZ_,_c0_){return star(cst_ol,_cZ_,_c0_)}
      function ul(_cX_,_cY_){return star(cst_ul,_cX_,_cY_)}
      function dd(_cV_,_cW_){return star(cst_dd,_cV_,_cW_)}
      function dt(_cT_,_cU_){return star(cst_dt,_cT_,_cU_)}
      function li(_cR_,_cS_){return star(cst_li,_cR_,_cS_)}
      function hr(_cP_,_cQ_){return terminal(cst_hr,_cP_,_cQ_)}
      function b(_cN_,_cO_){return star(cst_b$0,_cN_,_cO_)}
      function i(_cL_,_cM_){return star(cst_i,_cL_,_cM_)}
      function u(_cJ_,_cK_){return star(cst_u,_cJ_,_cK_)}
      function small(_cH_,_cI_){return star(cst_small,_cH_,_cI_)}
      function sub(_cF_,_cG_){return star(cst_sub,_cF_,_cG_)}
      function sup(_cD_,_cE_){return star(cst_sup,_cD_,_cE_)}
      function mark(_cB_,_cC_){return star(cst_mark,_cB_,_cC_)}
      function rp(_cz_,_cA_){return star(cst_rp,_cz_,_cA_)}
      function rt(_cx_,_cy_){return star(cst_rt,_cx_,_cy_)}
      function ruby(_cv_,_cw_){return star(cst_ruby,_cv_,_cw_)}
      function wbr(_ct_,_cu_){return terminal(cst_wbr,_ct_,_cu_)}
      function bdo(dir,opt,elts)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _cs_=[0,[0,a_dir(dir),a]];
        return caml_call3(Xml[21],_cs_,cst_bdo,elts)}
      var a_datetime=caml_call1(_aL_,cst_datetime);
      function a_shape(x){return user_attrib(C[2],cst_shape,x)}
      function a_coords(coords){return user_attrib(C[11],cst_coords,coords)}
      var a_usemap=caml_call1(_aL_,cst_usemap);
      function a_defer(_cr_){return constant_attrib(cst_defer,_cr_)}
      var a_label=caml_call1(_aL_,cst_label);
      function area(alt,opt,param)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _cq_=[0,[0,caml_call1(a_alt,alt),a]];
        return caml_call2(Xml[20],_cq_,cst_area)}
      function map(_co_,_cp_){return star(cst_map,_co_,_cp_)}
      function del(_cm_,_cn_){return star(cst_del,_cm_,_cn_)}
      function ins(_ck_,_cl_){return star(cst_ins,_ck_,_cl_)}
      function script(_ci_,_cj_){return unary(cst_script$0,_ci_,_cj_)}
      function noscript(_cg_,_ch_){return star(cst_noscript,_cg_,_ch_)}
      function template(_ce_,_cf_){return star(cst_template,_ce_,_cf_)}
      function article(_cc_,_cd_){return star(cst_article,_cc_,_cd_)}
      function aside(_ca_,_cb_){return star(cst_aside,_ca_,_cb_)}
      function main(_b__,_b$_){return star(cst_main,_b__,_b$_)}
      function video_audio(name,src,srcs,opt,elts)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        if(src)var uri=src[1],a$0=[0,a_src(uri),a];else var a$0=a;
        if(srcs)
         {var srcs$0=srcs[1],_b9_=caml_call2(Xml[1][6],srcs$0,elts);
          return caml_call3(Xml[21],[0,a$0],name,_b9_)}
        return caml_call3(Xml[21],[0,a$0],name,elts)}
      function audio(_b5_,_b6_,_b7_,_b8_)
       {return video_audio(cst_audio,_b5_,_b6_,_b7_,_b8_)}
      function video(_b1_,_b2_,_b3_,_b4_)
       {return video_audio(cst_video,_b1_,_b2_,_b3_,_b4_)}
      function canvas(_bZ_,_b0_){return star(cst_canvas,_bZ_,_b0_)}
      function command(label,opt,param)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _bY_=[0,[0,caml_call1(a_label,label),a]];
        return caml_call2(Xml[20],_bY_,cst_command)}
      function menu(children,a,param)
       {if(children)
         var match=children[1],l=match[2],children$0=l;
        else
         var children$0=caml_call1(Xml[1][3],0);
        return caml_call3(Xml[21],a,cst_menu,children$0)}
      function embed(_bW_,_bX_){return terminal(cst_embed,_bW_,_bX_)}
      function source(_bU_,_bV_){return terminal(cst_source,_bU_,_bV_)}
      function meter(_bS_,_bT_){return star(cst_meter,_bS_,_bT_)}
      function output_elt(_bQ_,_bR_){return star(cst_output,_bQ_,_bR_)}
      function form(_bO_,_bP_){return star(cst_form$0,_bO_,_bP_)}
      function svg(opt,children)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _bN_=caml_call2(Svg[242],[0,a],children);
        return caml_call1(Svg[324],_bN_)}
      function input(_bL_,_bM_){return terminal(cst_input,_bL_,_bM_)}
      function keygen(_bJ_,_bK_){return terminal(cst_keygen,_bJ_,_bK_)}
      function label(_bH_,_bI_){return star(cst_label$0,_bH_,_bI_)}
      function option(_bF_,_bG_){return unary(cst_option,_bF_,_bG_)}
      function select(_bD_,_bE_){return star(cst_select,_bD_,_bE_)}
      function textarea(_bB_,_bC_){return unary(cst_textarea,_bB_,_bC_)}
      function button(_bz_,_bA_){return star(cst_button,_bz_,_bA_)}
      function datalist(children,a,param)
       {if(children)
         var match=children[1],x=match[2],children$0=x;
        else
         var children$0=caml_call1(Xml[1][3],0);
        return caml_call3(Xml[21],a,cst_datalist,children$0)}
      function progress(_bx_,_by_){return star(cst_progress,_bx_,_by_)}
      function legend(_bv_,_bw_){return star(cst_legend,_bv_,_bw_)}
      function details(summary,a,children)
       {return plus(cst_details,a,summary,children)}
      function summary(_bt_,_bu_){return star(cst_summary$0,_bt_,_bu_)}
      function fieldset(legend,a,elts)
       {var _bs_=option_cons(legend,elts);
        return caml_call3(Xml[21],a,cst_fieldset,_bs_)}
      function optgroup(label,opt,elts)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _br_=[0,[0,caml_call1(a_label,label),a]];
        return caml_call3(Xml[21],_br_,cst_optgroup,elts)}
      function figcaption(_bp_,_bq_){return star(cst_figcaption,_bp_,_bq_)}
      function figure(figcaption,a,elts)
       {if(figcaption)
         {var _bm_=figcaption[1];
          if(437082891 <= _bm_[1])
           var
            c=_bm_[2],
            _bn_=caml_call1(Xml[1][4],c),
            _bo_=caml_call2(Xml[1][6],elts,_bn_);
          else
           var c$0=_bm_[2],_bo_=caml_call2(Xml[1][5],c$0,elts);
          var content=_bo_}
        else
         var content=elts;
        return caml_call3(Xml[21],a,cst_figure,content)}
      function caption(_bk_,_bl_){return star(cst_caption,_bk_,_bl_)}
      function table(caption,columns,thead,tfoot,a,elts)
       {var content=option_cons(thead,option_cons(tfoot,elts));
        if(columns)
         var
          columns$0=columns[1],
          content$0=caml_call2(Xml[1][6],columns$0,content);
        else
         var content$0=content;
        var content$1=option_cons(caption,content$0);
        return caml_call3(Xml[21],a,cst_table$0,content$1)}
      function td(_bi_,_bj_){return star(cst_td,_bi_,_bj_)}
      function th(_bg_,_bh_){return star(cst_th,_bg_,_bh_)}
      function tr(_be_,_bf_){return star(cst_tr,_be_,_bf_)}
      function colgroup(_bc_,_bd_){return star(cst_colgroup,_bc_,_bd_)}
      function col(_ba_,_bb_){return terminal(cst_col,_ba_,_bb_)}
      function thead(_a__,_a$_){return star(cst_thead,_a__,_a$_)}
      function tbody(_a8_,_a9_){return star(cst_tbody,_a8_,_a9_)}
      function tfoot(_a6_,_a7_){return star(cst_tfoot,_a6_,_a7_)}
      function iframe(_a4_,_a5_){return star(cst_iframe,_a4_,_a5_)}
      function object(params,opt,elts)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        if(params)
         var e=params[1],elts$0=caml_call2(Xml[1][6],e,elts);
        else
         var elts$0=elts;
        return caml_call3(Xml[21],[0,a],cst_object,elts$0)}
      function param(_a2_,_a3_){return terminal(cst_param,_a2_,_a3_)}
      function img(src,alt,opt,param)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _a1_=[0,caml_call1(a_alt,alt),a],a$0=[0,a_src(src),_a1_];
        return caml_call2(Xml[20],[0,a$0],cst_img)}
      function meta(_aZ_,_a0_){return terminal(cst_meta,_aZ_,_a0_)}
      function style(opt,elts)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        return caml_call3(Xml[21],[0,a],cst_style$2,elts)}
      function link(rel,href,opt,param)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _aX_=[0,a_href(href),a],_aY_=[0,[0,a_rel(rel),_aX_]];
        return caml_call2(Xml[20],_aY_,cst_link)}
      function base(_aV_,_aW_){return terminal(cst_base,_aV_,_aW_)}
      function tot(x){return x}
      function totl(x){return x}
      function toelt(x){return x}
      function toeltl(x){return x}
      function doc_toelt(x){return x}
      var I=_a_(Xml);
      function of_seq(s){return caml_call1(I[1],s)}
      function data(s){return caml_call1(Xml[18],s)}
      function leaf(tag,a,param){return caml_call2(Xml[20],a,tag)}
      function node(tag,a,elts){return caml_call3(Xml[21],a,tag,elts)}
      function coerce_elt(x){return x}
      var float_attrib=Xml[4],int_attrib=Xml[5],string_attrib=Xml[6];
      function uri_attrib$0(a,s){return caml_call2(Xml[13],a,s)}
      var
       space_sep_attrib=Xml[7],
       comma_sep_attrib=Xml[8],
       Unsafe=
        [0,
         data,
         leaf,
         node,
         coerce_elt,
         float_attrib,
         int_attrib,
         string_attrib,
         uri_attrib$0,
         space_sep_attrib,
         comma_sep_attrib];
      return [0,
              Xml,
              Info,
              _aH_,
              _aI_,
              to_xmlattribs,
              to_attrib,
              _aJ_,
              _aK_,
              _aL_,
              uri_attrib,
              _aM_,
              _aN_,
              user_attrib,
              bool_attrib,
              constant_attrib,
              linktypes_attrib,
              mediadesc_attrib,
              srcset_attrib,
              a_class,
              a_id,
              a_user_data,
              a_title,
              a_xml_lang,
              a_lang,
              a_style,
              a_property,
              a_onabort,
              a_onafterprint,
              a_onbeforeprint,
              a_onbeforeunload,
              a_onblur,
              a_oncanplay,
              a_oncanplaythrough,
              a_onchange,
              a_ondurationchange,
              a_onemptied,
              a_onended,
              a_onerror,
              a_onfocus,
              a_onformchange,
              a_onforminput,
              a_onhashchange,
              a_oninput,
              a_oninvalid,
              a_onoffline,
              a_ononline,
              a_onpause,
              a_onplay,
              a_onplaying,
              a_onpagehide,
              a_onpageshow,
              a_onpopstate,
              a_onprogress,
              a_onratechange,
              a_onreadystatechange,
              a_onredo,
              a_onresize,
              a_onscroll,
              a_onseeked,
              a_onseeking,
              a_onselect,
              a_onshow,
              a_onstalled,
              a_onstorage,
              a_onsubmit,
              a_onsuspend,
              a_ontimeupdate,
              a_onundo,
              a_onunload,
              a_onvolumechange,
              a_onwaiting,
              a_onload,
              a_onloadeddata,
              a_onloadedmetadata,
              a_onloadstart,
              a_onmessage,
              a_onmousewheel,
              a_onclick,
              a_oncontextmenu,
              a_ondblclick,
              a_ondrag,
              a_ondragend,
              a_ondragenter,
              a_ondragleave,
              a_ondragover,
              a_ondragstart,
              a_ondrop,
              a_onmousedown,
              a_onmouseup,
              a_onmouseover,
              a_onmousemove,
              a_onmouseout,
              a_ontouchstart,
              a_ontouchend,
              a_ontouchmove,
              a_ontouchcancel,
              a_onkeypress,
              a_onkeydown,
              a_onkeyup,
              a_version,
              a_xmlns,
              a_manifest,
              a_cite,
              a_xml_space,
              a_accesskey,
              a_charset,
              a_accept_charset,
              a_accept,
              a_href,
              a_hreflang,
              a_download,
              a_rel,
              a_tabindex,
              a_mime_type,
              a_alt,
              a_height,
              a_src,
              a_width,
              a_for,
              a_for,
              a_for_list,
              a_for_list,
              a_selected,
              a_text_value,
              a_int_value,
              a_value,
              a_float_value,
              a_action,
              a_formmethod,
              a_formmethod,
              a_enctype,
              a_checked,
              a_disabled,
              a_readonly,
              a_maxlength,
              a_minlength,
              a_name,
              a_allowfullscreen,
              a_allowpaymentrequest,
              a_referrerpolicy,
              a_autocomplete,
              a_async,
              a_autofocus,
              a_autoplay,
              a_muted,
              a_crossorigin,
              a_integrity,
              a_mediagroup,
              a_challenge,
              a_contenteditable,
              a_contextmenu,
              a_controls,
              a_dir,
              a_draggable,
              a_form,
              a_formaction,
              a_formenctype,
              a_formnovalidate,
              a_formtarget,
              a_hidden,
              a_high,
              a_icon,
              a_ismap,
              a_keytype,
              a_list,
              a_loop,
              a_low,
              a_max,
              a_input_max,
              a_min,
              a_input_min,
              a_inputmode,
              a_novalidate,
              a_open,
              a_optimum,
              a_pattern,
              a_placeholder,
              a_poster,
              a_preload,
              a_pubdate,
              a_radiogroup,
              a_required,
              a_reversed,
              a_sandbox,
              a_spellcheck,
              a_scoped,
              a_seamless,
              a_sizes,
              a_span,
              a_srclang,
              a_srcset,
              a_img_sizes,
              a_start,
              a_step,
              a_wrap,
              a_size,
              a_input_type,
              a_menu_type,
              a_command_type,
              a_button_type,
              a_multiple,
              a_cols,
              a_rows,
              a_summary,
              a_align,
              a_axis,
              a_colspan,
              a_headers,
              a_rowspan,
              a_scope,
              a_border,
              a_rules,
              a_char,
              a_data,
              a_codetype,
              a_frameborder,
              a_marginheight,
              a_marginwidth,
              a_scrolling,
              a_target,
              a_content,
              a_http_equiv,
              a_media,
              a_role,
              a_aria,
              terminal,
              unary,
              star,
              plus,
              option_cons,
              body,
              head,
              title,
              html,
              footer,
              header,
              section,
              nav,
              pcdata,
              pcdata,
              _aR_,
              space,
              _aS_,
              _aT_,
              _aU_,
              h1,
              h2,
              h3,
              h4,
              h5,
              h6,
              hgroup,
              address,
              blockquote,
              div,
              p,
              pre,
              abbr,
              br,
              cite,
              code,
              dfn,
              em,
              kbd,
              q,
              samp,
              span,
              strong,
              time,
              var$0,
              a,
              dl,
              ol,
              ul,
              dd,
              dt,
              li,
              hr,
              b,
              i,
              u,
              small,
              sub,
              sup,
              mark,
              rp,
              rt,
              ruby,
              wbr,
              bdo,
              a_datetime,
              a_shape,
              a_coords,
              a_usemap,
              a_defer,
              a_label,
              area,
              map,
              del,
              ins,
              script,
              noscript,
              template,
              article,
              aside,
              main,
              video_audio,
              audio,
              video,
              canvas,
              command,
              menu,
              embed,
              source,
              meter,
              output_elt,
              form,
              svg,
              input,
              keygen,
              label,
              option,
              select,
              textarea,
              button,
              datalist,
              progress,
              legend,
              details,
              summary,
              fieldset,
              optgroup,
              figcaption,
              figure,
              caption,
              table,
              table,
              td,
              th,
              tr,
              colgroup,
              col,
              thead,
              tbody,
              tfoot,
              iframe,
              object,
              param,
              img,
              meta,
              style,
              link,
              base,
              tot,
              totl,
              toelt,
              toeltl,
              doc_toelt,
              I,
              of_seq,
              Unsafe]}
    function Wrapped_functions$0(Xml)
     {function string_of_sandbox_token(param)
       {return -177579325 <= param
                ?642066717 <= param
                  ?961985737 <= param?cst_allow_same_origin:cst_allow_popups
                  :-141440231 <= param?cst_allow_forms:cst_allow_pointer_lock
                :-237921695 <= param?cst_allow_script:cst_allow_top_navigation}
      function string_of_linktype(param)
       {if(typeof param === "number")
         return 381789656 <= param
                 ?814486425 <= param
                   ?870035731 <= param
                     ?1021867988 <= param
                       ?1026883179 <= param?cst_external:cst_canonical
                       :892857107 <= param?cst_prev:cst_next
                     :847656566 <= param?cst_last:cst_icon$0
                   :395967329 <= param
                     ?693914176 <= param
                       ?803495649 <= param?cst_help:cst_noreferrer
                       :672161451 <= param?cst_author:cst_license
                     :395056008 <= param?cst_search:cst_noopener
                 :-289155950 <= param
                   ?19067 <= param
                     ?212027606 <= param
                       ?332064784 <= param?cst_first:cst_bookmark
                       :4198970 <= param?cst_tag:cst_up
                     :-123098695 <= param?cst_pingback:cst_nofollow
                   :-837966724 <= param
                     ?-687429350 <= param
                       ?-543567890 <= param?cst_stylesheet:cst_alternate
                       :-784200974 <= param?cst_index:cst_sidebar
                     :-954191215 <= param?cst_archives:cst_prefetch;
        var s=param[2];
        return s}
      function string_of_mediadesc_token(param)
       {if(typeof param === "number")
         return 3256577 <= param
                 ?67844052 <= param
                   ?985170249 <= param
                     ?993823919 <= param?cst_projection:cst_aural
                     :741408196 <= param?cst_handheld:cst_embossed
                   :4203225 <= param?cst_tty:cst_all
                 :-321929715 === param
                   ?cst_braille
                   :-68046964 <= param
                     ?18850 <= param?cst_tv:cst_screen$0
                     :-275811774 <= param?cst_speech:cst_print;
        var s=param[2];
        return s}
      function string_of_referrerpolicy(param)
       {return 128179133 <= param
                ?516162486 === param
                  ?cst_unsafe_url
                  :880519217 <= param
                    ?1065162943 <= param
                      ?cst_same_origin
                      :cst_origin_when_cross_origin
                    :808133042 <= param
                      ?cst_no_referrer_when_downgrade
                      :cst_no_referrer
                :-6975994 <= param
                  ?50834029 <= param?cst$39:cst_origin
                  :-512964804 <= param
                    ?cst_strict_origin
                    :cst_strict_origin_when_cross_o}
      function string_of_big_variant(param)
       {if(typeof param === "number")
         return 4252495 <= param
                 ?748194550 <= param
                   ?892709484 <= param
                     ?936387931 <= param
                       ?984475830 <= param
                         ?1003109192 <= param
                           ?1026883179 <= param?cst_external$0:cst_0
                           :995986491 <= param?cst_formnovalidate$0:cst_audio$0
                         :963342108 <= param?cst_async$0:cst_toolbar
                       :892857107 <= param
                         ?914891065 <= param
                           ?925976842 <= param?cst_soft:cst_rows$0
                           :914389316 <= param?cst_rect$0:cst_prev$0
                         :892711040 <= param?cst_POST:cst_poly
                     :847656566 <= param
                       ?848351876 <= param
                         ?870530776 <= param
                           ?881668074 <= param?cst_open$0:cst_none$2
                           :870035731 <= param?cst_next$0:cst_loop$0
                         :847852583 <= param?cst_left:cst_last$0
                       :803298059 <= param
                         ?814486425 <= param
                           ?836565865 <= param?cst_kana:cst_icon$1
                           :803495649 <= param?cst_help$0:cst_hard
                         :748545107 <= param?cst_cols$0:cst_char$0
                   :292438678 <= param
                     ?434500685 <= param
                       ?596180811 <= param
                         ?693914176 <= param
                           ?726666127 <= param?cst_auto$3:cst_noreferrer$0
                           :672161451 <= param?cst_author$0:cst_muted$0
                         :475573507 <= param?cst_autoplay$0:cst_anonymous
                       :332064784 <= param
                         ?395967329 <= param
                           ?432776079 <= param?cst_metadata$0:cst_license$0
                           :395056008 <= param?cst_search$0:cst_first$0
                         :306241015 <= param?cst_novalidate$0:cst_controls$0
                     :111644259 <= param
                       ?178382384 <= param
                         ?202657151 <= param
                           ?212027606 <= param?cst_bookmark$0:cst_required$0
                           :186574459 <= param?cst_selected$0:cst_circle$0
                         :140750597 <= param?cst_rowgroup:cst_checkbox
                       :19559306 <= param
                         ?50085628 <= param
                           ?95509868 <= param?cst_katakana:cst_email
                           :48900580 <= param?cst_latin:cst_hidden$0
                         :4448519 <= param?cst_yes:cst_url
                 :-369291781 <= param
                   ?17505 <= param
                     ?3805386 <= param
                       ?4102650 <= param
                         ?4198970 <= param
                           ?4199867 <= param?cst_tel:cst_tag$0
                           :4103754 <= param?cst_rtl:cst_row
                         :3953222 <= param?cst_1:cst_ltr
                       :3256577 <= param
                         ?3356704 <= param
                           ?3553398 <= param?cst_GET:cst_col$0
                           :3257036 <= param?cst_any:cst_all$0
                         :19067 <= param?cst_up$0:cst_no
                     :-165772469 <= param
                       ?-123098695 <= param
                         ?-100768656 <= param
                           ?-57574468 <= param?cst_right:cst_scoped$0
                           :-116258131 <= param?cst_numeric:cst_pingback$0
                         :-146439973 <= param?cst_radio:cst_pubdate$0
                       :-289155950 <= param
                         ?-200275514 <= param
                           ?-197222864 <= param?cst_multiple$0:cst_latin_name
                           :-247853591 <= param?cst_autofocus$0:cst_nofollow$0
                         :-363872942 <= param?cst_defer$0:cst_full_width_latin
                   :-784200974 <= param
                     ?-613973726 <= param
                       ?-529147129 <= param
                         ?-423051825 <= param
                           ?-384499551 <= param?cst_default$0:cst_context
                           :-514572330 <= param?cst_verbatim:cst_checked$0
                         :-543567890 <= param?cst_stylesheet$0:cst_reserved$0
                       :-728306478 <= param
                         ?-707104822 <= param
                           ?-687429350 <= param
                             ?cst_alternate$0
                             :cst_http_www_w3_org_1999_xhtml
                           :-709493348 <= param?cst_disabled$0:cst_ismap$0
                         :-773209244 <= param?cst_use_credentials:cst_index$0
                     :-883155966 <= param
                       ?-837966724 <= param
                         ?-792946572 <= param
                           ?-788068560 <= param?cst_justify:cst_groups
                           :-826369749 <= param?cst_command$0:cst_sidebar$0
                         :-872161756 <= param?cst_latin_prose:cst_readonly$0
                       :-1000861353 === param
                         ?cst_prefetch$0
                         :-954191215 <= param
                           ?-931002593 <= param?cst_colgroup$0:cst_archives$0
                           :-967956361 <= param?cst_seamless$0:cst_preserve$0;
        var s=param[2];
        return s}
      function string_of_input_type(param)
       {return 50085628 <= param
                ?612668487 <= param
                  ?781515420 <= param
                    ?936769581 <= param
                      ?969837588 <= param?cst_week:cst_time$0
                      :936573133 <= param?cst_text$0:cst_file
                    :758940238 <= param?cst_date:cst_datetime_local
                  :242538002 <= param
                    ?529348384 <= param
                      ?578936635 <= param?cst_password:cst_month
                      :395056008 <= param?cst_search$1:cst_button$0
                    :111644259 <= param?cst_checkbox$0:cst_email$0
                :-146439973 <= param
                  ?-101336657 <= param
                    ?4252495 <= param
                      ?19559306 <= param?cst_hidden$1:cst_url$0
                      :4199867 <= param?cst_tel$0:cst_reset
                    :-145943139 <= param?cst_range:cst_radio$0
                  :-795439301 <= param
                    ?-578166461 <= param
                      ?-528289822 <= param?cst_readonly$1:cst_color
                      :-703661335 <= param?cst_number:cst_image$0
                    :-828715976 <= param?cst_submit:cst_datetime$0}
      function string_of_number_or_datetime(param)
       {if(-703661335 <= param[1])
         {var n=param[2];return caml_call1(Stdlib[33],n)}
        var t=param[2];
        return t}
      var
       string_of_character=caml_call1(Stdlib_string[1],1),
       string_of_number$0=Stdlib[33],
       string_of_bool=Stdlib[30];
      function onoff_of_bool(param){return 0 === param?cst_off:cst_on}
      function unoption_string(param)
       {if(param){var x=param[1];return x}return cst$40}
      function string_of_step(param)
       {if(param){var x=param[1];return string_of_number(x)}return cst_any$0}
      function string_of_sizes(param)
       {if(param)
         {var
           l=param[1],
           _aF_=
            function(param)
             {var y=param[2],x=param[1];
              return caml_call3(Stdlib_printf[4],_ae_,x,y)},
           _aG_=caml_call2(Stdlib_list[17],_aF_,l);
          return caml_call2(Stdlib_string[7],cst$41,_aG_)}
        return cst_any$1}
      function string_of_sandbox(l)
       {var _aE_=caml_call2(Stdlib_list[17],string_of_sandbox_token,l);
        return caml_call2(Stdlib_string[7],cst$42,_aE_)}
      function string_of_numbers(l)
       {var _aD_=caml_call2(Stdlib_list[17],string_of_number$0,l);
        return caml_call2(Stdlib_string[7],cst$43,_aD_)}
      function string_of_mediadesc(l)
       {var _aC_=caml_call2(Stdlib_list[17],string_of_mediadesc_token,l);
        return caml_call2(Stdlib_string[7],cst$44,_aC_)}
      function string_of_linktypes(l)
       {var _aB_=caml_call2(Stdlib_list[17],string_of_linktype,l);
        return caml_call2(Stdlib_string[7],cst$45,_aB_)}
      function string_of_srcset(l)
       {function f(param)
         {var _aw_=param[1];
          if(-738802218 === _aw_)
           {var
             match=param[2],
             v=match[2],
             url=match[1],
             _ax_=caml_call1(string_of_number$0,v),
             _ay_=caml_call1(Xml[2],url);
            return caml_call3(Stdlib_printf[4],_af_,_ay_,_ax_)}
          if(4252495 <= _aw_)
           {var url$0=param[2];return caml_call1(Xml[2],url$0)}
          var
           match$0=param[2],
           v$0=match$0[2],
           url$1=match$0[1],
           _az_=string_of_number(v$0),
           _aA_=caml_call1(Xml[2],url$1);
          return caml_call3(Stdlib_printf[4],_ag_,_aA_,_az_)}
        var _av_=caml_call2(Stdlib_list[17],f,l);
        return caml_call2(Stdlib_string[7],cst$46,_av_)}
      return [0,
              Xml,
              string_of_sandbox_token,
              string_of_linktype,
              string_of_mediadesc_token,
              string_of_referrerpolicy,
              string_of_big_variant,
              string_of_input_type,
              string_of_number_or_datetime,
              string_of_character,
              string_of_number$0,
              string_of_bool,
              onoff_of_bool,
              unoption_string,
              string_of_step,
              string_of_sizes,
              string_of_sandbox,
              string_of_numbers,
              string_of_mediadesc,
              string_of_linktypes,
              string_of_srcset]}
    function _ah_(_as_,_ar_,_aq_)
     {var _at_=Make_with_wrapped_functions$0(_as_,_ar_,_aq_),_au_=_at_[361];
      return [0,
              _at_[1],
              _at_[2],
              _at_[3],
              _at_[4],
              _at_[19],
              _at_[21],
              _at_[20],
              _at_[22],
              _at_[23],
              _at_[24],
              _at_[27],
              _at_[28],
              _at_[29],
              _at_[30],
              _at_[31],
              _at_[32],
              _at_[33],
              _at_[34],
              _at_[35],
              _at_[36],
              _at_[37],
              _at_[38],
              _at_[39],
              _at_[40],
              _at_[41],
              _at_[42],
              _at_[43],
              _at_[44],
              _at_[77],
              _at_[45],
              _at_[46],
              _at_[47],
              _at_[48],
              _at_[49],
              _at_[50],
              _at_[51],
              _at_[52],
              _at_[53],
              _at_[54],
              _at_[55],
              _at_[56],
              _at_[57],
              _at_[58],
              _at_[59],
              _at_[60],
              _at_[61],
              _at_[62],
              _at_[63],
              _at_[64],
              _at_[65],
              _at_[66],
              _at_[67],
              _at_[68],
              _at_[69],
              _at_[70],
              _at_[71],
              _at_[72],
              _at_[73],
              _at_[74],
              _at_[75],
              _at_[76],
              _at_[78],
              _at_[79],
              _at_[80],
              _at_[81],
              _at_[82],
              _at_[83],
              _at_[84],
              _at_[85],
              _at_[86],
              _at_[87],
              _at_[88],
              _at_[89],
              _at_[90],
              _at_[91],
              _at_[92],
              _at_[93],
              _at_[94],
              _at_[95],
              _at_[96],
              _at_[97],
              _at_[98],
              _at_[99],
              _at_[138],
              _at_[139],
              _at_[141],
              _at_[142],
              _at_[143],
              _at_[144],
              _at_[145],
              _at_[146],
              _at_[147],
              _at_[148],
              _at_[149],
              _at_[150],
              _at_[151],
              _at_[152],
              _at_[153],
              _at_[154],
              _at_[155],
              _at_[156],
              _at_[157],
              _at_[158],
              _at_[159],
              _at_[160],
              _at_[161],
              _at_[162],
              _at_[163],
              _at_[164],
              _at_[165],
              _at_[166],
              _at_[167],
              _at_[168],
              _at_[169],
              _at_[170],
              _at_[171],
              _at_[172],
              _at_[173],
              _at_[174],
              _at_[175],
              _at_[176],
              _at_[177],
              _at_[178],
              _at_[179],
              _at_[180],
              _at_[181],
              _at_[140],
              _at_[182],
              _at_[183],
              _at_[184],
              _at_[185],
              _at_[186],
              _at_[187],
              _at_[188],
              _at_[189],
              _at_[190],
              _at_[191],
              _at_[192],
              _at_[193],
              _at_[194],
              _at_[195],
              _at_[100],
              _at_[101],
              _at_[102],
              _at_[103],
              _at_[104],
              _at_[105],
              _at_[106],
              _at_[107],
              _at_[108],
              _at_[109],
              _at_[110],
              _at_[111],
              _at_[112],
              _at_[113],
              _at_[114],
              _at_[291],
              _at_[128],
              _at_[132],
              _at_[202],
              _at_[131],
              _at_[119],
              _at_[120],
              _at_[121],
              _at_[122],
              _at_[135],
              _at_[136],
              _at_[129],
              _at_[130],
              _at_[201],
              _at_[137],
              _at_[203],
              _at_[123],
              _at_[196],
              _at_[117],
              _at_[197],
              _at_[124],
              _at_[125],
              _at_[126],
              _at_[127],
              _at_[133],
              _at_[134],
              _at_[200],
              _at_[199],
              _at_[198],
              _at_[296],
              _at_[205],
              _at_[206],
              _at_[207],
              _at_[208],
              _at_[209],
              _at_[210],
              _at_[204],
              _at_[211],
              _at_[212],
              _at_[213],
              _at_[115],
              _at_[116],
              _at_[118],
              _at_[292],
              _at_[293],
              _at_[294],
              _at_[214],
              _at_[215],
              _at_[216],
              _at_[217],
              _at_[218],
              _at_[219],
              _at_[220],
              _at_[221],
              _at_[222],
              _at_[295],
              _at_[223],
              _at_[25],
              _at_[26],
              _at_[224],
              _at_[225],
              _at_[239],
              _at_[234],
              _at_[232],
              _at_[353],
              _at_[233],
              _at_[231],
              _at_[318],
              _at_[235],
              _at_[236],
              _at_[237],
              _at_[238],
              _at_[246],
              _at_[247],
              _at_[248],
              _at_[249],
              _at_[250],
              _at_[251],
              _at_[252],
              _at_[253],
              _at_[304],
              _at_[305],
              _at_[306],
              _at_[256],
              _at_[257],
              _at_[254],
              _at_[255],
              _at_[272],
              _at_[273],
              _at_[274],
              _at_[275],
              _at_[276],
              _at_[277],
              _at_[333],
              _at_[334],
              _at_[278],
              _at_[279],
              _at_[280],
              _at_[281],
              _at_[282],
              _at_[283],
              _at_[284],
              _at_[285],
              _at_[289],
              _at_[290],
              _at_[258],
              _at_[259],
              _at_[260],
              _at_[261],
              _at_[262],
              _at_[263],
              _at_[264],
              _at_[265],
              _at_[266],
              _at_[267],
              _at_[268],
              _at_[269],
              _at_[270],
              _at_[271],
              _at_[299],
              _at_[300],
              _at_[349],
              _at_[346],
              _at_[347],
              _at_[348],
              _at_[313],
              _at_[308],
              _at_[309],
              _at_[310],
              _at_[314],
              _at_[297],
              _at_[298],
              _at_[335],
              _at_[337],
              _at_[336],
              _at_[341],
              _at_[342],
              _at_[343],
              _at_[344],
              _at_[345],
              _at_[338],
              _at_[339],
              _at_[340],
              _at_[317],
              _at_[331],
              _at_[328],
              _at_[321],
              _at_[319],
              _at_[325],
              _at_[323],
              _at_[326],
              _at_[332],
              _at_[322],
              _at_[324],
              _at_[320],
              _at_[327],
              _at_[315],
              _at_[316],
              _at_[241],
              _at_[242],
              _at_[243],
              _at_[244],
              _at_[245],
              _at_[329],
              _at_[330],
              _at_[311],
              _at_[312],
              _at_[301],
              _at_[302],
              _at_[303],
              _at_[350],
              _at_[351],
              _at_[352],
              _at_[287],
              _at_[286],
              _at_[288],
              _at_[240],
              _at_[360],
              _at_[354],
              _at_[355],
              _at_[356],
              _at_[357],
              _at_[358],
              _at_[5],
              _at_[6],
              [0,
               _au_[1],
               _au_[3],
               _au_[2],
               _au_[4],
               _au_[7],
               _au_[5],
               _au_[6],
               _au_[8],
               _au_[9],
               _au_[10]]]}
    function _ai_(_ao_)
     {var _ap_=Wrapped_functions$0(_ao_);
      return [0,
              _ap_[1],
              _ap_[6],
              _ap_[11],
              _ap_[12],
              _ap_[9],
              _ap_[7],
              _ap_[8],
              _ap_[19],
              _ap_[18],
              _ap_[5],
              _ap_[17],
              _ap_[16],
              _ap_[15],
              _ap_[20],
              _ap_[14],
              _ap_[13]]}
    var
     Html_f=
      [0,
       function(_al_,_ak_)
        {var
          _aj_=Wrapped_functions$0(_al_),
          _an_=
           Make_with_wrapped_functions$0
            (_al_,
             [0,
              _aj_[1],
              _aj_[6],
              _aj_[11],
              _aj_[12],
              _aj_[9],
              _aj_[7],
              _aj_[8],
              _aj_[19],
              _aj_[18],
              _aj_[5],
              _aj_[17],
              _aj_[16],
              _aj_[15],
              _aj_[20],
              _aj_[14],
              _aj_[13]],
             _ak_),
          _am_=_an_[361];
         return [0,
                 _an_[1],
                 _an_[2],
                 _an_[3],
                 _an_[4],
                 _an_[19],
                 _an_[21],
                 _an_[20],
                 _an_[22],
                 _an_[23],
                 _an_[24],
                 _an_[27],
                 _an_[28],
                 _an_[29],
                 _an_[30],
                 _an_[31],
                 _an_[32],
                 _an_[33],
                 _an_[34],
                 _an_[35],
                 _an_[36],
                 _an_[37],
                 _an_[38],
                 _an_[39],
                 _an_[40],
                 _an_[41],
                 _an_[42],
                 _an_[43],
                 _an_[44],
                 _an_[77],
                 _an_[45],
                 _an_[46],
                 _an_[47],
                 _an_[48],
                 _an_[49],
                 _an_[50],
                 _an_[51],
                 _an_[52],
                 _an_[53],
                 _an_[54],
                 _an_[55],
                 _an_[56],
                 _an_[57],
                 _an_[58],
                 _an_[59],
                 _an_[60],
                 _an_[61],
                 _an_[62],
                 _an_[63],
                 _an_[64],
                 _an_[65],
                 _an_[66],
                 _an_[67],
                 _an_[68],
                 _an_[69],
                 _an_[70],
                 _an_[71],
                 _an_[72],
                 _an_[73],
                 _an_[74],
                 _an_[75],
                 _an_[76],
                 _an_[78],
                 _an_[79],
                 _an_[80],
                 _an_[81],
                 _an_[82],
                 _an_[83],
                 _an_[84],
                 _an_[85],
                 _an_[86],
                 _an_[87],
                 _an_[88],
                 _an_[89],
                 _an_[90],
                 _an_[91],
                 _an_[92],
                 _an_[93],
                 _an_[94],
                 _an_[95],
                 _an_[96],
                 _an_[97],
                 _an_[98],
                 _an_[99],
                 _an_[138],
                 _an_[139],
                 _an_[141],
                 _an_[142],
                 _an_[143],
                 _an_[144],
                 _an_[145],
                 _an_[146],
                 _an_[147],
                 _an_[148],
                 _an_[149],
                 _an_[150],
                 _an_[151],
                 _an_[152],
                 _an_[153],
                 _an_[154],
                 _an_[155],
                 _an_[156],
                 _an_[157],
                 _an_[158],
                 _an_[159],
                 _an_[160],
                 _an_[161],
                 _an_[162],
                 _an_[163],
                 _an_[164],
                 _an_[165],
                 _an_[166],
                 _an_[167],
                 _an_[168],
                 _an_[169],
                 _an_[170],
                 _an_[171],
                 _an_[172],
                 _an_[173],
                 _an_[174],
                 _an_[175],
                 _an_[176],
                 _an_[177],
                 _an_[178],
                 _an_[179],
                 _an_[180],
                 _an_[181],
                 _an_[140],
                 _an_[182],
                 _an_[183],
                 _an_[184],
                 _an_[185],
                 _an_[186],
                 _an_[187],
                 _an_[188],
                 _an_[189],
                 _an_[190],
                 _an_[191],
                 _an_[192],
                 _an_[193],
                 _an_[194],
                 _an_[195],
                 _an_[100],
                 _an_[101],
                 _an_[102],
                 _an_[103],
                 _an_[104],
                 _an_[105],
                 _an_[106],
                 _an_[107],
                 _an_[108],
                 _an_[109],
                 _an_[110],
                 _an_[111],
                 _an_[112],
                 _an_[113],
                 _an_[114],
                 _an_[291],
                 _an_[128],
                 _an_[132],
                 _an_[202],
                 _an_[131],
                 _an_[119],
                 _an_[120],
                 _an_[121],
                 _an_[122],
                 _an_[135],
                 _an_[136],
                 _an_[129],
                 _an_[130],
                 _an_[201],
                 _an_[137],
                 _an_[203],
                 _an_[123],
                 _an_[196],
                 _an_[117],
                 _an_[197],
                 _an_[124],
                 _an_[125],
                 _an_[126],
                 _an_[127],
                 _an_[133],
                 _an_[134],
                 _an_[200],
                 _an_[199],
                 _an_[198],
                 _an_[296],
                 _an_[205],
                 _an_[206],
                 _an_[207],
                 _an_[208],
                 _an_[209],
                 _an_[210],
                 _an_[204],
                 _an_[211],
                 _an_[212],
                 _an_[213],
                 _an_[115],
                 _an_[116],
                 _an_[118],
                 _an_[292],
                 _an_[293],
                 _an_[294],
                 _an_[214],
                 _an_[215],
                 _an_[216],
                 _an_[217],
                 _an_[218],
                 _an_[219],
                 _an_[220],
                 _an_[221],
                 _an_[222],
                 _an_[295],
                 _an_[223],
                 _an_[25],
                 _an_[26],
                 _an_[224],
                 _an_[225],
                 _an_[239],
                 _an_[234],
                 _an_[232],
                 _an_[353],
                 _an_[233],
                 _an_[231],
                 _an_[318],
                 _an_[235],
                 _an_[236],
                 _an_[237],
                 _an_[238],
                 _an_[246],
                 _an_[247],
                 _an_[248],
                 _an_[249],
                 _an_[250],
                 _an_[251],
                 _an_[252],
                 _an_[253],
                 _an_[304],
                 _an_[305],
                 _an_[306],
                 _an_[256],
                 _an_[257],
                 _an_[254],
                 _an_[255],
                 _an_[272],
                 _an_[273],
                 _an_[274],
                 _an_[275],
                 _an_[276],
                 _an_[277],
                 _an_[333],
                 _an_[334],
                 _an_[278],
                 _an_[279],
                 _an_[280],
                 _an_[281],
                 _an_[282],
                 _an_[283],
                 _an_[284],
                 _an_[285],
                 _an_[289],
                 _an_[290],
                 _an_[258],
                 _an_[259],
                 _an_[260],
                 _an_[261],
                 _an_[262],
                 _an_[263],
                 _an_[264],
                 _an_[265],
                 _an_[266],
                 _an_[267],
                 _an_[268],
                 _an_[269],
                 _an_[270],
                 _an_[271],
                 _an_[299],
                 _an_[300],
                 _an_[349],
                 _an_[346],
                 _an_[347],
                 _an_[348],
                 _an_[313],
                 _an_[308],
                 _an_[309],
                 _an_[310],
                 _an_[314],
                 _an_[297],
                 _an_[298],
                 _an_[335],
                 _an_[337],
                 _an_[336],
                 _an_[341],
                 _an_[342],
                 _an_[343],
                 _an_[344],
                 _an_[345],
                 _an_[338],
                 _an_[339],
                 _an_[340],
                 _an_[317],
                 _an_[331],
                 _an_[328],
                 _an_[321],
                 _an_[319],
                 _an_[325],
                 _an_[323],
                 _an_[326],
                 _an_[332],
                 _an_[322],
                 _an_[324],
                 _an_[320],
                 _an_[327],
                 _an_[315],
                 _an_[316],
                 _an_[241],
                 _an_[242],
                 _an_[243],
                 _an_[244],
                 _an_[245],
                 _an_[329],
                 _an_[330],
                 _an_[311],
                 _an_[312],
                 _an_[301],
                 _an_[302],
                 _an_[303],
                 _an_[350],
                 _an_[351],
                 _an_[352],
                 _an_[287],
                 _an_[286],
                 _an_[288],
                 _an_[240],
                 _an_[360],
                 _an_[354],
                 _an_[355],
                 _an_[356],
                 _an_[357],
                 _an_[358],
                 _an_[5],
                 _an_[6],
                 [0,
                  _am_[1],
                  _am_[3],
                  _am_[2],
                  _am_[4],
                  _am_[7],
                  _am_[5],
                  _am_[6],
                  _am_[8],
                  _am_[9],
                  _am_[10]]]},
       _ai_,
       _ah_];
    caml_register_global(1098,Html_f,"Html_f");
    return}
  (function(){return this}()));


//# 1 "../../.js/tyxml/tyxml.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$0=caml_string_of_jsbytes(""),
     cst=caml_string_of_jsbytes("]]>"),
     cst$1=caml_string_of_jsbytes("]]>"),
     cst_CDATA=caml_string_of_jsbytes("<![CDATA["),
     cst$2=caml_string_of_jsbytes("//]]>"),
     cst_CDATA$0=caml_string_of_jsbytes("//<![CDATA["),
     cst$3=caml_string_of_jsbytes("/* ]]> */"),
     cst_CDATA$1=caml_string_of_jsbytes("/* <![CDATA[ */"),
     Stdlib_format=global_data.Stdlib__format,
     Re=global_data.Re,
     Stdlib_printf=global_data.Stdlib__printf,
     Xml_wrap=global_data.Xml_wrap,
     Xml_print=global_data.Xml_print,
     Xml_iter=global_data.Xml_iter,
     Xml_stream=global_data.Xml_stream,
     Svg_f=global_data.Svg_f,
     Html_f=global_data.Html_f,
     _b_=[0,1],
     _c_=
      [0,
       [12,10,[2,0,[12,10,[2,0,[12,10,[2,0,[12,10,0]]]]]]],
       caml_string_of_jsbytes("\n%s\n%s\n%s\n")];
    function uri_of_string(s){return s}
    function string_of_uri(s){return s}
    function acontent(param){var a=param[2];return a}
    function aname(param){var name=param[1];return name}
    function float_attrib(name,value){return [0,name,[0,value]]}
    function int_attrib(name,value){return [0,name,[1,value]]}
    function string_attrib(name,value){return [0,name,[2,value]]}
    function space_sep_attrib(name,values){return [0,name,[3,0,values]]}
    function comma_sep_attrib(name,values){return [0,name,[3,1,values]]}
    function event_handler_attrib(name,value){return [0,name,[2,value]]}
    function mouse_event_handler_attrib(name,value){return [0,name,[2,value]]}
    function keyboard_event_handler_attrib(name,value)
     {return [0,name,[2,value]]}
    function touch_event_handler_attrib(name,value){return [0,name,[2,value]]}
    function uri_attrib(name,value){return [0,name,[2,value]]}
    function uris_attrib(name,values){return [0,name,[3,0,values]]}
    function content(elt){return elt}
    function empty(param){return 0}
    function comment(c){return [0,c]}
    function pcdata(d){return [2,d]}
    function encodedpcdata(d){return [1,d]}
    function entity(e){return [3,e]}
    var _a_=caml_call1(Re[23],cst),re_end_cdata=caml_call1(Re[2],_a_);
    function encoded_cdata(s1,s2,s)
     {var _j5_=caml_call6(Re[22],0,0,_b_,re_end_cdata,cst$0,s);
      return [1,caml_call4(Stdlib_printf[4],_c_,s1,_j5_,s2)]}
    function cdata(_j4_){return encoded_cdata(cst_CDATA,cst$1,_j4_)}
    function cdata_script(_j3_){return encoded_cdata(cst_CDATA$0,cst$2,_j3_)}
    function cdata_style(_j2_){return encoded_cdata(cst_CDATA$1,cst$3,_j2_)}
    function leaf(opt,name)
     {if(opt)var sth=opt[1],a=sth;else var a=0;return [4,name,a]}
    function node(opt,name,children)
     {if(opt)var sth=opt[1],a=sth;else var a=0;return [5,name,a,children]}
    var
     print_list=
      caml_call1
        (caml_call1
          (Xml_print[12],
           [0,
            Xml_wrap[1],
            string_of_uri,
            uri_of_string,
            float_attrib,
            int_attrib,
            string_attrib,
            space_sep_attrib,
            comma_sep_attrib,
            event_handler_attrib,
            mouse_event_handler_attrib,
            keyboard_event_handler_attrib,
            touch_event_handler_attrib,
            uri_attrib,
            uris_attrib,
            empty,
            comment,
            pcdata,
            encodedpcdata,
            entity,
            leaf,
            node,
            cdata,
            cdata_script,
            cdata_style,
            aname,
            acontent,
            content]),
         [0,0])
       [1],
     include=
      caml_call1
       (Xml_iter[1],
        [0,
         Xml_wrap[1],
         string_of_uri,
         uri_of_string,
         float_attrib,
         int_attrib,
         string_attrib,
         space_sep_attrib,
         comma_sep_attrib,
         event_handler_attrib,
         mouse_event_handler_attrib,
         keyboard_event_handler_attrib,
         touch_event_handler_attrib,
         uri_attrib,
         uris_attrib,
         empty,
         comment,
         pcdata,
         encodedpcdata,
         entity,
         leaf,
         node,
         cdata,
         cdata_script,
         cdata_style,
         aname,
         acontent,
         content]),
     amap=include[1],
     amap1=include[2],
     rm_attrib=include[3],
     rm_attrib_from_list=include[4],
     map_int_attrib=include[5],
     map_string_attrib=include[7],
     map_string_attrib_in_list=include[8],
     add_int_attrib=include[9],
     add_string_attrib=include[11],
     add_comma_sep_attrib=include[12],
     add_space_sep_attrib=include[13],
     fold=include[14],
     all_entities=include[15],
     translate=include[16],
     pp=
      caml_call1
        (caml_call1
          (Xml_print[9],
           [0,
            Xml_wrap[1],
            string_of_uri,
            uri_of_string,
            float_attrib,
            int_attrib,
            string_attrib,
            space_sep_attrib,
            comma_sep_attrib,
            event_handler_attrib,
            mouse_event_handler_attrib,
            keyboard_event_handler_attrib,
            touch_event_handler_attrib,
            uri_attrib,
            uris_attrib,
            empty,
            comment,
            pcdata,
            encodedpcdata,
            entity,
            leaf,
            node,
            cdata,
            cdata_script,
            cdata_style,
            aname,
            acontent,
            content]),
         [0,0])
       [1],
     include$0=
      caml_call1
       (Xml_stream[2],
        [0,
         Xml_wrap[1],
         string_of_uri,
         uri_of_string,
         float_attrib,
         int_attrib,
         string_attrib,
         space_sep_attrib,
         comma_sep_attrib,
         event_handler_attrib,
         mouse_event_handler_attrib,
         keyboard_event_handler_attrib,
         touch_event_handler_attrib,
         uri_attrib,
         uris_attrib,
         empty,
         comment,
         pcdata,
         encodedpcdata,
         entity,
         leaf,
         node,
         cdata,
         cdata_script,
         cdata_style]),
     of_seq=include$0[1];
    function print(fmt,x)
     {return caml_call3
              (print_list,caml_call1(Stdlib_format[13],fmt),0,[0,x,0])}
    var
     _d_=Xml_wrap[1],
     Tyxml_xml=
      [0,
       _d_,
       string_of_uri,
       uri_of_string,
       float_attrib,
       int_attrib,
       string_attrib,
       space_sep_attrib,
       comma_sep_attrib,
       event_handler_attrib,
       mouse_event_handler_attrib,
       keyboard_event_handler_attrib,
       touch_event_handler_attrib,
       uri_attrib,
       uris_attrib,
       empty,
       comment,
       pcdata,
       encodedpcdata,
       entity,
       leaf,
       node,
       cdata,
       cdata_script,
       cdata_style,
       aname,
       acontent,
       content,
       pp,
       of_seq,
       amap,
       amap1,
       rm_attrib,
       rm_attrib_from_list,
       map_int_attrib,
       map_string_attrib,
       map_string_attrib_in_list,
       add_int_attrib,
       add_string_attrib,
       add_comma_sep_attrib,
       add_space_sep_attrib,
       fold,
       all_entities,
       translate,
       print_list,
       print];
    caml_register_global(17,Tyxml_xml,"Tyxml_xml");
    var
     M=
      caml_call1
       (Svg_f[1],
        [0,
         _d_,
         string_of_uri,
         uri_of_string,
         float_attrib,
         int_attrib,
         string_attrib,
         space_sep_attrib,
         comma_sep_attrib,
         event_handler_attrib,
         mouse_event_handler_attrib,
         keyboard_event_handler_attrib,
         touch_event_handler_attrib,
         uri_attrib,
         uris_attrib,
         empty,
         comment,
         pcdata,
         encodedpcdata,
         entity,
         leaf,
         node,
         cdata,
         cdata_script,
         cdata_style]),
     _e_=[0,M[2],M[325],M[327]],
     include$1=
      caml_call1
       (caml_call1
         (Xml_print[8],
          [0,
           _d_,
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style,
           aname,
           acontent,
           content]),
        _e_),
     _f_=[0,M[2],M[325],M[327]],
     Make_printer=
      caml_call1
       (caml_call1
         (Xml_print[11],
          [0,
           _d_,
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style,
           aname,
           acontent,
           content]),
        _f_),
     _h_=M[2],
     _i_=M[3],
     _j_=M[4],
     _k_=M[5],
     _l_=M[6],
     _m_=M[7],
     _n_=M[8],
     _o_=M[9],
     _p_=M[10],
     _q_=M[11],
     _r_=M[12],
     _s_=M[13],
     _t_=M[14],
     _u_=M[15],
     _v_=M[16],
     _w_=M[17],
     _x_=M[18],
     _y_=M[19],
     _z_=M[20],
     _A_=M[21],
     _B_=M[22],
     _C_=M[23],
     _D_=M[24],
     _E_=M[25],
     _F_=M[26],
     _G_=M[27],
     _H_=M[28],
     _I_=M[29],
     _J_=M[30],
     _K_=M[31],
     _L_=M[32],
     _M_=M[33],
     _N_=M[34],
     _O_=M[35],
     _P_=M[36],
     _Q_=M[37],
     _R_=M[38],
     _S_=M[39],
     _T_=M[40],
     _U_=M[41],
     _V_=M[42],
     _W_=M[43],
     _X_=M[44],
     _Y_=M[45],
     _Z_=M[46],
     ___=M[47],
     _$_=M[48],
     _aa_=M[49],
     _ab_=M[50],
     _ac_=M[51],
     _ad_=M[52],
     _ae_=M[53],
     _af_=M[54],
     _ag_=M[55],
     _ah_=M[56],
     _ai_=M[57],
     _aj_=M[58],
     _ak_=M[59],
     _al_=M[60],
     _am_=M[61],
     _an_=M[62],
     _ao_=M[63],
     _ap_=M[64],
     _aq_=M[65],
     _ar_=M[66],
     _as_=M[67],
     _at_=M[68],
     _au_=M[69],
     _av_=M[70],
     _aw_=M[71],
     _ax_=M[72],
     _ay_=M[73],
     _az_=M[74],
     _aA_=M[75],
     _aB_=M[76],
     _aC_=M[77],
     _aD_=M[78],
     _aE_=M[79],
     _aF_=M[80],
     _aG_=M[81],
     _aH_=M[82],
     _aI_=M[83],
     _aJ_=M[84],
     _aK_=M[85],
     _aL_=M[86],
     _aM_=M[87],
     _aN_=M[88],
     _aO_=M[89],
     _aP_=M[90],
     _aQ_=M[91],
     _aR_=M[92],
     _aS_=M[93],
     _aT_=M[94],
     _aU_=M[95],
     _aV_=M[96],
     _aW_=M[97],
     _aX_=M[98],
     _aY_=M[99],
     _aZ_=M[100],
     _a0_=M[101],
     _a1_=M[102],
     _a2_=M[103],
     _a3_=M[104],
     _a4_=M[105],
     _a5_=M[106],
     _a6_=M[107],
     _a7_=M[108],
     _a8_=M[109],
     _a9_=M[110],
     _a__=M[111],
     _a$_=M[112],
     _ba_=M[113],
     _bb_=M[114],
     _bc_=M[115],
     _bd_=M[116],
     _be_=M[117],
     _bf_=M[118],
     _bg_=M[119],
     _bh_=M[120],
     _bi_=M[121],
     _bj_=M[122],
     _bk_=M[123],
     _bl_=M[124],
     _bm_=M[125],
     _bn_=M[126],
     _bo_=M[127],
     _bp_=M[128],
     _bq_=M[129],
     _br_=M[130],
     _bs_=M[131],
     _bt_=M[132],
     _bu_=M[133],
     _bv_=M[134],
     _bw_=M[135],
     _bx_=M[136],
     _by_=M[137],
     _bz_=M[138],
     _bA_=M[139],
     _bB_=M[140],
     _bC_=M[141],
     _bD_=M[142],
     _bE_=M[143],
     _bF_=M[144],
     _bG_=M[145],
     _bH_=M[146],
     _bI_=M[147],
     _bJ_=M[148],
     _bK_=M[149],
     _bL_=M[150],
     _bM_=M[151],
     _bN_=M[152],
     _bO_=M[153],
     _bP_=M[154],
     _bQ_=M[155],
     _bR_=M[156],
     _bS_=M[157],
     _bT_=M[158],
     _bU_=M[159],
     _bV_=M[160],
     _bW_=M[161],
     _bX_=M[162],
     _bY_=M[163],
     _bZ_=M[164],
     _b0_=M[165],
     _b1_=M[166],
     _b2_=M[167],
     _b3_=M[168],
     _b4_=M[169],
     _b5_=M[170],
     _b6_=M[171],
     _b7_=M[172],
     _b8_=M[173],
     _b9_=M[174],
     _b__=M[175],
     _b$_=M[176],
     _ca_=M[177],
     _cb_=M[178],
     _cc_=M[179],
     _cd_=M[180],
     _ce_=M[181],
     _cf_=M[182],
     _cg_=M[183],
     _ch_=M[184],
     _ci_=M[185],
     _cj_=M[186],
     _ck_=M[187],
     _cl_=M[188],
     _cm_=M[189],
     _cn_=M[190],
     _co_=M[191],
     _cp_=M[192],
     _cq_=M[193],
     _cr_=M[194],
     _cs_=M[195],
     _ct_=M[196],
     _cu_=M[197],
     _cv_=M[198],
     _cw_=M[199],
     _cx_=M[200],
     _cy_=M[201],
     _cz_=M[202],
     _cA_=M[203],
     _cB_=M[204],
     _cC_=M[205],
     _cD_=M[206],
     _cE_=M[207],
     _cF_=M[208],
     _cG_=M[209],
     _cH_=M[210],
     _cI_=M[211],
     _cJ_=M[212],
     _cK_=M[213],
     _cL_=M[214],
     _cM_=M[215],
     _cN_=M[216],
     _cO_=M[217],
     _cP_=M[218],
     _cQ_=M[219],
     _cR_=M[220],
     _cS_=M[221],
     _cT_=M[222],
     _cU_=M[223],
     _cV_=M[224],
     _cW_=M[225],
     _cX_=M[226],
     _cY_=M[227],
     _cZ_=M[228],
     _c0_=M[229],
     _c1_=M[230],
     _c2_=M[231],
     _c3_=M[232],
     _c4_=M[233],
     _c5_=M[234],
     _c6_=M[235],
     _c7_=M[236],
     _c8_=M[237],
     _c9_=M[238],
     _c__=M[239],
     _c$_=M[240],
     _da_=M[241],
     _db_=M[242],
     _dc_=M[243],
     _dd_=M[244],
     _de_=M[245],
     _df_=M[246],
     _dg_=M[247],
     _dh_=M[248],
     _di_=M[249],
     _dj_=M[250],
     _dk_=M[251],
     _dl_=M[252],
     _dm_=M[253],
     _dn_=M[254],
     _do_=M[255],
     _dp_=M[256],
     _dq_=M[257],
     _dr_=M[258],
     _ds_=M[259],
     _dt_=M[260],
     _du_=M[261],
     _dv_=M[262],
     _dw_=M[263],
     _dx_=M[264],
     _dy_=M[265],
     _dz_=M[266],
     _dA_=M[267],
     _dB_=M[268],
     _dC_=M[269],
     _dD_=M[270],
     _dE_=M[271],
     _dF_=M[272],
     _dG_=M[273],
     _dH_=M[274],
     _dI_=M[275],
     _dJ_=M[276],
     _dK_=M[277],
     _dL_=M[278],
     _dM_=M[279],
     _dN_=M[280],
     _dO_=M[281],
     _dP_=M[282],
     _dQ_=M[283],
     _dR_=M[284],
     _dS_=M[285],
     _dT_=M[286],
     _dU_=M[287],
     _dV_=M[288],
     _dW_=M[289],
     _dX_=M[290],
     _dY_=M[291],
     _dZ_=M[292],
     _d0_=M[293],
     _d1_=M[294],
     _d2_=M[295],
     _d3_=M[296],
     _d4_=M[297],
     _d5_=M[298],
     _d6_=M[299],
     _d7_=M[300],
     _d8_=M[301],
     _d9_=M[302],
     _d__=M[303],
     _d$_=M[304],
     _ea_=M[305],
     _eb_=M[306],
     _ec_=M[307],
     _ed_=M[308],
     _ee_=M[309],
     _ef_=M[310],
     _eg_=M[311],
     _eh_=M[312],
     _ei_=M[313],
     _ej_=M[314],
     _ek_=M[315],
     _el_=M[316],
     _em_=M[317],
     _en_=M[318],
     _eo_=M[319],
     _ep_=M[320],
     _eq_=M[321],
     _er_=M[322],
     _es_=M[323],
     _et_=M[324],
     _eu_=M[325],
     _ev_=M[326],
     _ew_=M[327],
     _ex_=M[328],
     _ey_=M[329],
     _ez_=M[330],
     _eA_=include$1[1],
     _eB_=include$1[2],
     _g_=M[1],
     pp$0=caml_call4(_eB_,0,0,0,0),
     pp_elt=caml_call3(_eA_,0,0,0),
     Tyxml_svg=
      [0,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       _a6_,
       _a7_,
       _a8_,
       _a9_,
       _a__,
       _a$_,
       _ba_,
       _bb_,
       _bc_,
       _bd_,
       _be_,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       _bj_,
       _bk_,
       _bl_,
       _bm_,
       _bn_,
       _bo_,
       _bp_,
       _bq_,
       _br_,
       _bs_,
       _bt_,
       _bu_,
       _bv_,
       _bw_,
       _bx_,
       _by_,
       _bz_,
       _bA_,
       _bB_,
       _bC_,
       _bD_,
       _bE_,
       _bF_,
       _bG_,
       _bH_,
       _bI_,
       _bJ_,
       _bK_,
       _bL_,
       _bM_,
       _bN_,
       _bO_,
       _bP_,
       _bQ_,
       _bR_,
       _bS_,
       _bT_,
       _bU_,
       _bV_,
       _bW_,
       _bX_,
       _bY_,
       _bZ_,
       _b0_,
       _b1_,
       _b2_,
       _b3_,
       _b4_,
       _b5_,
       _b6_,
       _b7_,
       _b8_,
       _b9_,
       _b__,
       _b$_,
       _ca_,
       _cb_,
       _cc_,
       _cd_,
       _ce_,
       _cf_,
       _cg_,
       _ch_,
       _ci_,
       _cj_,
       _ck_,
       _cl_,
       _cm_,
       _cn_,
       _co_,
       _cp_,
       _cq_,
       _cr_,
       _cs_,
       _ct_,
       _cu_,
       _cv_,
       _cw_,
       _cx_,
       _cy_,
       _cz_,
       _cA_,
       _cB_,
       _cC_,
       _cD_,
       _cE_,
       _cF_,
       _cG_,
       _cH_,
       _cI_,
       _cJ_,
       _cK_,
       _cL_,
       _cM_,
       _cN_,
       _cO_,
       _cP_,
       _cQ_,
       _cR_,
       _cS_,
       _cT_,
       _cU_,
       _cV_,
       _cW_,
       _cX_,
       _cY_,
       _cZ_,
       _c0_,
       _c1_,
       _c2_,
       _c3_,
       _c4_,
       _c5_,
       _c6_,
       _c7_,
       _c8_,
       _c9_,
       _c__,
       _c$_,
       _da_,
       _db_,
       _dc_,
       _dd_,
       _de_,
       _df_,
       _dg_,
       _dh_,
       _di_,
       _dj_,
       _dk_,
       _dl_,
       _dm_,
       _dn_,
       _do_,
       _dp_,
       _dq_,
       _dr_,
       _ds_,
       _dt_,
       _du_,
       _dv_,
       _dw_,
       _dx_,
       _dy_,
       _dz_,
       _dA_,
       _dB_,
       _dC_,
       _dD_,
       _dE_,
       _dF_,
       _dG_,
       _dH_,
       _dI_,
       _dJ_,
       _dK_,
       _dL_,
       _dM_,
       _dN_,
       _dO_,
       _dP_,
       _dQ_,
       _dR_,
       _dS_,
       _dT_,
       _dU_,
       _dV_,
       _dW_,
       _dX_,
       _dY_,
       _dZ_,
       _d0_,
       _d1_,
       _d2_,
       _d3_,
       _d4_,
       _d5_,
       _d6_,
       _d7_,
       _d8_,
       _d9_,
       _d__,
       _d$_,
       _ea_,
       _eb_,
       _ec_,
       _ed_,
       _ee_,
       _ef_,
       _eg_,
       _eh_,
       _ei_,
       _ej_,
       _ek_,
       _el_,
       _em_,
       _en_,
       _eo_,
       _ep_,
       _eq_,
       _er_,
       _es_,
       _et_,
       _eu_,
       _ev_,
       _ew_,
       _ex_,
       _ey_,
       _ez_,
       _eB_,
       _eA_,
       Make_printer,
       pp$0,
       pp_elt];
    caml_register_global(19,Tyxml_svg,"Tyxml_svg");
    var
     M$0=
      caml_call1
       (caml_call1
         (Html_f[1],
          [0,
           _d_,
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style]),
        [0,
         _h_,
         _i_,
         _j_,
         _k_,
         _l_,
         _m_,
         _n_,
         _o_,
         _p_,
         _q_,
         _r_,
         _s_,
         _t_,
         _u_,
         _v_,
         _w_,
         _x_,
         _y_,
         _z_,
         _A_,
         _B_,
         _C_,
         _D_,
         _E_,
         _F_,
         _G_,
         _H_,
         _I_,
         _J_,
         _K_,
         _L_,
         _M_,
         _N_,
         _O_,
         _P_,
         _Q_,
         _R_,
         _S_,
         _T_,
         _U_,
         _V_,
         _W_,
         _X_,
         _Y_,
         _Z_,
         ___,
         _$_,
         _aa_,
         _ab_,
         _ac_,
         _ad_,
         _ae_,
         _af_,
         _ag_,
         _ah_,
         _ai_,
         _aj_,
         _ak_,
         _al_,
         _am_,
         _an_,
         _ao_,
         _ap_,
         _aq_,
         _ar_,
         _as_,
         _at_,
         _au_,
         _av_,
         _aw_,
         _ax_,
         _ay_,
         _az_,
         _aA_,
         _aB_,
         _aC_,
         _aD_,
         _aE_,
         _aF_,
         _aG_,
         _aH_,
         _aI_,
         _aJ_,
         _aK_,
         _aL_,
         _aM_,
         _aN_,
         _aO_,
         _aP_,
         _aQ_,
         _aR_,
         _aS_,
         _aT_,
         _aU_,
         _aV_,
         _aW_,
         _aX_,
         _aY_,
         _aZ_,
         _a0_,
         _a1_,
         _a2_,
         _a3_,
         _a4_,
         _a5_,
         _a6_,
         _a7_,
         _a8_,
         _a9_,
         _a__,
         _a$_,
         _ba_,
         _bb_,
         _bc_,
         _bd_,
         _be_,
         _bf_,
         _bg_,
         _bh_,
         _bi_,
         _bj_,
         _bk_,
         _bl_,
         _bm_,
         _bn_,
         _bo_,
         _bp_,
         _bq_,
         _br_,
         _bs_,
         _bt_,
         _bu_,
         _bv_,
         _bw_,
         _bx_,
         _by_,
         _bz_,
         _bA_,
         _bB_,
         _bC_,
         _bD_,
         _bE_,
         _bF_,
         _bG_,
         _bH_,
         _bI_,
         _bJ_,
         _bK_,
         _bL_,
         _bM_,
         _bN_,
         _bO_,
         _bP_,
         _bQ_,
         _bR_,
         _bS_,
         _bT_,
         _bU_,
         _bV_,
         _bW_,
         _bX_,
         _bY_,
         _bZ_,
         _b0_,
         _b1_,
         _b2_,
         _b3_,
         _b4_,
         _b5_,
         _b6_,
         _b7_,
         _b8_,
         _b9_,
         _b__,
         _b$_,
         _ca_,
         _cb_,
         _cc_,
         _cd_,
         _ce_,
         _cf_,
         _cg_,
         _ch_,
         _ci_,
         _cj_,
         _ck_,
         _cl_,
         _cm_,
         _cn_,
         _co_,
         _cp_,
         _cq_,
         _cr_,
         _cs_,
         _ct_,
         _cu_,
         _cv_,
         _cw_,
         _cx_,
         _cy_,
         _cz_,
         _cA_,
         _cB_,
         _cC_,
         _cD_,
         _cE_,
         _cF_,
         _cG_,
         _cH_,
         _cI_,
         _cJ_,
         _cK_,
         _cL_,
         _cM_,
         _cN_,
         _cO_,
         _cP_,
         _cQ_,
         _cR_,
         _cS_,
         _cT_,
         _cU_,
         _cV_,
         _cW_,
         _cX_,
         _cY_,
         _cZ_,
         _c0_,
         _c1_,
         _c2_,
         _c3_,
         _c4_,
         _c5_,
         _c6_,
         _c7_,
         _c8_,
         _c9_,
         _c__,
         _c$_,
         _da_,
         _db_,
         _dc_,
         _dd_,
         _de_,
         _df_,
         _dg_,
         _dh_,
         _di_,
         _dj_,
         _dk_,
         _dl_,
         _dm_,
         _dn_,
         _do_,
         _dp_,
         _dq_,
         _dr_,
         _ds_,
         _dt_,
         _du_,
         _dv_,
         _dw_,
         _dx_,
         _dy_,
         _dz_,
         _dA_,
         _dB_,
         _dC_,
         _dD_,
         _dE_,
         _dF_,
         _dG_,
         _dH_,
         _dI_,
         _dJ_,
         _dK_,
         _dL_,
         _dM_,
         _dN_,
         _dO_,
         _dP_,
         _dQ_,
         _dR_,
         _dS_,
         _dT_,
         _dU_,
         _dV_,
         _dW_,
         _dX_,
         _dY_,
         _dZ_,
         _d0_,
         _d1_,
         _d2_,
         _d3_,
         _d4_,
         _d5_,
         _d6_,
         _d7_,
         _d8_,
         _d9_,
         _d__,
         _d$_,
         _ea_,
         _eb_,
         _ec_,
         _ed_,
         _ee_,
         _ef_,
         _eg_,
         _eh_,
         _ei_,
         _ej_,
         _ek_,
         _el_,
         _em_,
         _en_,
         _eo_,
         _ep_,
         _eq_,
         _er_,
         _es_,
         _et_,
         _eu_,
         _ev_,
         _ew_,
         _ex_,
         _ey_,
         _ez_]),
     _eC_=[0,M$0[2],M$0[337],M$0[339]],
     include$2=
      caml_call1
       (caml_call1
         (Xml_print[8],
          [0,
           _d_,
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style,
           aname,
           acontent,
           content]),
        _eC_),
     _eD_=[0,M$0[2],M$0[337],M$0[339]],
     Make_printer$0=
      caml_call1
       (caml_call1
         (Xml_print[11],
          [0,
           _d_,
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style,
           aname,
           acontent,
           content]),
        _eD_),
     _j0_=include$2[1],
     _j1_=include$2[2],
     _eE_=M$0[1],
     _eF_=M$0[2],
     _eG_=M$0[3],
     _eH_=M$0[4],
     _eI_=M$0[5],
     _eJ_=M$0[6],
     _eK_=M$0[7],
     _eL_=M$0[8],
     _eM_=M$0[9],
     _eN_=M$0[10],
     _eO_=M$0[11],
     _eP_=M$0[12],
     _eQ_=M$0[13],
     _eR_=M$0[14],
     _eS_=M$0[15],
     _eT_=M$0[16],
     _eU_=M$0[17],
     _eV_=M$0[18],
     _eW_=M$0[19],
     _eX_=M$0[20],
     _eY_=M$0[21],
     _eZ_=M$0[22],
     _e0_=M$0[23],
     _e1_=M$0[24],
     _e2_=M$0[25],
     _e3_=M$0[26],
     _e4_=M$0[27],
     _e5_=M$0[28],
     _e6_=M$0[29],
     _e7_=M$0[30],
     _e8_=M$0[31],
     _e9_=M$0[32],
     _e__=M$0[33],
     _e$_=M$0[34],
     _fa_=M$0[35],
     _fb_=M$0[36],
     _fc_=M$0[37],
     _fd_=M$0[38],
     _fe_=M$0[39],
     _ff_=M$0[40],
     _fg_=M$0[41],
     _fh_=M$0[42],
     _fi_=M$0[43],
     _fj_=M$0[44],
     _fk_=M$0[45],
     _fl_=M$0[46],
     _fm_=M$0[47],
     _fn_=M$0[48],
     _fo_=M$0[49],
     _fp_=M$0[50],
     _fq_=M$0[51],
     _fr_=M$0[52],
     _fs_=M$0[53],
     _ft_=M$0[54],
     _fu_=M$0[55],
     _fv_=M$0[56],
     _fw_=M$0[57],
     _fx_=M$0[58],
     _fy_=M$0[59],
     _fz_=M$0[60],
     _fA_=M$0[61],
     _fB_=M$0[62],
     _fC_=M$0[63],
     _fD_=M$0[64],
     _fE_=M$0[65],
     _fF_=M$0[66],
     _fG_=M$0[67],
     _fH_=M$0[68],
     _fI_=M$0[69],
     _fJ_=M$0[70],
     _fK_=M$0[71],
     _fL_=M$0[72],
     _fM_=M$0[73],
     _fN_=M$0[74],
     _fO_=M$0[75],
     _fP_=M$0[76],
     _fQ_=M$0[77],
     _fR_=M$0[78],
     _fS_=M$0[79],
     _fT_=M$0[80],
     _fU_=M$0[81],
     _fV_=M$0[82],
     _fW_=M$0[83],
     _fX_=M$0[84],
     _fY_=M$0[85],
     _fZ_=M$0[86],
     _f0_=M$0[87],
     _f1_=M$0[88],
     _f2_=M$0[89],
     _f3_=M$0[90],
     _f4_=M$0[91],
     _f5_=M$0[92],
     _f6_=M$0[93],
     _f7_=M$0[94],
     _f8_=M$0[95],
     _f9_=M$0[96],
     _f__=M$0[97],
     _f$_=M$0[98],
     _ga_=M$0[99],
     _gb_=M$0[100],
     _gc_=M$0[101],
     _gd_=M$0[102],
     _ge_=M$0[103],
     _gf_=M$0[104],
     _gg_=M$0[105],
     _gh_=M$0[106],
     _gi_=M$0[107],
     _gj_=M$0[108],
     _gk_=M$0[109],
     _gl_=M$0[110],
     _gm_=M$0[111],
     _gn_=M$0[112],
     _go_=M$0[113],
     _gp_=M$0[114],
     _gq_=M$0[115],
     _gr_=M$0[116],
     _gs_=M$0[117],
     _gt_=M$0[118],
     _gu_=M$0[119],
     _gv_=M$0[120],
     _gw_=M$0[121],
     _gx_=M$0[122],
     _gy_=M$0[123],
     _gz_=M$0[124],
     _gA_=M$0[125],
     _gB_=M$0[126],
     _gC_=M$0[127],
     _gD_=M$0[128],
     _gE_=M$0[129],
     _gF_=M$0[130],
     _gG_=M$0[131],
     _gH_=M$0[132],
     _gI_=M$0[133],
     _gJ_=M$0[134],
     _gK_=M$0[135],
     _gL_=M$0[136],
     _gM_=M$0[137],
     _gN_=M$0[138],
     _gO_=M$0[139],
     _gP_=M$0[140],
     _gQ_=M$0[141],
     _gR_=M$0[142],
     _gS_=M$0[143],
     _gT_=M$0[144],
     _gU_=M$0[145],
     _gV_=M$0[146],
     _gW_=M$0[147],
     _gX_=M$0[148],
     _gY_=M$0[149],
     _gZ_=M$0[150],
     _g0_=M$0[151],
     _g1_=M$0[152],
     _g2_=M$0[153],
     _g3_=M$0[154],
     _g4_=M$0[155],
     _g5_=M$0[156],
     _g6_=M$0[157],
     _g7_=M$0[158],
     _g8_=M$0[159],
     _g9_=M$0[160],
     _g__=M$0[161],
     _g$_=M$0[162],
     _ha_=M$0[163],
     _hb_=M$0[164],
     _hc_=M$0[165],
     _hd_=M$0[166],
     _he_=M$0[167],
     _hf_=M$0[168],
     _hg_=M$0[169],
     _hh_=M$0[170],
     _hi_=M$0[171],
     _hj_=M$0[172],
     _hk_=M$0[173],
     _hl_=M$0[174],
     _hm_=M$0[175],
     _hn_=M$0[176],
     _ho_=M$0[177],
     _hp_=M$0[178],
     _hq_=M$0[179],
     _hr_=M$0[180],
     _hs_=M$0[181],
     _ht_=M$0[182],
     _hu_=M$0[183],
     _hv_=M$0[184],
     _hw_=M$0[185],
     _hx_=M$0[186],
     _hy_=M$0[187],
     _hz_=M$0[188],
     _hA_=M$0[189],
     _hB_=M$0[190],
     _hC_=M$0[191],
     _hD_=M$0[192],
     _hE_=M$0[193],
     _hF_=M$0[194],
     _hG_=M$0[195],
     _hH_=M$0[196],
     _hI_=M$0[197],
     _hJ_=M$0[198],
     _hK_=M$0[199],
     _hL_=M$0[200],
     _hM_=M$0[201],
     _hN_=M$0[202],
     _hO_=M$0[203],
     _hP_=M$0[204],
     _hQ_=M$0[205],
     _hR_=M$0[206],
     _hS_=M$0[207],
     _hT_=M$0[208],
     _hU_=M$0[209],
     _hV_=M$0[210],
     _hW_=M$0[211],
     _hX_=M$0[212],
     _hY_=M$0[213],
     _hZ_=M$0[214],
     _h0_=M$0[215],
     _h1_=M$0[216],
     _h2_=M$0[217],
     _h3_=M$0[218],
     _h4_=M$0[219],
     _h5_=M$0[220],
     _h6_=M$0[221],
     _h7_=M$0[222],
     _h8_=M$0[223],
     _h9_=M$0[224],
     _h__=M$0[225],
     _h$_=M$0[226],
     _ia_=M$0[227],
     _ib_=M$0[228],
     _ic_=M$0[229],
     _id_=M$0[230],
     _ie_=M$0[231],
     _if_=M$0[232],
     _ig_=M$0[233],
     _ih_=M$0[234],
     _ii_=M$0[235],
     _ij_=M$0[236],
     _ik_=M$0[237],
     _il_=M$0[238],
     _im_=M$0[239],
     _in_=M$0[240],
     _io_=M$0[241],
     _ip_=M$0[242],
     _iq_=M$0[243],
     _ir_=M$0[244],
     _is_=M$0[245],
     _it_=M$0[246],
     _iu_=M$0[247],
     _iv_=M$0[248],
     _iw_=M$0[249],
     _ix_=M$0[250],
     _iy_=M$0[251],
     _iz_=M$0[252],
     _iA_=M$0[253],
     _iB_=M$0[254],
     _iC_=M$0[255],
     _iD_=M$0[256],
     _iE_=M$0[257],
     _iF_=M$0[258],
     _iG_=M$0[259],
     _iH_=M$0[260],
     _iI_=M$0[261],
     _iJ_=M$0[262],
     _iK_=M$0[263],
     _iL_=M$0[264],
     _iM_=M$0[265],
     _iN_=M$0[266],
     _iO_=M$0[267],
     _iP_=M$0[268],
     _iQ_=M$0[269],
     _iR_=M$0[270],
     _iS_=M$0[271],
     _iT_=M$0[272],
     _iU_=M$0[273],
     _iV_=M$0[274],
     _iW_=M$0[275],
     _iX_=M$0[276],
     _iY_=M$0[277],
     _iZ_=M$0[278],
     _i0_=M$0[279],
     _i1_=M$0[280],
     _i2_=M$0[281],
     _i3_=M$0[282],
     _i4_=M$0[283],
     _i5_=M$0[284],
     _i6_=M$0[285],
     _i7_=M$0[286],
     _i8_=M$0[287],
     _i9_=M$0[288],
     _i__=M$0[289],
     _i$_=M$0[290],
     _ja_=M$0[291],
     _jb_=M$0[292],
     _jc_=M$0[293],
     _jd_=M$0[294],
     _je_=M$0[295],
     _jf_=M$0[296],
     _jg_=M$0[297],
     _jh_=M$0[298],
     _ji_=M$0[299],
     _jj_=M$0[300],
     _jk_=M$0[301],
     _jl_=M$0[302],
     _jm_=M$0[303],
     _jn_=M$0[304],
     _jo_=M$0[305],
     _jp_=M$0[306],
     _jq_=M$0[307],
     _jr_=M$0[308],
     _js_=M$0[309],
     _jt_=M$0[310],
     _ju_=M$0[311],
     _jv_=M$0[312],
     _jw_=M$0[313],
     _jx_=M$0[314],
     _jy_=M$0[315],
     _jz_=M$0[316],
     _jA_=M$0[317],
     _jB_=M$0[318],
     _jC_=M$0[319],
     _jD_=M$0[320],
     _jE_=M$0[321],
     _jF_=M$0[322],
     _jG_=M$0[323],
     _jH_=M$0[324],
     _jI_=M$0[325],
     _jJ_=M$0[326],
     _jK_=M$0[327],
     _jL_=M$0[328],
     _jM_=M$0[329],
     _jN_=M$0[330],
     _jO_=M$0[331],
     _jP_=M$0[332],
     _jQ_=M$0[333],
     _jR_=M$0[334],
     _jS_=M$0[335],
     _jT_=M$0[336],
     _jU_=M$0[337],
     _jV_=M$0[338],
     _jW_=M$0[339],
     _jX_=M$0[340],
     _jY_=M$0[341],
     _jZ_=M$0[342],
     pp$1=caml_call4(_j1_,0,0,0,0),
     pp_elt$0=caml_call3(_j0_,0,0,0),
     Tyxml_html=
      [0,
       _eE_,
       _eF_,
       _eG_,
       _eH_,
       _eI_,
       _eJ_,
       _eK_,
       _eL_,
       _eM_,
       _eN_,
       _eO_,
       _eP_,
       _eQ_,
       _eR_,
       _eS_,
       _eT_,
       _eU_,
       _eV_,
       _eW_,
       _eX_,
       _eY_,
       _eZ_,
       _e0_,
       _e1_,
       _e2_,
       _e3_,
       _e4_,
       _e5_,
       _e6_,
       _e7_,
       _e8_,
       _e9_,
       _e__,
       _e$_,
       _fa_,
       _fb_,
       _fc_,
       _fd_,
       _fe_,
       _ff_,
       _fg_,
       _fh_,
       _fi_,
       _fj_,
       _fk_,
       _fl_,
       _fm_,
       _fn_,
       _fo_,
       _fp_,
       _fq_,
       _fr_,
       _fs_,
       _ft_,
       _fu_,
       _fv_,
       _fw_,
       _fx_,
       _fy_,
       _fz_,
       _fA_,
       _fB_,
       _fC_,
       _fD_,
       _fE_,
       _fF_,
       _fG_,
       _fH_,
       _fI_,
       _fJ_,
       _fK_,
       _fL_,
       _fM_,
       _fN_,
       _fO_,
       _fP_,
       _fQ_,
       _fR_,
       _fS_,
       _fT_,
       _fU_,
       _fV_,
       _fW_,
       _fX_,
       _fY_,
       _fZ_,
       _f0_,
       _f1_,
       _f2_,
       _f3_,
       _f4_,
       _f5_,
       _f6_,
       _f7_,
       _f8_,
       _f9_,
       _f__,
       _f$_,
       _ga_,
       _gb_,
       _gc_,
       _gd_,
       _ge_,
       _gf_,
       _gg_,
       _gh_,
       _gi_,
       _gj_,
       _gk_,
       _gl_,
       _gm_,
       _gn_,
       _go_,
       _gp_,
       _gq_,
       _gr_,
       _gs_,
       _gt_,
       _gu_,
       _gv_,
       _gw_,
       _gx_,
       _gy_,
       _gz_,
       _gA_,
       _gB_,
       _gC_,
       _gD_,
       _gE_,
       _gF_,
       _gG_,
       _gH_,
       _gI_,
       _gJ_,
       _gK_,
       _gL_,
       _gM_,
       _gN_,
       _gO_,
       _gP_,
       _gQ_,
       _gR_,
       _gS_,
       _gT_,
       _gU_,
       _gV_,
       _gW_,
       _gX_,
       _gY_,
       _gZ_,
       _g0_,
       _g1_,
       _g2_,
       _g3_,
       _g4_,
       _g5_,
       _g6_,
       _g7_,
       _g8_,
       _g9_,
       _g__,
       _g$_,
       _ha_,
       _hb_,
       _hc_,
       _hd_,
       _he_,
       _hf_,
       _hg_,
       _hh_,
       _hi_,
       _hj_,
       _hk_,
       _hl_,
       _hm_,
       _hn_,
       _ho_,
       _hp_,
       _hq_,
       _hr_,
       _hs_,
       _ht_,
       _hu_,
       _hv_,
       _hw_,
       _hx_,
       _hy_,
       _hz_,
       _hA_,
       _hB_,
       _hC_,
       _hD_,
       _hE_,
       _hF_,
       _hG_,
       _hH_,
       _hI_,
       _hJ_,
       _hK_,
       _hL_,
       _hM_,
       _hN_,
       _hO_,
       _hP_,
       _hQ_,
       _hR_,
       _hS_,
       _hT_,
       _hU_,
       _hV_,
       _hW_,
       _hX_,
       _hY_,
       _hZ_,
       _h0_,
       _h1_,
       _h2_,
       _h3_,
       _h4_,
       _h5_,
       _h6_,
       _h7_,
       _h8_,
       _h9_,
       _h__,
       _h$_,
       _ia_,
       _ib_,
       _ic_,
       _id_,
       _ie_,
       _if_,
       _ig_,
       _ih_,
       _ii_,
       _ij_,
       _ik_,
       _il_,
       _im_,
       _in_,
       _io_,
       _ip_,
       _iq_,
       _ir_,
       _is_,
       _it_,
       _iu_,
       _iv_,
       _iw_,
       _ix_,
       _iy_,
       _iz_,
       _iA_,
       _iB_,
       _iC_,
       _iD_,
       _iE_,
       _iF_,
       _iG_,
       _iH_,
       _iI_,
       _iJ_,
       _iK_,
       _iL_,
       _iM_,
       _iN_,
       _iO_,
       _iP_,
       _iQ_,
       _iR_,
       _iS_,
       _iT_,
       _iU_,
       _iV_,
       _iW_,
       _iX_,
       _iY_,
       _iZ_,
       _i0_,
       _i1_,
       _i2_,
       _i3_,
       _i4_,
       _i5_,
       _i6_,
       _i7_,
       _i8_,
       _i9_,
       _i__,
       _i$_,
       _ja_,
       _jb_,
       _jc_,
       _jd_,
       _je_,
       _jf_,
       _jg_,
       _jh_,
       _ji_,
       _jj_,
       _jk_,
       _jl_,
       _jm_,
       _jn_,
       _jo_,
       _jp_,
       _jq_,
       _jr_,
       _js_,
       _jt_,
       _ju_,
       _jv_,
       _jw_,
       _jx_,
       _jy_,
       _jz_,
       _jA_,
       _jB_,
       _jC_,
       _jD_,
       _jE_,
       _jF_,
       _jG_,
       _jH_,
       _jI_,
       _jJ_,
       _jK_,
       _jL_,
       _jM_,
       _jN_,
       _jO_,
       _jP_,
       _jQ_,
       _jR_,
       _jS_,
       _jT_,
       _jU_,
       _jV_,
       _jW_,
       _jX_,
       _jY_,
       _jZ_,
       _j1_,
       _j0_,
       Make_printer$0,
       pp$1,
       pp_elt$0];
    caml_register_global(21,Tyxml_html,"Tyxml_html");
    var Tyxml=[0];
    caml_register_global(22,Tyxml,"Tyxml");
    return}
  (function(){return this}()));


//# 1 "../../.js/react/react.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_equal=runtime.caml_equal,
     caml_int_compare=runtime.caml_int_compare,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    var
     global_data=runtime.caml_get_global_data(),
     err_max_rank=caml_string_of_jsbytes("maximal rank exceeded"),
     err_sig_undef=caml_string_of_jsbytes("signal value undefined yet"),
     err_fix=caml_string_of_jsbytes("trying to fix a delayed value"),
     err_retain_never=
      caml_string_of_jsbytes("E.never cannot retain a closure"),
     err_retain_cst_sig=
      caml_string_of_jsbytes("constant signals cannot retain a closure"),
     err_step_executed=caml_string_of_jsbytes("step already executed"),
     err_event_scheduled=
      caml_string_of_jsbytes("event already scheduled on a step"),
     err_signal_scheduled=
      caml_string_of_jsbytes("signal already scheduled on a step"),
     one=[0,1],
     zero=[0,0],
     zero$0=[0,0],
     one$0=[0,1],
     minus_one=[0,-1],
     zero$1=[0,0.],
     one$1=[0,1.],
     minus_one$0=[0,-1.],
     none=[0,0],
     Assert_failure=global_data.Assert_failure,
     Stdlib=global_data.Stdlib,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_weak=global_data.Stdlib__weak,
     _k_=[0,caml_string_of_jsbytes("src/react.ml"),1526,17],
     _j_=[0,caml_string_of_jsbytes("src/react.ml"),1113,18],
     _i_=[0,caml_string_of_jsbytes("src/react.ml"),995,36],
     _h_=[0,caml_string_of_jsbytes("src/react.ml"),761,45],
     _g_=[0,caml_string_of_jsbytes("src/react.ml"),732,53],
     _f_=[0,caml_string_of_jsbytes("src/react.ml"),702,19],
     _e_=[0,1],
     _d_=[0,caml_string_of_jsbytes("src/react.ml"),422,51],
     _c_=[0,caml_string_of_jsbytes("src/react.ml"),411,54];
    function create(size){return [0,caml_call1(Stdlib_weak[1],size),0]}
    function is_empty(a)
     {try
       {var _d0_=a[2] - 1 | 0,_dZ_=0;
        if(! (_d0_ < 0))
         {var i=_dZ_;
          for(;;)
           {if(caml_call2(Stdlib_weak[6],a[1],i))throw Stdlib[3];
            var _d2_=i + 1 | 0;
            if(_d0_ !== i){var i=_d2_;continue}
            break}}
        var _d1_=1;
        return _d1_}
      catch(_d3_)
       {_d3_ = caml_wrap_exception(_d3_);
        if(_d3_ === Stdlib[3])return 0;
        throw _d3_}}
    function clear(a){a[1] = caml_call1(Stdlib_weak[1],0);a[2] = 0;return 0}
    function get(a,i){return caml_call2(Stdlib_weak[4],a[1],i)}
    function swap(a,i$0,i)
     {var v=caml_call2(Stdlib_weak[4],a[1],i);
      caml_call5(Stdlib_weak[8],a[1],i$0,a[1],i,1);
      return caml_call3(Stdlib_weak[3],a[1],i$0,v)}
    function add(a,v)
     {var _dY_=caml_call1(Stdlib_weak[2],a[1]);
      if(a[2] === _dY_)
       {var arr=caml_call1(Stdlib_weak[1],2 * (a[2] + 1 | 0) | 0);
        caml_call5(Stdlib_weak[8],a[1],0,arr,0,a[2]);
        a[1] = arr}
      caml_call3(Stdlib_weak[3],a[1],a[2],[0,v]);
      a[2] = a[2] + 1 | 0;
      return 0}
    function scan_add(a,v)
     {try
       {var _dU_=a[2] - 1 | 0,_dT_=0;
        if(! (_dU_ < 0))
         {var i=_dT_;
          for(;;)
           {var match=caml_call2(Stdlib_weak[4],a[1],i);
            if(! match)
             {caml_call3(Stdlib_weak[3],a[1],i,[0,v]);throw Stdlib[3]}
            var _dW_=i + 1 | 0;
            if(_dU_ !== i){var i=_dW_;continue}
            break}}
        var _dV_=add(a,v);
        return _dV_}
      catch(_dX_)
       {_dX_ = caml_wrap_exception(_dX_);
        if(_dX_ === Stdlib[3])return 0;
        throw _dX_}}
    function rem_last(a)
     {var l=a[2] - 1 | 0;a[2] = l;return caml_call3(Stdlib_weak[3],a[1],l,0)}
    function rem(a,v)
     {try
       {var _dP_=a[2] - 1 | 0,_dO_=0;
        if(! (_dP_ < 0))
         {var i=_dO_;
          for(;;)
           {var match=caml_call2(Stdlib_weak[4],a[1],i);
            if(match)
             {var v$0=match[1];
              if(v === v$0)
               {caml_call3(Stdlib_weak[3],a[1],i,0);throw Stdlib[3]}}
            var _dR_=i + 1 | 0;
            if(_dP_ !== i){var i=_dR_;continue}
            break}}
        var _dQ_=0;
        return _dQ_}
      catch(_dS_)
       {_dS_ = caml_wrap_exception(_dS_);
        if(_dS_ === Stdlib[3])return 0;
        throw _dS_}}
    function fold(f,acc,a)
     {var acc$0=[0,acc],_dM_=a[2] - 1 | 0,_dL_=0;
      if(! (_dM_ < 0))
       {var i=_dL_;
        for(;;)
         {var match=caml_call2(Stdlib_weak[4],a[1],i);
          if(match){var v=match[1];acc$0[1] = caml_call2(f,acc$0[1],v)}
          var _dN_=i + 1 | 0;
          if(_dM_ !== i){var i=_dN_;continue}
          break}}
      return acc$0[1]}
    function compare_down(h,i$0,i)
     {var match=get(h,i$0),match$0=get(h,i);
      if(match)
       {var _dK_=match[1];
        if(match$0){var n=match$0[1];return caml_int_compare(_dK_[1],n[1])}
        return 1}
      return match$0?-1:0}
    function down(h,i)
     {var i$0=i;
      for(;;)
       {var
         last=h[2] - 1 | 0,
         start=2 * i$0 | 0,
         l=start + 1 | 0,
         r=start + 2 | 0;
        if(last < l)return 0;
        var
         child=last < r?l:0 <= compare_down(h,l,r)?r:l,
         _dJ_=0 < compare_down(h,i$0,child)?1:0;
        if(_dJ_){swap(h,i$0,child);var i$0=child;continue}
        return _dJ_}}
    var _a_=Stdlib[19],nil=[0,1,create(0),0,0];
    function create$0(param){var h=create(11);return [0,0,h,0,0]}
    function add$0(c,n$0)
     {if(n$0[2] === c)return 0;
      n$0[2] = c;
      var _dI_=c[2];
      add(_dI_,n$0);
      var i$0=_dI_[2] - 1 | 0,i=i$0,last_none=0;
      for(;;)
       {if(0 === i)return last_none?down(_dI_,0):last_none;
        var p=(i - 1 | 0) / 2 | 0,match=get(_dI_,i),match$0=get(_dI_,p);
        if(match)
         {var _dH_=match[1];
          if(match$0)
           {var n=match$0[1];
            if(0 <= caml_int_compare(_dH_[1],n[1]))
             return last_none?down(_dI_,i):last_none;
            swap(_dI_,i,p);
            var i=p,last_none=0;
            continue}
          swap(_dI_,i,p);
          var i=p,last_none=1;
          continue}
        return 0}}
    function add_deps(c,n)
     {var _dG_=n[6],_dE_=_dG_[2] - 1 | 0,_dD_=0;
      if(! (_dE_ < 0))
       {var i=_dD_;
        for(;;)
         {var match=caml_call2(Stdlib_weak[4],_dG_[1],i);
          if(match){var v=match[1];add$0(c,v)}
          var _dF_=i + 1 | 0;
          if(_dE_ !== i){var i=_dF_;continue}
          break}}
      return 0}
    function add_eop(c,op){c[3] = [0,op,c[3]];return 0}
    function allow_reschedule(n){n[2] = nil;return 0}
    function rebuild(c)
     {var _dC_=c[2],_dA_=(_dC_[2] - 2 | 0) / 2 | 0;
      if(! (_dA_ < 0))
       {var i=_dA_;
        for(;;)
         {down(_dC_,i);
          var _dB_=i - 1 | 0;
          if(0 !== i){var i=_dB_;continue}
          break}}
      return 0}
    function execute(c$1)
     {if(c$1[1])return caml_call1(Stdlib[1],err_step_executed);
      var c=c$1;
      a:
      for(;;)
       {var
         eops=
          function(c)
           {var _dy_=c[3];
            function _dz_(op){return caml_call1(op,0)}
            caml_call2(Stdlib_list[15],_dz_,_dy_);
            c[3] = 0;
            return 0},
         cops=
          function(c)
           {var _dw_=c[4];
            function _dx_(op){return caml_call1(op,0)}
            caml_call2(Stdlib_list[15],_dx_,_dw_);
            c[4] = 0;
            return 0},
         finish=function(c){c[1] = 1;c[2] = create(0);return 0};
        b:
        for(;;)
         {var _ds_=c[2];
          for(;;)
           {var s=_ds_[2];
            if(0 === s)
             var match=0;
            else
             {var v=get(_ds_,0);
              if(1 < s)
               {var _dr_=get(_ds_,s - 1 | 0);
                caml_call1(caml_call2(Stdlib_weak[3],_ds_[1],0),_dr_);
                rem_last(_ds_);
                down(_ds_,0)}
              else
               rem_last(_ds_);
              if(! v)continue;
              var match=v}
            if(match)
             {var n=match[1];
              if(n[1] !== _a_){caml_call1(n[5],c);continue b}
              var c$0=create$0(0);
              eops(c);
              var
               _dt_=c[2],
               _dq_=0,
               _du_=[0,n,fold(function(acc,e){return [0,e,acc]},_dq_,_dt_)],
               _dv_=
                function(c){return function(n){return caml_call1(n[5],c)}}
                 (c$0);
              caml_call2(Stdlib_list[15],_dv_,_du_);
              cops(c);
              finish(c);
              var c=c$0;
              continue a}
            eops(c);
            cops(c);
            return finish(c)}}}}
    function find_unfinished(nl)
     {var param$2=[0,nl,0],next=0,param=param$2;
      a:
      for(;;)
       {if(param)
         {var _dp_=param[1];
          if(_dp_)
           {var todo=param[2],next$0=next,param$1=_dp_;
            for(;;)
             {if(param$1)
               {var nl$0=param$1[2],n=param$1[1];
                if(n[2][1])
                 {var
                   next$1=[0,caml_call1(n[4],0),next$0],
                   next$0=next$1,
                   param$1=nl$0;
                  continue}
                return n[2]}
              var next=next$0,param=todo;
              continue a}}
          var param$0=param[2],param=param$0;
          continue}
        if(0 === next)return nil;
        var param=next,next=0;
        continue}}
    var _b_=Stdlib[20],max_rank=_a_ - 1 | 0;
    function nop(param){return 0}
    function no_producers(param){return 0}
    function create$1(r){return [0,r,nil,nop,no_producers,nop,create(0)]}
    function rem_dep(n$0,n){return rem(n$0[6],n)}
    function add_dep(n$0,n){return scan_add(n$0[6],n)}
    function deps(n)
     {var _dn_=n[6],_do_=0;
      return fold(function(acc,d){return [0,d,acc]},_do_,_dn_)}
    function bind(n,p,u){n[4] = p;n[5] = u;return 0}
    function stop(opt,n)
     {if(opt)var sth=opt[1],strong=sth;else var strong=0;
      if(strong)
       {var param$1=caml_call1(n[4],0);
        n[4] = no_producers;
        n[5] = nop;
        clear(n[6]);
        var next=0,to_rem=n,param=param$1;
        for(;;)
         {if(param)
           {var todo=param[2],n$0=param[1];
            rem_dep(n$0,to_rem);
            if(n$0[1] !== _b_ && ! (1 - is_empty(n$0[6])))
             {var prods=caml_call1(n$0[4],0);
              n$0[4] = no_producers;
              n$0[5] = nop;
              clear(n$0[6]);
              var next$0=[0,[0,n$0,prods],next],next=next$0,param=todo;
              continue}
            var param=todo;
            continue}
          if(next)
           {var
             next$1=next[2],
             match=next[1],
             param$0=match[2],
             to_rem$0=match[1],
             next=next$1,
             to_rem=to_rem$0,
             param=param$0;
            continue}
          return 0}}
      n[4] = no_producers;
      n[5] = nop;
      return clear(n[6])}
    var max=create$1(_b_);
    function rmax(n$0,n){return n[1] < n$0[1]?n$0:n}
    function rsucc(n)
     {return n[1] === _a_
              ?_b_
              :n[1] < max_rank?n[1] + 1 | 0:caml_call1(Stdlib[1],err_max_rank)}
    function rsucc2(n$0,n){var r=rsucc(n$0),r$0=rsucc(n);return r$0 < r?r:r$0}
    function update_rank(n,r)
     {if(n[1] < r)
       {n[1] = r;
        var param$1=[0,n,0],param=param$1;
        for(;;)
         {if(param)
           {var
             todo=param[2],
             n$0=param[1],
             update$0=
              function(n)
               {function update(todo,d)
                 {if(! (n[1] < d[1]) && n[1] !== _a_)
                   {d[1] = rsucc(n);return [0,d,todo]}
                  return todo}
                return update},
             update=update$0(n$0),
             param$0=fold(update,todo,n$0[6]),
             param=param$0;
            continue}
          return 1}}
      return 0}
    function eval$0(m)
     {var _dm_=m[1][1];
      if(_dm_){var v=_dm_[1];return v}
      throw [0,Assert_failure,_c_]}
    function emut(rank){return [0,[0,0],create$1(rank)]}
    function event(m,p,u){bind(m[2],p,u);return [0,m]}
    function eupdate(v,m,c)
     {m[1][1] = [0,v];
      var _dk_=m[1];
      function op(_dl_){_dk_[1] = 0;return 0}
      c[4] = [0,op,c[4]];
      return add_deps(c,m[2])}
    function sval(m)
     {var _dj_=m[1];
      if(_dj_){var v=_dj_[1];return v}
      throw [0,Assert_failure,_d_]}
    function smut(rank,eq){return [0,0,eq,create$1(rank)]}
    function signal(i,m,p,u)
     {bind(m[3],p,u);
      if(i)m[1] = i;
      var c=find_unfinished(caml_call1(m[3][4],0));
      if(c === nil)caml_call1(m[3][5],nil);else add$0(c,m[3]);
      return [1,m]}
    function supdate(v,m,c)
     {var _dh_=m[1];
      if(_dh_)
       {var v$0=_dh_[1];
        if(caml_call2(m[2],v,v$0))return 0;
        m[1] = [0,v];
        var _di_=c !== nil?1:0;
        return _di_?add_deps(c,m[3]):_di_}
      m[1] = [0,v];
      return 0}
    function add_dep$0(m,n)
     {add_dep(m[2],n);
      var _dg_=0 !== m[1][1]?1:0;
      return _dg_?add$0(m[2][2],n):_dg_}
    var never=0;
    function create$2(param)
     {var m=emut(_b_);
      return [0,
              [0,m],
              function(step,v)
               {if(step)
                 {var c=step[1];
                  if(c[1])
                   caml_call1(Stdlib[1],err_step_executed);
                  else
                   if(m[2][2][1])
                    m[2][2] = c;
                   else
                    caml_call1(Stdlib[1],err_event_scheduled);
                  return eupdate(v,m,c)}
                var c$0=create$0(0);
                m[2][2] = c$0;
                eupdate(v,m,c$0);
                return execute(c$0)}]}
    function retain(e,c)
     {if(e){var m=e[1],c$0=m[2][3];m[2][3] = c;return [0,82,c$0]}
      return caml_call1(Stdlib[1],err_retain_never)}
    function stop$0(strong,param)
     {if(param){var m=param[1];return stop(strong,m[2])}return 0}
    function equal(e$0,e)
     {if(e$0)
       {if(e){var m=e[1],m$0=e$0[1];return m$0 === m?1:0}}
      else
       if(! e)return 1;
      return 0}
    function trace(opt,t,e)
     {if(opt)var sth=opt[1],iff=sth;else var iff=_e_;
      if(0 === iff[0])
       {if(0 === iff[1])return e;
        if(e)
         {var
           m=e[1],
           m$0=emut(rsucc(m[2])),
           p=function(param){return [0,m[2],0]},
           u=
            function(c)
             {var v=eval$0(m);caml_call1(t,v);return eupdate(v,m$0,c)};
          add_dep$0(m,m$0[2]);
          return event(m$0,p,u)}
        return e}
      var mc=iff[1];
      if(e)
       {var
         m$1=e[1],
         m$2=emut(rsucc2(mc[3],m$1[2])),
         p$0=function(param){return [0,mc[3],[0,m$1[2],0]]},
         u$0=
          function(c)
           {var _df_=m$1[1][1];
            if(_df_)
             {var v=_df_[1];
              if(sval(mc))caml_call1(t,v);
              return eupdate(v,m$2,c)}
            return 0};
        add_dep(mc[3],m$2[2]);
        add_dep$0(m$1,m$2[2]);
        return event(m$2,p$0,u$0)}
      return 0}
    function once(param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {rem_dep(m[2],m$0[2]);
            eupdate(eval$0(m),m$0,c);
            return stop(0,m$0[2])};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function drop_once(param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {function u(c){return eupdate(eval$0(m),m$0,c)}
            return bind(m$0[2],p,u)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function app(ef,param)
     {if(param)
       {var m=param[1];
        if(ef)
         {var
           mf=ef[1],
           m$0=emut(rsucc2(m[2],mf[2])),
           p=function(param){return [0,m[2],[0,mf[2],0]]},
           u=
            function(c)
             {var _dd_=mf[1][1],_de_=m[1][1];
              if(_dd_ && _de_)
               {var v=_de_[1],f=_dd_[1];return eupdate(caml_call1(f,v),m$0,c)}
              return 0};
          add_dep$0(m,m$0[2]);
          add_dep$0(mf,m$0[2]);
          return event(m$0,p,u)}
        return 0}
      return 0}
    function map(f,param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=function(c){return eupdate(caml_call1(f,eval$0(m)),m$0,c)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function stamp(e,v)
     {if(e)
       {var
         m=e[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=function(c){return eupdate(v,m$0,c)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function filter(pred,param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var v=eval$0(m);return caml_call1(pred,v)?eupdate(v,m$0,c):0};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function fmap(fm,param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var match=caml_call1(fm,eval$0(m));
            if(match){var v=match[1];return eupdate(v,m$0,c)}
            return 0};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function diff(d,param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         last=[0,0],
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var v=eval$0(m),_dc_=last[1];
            if(_dc_)
             {var v$0=_dc_[1];
              last[1] = [0,v];
              return eupdate(caml_call2(d,v,v$0),m$0,c)}
            last[1] = [0,v];
            return 0};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function changes(opt,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         last=[0,0],
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var v=eval$0(m),_db_=last[1];
            if(_db_)
             {var v$0=_db_[1];
              last[1] = [0,v];
              return caml_call2(eq,v,v$0)?0:eupdate(v,m$0,c)}
            last[1] = [0,v];
            return eupdate(v,m$0,c)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function on(c,e)
     {if(e)
       {var m=e[1];
        if(0 === c[0])return 0 === c[1]?0:e;
        var
         mc=c[1],
         m$0=emut(rsucc2(m[2],mc[3])),
         p=function(param){return [0,m[2],[0,mc[3],0]]},
         u=function(c){return m[1][1]?sval(mc)?eupdate(eval$0(m),m$0,c):0:0};
        add_dep$0(m,m$0[2]);
        add_dep(mc[3],m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function dismiss(c,e)
     {if(e)
       {var m=e[1];
        if(c)
         {var
           mc=c[1],
           m$0=emut(rsucc2(mc[2],m[2])),
           p=function(param){return [0,mc[2],[0,m[2],0]]},
           u=function(c){return mc[1][1]?0:eupdate(eval$0(m),m$0,c)};
          add_dep$0(mc,m$0[2]);
          add_dep$0(m,m$0[2]);
          return event(m$0,p,u)}
        return e}
      return 0}
    function until(c,e)
     {if(e)
       {var m=e[1];
        if(c)
         {var
           mc=c[1],
           m$0=emut(rsucc2(m[2],mc[2])),
           p=function(param){return [0,m[2],[0,mc[2],0]]},
           u=
            function(c)
             {return mc[1][1]
                      ?(rem_dep(m[2],m$0[2]),rem_dep(mc[2],m$0[2]),stop(0,m$0[2]))
                      :eupdate(eval$0(m),m$0,c)};
          add_dep$0(m,m$0[2]);
          add_dep$0(mc,m$0[2]);
          return event(m$0,p,u)}
        return e}
      return 0}
    function accum(ef,i)
     {if(ef)
       {var
         m=ef[1],
         m$0=emut(rsucc(m[2])),
         acc=[0,i],
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var _da_=acc[1];
            acc[1] = caml_call1(eval$0(m),_da_);
            return eupdate(acc[1],m$0,c)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function fold$0(f,i,param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         acc=[0,i],
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var _c$_=eval$0(m);
            acc[1] = caml_call2(f,acc[1],_c$_);
            return eupdate(acc[1],m$0,c)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function occurs(m){return 0 !== m[1][1]?1:0}
    function find_muts_and_next_rank(param)
     {var acc=0,max$0=max,param$0=param;
      for(;;)
       {if(param$0)
         {var _c9_=param$0[1];
          if(_c9_)
           {var
             l=param$0[2],
             m=_c9_[1],
             max$1=rmax(max$0,m[2]),
             acc$0=[0,m,acc],
             acc=acc$0,
             max$0=max$1,
             param$0=l;
            continue}
          var param$1=param$0[2],param$0=param$1;
          continue}
        var _c__=rsucc(max$0);
        return [0,caml_call1(Stdlib_list[9],acc),_c__]}}
    function select(el)
     {var
       match=find_muts_and_next_rank(el),
       r=match[2],
       emuts=match[1],
       m=emut(r);
      function p(param)
       {function _c8_(m){return m[2]}
        return caml_call2(Stdlib_list[19],_c8_,emuts)}
      function u(c)
       {try
         {var
           _c6_=
            eupdate(eval$0(caml_call2(Stdlib_list[34],occurs,emuts)),m,c);
          return _c6_}
        catch(_c7_)
         {_c7_ = caml_wrap_exception(_c7_);
          if(_c7_ === Stdlib[8])throw [0,Assert_failure,_f_];
          throw _c7_}}
      function _c5_(m$0){return add_dep$0(m$0,m[2])}
      caml_call2(Stdlib_list[15],_c5_,emuts);
      return event(m,p,u)}
    function merge(f,a,el)
     {var
       match=find_muts_and_next_rank(el),
       r=match[2],
       emuts=match[1],
       m=emut(r);
      function p(param)
       {function _c4_(m){return m[2]}
        return caml_call2(Stdlib_list[19],_c4_,emuts)}
      function u(c)
       {var acc=a,param=emuts;
        for(;;)
         {if(param)
           {var l=param[2],m$0=param[1];
            if(occurs(m$0))
             {var acc$0=caml_call2(f,acc,eval$0(m$0)),acc=acc$0,param=l;
              continue}
            var param=l;
            continue}
          return eupdate(acc,m,c)}}
      function _c3_(m$0){return add_dep$0(m$0,m[2])}
      caml_call2(Stdlib_list[15],_c3_,emuts);
      return event(m,p,u)}
    function switch$0(e,param)
     {if(param)
       {var ms=param[1];
        if(e)var m=e[1],r=rsucc2(m[2],ms[2]);else var r=rsucc(ms[2]);
        var
         m$0=emut(r),
         src=[0,e],
         p=
          function(param)
           {var _c2_=src[1];
            if(_c2_){var m=_c2_[1];return [0,m[2],[0,ms[2],0]]}
            return [0,ms[2],0]},
         u=
          function(c)
           {var _cW_=ms[1][1];
            if(_cW_)
             {var e=_cW_[1],_cX_=src[1];
              if(_cX_){var m=_cX_[1];rem_dep(m[2],m$0[2])}
              src[1] = e;
              if(e)
               {var m$1=e[1];
                add_dep(m$1[2],m$0[2]);
                var _cY_=rsucc2(m$1[2],ms[2]);
                if(update_rank(m$0[2],_cY_))
                 {allow_reschedule(m$0[2]);return rebuild(c)}
                var _cZ_=m$1[1][1];
                if(_cZ_){var v=_cZ_[1];return eupdate(v,m$0,c)}
                return 0}
              var _c0_=rsucc(ms[2]);
              update_rank(m$0[2],_c0_);
              return 0}
            var _c1_=src[1];
            if(_c1_){var m$2=_c1_[1];return eupdate(eval$0(m$2),m$0,c)}
            throw [0,Assert_failure,_g_]};
        if(e){var m$1=e[1];add_dep$0(m$1,m$0[2])}
        add_dep$0(ms,m$0[2]);
        return event(m$0,p,u)}
      return e}
    function fix(f)
     {var m=emut(_a_);
      function _cQ_(param){throw [0,Assert_failure,_h_]}
      var
       e=event(m,function(param){return 0},_cQ_),
       _cR_=caml_call1(f,e),
       _cS_=_cR_[1];
      if(_cS_)
       {var r=_cR_[2],m$0=_cS_[1];
        if(m$0[2][1] === _a_)caml_call1(Stdlib[1],err_fix);
        var
         p=function(param){return 0},
         u=
          function(c)
           {var _cT_=[0,eval$0(m$0)];
            m[1][1] = _cT_;
            var _cU_=m[1];
            add_eop(c,function(_cV_){_cU_[1] = 0;return 0});
            return add_deps(c,m[2])};
        bind(m[2],p,u);
        add_dep$0(m$0,m[2]);
        return r}
      var r$0=_cR_[2];
      return r$0}
    function l2(f,e0,match)
     {if(e0)
       {if(match)
         {var
           m1=match[1],
           m0=e0[1],
           r=rsucc2(m0[2],m1[2]),
           m=emut(r),
           p=function(param){return [0,m0[2],[0,m1[2],0]]},
           u=
            function(c)
             {var _cO_=m0[1][1],_cP_=m1[1][1];
              if(_cO_ && _cP_)
               {var v1=_cP_[1],v0=_cO_[1];
                return eupdate(caml_call2(f,v0,v1),m,c)}
              return 0};
          add_dep$0(m0,m[2]);
          add_dep$0(m1,m[2]);
          return event(m,p,u)}
        return 0}
      return 0}
    function l3(f,e0,e1,match)
     {if(e0)
       {if(e1)
         {if(match)
           {var
             m2=match[1],
             m1=e1[1],
             m0=e0[1],
             _cK_=m2[2],
             r=rsucc(rmax(rmax(m0[2],m1[2]),_cK_)),
             m=emut(r),
             p=function(param){return [0,m0[2],[0,m1[2],[0,m2[2],0]]]},
             u=
              function(c)
               {var _cL_=m0[1][1],_cM_=m1[1][1],_cN_=m2[1][1];
                if(_cL_ && _cM_ && _cN_)
                 {var v2=_cN_[1],v1=_cM_[1],v0=_cL_[1];
                  return eupdate(caml_call3(f,v0,v1,v2),m,c)}
                return 0};
            add_dep$0(m0,m[2]);
            add_dep$0(m1,m[2]);
            add_dep$0(m2,m[2]);
            return event(m,p,u)}
          return 0}
        return 0}
      return 0}
    function l4(f,e0,e1,e2,match)
     {if(e0)
       {if(e1)
         {if(e2)
           {if(match)
             {var
               m3=match[1],
               m2=e2[1],
               m1=e1[1],
               m0=e0[1],
               _cF_=rmax(m2[2],m3[2]),
               r=rsucc(rmax(rmax(m0[2],m1[2]),_cF_)),
               m=emut(r),
               p=
                function(param)
                 {return [0,m0[2],[0,m1[2],[0,m2[2],[0,m3[2],0]]]]},
               u=
                function(c)
                 {var _cG_=m0[1][1],_cH_=m1[1][1],_cI_=m2[1][1],_cJ_=m3[1][1];
                  if(_cG_ && _cH_ && _cI_ && _cJ_)
                   {var v3=_cJ_[1],v2=_cI_[1],v1=_cH_[1],v0=_cG_[1];
                    return eupdate(caml_call4(f,v0,v1,v2,v3),m,c)}
                  return 0};
              add_dep$0(m0,m[2]);
              add_dep$0(m1,m[2]);
              add_dep$0(m2,m[2]);
              add_dep$0(m3,m[2]);
              return event(m,p,u)}
            return 0}
          return 0}
        return 0}
      return 0}
    function l5(f,e0,e1,e2,e3,match)
     {if(e0)
       {if(e1)
         {if(e2)
           {if(e3)
             {if(match)
               {var
                 m4=match[1],
                 m3=e3[1],
                 m2=e2[1],
                 m1=e1[1],
                 m0=e0[1],
                 _cy_=m4[2],
                 _cz_=rmax(m2[2],m3[2]),
                 r=rsucc(rmax(rmax(rmax(m0[2],m1[2]),_cz_),_cy_)),
                 m=emut(r),
                 p=
                  function(param)
                   {return [0,m0[2],[0,m1[2],[0,m2[2],[0,m3[2],[0,m4[2],0]]]]]},
                 u=
                  function(c)
                   {var
                     _cA_=m0[1][1],
                     _cB_=m1[1][1],
                     _cC_=m2[1][1],
                     _cD_=m3[1][1],
                     _cE_=m4[1][1];
                    if(_cA_ && _cB_ && _cC_ && _cD_ && _cE_)
                     {var v4=_cE_[1],v3=_cD_[1],v2=_cC_[1],v1=_cB_[1],v0=_cA_[1];
                      return eupdate(caml_call5(f,v0,v1,v2,v3,v4),m,c)}
                    return 0};
                add_dep$0(m0,m[2]);
                add_dep$0(m1,m[2]);
                add_dep$0(m2,m[2]);
                add_dep$0(m3,m[2]);
                add_dep$0(m4,m[2]);
                return event(m,p,u)}
              return 0}
            return 0}
          return 0}
        return 0}
      return 0}
    function l6(f,e0,e1,e2,e3,e4,match)
     {if(e0)
       {if(e1)
         {if(e2)
           {if(e3)
             {if(e4)
               {if(match)
                 {var
                   m5=match[1],
                   m4=e4[1],
                   m3=e3[1],
                   m2=e2[1],
                   m1=e1[1],
                   m0=e0[1],
                   _cq_=rmax(m4[2],m5[2]),
                   _cr_=rmax(m2[2],m3[2]),
                   r=rsucc(rmax(rmax(rmax(m0[2],m1[2]),_cr_),_cq_)),
                   m=emut(r),
                   p=
                    function(param)
                     {return [0,
                              m0[2],
                              [0,m1[2],[0,m2[2],[0,m3[2],[0,m4[2],[0,m5[2],0]]]]]]},
                   u=
                    function(c)
                     {var
                       _cs_=m0[1][1],
                       _ct_=m1[1][1],
                       _cu_=m2[1][1],
                       _cv_=m3[1][1],
                       _cw_=m4[1][1],
                       _cx_=m5[1][1];
                      if(_cs_ && _ct_ && _cu_ && _cv_ && _cw_ && _cx_)
                       {var
                         v5=_cx_[1],
                         v4=_cw_[1],
                         v3=_cv_[1],
                         v2=_cu_[1],
                         v1=_ct_[1],
                         v0=_cs_[1];
                        return eupdate(caml_call6(f,v0,v1,v2,v3,v4,v5),m,c)}
                      return 0};
                  add_dep$0(m0,m[2]);
                  add_dep$0(m1,m[2]);
                  add_dep$0(m2,m[2]);
                  add_dep$0(m3,m[2]);
                  add_dep$0(m4,m[2]);
                  add_dep$0(m5,m[2]);
                  return event(m,p,u)}
                return 0}
              return 0}
            return 0}
          return 0}
        return 0}
      return 0}
    function some(e){return map(function(v){return [0,v]},e)}
    function value(default$0,e)
     {if(default$0)
       {var _cn_=default$0[1];
        if(0 === _cn_[0])
         {var dv=_cn_[1];
          return map
                  (function(param)
                    {if(param){var v=param[1];return v}return dv},
                   e)}
        var ms=_cn_[1];
        if(e)
         {var
           m=e[1],
           m$0=emut(rsucc2(m[2],ms[3])),
           p=function(param){return [0,m[2],[0,ms[3],0]]},
           u=
            function(c)
             {var _co_=m[1][1];
              if(_co_)
               {var _cp_=_co_[1];
                if(_cp_){var v=_cp_[1];return eupdate(v,m$0,c)}
                return eupdate(sval(ms),m$0,c)}
              return 0};
          add_dep$0(m,m$0[2]);
          add_dep(ms[3],m$0[2]);
          return event(m$0,p,u)}
        return 0}
      return fmap(function(v){return v},e)}
    var Option=[0,some,value];
    function end_of_step_add_dep(opt,stop_if_stopped,m$0,m)
     {if(opt)
       var sth=opt[1],post_add_op=sth;
      else
       var post_add_op=function(param){return 0};
      var c=find_unfinished(caml_call1(m$0[3][4],0));
      if(c === nil){add_dep(m$0[3],m[2]);return caml_call1(post_add_op,0)}
      function add_dep$0(param)
       {if(m$0[3][5] === nop)
         return stop_if_stopped?stop(0,m[2]):stop_if_stopped;
        var _cm_=rsucc(m$0[3]);
        update_rank(m[2],_cm_);
        add_dep(m$0[3],m[2]);
        return caml_call1(post_add_op,0)}
      return add_eop(c,add_dep$0)}
    function const$0(v){return [0,v]}
    function create$3(opt,v)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      var m=smut(_b_,eq);
      m[1] = [0,v];
      return [0,
              [1,m],
              function(step,v)
               {var _cl_=sval(m);
                if(caml_call2(m[2],_cl_,v))return 0;
                if(step)
                 {var c=step[1];
                  if(c[1])
                   caml_call1(Stdlib[1],err_step_executed);
                  else
                   if(m[3][2][1])
                    m[3][2] = c;
                   else
                    caml_call1(Stdlib[1],err_signal_scheduled);
                  m[1] = [0,v];
                  return add_deps(c,m[3])}
                var c$0=create$0(0);
                m[3][2] = c$0;
                m[1] = [0,v];
                add_deps(c$0,m[3]);
                return execute(c$0)}]}
    function retain$0(s,c)
     {if(0 === s[0])return caml_call1(Stdlib[1],err_retain_cst_sig);
      var m=s[1],c$0=m[3][3];
      m[3][3] = c;
      return [0,82,c$0]}
    function eq_fun(param)
     {if(0 === param[0])return 0;var m=param[1];return [0,m[2]]}
    function value$0(param)
     {if(0 === param[0])
       var v=param[1];
      else
       {var _ck_=param[1][1];
        if(! _ck_)return caml_call1(Stdlib[2],err_sig_undef);
        var v=_ck_[1]}
      return v}
    function stop$1(strong,param)
     {if(0 === param[0])return 0;
      var m=param[1];
      if(m[1])return stop(strong,m[3]);
      var c=find_unfinished(caml_call1(m[3][4],0));
      if(c === nil)throw [0,Assert_failure,_i_];
      function stop$0(param){return stop(strong,m[3])}
      return add_eop(c,stop$0)}
    function equal$0(opt,s$0,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s$0[0])
       {var _ci_=s$0[1];
        if(0 === s[0]){var v=s[1];return caml_call2(eq,_ci_,v)}}
      else
       {var _cj_=s$0[1];if(0 !== s[0]){var m=s[1];return _cj_ === m?1:0}}
      return 0}
    function trace$0(opt,t,s)
     {if(opt)var sth=opt[1],iff=sth;else var iff=[0,1];
      if(0 === iff[0])
       {if(0 === iff[1])return s;
        if(0 === s[0]){var v=s[1];caml_call1(t,v);return s}
        var
         m=s[1],
         _cf_=m[2],
         m$0=smut(rsucc(m[3]),_cf_),
         p=function(param){return [0,m[3],0]},
         u=function(c){var v=sval(m);caml_call1(t,v);return supdate(v,m$0,c)};
        add_dep(m[3],m$0[3]);
        return signal(0,m$0,p,u)}
      var mc=iff[1];
      if(0 === s[0])
       {var
         v$0=s[1],
         m$1=smut(rsucc(mc[3]),caml_equal),
         p$0=function(param){return [0,mc[3],0]},
         u$0=
          function(c)
           {if(sval(mc))caml_call1(t,v$0);
            rem_dep(mc[3],m$1[3]);
            return stop(0,m$1[3])};
        add_dep(mc[3],m$1[3]);
        return signal([0,v$0],m$1,p$0,u$0)}
      var m$2=s[1],_cg_=m$2[2],m$3=smut(rsucc2(mc[3],m$2[3]),_cg_);
      function p$1(param){return [0,mc[3],[0,m$2[3],0]]}
      function u$1(c)
       {var v=sval(m$2),_ch_=m$3[1];
        if(_ch_){var v$0=_ch_[1];if(caml_call2(m$3[2],v,v$0))return 0}
        if(sval(mc))caml_call1(t,v);
        return supdate(v,m$3,c)}
      add_dep(mc[3],m$3[3]);
      add_dep(m$2[3],m$3[3]);
      return signal(0,m$3,p$1,u$1)}
    function hold(opt,i,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(param)
       {var
         m=param[1],
         m$0=smut(rsucc(m[2]),eq),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var _ce_=m[1][1];
            if(_ce_){var v=_ce_[1];return supdate(v,m$0,c)}
            return 0};
        add_dep$0(m,m$0[3]);
        return signal([0,i],m$0,p,u)}
      return [0,i]}
    function l1(opt,f,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === param[0]){var v=param[1];return [0,caml_call1(f,v)]}
      var m=param[1],m$0=smut(rsucc(m[3]),eq);
      function p(param){return [0,m[3],0]}
      function u(c){return supdate(caml_call1(f,sval(m)),m$0,c)}
      add_dep(m[3],m$0[3]);
      return signal(0,m$0,p,u)}
    function app$0(opt,sf,sv)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === sf[0])
       {var _cb_=sf[1];
        if(0 === sv[0]){var v=sv[1];return [0,caml_call1(_cb_,v)]}
        return l1([0,eq],_cb_,sv)}
      var _cc_=sf[1];
      if(0 === sv[0])
       {var
         v$0=sv[1],
         m=smut(rsucc(_cc_[3]),eq),
         p=function(param){return [0,_cc_[3],0]},
         u=function(c){return supdate(caml_call1(sval(_cc_),v$0),m,c)};
        add_dep(_cc_[3],m[3]);
        return signal(0,m,p,u)}
      var mv=sv[1],m$0=smut(rsucc2(_cc_[3],mv[3]),eq);
      function p$0(param){return [0,_cc_[3],[0,mv[3],0]]}
      function u$0(c)
       {var _cd_=sval(mv);return supdate(caml_call1(sval(_cc_),_cd_),m$0,c)}
      add_dep(_cc_[3],m$0[3]);
      add_dep(mv[3],m$0[3]);
      return signal(0,m$0,p$0,u$0)}
    function filter$0(opt,pred,i,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s[0]){var v=s[1];return caml_call1(pred,v)?s:[0,i]}
      var m=s[1],m$0=smut(rsucc(m[3]),eq);
      function p(param){return [0,m[3],0]}
      function u(c)
       {var v=sval(m);return caml_call1(pred,v)?supdate(v,m$0,c):0}
      add_dep(m[3],m$0[3]);
      return signal([0,i],m$0,p,u)}
    function fmap$0(opt,fm,i,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === param[0])
       {var v=param[1],match=caml_call1(fm,v);
        if(match){var v$0=match[1];return [0,v$0]}
        return [0,i]}
      var m=param[1],m$0=smut(rsucc(m[3]),eq);
      function p(param){return [0,m[3],0]}
      function u(c)
       {var match=caml_call1(fm,sval(m));
        if(match){var v=match[1];return supdate(v,m$0,c)}
        return 0}
      add_dep(m[3],m$0[3]);
      return signal([0,i],m$0,p,u)}
    function diff$0(d,param)
     {if(0 === param[0])return 0;
      var m=param[1],m$0=emut(rsucc(m[3])),last=[0,0];
      function p(param){return [0,m[3],0]}
      function u(c)
       {var v=sval(m),_ca_=last[1];
        if(_ca_)
         {var v$0=_ca_[1];
          last[1] = [0,v];
          return eupdate(caml_call2(d,v,v$0),m$0,c)}
        throw [0,Assert_failure,_j_]}
      function post_add_op(param){last[1] = [0,sval(m)];return 0}
      end_of_step_add_dep([0,post_add_op],1,m,m$0);
      return event(m$0,p,u)}
    function changes$0(param)
     {if(0 === param[0])return 0;
      var m=param[1],m$0=emut(rsucc(m[3]));
      function p(param){return [0,m[3],0]}
      function u(c){return eupdate(sval(m),m$0,c)}
      end_of_step_add_dep(0,1,m,m$0);
      return event(m$0,p,u)}
    function sample(f,e,param)
     {if(0 === param[0])
       {var v=param[1];return map(function(ev){return caml_call2(f,ev,v)},e)}
      var ms=param[1];
      if(e)
       {var
         me=e[1],
         m=emut(rsucc2(me[2],ms[3])),
         p=function(param){return [0,me[2],[0,ms[3],0]]},
         u=
          function(c)
           {var _b$_=me[1][1];
            if(_b$_)
             {var v=_b$_[1];return eupdate(caml_call2(f,v,sval(ms)),m,c)}
            return 0};
        add_dep$0(me,m[2]);
        add_dep(ms[3],m[2]);
        return event(m,p,u)}
      return 0}
    function when(opt,c,i,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === c[0])return 0 === c[1]?[0,i]:s;
      var mc=c[1];
      if(0 === s[0])
       {var
         v=s[1],
         m=smut(rsucc(mc[3]),eq),
         p=function(param){return [0,mc[3],0]},
         u=function(c){return sval(mc)?supdate(v,m,c):0};
        add_dep(mc[3],m[3]);
        return signal([0,i],m,p,u)}
      var ms=s[1],m$0=smut(rsucc2(mc[3],ms[3]),eq);
      function p$0(param){return [0,mc[3],[0,ms[3],0]]}
      function u$0(c){return sval(mc)?supdate(sval(ms),m$0,c):0}
      add_dep(mc[3],m$0[3]);
      add_dep(ms[3],m$0[3]);
      return signal([0,i],m$0,p$0,u$0)}
    function dismiss$0(opt,c,i,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(c)
       {var mc=c[1];
        if(0 === s[0])
         {var
           v=s[1],
           m=smut(rsucc(mc[2]),eq),
           p=function(param){return [0,mc[2],0]},
           u=function(c){return mc[1][1]?0:supdate(v,m,c)};
          add_dep(mc[2],m[3]);
          return signal([0,i],m,p,u)}
        var
         ms=s[1],
         m$0=smut(rsucc2(mc[2],ms[3]),eq),
         p$0=function(param){return [0,mc[2],[0,ms[3],0]]},
         u$0=function(c){return mc[1][1]?0:supdate(sval(ms),m$0,c)};
        add_dep(mc[2],m$0[3]);
        add_dep(ms[3],m$0[3]);
        return signal([0,i],m$0,p$0,u$0)}
      return s}
    function accum$0(opt,ef,i)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(ef)
       {var
         m=ef[1],
         m$0=smut(rsucc(m[2]),eq),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var _b__=m[1][1];
            if(_b__)
             {var v=_b__[1];return supdate(caml_call1(v,sval(m$0)),m$0,c)}
            return 0};
        add_dep$0(m,m$0[3]);
        return signal([0,i],m$0,p,u)}
      return [0,i]}
    function fold$1(opt,f,i,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(param)
       {var
         m=param[1],
         m$0=smut(rsucc(m[2]),eq),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var _b9_=m[1][1];
            if(_b9_)
             {var v=_b9_[1];return supdate(caml_call2(f,sval(m$0),v),m$0,c)}
            return 0};
        add_dep$0(m,m$0[3]);
        return signal([0,i],m$0,p,u)}
      return [0,i]}
    function merge$0(opt,f,a,sl)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      function rmax$0(acc,param)
       {if(0 === param[0])return acc;var m=param[1];return rmax(acc,m[3])}
      function nodes(acc,param)
       {if(0 === param[0])return acc;var m=param[1];return [0,m[3],acc]}
      var m=smut(rsucc(caml_call3(Stdlib_list[21],rmax$0,max,sl)),eq);
      function p(param){return caml_call3(Stdlib_list[21],nodes,0,sl)}
      function u(c)
       {function _b8_(a,param)
         {if(0 === param[0]){var v=param[1];return caml_call2(f,a,v)}
          var m=param[1];
          return caml_call2(f,a,sval(m))}
        return supdate(caml_call3(Stdlib_list[21],_b8_,a,sl),m,c)}
      function dep(param)
       {if(0 === param[0])return 0;
        var m$0=param[1];
        return add_dep(m$0[3],m[3])}
      caml_call2(Stdlib_list[15],dep,sl);
      return signal(0,m,p,u)}
    function switch$1(opt,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === param[0]){var s=param[1];return s}
      var
       mss=param[1],
       dummy=smut(_b_,eq),
       src=[0,[1,dummy]],
       m=smut(rsucc(mss[3]),eq);
      function p(param)
       {var _b7_=src[1];
        if(0 === _b7_[0])return [0,mss[3],0];
        var m=_b7_[1];
        return [0,mss[3],[0,m[3],0]]}
      function u(c)
       {var _b1_=src[1];
        if(sval(mss) === _b1_)
         {var _b2_=src[1];
          if(0 === _b2_[0])return 0;
          var m$0=_b2_[1];
          return supdate(sval(m$0),m,c)}
        var _b3_=src[1];
        if(0 !== _b3_[0]){var m$2=_b3_[1];rem_dep(m$2[3],m[3])}
        var new_src=sval(mss);
        src[1] = new_src;
        if(0 === new_src[0])
         {var v=new_src[1],_b4_=rsucc(mss[3]);
          update_rank(m[3],_b4_);
          return supdate(v,m,c)}
        var m$1=new_src[1];
        add_dep(m$1[3],m[3]);
        if(c === nil)
         {var _b5_=rsucc2(m$1[3],mss[3]);
          update_rank(m[3],_b5_);
          var c$0=find_unfinished([0,m$1[3],0]);
          return c$0 === nil?supdate(sval(m$1),m,c$0):add$0(c$0,m[3])}
        var _b6_=rsucc2(m$1[3],mss[3]);
        return update_rank(m[3],_b6_)
                ?(allow_reschedule(m[3]),rebuild(c),add$0(c,m[3]))
                :supdate(sval(m$1),m,c)}
      add_dep(mss[3],m[3]);
      add_dep(dummy[3],m[3]);
      return signal(0,m,p,u)}
    function bind$0(eq,s,sf)
     {return switch$1
              (eq,l1([0,function(_b0_,_bZ_){return _b0_ === _bZ_?1:0}],sf,s))}
    function fix$0(opt,i,f)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      function update_delayed(n,p,u,nl)
       {bind(n,p,u);
        var c=find_unfinished(nl);
        if(c === nil)
         {var c$0=create$0(0);caml_call1(n[5],c$0);return execute(c$0)}
        return add$0(c,n)}
      var m=smut(_a_,eq);
      function _bU_(param){return 0}
      var
       s=signal([0,i],m,function(param){return 0},_bU_),
       _bV_=caml_call1(f,s),
       _bW_=_bV_[1];
      if(0 === _bW_[0])
       {var
         r=_bV_[2],
         v=_bW_[1],
         p=function(param){return 0},
         u=function(c){return supdate(v,m,c)},
         _bX_=deps(m[3]);
        update_delayed(m[3],p,u,_bX_);
        return r}
      var r$0=_bV_[2],m$0=_bW_[1];
      if(m$0[3][1] === _a_)caml_call1(Stdlib[1],err_fix);
      function p$0(param){return 0}
      function u$0(c){return supdate(sval(m$0),m,c)}
      add_dep(m$0[3],m[3]);
      var _bY_=deps(m[3]);
      update_delayed(m[3],p$0,u$0,[0,m$0[3],_bY_]);
      return r$0}
    function l2$0(opt,f,s$0,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s$0[0])
       {var _bR_=s$0[1];
        if(0 === s[0]){var v=s[1];return [0,caml_call2(f,_bR_,v)]}
        var
         m=s[1],
         m$0=smut(rsucc(m[3]),eq),
         p=function(param){return [0,m[3],0]},
         u=function(c){return supdate(caml_call2(f,_bR_,sval(m)),m$0,c)};
        add_dep(m[3],m$0[3]);
        return signal(0,m$0,p,u)}
      var _bS_=s$0[1];
      if(0 === s[0])
       {var
         v$0=s[1],
         m$1=smut(rsucc(_bS_[3]),eq),
         p$0=function(param){return [0,_bS_[3],0]},
         u$0=function(c){return supdate(caml_call2(f,sval(_bS_),v$0),m$1,c)};
        add_dep(_bS_[3],m$1[3]);
        return signal(0,m$1,p$0,u$0)}
      var m1=s[1],m$2=smut(rsucc2(_bS_[3],m1[3]),eq);
      function p$1(param){return [0,_bS_[3],[0,m1[3],0]]}
      function u$1(c)
       {var _bT_=sval(m1);return supdate(caml_call2(f,sval(_bS_),_bT_),m$2,c)}
      add_dep(_bS_[3],m$2[3]);
      add_dep(m1[3],m$2[3]);
      return signal(0,m$2,p$1,u$1)}
    function l3$0(opt,f,s0,s1,s2)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s0[0])
       {var _bI_=s0[1];
        if(0 === s1[0])
         {var _bJ_=s1[1];
          if(0 === s2[0]){var v2=s2[1];return [0,caml_call3(f,_bI_,_bJ_,v2)]}}}
      else
       {var _bK_=s0[1];
        if(0 !== s1[0])
         {var _bL_=s1[1];
          if(0 !== s2[0])
           {var
             m2=s2[1],
             _bM_=m2[3],
             r=rsucc(rmax(rmax(_bK_[3],_bL_[3]),_bM_)),
             m=smut(r,eq),
             p=function(param){return [0,_bK_[3],[0,_bL_[3],[0,m2[3],0]]]},
             u=
              function(c)
               {var _bP_=sval(m2),_bQ_=sval(_bL_);
                return supdate(caml_call3(f,sval(_bK_),_bQ_,_bP_),m,c)};
            add_dep(_bK_[3],m[3]);
            add_dep(_bL_[3],m[3]);
            add_dep(m2[3],m[3]);
            return signal(0,m,p,u)}}}
      return app$0
              ([0,eq],
               l2$0([0,function(_bO_,_bN_){return _bO_ === _bN_?1:0}],f,s0,s1),
               s2)}
    function l4$0(opt,f,s0,s1,s2,s3)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s0[0])
       {var _bw_=s0[1];
        if(0 === s1[0])
         {var _bx_=s1[1];
          if(0 === s2[0])
           {var _by_=s2[1];
            if(0 === s3[0])
             {var v3=s3[1];return [0,caml_call4(f,_bw_,_bx_,_by_,v3)]}}}}
      else
       {var _bz_=s0[1];
        if(0 !== s1[0])
         {var _bA_=s1[1];
          if(0 !== s2[0])
           {var _bB_=s2[1];
            if(0 !== s3[0])
             {var
               m3=s3[1],
               _bC_=rmax(_bB_[3],m3[3]),
               r=rsucc(rmax(rmax(_bz_[3],_bA_[3]),_bC_)),
               m=smut(r,eq),
               p=
                function(param)
                 {return [0,_bz_[3],[0,_bA_[3],[0,_bB_[3],[0,m3[3],0]]]]},
               u=
                function(c)
                 {var _bF_=sval(m3),_bG_=sval(_bB_),_bH_=sval(_bA_);
                  return supdate(caml_call4(f,sval(_bz_),_bH_,_bG_,_bF_),m,c)};
              add_dep(_bz_[3],m[3]);
              add_dep(_bA_[3],m[3]);
              add_dep(_bB_[3],m[3]);
              add_dep(m3[3],m[3]);
              return signal(0,m,p,u)}}}}
      return app$0
              ([0,eq],
               l3$0
                ([0,function(_bE_,_bD_){return _bE_ === _bD_?1:0}],f,s0,s1,s2),
               s3)}
    function l5$0(opt,f,s0,s1,s2,s3,s4)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s0[0])
       {var _bg_=s0[1];
        if(0 === s1[0])
         {var _bh_=s1[1];
          if(0 === s2[0])
           {var _bi_=s2[1];
            if(0 === s3[0])
             {var _bj_=s3[1];
              if(0 === s4[0])
               {var v4=s4[1];return [0,caml_call5(f,_bg_,_bh_,_bi_,_bj_,v4)]}}}}}
      else
       {var _bk_=s0[1];
        if(0 !== s1[0])
         {var _bl_=s1[1];
          if(0 !== s2[0])
           {var _bm_=s2[1];
            if(0 !== s3[0])
             {var _bn_=s3[1];
              if(0 !== s4[0])
               {var
                 m4=s4[1],
                 _bo_=rmax(_bn_[3],m4[3]),
                 _bp_=rmax(_bm_[3],_bo_),
                 r=rsucc(rmax(rmax(_bk_[3],_bl_[3]),_bp_)),
                 m=smut(r,eq),
                 p=
                  function(param)
                   {return [0,
                            _bk_[3],
                            [0,_bl_[3],[0,_bm_[3],[0,_bn_[3],[0,m4[3],0]]]]]},
                 u=
                  function(c)
                   {var
                     _bs_=sval(m4),
                     _bt_=sval(_bn_),
                     _bu_=sval(_bm_),
                     _bv_=sval(_bl_),
                     v=caml_call5(f,sval(_bk_),_bv_,_bu_,_bt_,_bs_);
                    return supdate(v,m,c)};
                add_dep(_bk_[3],m[3]);
                add_dep(_bl_[3],m[3]);
                add_dep(_bm_[3],m[3]);
                add_dep(_bn_[3],m[3]);
                add_dep(m4[3],m[3]);
                return signal(0,m,p,u)}}}}}
      return app$0
              ([0,eq],
               l4$0
                ([0,function(_br_,_bq_){return _br_ === _bq_?1:0}],
                 f,
                 s0,
                 s1,
                 s2,
                 s3),
               s4)}
    function l6$0(opt,f,s0,s1,s2,s3,s4,s5)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s0[0])
       {var _aY_=s0[1];
        if(0 === s1[0])
         {var _aZ_=s1[1];
          if(0 === s2[0])
           {var _a0_=s2[1];
            if(0 === s3[0])
             {var _a1_=s3[1];
              if(0 === s4[0])
               {var _a2_=s4[1];
                if(0 === s5[0])
                 {var v5=s5[1];
                  return [0,caml_call6(f,_aY_,_aZ_,_a0_,_a1_,_a2_,v5)]}}}}}}
      else
       {var _a3_=s0[1];
        if(0 !== s1[0])
         {var _a4_=s1[1];
          if(0 !== s2[0])
           {var _a5_=s2[1];
            if(0 !== s3[0])
             {var _a6_=s3[1];
              if(0 !== s4[0])
               {var _a7_=s4[1];
                if(0 !== s5[0])
                 {var
                   m5=s5[1],
                   _a8_=rmax(_a7_[3],m5[3]),
                   _a9_=rmax(_a6_[3],_a8_),
                   _a__=rmax(_a4_[3],_a5_[3]),
                   m=rmax(rmax(_a3_[3],_a__),_a9_),
                   m$0=smut(rsucc(m),eq),
                   p=
                    function(param)
                     {return [0,
                              _a3_[3],
                              [0,_a4_[3],[0,_a5_[3],[0,_a6_[3],[0,_a7_[3],[0,m5[3],0]]]]]]},
                   u=
                    function(c)
                     {var
                       _bb_=sval(m5),
                       _bc_=sval(_a7_),
                       _bd_=sval(_a6_),
                       _be_=sval(_a5_),
                       _bf_=sval(_a4_),
                       v=caml_call6(f,sval(_a3_),_bf_,_be_,_bd_,_bc_,_bb_);
                      return supdate(v,m$0,c)};
                  add_dep(_a3_[3],m$0[3]);
                  add_dep(_a4_[3],m$0[3]);
                  add_dep(_a5_[3],m$0[3]);
                  add_dep(_a6_[3],m$0[3]);
                  add_dep(_a7_[3],m$0[3]);
                  add_dep(m5[3],m$0[3]);
                  return signal(0,m$0,p,u)}}}}}}
      return app$0
              ([0,eq],
               l5$0
                ([0,function(_ba_,_a$_){return _ba_ === _a$_?1:0}],
                 f,
                 s0,
                 s1,
                 s2,
                 s3,
                 s4),
               s5)}
    function equal$1(_aX_,_aW_){return _aX_ === _aW_?1:0}
    function not(s){return l1([0,equal$1],function(_aV_){return 1 - _aV_},s)}
    function symbol(s$0,s)
     {return l2$0
              ([0,equal$1],
               function(_aT_,_aS_){var _aU_=_aT_?_aS_:_aT_;return _aU_},
               s$0,
               s)}
    function symbol$0(s$0,s)
     {return l2$0
              ([0,equal$1],
               function(_aQ_,_aP_){var _aR_=_aQ_ || _aP_;return _aR_},
               s$0,
               s)}
    function edge(s){return changes$0(s)}
    function edge_detect(edge,param)
     {if(0 === param[0])return 0;
      var m=param[1],m$0=emut(rsucc(m[3]));
      function p(param){return [0,m[3],0]}
      function u(c)
       {var _aO_=caml_equal(sval(m),edge);return _aO_?eupdate(0,m$0,c):_aO_}
      end_of_step_add_dep(0,1,m,m$0);
      return event(m$0,p,u)}
    function rise(s){return edge_detect(1,s)}
    function fall(s){return edge_detect(0,s)}
    function flip(b,param)
     {if(param)
       {var
         m=param[1],
         _aL_=function(_aN_,_aM_){return _aN_ === _aM_?1:0},
         m$0=smut(rsucc(m[2]),_aL_),
         p=function(param){return [0,m[2],0]},
         u=function(c){return m[1][1]?supdate(1 - sval(m$0),m$0,c):0};
        add_dep$0(m,m$0[3]);
        return signal([0,b],m$0,p,u)}
      return [0,b]}
    function equal$2(_aK_,_aJ_){return _aK_ === _aJ_?1:0}
    function symbol$1(s)
     {return l1([0,equal$2],function(_aI_){return - _aI_ | 0},s)}
    function succ(s)
     {return l1([0,equal$2],function(_aH_){return _aH_ + 1 | 0},s)}
    function pred(s)
     {return l1([0,equal$2],function(_aG_){return _aG_ - 1 | 0},s)}
    function symbol$2(s$0,s)
     {return l2$0
              ([0,equal$2],function(_aF_,_aE_){return _aF_ + _aE_ | 0},s$0,s)}
    function symbol$3(s$0,s)
     {return l2$0
              ([0,equal$2],function(_aD_,_aC_){return _aD_ - _aC_ | 0},s$0,s)}
    function symbol$4(s$0,s){return l2$0([0,equal$2],runtime.caml_mul,s$0,s)}
    function mod(s$0,s){return l2$0([0,equal$2],runtime.caml_mod,s$0,s)}
    function abs(s){return l1([0,equal$2],Stdlib[18],s)}
    var max_int=[0,Stdlib[19]],min_int=[0,Stdlib[20]];
    function land(s$0,s)
     {return l2$0([0,equal$2],function(_aB_,_aA_){return _aB_ & _aA_},s$0,s)}
    function lor(s$0,s)
     {return l2$0([0,equal$2],function(_az_,_ay_){return _az_ | _ay_},s$0,s)}
    function lxor(s$0,s)
     {return l2$0([0,equal$2],function(_ax_,_aw_){return _ax_ ^ _aw_},s$0,s)}
    function lnot(s){return l1([0,equal$2],Stdlib[21],s)}
    function lsl(s$0,s)
     {return l2$0([0,equal$2],function(_av_,_au_){return _av_ << _au_},s$0,s)}
    function lsr(s$0,s)
     {return l2$0
              ([0,equal$2],
               function(_at_,_as_){return _at_ >>> _as_ | 0},
               s$0,
               s)}
    function asr(s$0,s)
     {return l2$0([0,equal$2],function(_ar_,_aq_){return _ar_ >> _aq_},s$0,s)}
    function equal$3(_ap_,_ao_){return _ap_ == _ao_?1:0}
    function symbol$5(s)
     {return l1([0,equal$3],function(_an_){return - _an_},s)}
    function symbol$6(s$0,s)
     {return l2$0([0,equal$3],function(_am_,_al_){return _am_ + _al_},s$0,s)}
    function symbol$7(s$0,s)
     {return l2$0([0,equal$3],function(_ak_,_aj_){return _ak_ - _aj_},s$0,s)}
    function symbol$8(s$0,s)
     {return l2$0([0,equal$3],function(_ai_,_ah_){return _ai_ * _ah_},s$0,s)}
    function symbol$9(s$0,s)
     {return l2$0([0,equal$3],function(_ag_,_af_){return _ag_ / _af_},s$0,s)}
    function symbol$10(s$0,s)
     {return l2$0
              ([0,equal$3],
               function(_ae_,_ad_){return Math.pow(_ae_,_ad_)},
               s$0,
               s)}
    function sqrt(s)
     {return l1([0,equal$3],function(_ac_){return Math.sqrt(_ac_)},s)}
    function exp(s)
     {return l1([0,equal$3],function(_ab_){return Math.exp(_ab_)},s)}
    function log(s)
     {return l1([0,equal$3],function(_aa_){return Math.log(_aa_)},s)}
    function log10(s){return l1([0,equal$3],runtime.caml_log10_float,s)}
    function cos(s)
     {return l1([0,equal$3],function(_$_){return Math.cos(_$_)},s)}
    function sin(s)
     {return l1([0,equal$3],function(___){return Math.sin(___)},s)}
    function tan(s)
     {return l1([0,equal$3],function(_Z_){return Math.tan(_Z_)},s)}
    function acos(s)
     {return l1([0,equal$3],function(_Y_){return Math.acos(_Y_)},s)}
    function asin(s)
     {return l1([0,equal$3],function(_X_){return Math.asin(_X_)},s)}
    function atan(s)
     {return l1([0,equal$3],function(_W_){return Math.atan(_W_)},s)}
    function atan2(s$0,s)
     {return l2$0
              ([0,equal$3],
               function(_V_,_U_){return Math.atan2(_V_,_U_)},
               s$0,
               s)}
    function cosh(s){return l1([0,equal$3],runtime.caml_cosh_float,s)}
    function sinh(s){return l1([0,equal$3],runtime.caml_sinh_float,s)}
    function tanh(s){return l1([0,equal$3],runtime.caml_tanh_float,s)}
    function ceil(s)
     {return l1([0,equal$3],function(_T_){return Math.ceil(_T_)},s)}
    function floor(s)
     {return l1([0,equal$3],function(_S_){return Math.floor(_S_)},s)}
    function abs_float(s)
     {return l1([0,equal$3],function(_R_){return Math.abs(_R_)},s)}
    function mod_float(s$0,s)
     {return l2$0([0,equal$3],function(_Q_,_P_){return _Q_ % _P_},s$0,s)}
    function frexp(s){return l1([0,caml_equal],runtime.caml_frexp_float,s)}
    function ldexp(s$0,s)
     {return l2$0([0,equal$3],runtime.caml_ldexp_float,s$0,s)}
    function modf(s){return l1([0,caml_equal],runtime.caml_modf_float,s)}
    function float$0(s){return l1([0,equal$3],function(_O_){return _O_},s)}
    function float_of_int(s)
     {return l1([0,equal$3],function(_N_){return _N_},s)}
    function truncate(s)
     {return l1([0,equal$2],function(_M_){return _M_ | 0},s)}
    function int_of_float(s)
     {return l1([0,equal$2],function(_L_){return _L_ | 0},s)}
    var
     infinity=[0,Stdlib[22]],
     neg_infinity=[0,Stdlib[23]],
     nan=[0,Stdlib[24]],
     max_float=[0,Stdlib[25]],
     min_float=[0,Stdlib[26]],
     epsilon_float=[0,Stdlib[27]];
    function classify_float(s)
     {var _I_=runtime.caml_classify_float;
      return l1([0,function(_K_,_J_){return _K_ === _J_?1:0}],_I_,s)}
    function pair(eq,s$0,s)
     {return l2$0(eq,function(x,y){return [0,x,y]},s$0,s)}
    function fst(eq,s){return l1(eq,function(_H_){return _H_[1]},s)}
    function snd(eq,s){return l1(eq,function(_G_){return _G_[2]},s)}
    var Pair=[0,pair,fst,snd];
    function some$0(s)
     {var match=eq_fun(s);
      if(match)
       var
        eq=match[1],
        eq$0=
         function(v,match)
          {if(v && match)
            {var v$0=match[1],v$1=v[1];return caml_call2(eq,v$1,v$0)}
           throw [0,Assert_failure,_k_]},
        eq$1=[0,eq$0];
      else
       var eq$1=0;
      return l1(eq$1,function(v){return [0,v]},s)}
    function value$1(opt,default$0,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s[0])
       {var _D_=s[1];
        if(_D_){var v=_D_[1];return [0,v]}
        if(815032112 <= default$0[1])
         {var d=default$0[2];
          if(0 === d[0]){var d$0=d[1];return [0,d$0]}
          var md=d[1],c=find_unfinished([0,md[3],0]);
          if(c === nil)return [0,sval(md)];
          var
           m=smut(rsucc(md[3]),eq),
           p=function(param){return [0,md[3],0]},
           u=
            function(c)
             {rem_dep(md[3],m[3]);supdate(sval(md),m,c);return stop(0,m[3])};
          add_dep(md[3],m[3]);
          return signal(0,m,p,u)}
        var d$1=default$0[2];
        return d$1}
      var m$0=s[1];
      if(815032112 <= default$0[1])
       {var _E_=default$0[2];
        if(0 === _E_[0])
         {var d$2=_E_[1];return fmap$0([0,eq],function(v){return v},d$2,s)}
        var md$0=_E_[1],c$0=find_unfinished([0,md$0[3],0]);
        if(c$0 === nil)
         {var
           m$1=smut(rsucc(m$0[3]),eq),
           p$0=function(param){return [0,m$0[3],0]},
           u$0=
            function(c)
             {var match=sval(m$0);
              if(match){var v=match[1];return supdate(v,m$1,c)}
              return 0};
          add_dep(m$0[3],m$1[3]);
          return signal([0,sval(md$0)],m$1,p$0,u$0)}
        var
         m$2=smut(rsucc2(m$0[3],md$0[3]),eq),
         p$1=function(param){return [0,m$0[3],0]},
         u$1=
          function(c)
           {var match=sval(m$0);
            if(match){var v=match[1];return supdate(v,m$2,c)}
            return 0},
         p_first=function(param){return [0,m$0[3],[0,md$0[3],0]]},
         u_first=
          function(c)
           {rem_dep(md$0[3],m$2[3]);
            var match=sval(m$0);
            if(match)
             {var v=match[1];supdate(v,m$2,c)}
            else
             supdate(sval(md$0),m$2,c);
            return bind(m$2[3],p$1,u$1)};
        add_dep(m$0[3],m$2[3]);
        add_dep(md$0[3],m$2[3]);
        return signal(0,m$2,p_first,u_first)}
      var _F_=default$0[2];
      if(0 === _F_[0])
       {var d$3=_F_[1];
        return l1
                ([0,eq],
                 function(param){if(param){var v=param[1];return v}return d$3},
                 s)}
      var md$1=_F_[1],m$3=smut(rsucc2(m$0[3],md$1[3]),eq);
      function p$2(param){return [0,m$0[3],[0,md$1[3],0]]}
      function u$2(c)
       {var match=sval(m$0);
        if(match){var v=match[1];return supdate(v,m$3,c)}
        return supdate(sval(md$1),m$3,c)}
      add_dep(m$0[3],m$3[3]);
      add_dep(md$1[3],m$3[3]);
      return signal(0,m$3,p$2,u$2)}
    var Option$0=[0,none,some$0,value$1];
    function symbol$11(s$0,s){return l2$0([0,equal$1],caml_equal,s$0,s)}
    function symbol$12(s$0,s)
     {return l2$0([0,equal$1],runtime.caml_notequal,s$0,s)}
    function symbol$13(s$0,s)
     {return l2$0([0,equal$1],runtime.caml_lessthan,s$0,s)}
    function symbol$14(s$0,s)
     {return l2$0([0,equal$1],runtime.caml_greaterthan,s$0,s)}
    function symbol$15(s$0,s)
     {return l2$0([0,equal$1],runtime.caml_lessequal,s$0,s)}
    function symbol$16(s$0,s)
     {return l2$0([0,equal$1],runtime.caml_greaterequal,s$0,s)}
    function compare(s$0,s)
     {return l2$0([0,equal$2],runtime.caml_compare,s$0,s)}
    function symbol$17(s$0,s)
     {return l2$0([0,equal$1],function(_C_,_B_){return _C_ === _B_?1:0},s$0,s)}
    function symbol$18(s$0,s)
     {return l2$0([0,equal$1],function(_A_,_z_){return _A_ !== _z_?1:0},s$0,s)}
    function Make(Eq)
     {var eq=Eq[1];
      function create(v){return create$3([0,eq],v)}
      function equal(s$0,s){return equal$0([0,eq],s$0,s)}
      function hold$0(v,e){return hold([0,eq],v,e)}
      function app(sf,sv){return app$0([0,eq],sf,sv)}
      function map(f,s){return l1([0,eq],f,s)}
      function filter(pred,i)
       {var _x_=[0,eq];return function(_y_){return filter$0(_x_,pred,i,_y_)}}
      function fmap(fm,i)
       {var _v_=[0,eq];return function(_w_){return fmap$0(_v_,fm,i,_w_)}}
      function when$0(c,i,s){return when([0,eq],c,i,s)}
      function dismiss(c,s)
       {var _t_=[0,eq];return function(_u_){return dismiss$0(_t_,c,s,_u_)}}
      function accum(ef,i){return accum$0([0,eq],ef,i)}
      function fold(f,i)
       {var _r_=[0,eq];return function(_s_){return fold$1(_r_,f,i,_s_)}}
      function merge(f,a,sl){return merge$0([0,eq],f,a,sl)}
      function switch$0(s){return switch$1([0,eq],s)}
      function bind(s,sf){return bind$0([0,eq],s,sf)}
      function fix(f)
       {var _p_=[0,eq];return function(_q_){return fix$0(_p_,f,_q_)}}
      function l2(f,s$0,s){return l2$0([0,eq],f,s$0,s)}
      function l3(f,s0,s1,s2){return l3$0([0,eq],f,s0,s1,s2)}
      function l4(f,s0,s1,s2,s3){return l4$0([0,eq],f,s0,s1,s2,s3)}
      function l5(f,s0,s1,s2,s3,s4){return l5$0([0,eq],f,s0,s1,s2,s3,s4)}
      function l6(f,s0,s1,s2,s3,s4,s5)
       {return l6$0([0,eq],f,s0,s1,s2,s3,s4,s5)}
      return [0,
              eq,
              create,
              equal,
              hold$0,
              app,
              map,
              filter,
              fmap,
              when$0,
              dismiss,
              accum,
              fold,
              merge,
              switch$0,
              bind,
              fix,
              map,
              l2,
              l3,
              l4,
              l5,
              l6]}
    var
     Sb=Make([0,equal$1]),
     Si=Make([0,equal$2]),
     Sf=Make([0,equal$3]),
     _l_=[0,create$0,execute],
     _m_=
      [0,
       [0,
        Sb[2],
        Sb[3],
        Sb[4],
        Sb[5],
        Sb[6],
        Sb[7],
        Sb[8],
        Sb[9],
        Sb[10],
        Sb[11],
        Sb[12],
        Sb[13],
        Sb[14],
        Sb[15],
        Sb[16],
        Sb[17],
        Sb[18],
        Sb[19],
        Sb[20],
        Sb[21],
        Sb[22]],
       [0,
        Si[2],
        Si[3],
        Si[4],
        Si[5],
        Si[6],
        Si[7],
        Si[8],
        Si[9],
        Si[10],
        Si[11],
        Si[12],
        Si[13],
        Si[14],
        Si[15],
        Si[16],
        Si[17],
        Si[18],
        Si[19],
        Si[20],
        Si[21],
        Si[22]],
       [0,
        Sf[2],
        Sf[3],
        Sf[4],
        Sf[5],
        Sf[6],
        Sf[7],
        Sf[8],
        Sf[9],
        Sf[10],
        Sf[11],
        Sf[12],
        Sf[13],
        Sf[14],
        Sf[15],
        Sf[16],
        Sf[17],
        Sf[18],
        Sf[19],
        Sf[20],
        Sf[21],
        Sf[22]]],
     React=
      [0,
       [0,
        never,
        create$2,
        retain,
        stop$0,
        equal,
        trace,
        once,
        drop_once,
        app,
        map,
        stamp,
        filter,
        fmap,
        diff,
        changes,
        on,
        on,
        dismiss,
        until,
        accum,
        fold$0,
        select,
        merge,
        switch$0,
        fix,
        map,
        l2,
        l3,
        l4,
        l5,
        l6,
        Option],
       [0,
        const$0,
        create$3,
        value$0,
        retain$0,
        eq_fun,
        stop$1,
        equal$0,
        trace$0,
        hold,
        app$0,
        l1,
        filter$0,
        fmap$0,
        diff$0,
        changes$0,
        sample,
        when,
        when,
        dismiss$0,
        accum$0,
        fold$1,
        merge$0,
        switch$1,
        bind$0,
        fix$0,
        l1,
        l2$0,
        l3$0,
        l4$0,
        l5$0,
        l6$0,
        [0,zero,one,not,symbol,symbol$0,edge,rise,fall,flip],
        [0,
         zero$0,
         one$0,
         minus_one,
         symbol$1,
         succ,
         pred,
         symbol$2,
         symbol$3,
         symbol$4,
         mod,
         abs,
         max_int,
         min_int,
         land,
         lor,
         lxor,
         lnot,
         lsl,
         lsr,
         asr],
        [0,
         zero$1,
         one$1,
         minus_one$0,
         symbol$5,
         symbol$6,
         symbol$7,
         symbol$8,
         symbol$9,
         symbol$10,
         sqrt,
         exp,
         log,
         log10,
         cos,
         sin,
         tan,
         acos,
         asin,
         atan,
         atan2,
         cosh,
         sinh,
         tanh,
         ceil,
         floor,
         abs_float,
         mod_float,
         frexp,
         ldexp,
         modf,
         float$0,
         float_of_int,
         truncate,
         int_of_float,
         infinity,
         neg_infinity,
         nan,
         max_float,
         min_float,
         epsilon_float,
         classify_float],
        Pair,
        Option$0,
        [0,
         symbol$11,
         symbol$12,
         symbol$13,
         symbol$14,
         symbol$15,
         symbol$16,
         compare,
         symbol$17,
         symbol$18],
        function(_n_)
         {var _o_=Make(_n_);
          return [0,
                  _o_[2],
                  _o_[3],
                  _o_[4],
                  _o_[5],
                  _o_[6],
                  _o_[7],
                  _o_[8],
                  _o_[9],
                  _o_[10],
                  _o_[11],
                  _o_[12],
                  _o_[13],
                  _o_[14],
                  _o_[15],
                  _o_[16],
                  _o_[17],
                  _o_[18],
                  _o_[19],
                  _o_[20],
                  _o_[21],
                  _o_[22]]},
        _m_],
       _l_];
    runtime.caml_register_global(30,React,"React");
    return}
  (function(){return this}()));


//# 1 "../../.js/reactiveData/reactiveData.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_equal=runtime.caml_equal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_invalid_index=caml_string_of_jsbytes("invalid index"),
     cst_merge_invalid_index=caml_string_of_jsbytes("merge: invalid index"),
     cst_merge_invalid_index$0=caml_string_of_jsbytes("merge: invalid index"),
     cst_linear_merge_X_not_support=
      caml_string_of_jsbytes("linear_merge: X not supported"),
     cst_ReactiveData_Rlist_merge$0=
      caml_string_of_jsbytes("ReactiveData.Rlist.merge"),
     cst_ReactiveData_Rlist_merge=
      caml_string_of_jsbytes("ReactiveData.Rlist.merge"),
     cst_ReactiveData_Rlist_merge$1=
      caml_string_of_jsbytes("ReactiveData.Rlist.merge"),
     cst_ReactiveData_Rlist_merge$2=
      caml_string_of_jsbytes("ReactiveData.Rlist.merge"),
     Stdlib_list=global_data.Stdlib__list,
     React=global_data.React,
     Stdlib=global_data.Stdlib,
     Assert_failure=global_data.Assert_failure,
     Stdlib_map=global_data.Stdlib__map,
     Stdlib_hashtbl=global_data.Stdlib__hashtbl,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_set=global_data.Stdlib__set,
     _T_=[0,68],
     _I_=[0,caml_string_of_jsbytes("src/reactiveData.ml"),558,6],
     _E_=[0,caml_string_of_jsbytes("src/reactiveData.ml"),459,23],
     _D_=[0,caml_string_of_jsbytes("src/reactiveData.ml"),427,17],
     _C_=[0,0,0],
     _e_=[0,caml_string_of_jsbytes("src/reactiveData.ml"),215,4],
     _f_=[0,caml_string_of_jsbytes("src/reactiveData.ml"),251,4];
    function _a_(_gI_)
     {var _gJ_=_gI_[1],_gL_=_gI_[3],_gK_=_gI_[2],_gM_=[0,_gI_[4]];
      function _gN_(_hF_)
       {var _hG_=caml_call1(React[1][2],0),_hH_=[0,_hF_],_hI_=_hG_[1];
        function _hJ_(_hL_)
         {_hH_[1] = 0 === _hL_[0]?caml_call2(_gJ_,_hL_[1],_hH_[1]):_hL_[1];
          return _hL_}
        var _hK_=caml_call2(React[1][10],_hJ_,_hI_);
        return [0,[1,[0,_hH_,_hK_]],_hG_[2]]}
      function _gO_(_hB_,_hA_)
       {var _hC_=[0,_hB_];
        function _hD_(_hE_)
         {_hC_[1] = 0 === _hE_[0]?caml_call2(_gJ_,_hE_[1],_hC_[1]):_hE_[1];
          return _hE_}
        return [1,[0,_hC_,caml_call2(React[1][10],_hD_,_hA_)]]}
      function _gP_(_hz_){return [0,_hz_]}
      function _gQ_(_hy_,_hx_)
       {return 0 === _hx_[0]
                ?[0,caml_call2(_gK_,_hy_,_hx_[1])]
                :[1,caml_call2(_gL_,_hy_,_hx_[1])]}
      function _gR_(_hq_,_hp_)
       {if(0 === _hp_[0])return [0,caml_call2(_gL_,_hq_,_hp_[1])];
        var
         _hr_=_hp_[1],
         _hs_=[0,caml_call2(_gL_,_hq_,_hr_[1][1])],
         _ht_=_hr_[2];
        function _hu_(_hv_)
         {var _hw_=_gQ_(_hq_,_hv_);
          _hs_[1] = 0 === _hw_[0]?caml_call2(_gJ_,_hw_[1],_hs_[1]):_hw_[1];
          return _hw_}
        return [1,[0,_hs_,caml_call2(React[1][10],_hu_,_ht_)]]}
      function _gS_(_ho_){return 0 === _ho_[0]?_ho_[1]:_ho_[1][1][1]}
      function _gT_(_hn_){return 0 === _hn_[0]?React[1][1]:_hn_[1][2]}
      function _gU_(_hm_,_hl_){return caml_call2(_hm_,0,[0,_hl_])}
      function _gV_(_hk_,_hj_){return caml_call2(_hk_,0,[1,_hj_])}
      function _gW_(_hf_,_he_,_hd_)
       {if(0 === _he_[0])
         {var _hg_=caml_call2(_hf_,_hd_,[1,_he_[1]]);
          return caml_call1(React[2][1],_hg_)}
        var _hh_=_he_[1],_hi_=caml_call2(_hf_,_hd_,[1,_hh_[1][1]]);
        return caml_call4(React[2][21],0,_hf_,_hi_,_hh_[2])}
      function _gX_(_g6_,_g5_)
       {var _g7_=_g6_?_g6_[1]:caml_equal;
        if(0 === _g5_[0])return caml_call1(React[2][1],_g5_[1]);
        var _g8_=_g5_[1],_g9_=_g8_[2],_g__=_g8_[1][1];
        function _g$_(_hc_,_hb_)
         {return 0 === _hb_[0]?caml_call2(_gJ_,_hb_[1],_hc_):_hb_[1]}
        var _ha_=[0,caml_call1(_gI_[5],_g7_)];
        return caml_call4(React[2][21],_ha_,_g$_,_g__,_g9_)}
      return [0,
              _gM_,
              _gN_,
              _gO_,
              function(_gZ_,_gY_)
               {var _g0_=_gZ_?_gZ_[1]:caml_equal;
                function _g1_(_g4_,_g3_)
                 {return [0,caml_call3(_gI_[6],_g0_,_g3_,_g4_)]}
                var _g2_=caml_call2(React[2][14],_g1_,_gY_);
                return _gO_(caml_call1(React[2][3],_gY_),_g2_)},
              _gP_,
              _gU_,
              _gV_,
              _gQ_,
              _gR_,
              _gS_,
              _gW_,
              _gX_,
              _gT_]}
    var _b_=0,_c_=Stdlib_list[17];
    function _d_(_gD_)
     {function _gE_(_gH_)
       {switch(_gH_[0])
         {case 0:var _gF_=caml_call1(_gD_,_gH_[2]);return [0,_gH_[1],_gF_];
          case 1:return [1,_gH_[1]];
          case 2:var _gG_=caml_call1(_gD_,_gH_[2]);return [2,_gH_[1],_gG_];
          default:return [3,_gH_[1],_gH_[2]]}}
      return caml_call1(Stdlib_list[17],_gE_)}
    function _g_(_f3_,_f2_)
     {var _fZ_=0,_fY_=_f3_;
      for(;;)
       {if(0 <= _fZ_)
         {if(_fY_)
           {var _f0_=_fY_[1];
            if(3 !== _f0_[0])
             {var _f1_=_f0_[1];
              if(_fZ_ <= _f1_){var _fZ_=_f1_,_fY_=_fY_[2];continue}}
            var _f4_=0}
          else
           var _f4_=1;
          if(_f4_)
           {var _fR_=0,_fQ_=0,_fP_=_f3_,_fO_=_f2_;
            for(;;)
             {var switch$0=0;
              if(_fP_)
               {var _fS_=_fP_[1];
                if(3 !== _fS_[0])
                 {var _fT_=_fS_[1];
                  if(_fQ_ < _fT_)
                   {var _fN_=_fR_,_fM_=_fT_ - _fQ_ | 0,_fL_=_fO_;
                    for(;;)
                     {if(! (0 <= _fM_))throw [0,Assert_failure,_e_];
                      if(0 < _fM_)
                       {if(_fL_)
                         {var _fN_=[0,_fL_[1],_fN_],_fM_=_fM_ - 1 | 0,_fL_=_fL_[2];
                          continue}
                        var _fU_=caml_call1(Stdlib[1],cst_invalid_index)}
                      else
                       var _fU_=[0,_fL_,_fN_];
                      var _fW_=_fU_[1],_fV_=_fU_[2];
                      switch$0 = 1;
                      break}}}}
              if(! switch$0)var _fW_=_fO_,_fV_=_fR_;
              if(_fP_)
               {var _fX_=_fP_[1];
                switch(_fX_[0])
                 {case 0:
                   var
                    _fR_=_fV_,
                    _fQ_=_fX_[1],
                    _fP_=_fP_[2],
                    _fO_=[0,_fX_[2],_fW_];
                   continue;
                  case 1:
                   if(_fW_)
                    {var _fR_=_fV_,_fQ_=_fX_[1],_fP_=_fP_[2],_fO_=_fW_[2];
                     continue}
                   return caml_call1(Stdlib[1],cst_merge_invalid_index);
                  case 2:
                   if(_fW_)
                    {var
                      _fR_=_fV_,
                      _fQ_=_fX_[1],
                      _fP_=_fP_[2],
                      _fO_=[0,_fX_[2],_fW_[2]];
                     continue}
                   return caml_call1(Stdlib[1],cst_merge_invalid_index$0);
                  default:
                   return caml_call1(Stdlib[2],cst_linear_merge_X_not_support)}}
              return caml_call2(Stdlib_list[12],_fV_,_fW_)}}
          var
           _f5_=
            function(_gC_,_gB_)
             {switch(_gB_[0])
               {case 0:
                 var
                  _f7_=_gB_[1],
                  _f6_=_gB_[2],
                  _f8_=
                   0 <= _f7_
                    ?_f7_
                    :(caml_call1(Stdlib_list[1],_gC_) + 1 | 0) + _f7_ | 0,
                  _f$_=0,
                  _f__=_f8_,
                  _f9_=_gC_;
                 for(;;)
                  {if(0 === _f__)
                    return caml_call2(Stdlib_list[12],_f$_,[0,_f6_,_f9_]);
                   if(_f9_)
                    {var _f$_=[0,_f9_[1],_f$_],_f__=_f__ - 1 | 0,_f9_=_f9_[2];
                     continue}
                   return caml_call1(Stdlib[2],cst_ReactiveData_Rlist_merge)}
                case 1:
                 var
                  _ga_=_gB_[1],
                  _gb_=
                   0 <= _ga_?_ga_:caml_call1(Stdlib_list[1],_gC_) + _ga_ | 0,
                  _ge_=0,
                  _gd_=_gb_,
                  _gc_=_gC_;
                 for(;;)
                  {if(0 === _gd_ && _gc_)
                    return caml_call2(Stdlib_list[12],_ge_,_gc_[2]);
                   if(_gc_)
                    {var _ge_=[0,_gc_[1],_ge_],_gd_=_gd_ - 1 | 0,_gc_=_gc_[2];
                     continue}
                   return caml_call1(Stdlib[2],cst_ReactiveData_Rlist_merge$0)}
                case 2:
                 var
                  _gf_=_gB_[1],
                  _gg_=
                   0 <= _gf_?_gf_:caml_call1(Stdlib_list[1],_gC_) + _gf_ | 0,
                  _gh_=caml_call1(Stdlib_array[12],_gC_),
                  _gi_=_gB_[2];
                 caml_check_bound(_gh_,_gg_)[1 + _gg_] = _gi_;
                 return caml_call1(Stdlib_array[11],_gh_);
                default:
                 var
                  _gj_=_gB_[2],
                  _gk_=_gB_[1],
                  _gl_=caml_call1(Stdlib_array[12],_gC_),
                  _gm_=_gl_.length - 1,
                  _gn_=0 <= _gk_?_gk_:_gm_ + _gk_ | 0,
                  _go_=caml_check_bound(_gl_,_gn_)[1 + _gn_];
                 if(0 < _gj_)
                  {if(_gm_ <= (_gn_ + _gj_ | 0))
                    caml_call1(Stdlib[2],cst_ReactiveData_Rlist_merge$1);
                   var _gp_=(_gn_ + _gj_ | 0) - 1 | 0;
                   if(! (_gp_ < _gn_))
                    {var _gr_=_gn_;
                     for(;;)
                      {var
                        _gs_=_gr_ + 1 | 0,
                        _gt_=caml_check_bound(_gl_,_gs_)[1 + _gs_];
                       caml_check_bound(_gl_,_gr_)[1 + _gr_] = _gt_;
                       var _gu_=_gr_ + 1 | 0;
                       if(_gp_ !== _gr_){var _gr_=_gu_;continue}
                       break}}
                   var _gq_=_gn_ + _gj_ | 0;
                   caml_check_bound(_gl_,_gq_)[1 + _gq_] = _go_}
                 else
                  {if((_gn_ + _gj_ | 0) < 0)
                    caml_call1(Stdlib[2],cst_ReactiveData_Rlist_merge$2);
                   var _gv_=(_gn_ + _gj_ | 0) + 1 | 0;
                   if(! (_gn_ < _gv_))
                    {var _gx_=_gn_;
                     for(;;)
                      {var
                        _gy_=_gx_ - 1 | 0,
                        _gz_=caml_check_bound(_gl_,_gy_)[1 + _gy_];
                       caml_check_bound(_gl_,_gx_)[1 + _gx_] = _gz_;
                       var _gA_=_gx_ - 1 | 0;
                       if(_gv_ !== _gx_){var _gx_=_gA_;continue}
                       break}}
                   var _gw_=_gn_ + _gj_ | 0;
                   caml_check_bound(_gl_,_gw_)[1 + _gw_] = _go_}
                 return caml_call1(Stdlib_array[11],_gl_)}};
          return caml_call3(Stdlib_list[21],_f5_,_f2_,_f3_)}
        throw [0,Assert_failure,_f_]}}
    function _h_(_fI_,_fH_,_fG_)
     {var _fK_=_fH_,_fJ_=_fG_;
      for(;;)
       {if(_fK_)
         {if(_fJ_ && caml_call2(_fI_,_fK_[1],_fJ_[1]))
           {var _fK_=_fK_[2],_fJ_=_fJ_[2];continue}}
        else
         if(! _fJ_)return 1;
        return 0}}
    function _i_(_fx_)
     {var
       _fy_=Stdlib_hashtbl[27],
       _fz_=[0,function(_fF_,_fE_){return _fF_ === _fE_?1:0},_fy_],
       _fA_=caml_call1(Stdlib_hashtbl[25],_fz_),
       _fB_=caml_call1(_fA_[1],16);
      function _fC_(_fD_){return caml_call3(_fA_[5],_fB_,_fD_,0)}
      caml_call2(Stdlib_list[15],_fC_,_fx_);
      return caml_call1(_fA_[11],_fB_)}
    var
     _j_=
      _a_
       ([0,
         _g_,
         _d_,
         _c_,
         _b_,
         _h_,
         function(_fo_,_fn_,_fm_)
          {function _fp_(_fw_,_fv_,_fu_){return [0,[0,_fv_,_fu_],_fw_]}
           function _fq_(_ft_,_fs_){return [0,[1,_fs_],_ft_]}
           var
            _fr_=0,
            _e8_=[0,_fo_]?_fo_:caml_equal,
            _e9_=_i_(_fn_),
            _fd_=_fr_,
            _fc_=1,
            _fb_=_fn_,
            _fa_=_fm_,
            _e$_=0,
            _e__=_i_(_fm_);
           for(;;)
            {if(_fb_)
              {var _fe_=_fb_[2],_ff_=_fb_[1];
               if(_fa_)
                {var _fg_=_fa_[2],_fh_=_fa_[1];
                 if(caml_call2(_e8_,_ff_,_fh_))
                  {var _fb_=_fe_,_fa_=_fg_,_e$_=_e$_ + 1 | 0;continue}
                 if(caml_call1(_e__,_ff_))
                  {if(caml_call1(_e9_,_fh_))
                    {if(_fc_)
                      {var _fd_=_fq_(_fd_,_e$_),_fc_=0,_fb_=_fe_;continue}
                     var
                      _fd_=_fp_(_fd_,_e$_,_fh_),
                      _fc_=1,
                      _fa_=_fg_,
                      _e$_=_e$_ + 1 | 0;
                     continue}
                   var _fd_=_fp_(_fd_,_e$_,_fh_),_fa_=_fg_,_e$_=_e$_ + 1 | 0;
                   continue}
                 var _fd_=_fq_(_fd_,_e$_),_fb_=_fe_;
                 continue}
               var _fd_=_fq_(_fd_,_e$_),_fb_=_fe_,_fa_=0;
               continue}
             if(_fa_)
              {var
                _fi_=_fp_(_fd_,_e$_,_fa_[1]),
                _fd_=_fi_,
                _fb_=0,
                _fa_=_fa_[2],
                _e$_=_e$_ + 1 | 0;
               continue}
             var _fk_=0,_fj_=_fd_;
             for(;;)
              {var _fl_=_fk_?_fk_[1]:_fk_;
               if(_fj_){var _fk_=[0,[0,_fj_[1],_fl_]],_fj_=_fj_[2];continue}
               return _fl_}}}]),
     _k_=_j_[3],
     _l_=_j_[5],
     _m_=_j_[6],
     _n_=_j_[10],
     _o_=_j_[13];
    function _p_(_e7_,_e6_){return caml_call2(_m_,_e6_,[0,[0,0,_e7_],0])}
    function _q_(_e5_,_e4_){return caml_call2(_m_,_e4_,[0,[0,-1,_e5_],0])}
    function _r_(_e3_,_e2_,_e1_)
     {return caml_call2(_m_,_e1_,[0,[0,_e2_,_e3_],0])}
    function _s_(_e0_,_eZ_,_eY_)
     {return caml_call2(_m_,_eY_,[0,[2,_eZ_,_e0_],0])}
    function _t_(_eX_,_eW_,_eV_)
     {return caml_call2(_m_,_eV_,[0,[3,_eX_,_eW_],0])}
    function _u_(_eU_,_eT_){return caml_call2(_m_,_eT_,[0,[1,_eU_],0])}
    function _v_(_eP_,_eO_,_eN_)
     {var _eQ_=_eP_?_eP_[1]:caml_equal,_eS_=0,_eR_=_eO_;
      for(;;)
       {if(_eR_)
         {if(caml_call2(_eQ_,_eR_[1],_eN_))return _eS_;
          var _eS_=_eS_ + 1 | 0,_eR_=_eR_[2];
          continue}
        throw Stdlib[8]}}
    function _w_(_eL_,_eK_,_eJ_,_eI_)
     {var _eM_=_v_(_eL_,caml_call1(_n_,_eK_[1]),_eJ_);
      return _s_(_eI_,_eM_,_eK_[2])}
    function _x_(_eF_)
     {var _eG_=_eF_[2],_eH_=caml_call1(_n_,_eF_[1]);
      return _u_(caml_call1(Stdlib_list[1],_eH_) - 1 | 0,_eG_)}
    function _y_(_eD_,_eC_,_eB_)
     {var _eE_=_v_(_eD_,caml_call1(_n_,_eC_[1]),_eB_);
      return _u_(_eE_,_eC_[2])}
    function _z_(_eA_){return caml_call1(_l_,[0,_eA_,0])}
    function _A_(_et_)
     {var
       _eu_=[0,1],
       _ev_=caml_call1(React[1][2],0),
       _ew_=_ev_[2],
       _ex_=caml_call2(_k_,0,_ev_[1]);
      function _ey_(_ez_)
       {return _eu_[1]
                ?(_eu_[1] = 0,caml_call2(_ew_,0,[0,[0,[0,0,_ez_],0]]))
                :caml_call2(_ew_,0,[0,[0,[2,0,_ez_],0]])}
      caml_call3(React[2][11],0,_ey_,_et_);
      return _ex_}
    function _B_(_dh_,_dg_)
     {var
       _di_=caml_call1(_n_,_dh_),
       _dj_=caml_call1(_n_,_dg_),
       _dk_=[0,0],
       _dl_=[0,0];
      function _dm_(_es_,_er_)
       {switch(_er_[0])
         {case 0:_es_[1]++;return 0;
          case 1:_es_[1] += -1;return 0;
          default:return 0}}
      function _dn_(_eq_,_ep_)
       {_eq_[1] = caml_call1(Stdlib_list[1],_ep_);return 0}
      _dn_(_dk_,_di_);
      _dn_(_dl_,_dj_);
      function _do_(_ed_)
       {switch(_ed_[0])
         {case 0:
           var
            _ee_=_ed_[1],
            _ef_=0 <= _ee_?_ee_:_ee_ - _dl_[1] | 0,
            _eg_=[0,_ef_,_ed_[2]];
           break;
          case 1:
           var
            _eh_=_ed_[1],
            _ei_=0 <= _eh_?_eh_:_eh_ - _dl_[1] | 0,
            _eg_=[1,_ei_];
           break;
          case 2:
           var
            _ej_=_ed_[1],
            _ek_=_ed_[2],
            _el_=0 <= _ej_?_ej_:_ej_ - _dl_[1] | 0,
            _eg_=[2,_el_,_ek_];
           break;
          default:
           var
            _em_=_ed_[1],
            _en_=_ed_[2],
            _eo_=0 <= _em_?_em_:_em_ - _dl_[1] | 0,
            _eg_=[3,_eo_,_en_]}
        _dm_(_dk_,_eg_);
        return _eg_}
      var _dp_=caml_call1(Stdlib_list[17],_do_);
      function _dq_(_d2_)
       {switch(_d2_[0])
         {case 0:
           var
            _d3_=_d2_[1],
            _d4_=_d2_[2],
            _d5_=0 <= _d3_?_dk_[1] + _d3_ | 0:_d3_,
            _d6_=[0,_d5_,_d4_];
           break;
          case 1:
           var
            _d7_=_d2_[1],
            _d8_=0 <= _d7_?_dk_[1] + _d7_ | 0:_d7_,
            _d6_=[1,_d8_];
           break;
          case 2:
           var
            _d9_=_d2_[1],
            _d__=_d2_[2],
            _d$_=0 <= _d9_?_dk_[1] + _d9_ | 0:_d9_,
            _d6_=[2,_d$_,_d__];
           break;
          default:
           var
            _ea_=_d2_[1],
            _eb_=_d2_[2],
            _ec_=0 <= _ea_?_dk_[1] + _ea_ | 0:_ea_,
            _d6_=[3,_ec_,_eb_]}
        _dm_(_dl_,_d6_);
        return _d6_}
      var
       _dr_=caml_call1(Stdlib_list[17],_dq_),
       _ds_=0,
       _dt_=caml_call1(_o_,_dg_);
      function _du_(_d1_){return [0,15437,_d1_]}
      var
       _dv_=[0,caml_call2(React[1][10],_du_,_dt_),_ds_],
       _dw_=caml_call1(_o_,_dh_);
      function _dx_(_d0_){return [0,15436,_d0_]}
      var _dy_=[0,caml_call2(React[1][10],_dx_,_dw_),_dv_];
      function _dz_(_dY_,_dX_)
       {var _dZ_=_dY_[1];
        if(! _dZ_ && typeof _dX_ !== "number" && 15436 === _dX_[1])
         return [0,[0,_dX_[2]],_dY_[2]];
        if(! _dY_[2] && typeof _dX_ !== "number" && 15437 === _dX_[1])
         return [0,_dZ_,[0,_dX_[2]]];
        throw [0,Assert_failure,_D_]}
      var _dA_=caml_call3(React[1][23],_dz_,_C_,_dy_);
      function _dB_(_dD_)
       {var _dE_=_dD_[1];
        if(_dE_)
         {var _dF_=_dE_[1];
          if(0 === _dF_[0])
           {var _dG_=_dD_[2],_dH_=_dF_[1];
            if(_dG_)
             {var _dI_=_dG_[1];
              if(0 === _dI_[0])
               {var _dJ_=caml_call1(_dp_,_dH_),_dK_=caml_call1(_dr_,_dI_[1]);
                return [0,caml_call2(Stdlib[37],_dJ_,_dK_)]}
              var _dL_=_dI_[1],_dM_=caml_call1(_n_,_dh_);
              _dn_(_dk_,_dM_);
              _dn_(_dl_,_dL_);
              return [1,caml_call2(Stdlib[37],_dM_,_dL_)]}
            return [0,caml_call1(_dp_,_dH_)]}
          var _dN_=_dD_[2],_dO_=_dF_[1];
          if(_dN_)
           {var _dP_=_dN_[1];
            if(0 === _dP_[0])
             {_dn_(_dk_,_dO_);
              var _dQ_=caml_call1(_n_,_dg_);
              _dn_(_dl_,_dQ_);
              return [1,caml_call2(Stdlib[37],_dO_,_dQ_)]}
            var _dR_=_dP_[1];
            _dn_(_dk_,_dO_);
            _dn_(_dl_,_dR_);
            return [1,caml_call2(Stdlib[37],_dO_,_dR_)]}
          _dn_(_dk_,_dO_);
          var _dS_=caml_call1(_n_,_dg_);
          return [1,caml_call2(Stdlib[37],_dO_,_dS_)]}
        var _dT_=_dD_[2];
        if(_dT_)
         {var _dU_=_dT_[1];
          if(0 === _dU_[0])return [0,caml_call1(_dr_,_dU_[1])];
          var _dV_=_dU_[1];
          _dn_(_dl_,_dV_);
          var _dW_=caml_call1(_n_,_dh_);
          return [1,caml_call2(Stdlib[37],_dW_,_dV_)]}
        throw [0,Assert_failure,_E_]}
      var _dC_=caml_call2(React[1][10],_dB_,_dA_);
      return caml_call2(_k_,caml_call2(Stdlib[37],_di_,_dj_),_dC_)}
    function _F_(_df_)
     {switch(_df_[0])
       {case 0:return [0,(- _df_[1] | 0) - 1 | 0,_df_[2]];
        case 1:return [1,(- _df_[1] | 0) - 1 | 0];
        case 2:return [2,(- _df_[1] | 0) - 1 | 0,_df_[2]];
        default:return [3,(- _df_[1] | 0) - 1 | 0,- _df_[2] | 0]}}
    function _G_(_c$_)
     {var _da_=caml_call1(_o_,_c$_);
      function _db_(_de_)
       {return 0 === _de_[0]
                ?[0,caml_call2(Stdlib_list[17],_F_,_de_[1])]
                :[1,caml_call1(Stdlib_list[9],_de_[1])]}
      var _dc_=caml_call2(React[1][10],_db_,_da_),_dd_=caml_call1(_n_,_c$_);
      return caml_call2(_k_,caml_call1(Stdlib_list[9],_dd_),_dc_)}
    function _H_(_bE_,_bD_)
     {var
       _bF_=caml_call1(Stdlib_map[1],[0,caml_compare]),
       _bG_=[0,_bF_[1]],
       _bH_=[0,0];
      function _bI_(_c4_)
       {_bH_[1] = caml_call1(Stdlib_list[1],_c4_);
        _bG_[1] = _bF_[1];
        var _c8_=_c4_,_c7_=0,_c6_=0,_c5_=-1;
        for(;;)
         {if(_c8_)
           {var _c9_=_c8_[2],_c__=_c8_[1];
            if(caml_call1(_bE_,_c__))
             {_bG_[1] = caml_call3(_bF_[4],_c6_,_c5_ + 1 | 0,_bG_[1]);
              var
               _c8_=_c9_,
               _c7_=[0,_c__,_c7_],
               _c6_=_c6_ + 1 | 0,
               _c5_=_c5_ + 1 | 0;
              continue}
            var _c8_=_c9_,_c6_=_c6_ + 1 | 0;
            continue}
          return caml_call1(Stdlib_list[9],_c7_)}}
      function _bJ_(_c3_){return 0 <= _c3_?_c3_:(_bH_[1] + 1 | 0) + _c3_ | 0}
      function _bK_(_cR_,_cQ_)
       {var
         _cS_=_bJ_(_cR_),
         _cT_=caml_call2(_bF_[26],_cS_,_bG_[1]),
         _cU_=_cT_[3],
         _cV_=_cT_[2],
         _cW_=_cT_[1],
         _cX_=_cV_?caml_call3(_bF_[4],_cS_,_cV_[1],_cU_):_cU_;
        function _cY_(_c1_,_c0_)
         {var _c2_=_cQ_?_c0_ + 1 | 0:_c0_;
          _bG_[1] = caml_call3(_bF_[4],_c1_ + 1 | 0,_c2_,_bG_[1]);
          return 0}
        caml_call2(_bF_[12],_cY_,_cX_);
        var
         _cZ_=
          caml_call1(_bF_[2],_cW_)?0:caml_call1(_bF_[22],_cW_)[2] + 1 | 0;
        if(_cQ_)_bG_[1] = caml_call3(_bF_[4],_cS_,_cZ_,_bG_[1]);
        _bH_[1]++;
        return _cZ_}
      function _bL_(_cA_,_cz_,_cy_)
       {var _cB_=_cy_?1:_cy_;
        if(_cA_ < _cz_)
         {var _cC_=_cA_ + 1 | 0;
          if(! (_cz_ < _cC_))
           {var _cD_=_cC_;
            for(;;)
             {var _cE_=_cB_?-1:0;
              try
               {var _cG_=caml_call2(_bF_[27],_cD_,_bG_[1]) + _cE_ | 0;
                _bG_[1] = caml_call3(_bF_[4],_cD_ - 1 | 0,_cG_,_bG_[1])}
              catch(_cO_)
               {_cO_ = caml_wrap_exception(_cO_);
                if(_cO_ !== Stdlib[8])throw _cO_;
                var _cM_=_cO_}
              var _cF_=_cD_ + 1 | 0;
              if(_cz_ !== _cD_){var _cD_=_cF_;continue}
              break}}}
        else
         {var _cH_=_cA_ - 1 | 0;
          if(! (_cH_ < _cz_))
           {var _cI_=_cH_;
            for(;;)
             {try
               {var
                 _cK_=_cB_?1:0,
                 _cL_=caml_call2(_bF_[27],_cI_,_bG_[1]) + _cK_ | 0;
                _bG_[1] = caml_call3(_bF_[4],_cI_ + 1 | 0,_cL_,_bG_[1])}
              catch(_cP_)
               {_cP_ = caml_wrap_exception(_cP_);
                if(_cP_ !== Stdlib[8])throw _cP_;
                var _cN_=_cP_}
              var _cJ_=_cI_ - 1 | 0;
              if(_cz_ !== _cI_){var _cI_=_cJ_;continue}
              break}}}
        return _cy_
                ?(_bG_[1] = caml_call3(_bF_[4],_cz_,_cy_[1],_bG_[1]),0)
                :(_bG_[1] = caml_call2(_bF_[7],_cz_,_bG_[1]),0)}
      function _bM_(_bS_)
       {switch(_bS_[0])
         {case 0:
           var _bT_=_bS_[2],_bU_=_bS_[1];
           return caml_call1(_bE_,_bT_)
                   ?[0,[0,_bK_(_bU_,1),_bT_],0]
                   :(_bK_(_bU_,0),0);
          case 1:
           var _bV_=_bJ_(_bS_[1]);
           try
            {var _b1_=[0,[1,caml_call2(_bF_[27],_bV_,_bG_[1])],0],_bW_=_b1_}
           catch(_cv_)
            {_cv_ = caml_wrap_exception(_cv_);
             if(_cv_ !== Stdlib[8])throw _cv_;
             var _bW_=0}
           var
            _bX_=caml_call2(_bF_[3],_bV_,_bG_[1]),
            _bY_=caml_call2(_bF_[26],_bV_,_bG_[1]),
            _bZ_=
             function(_ct_,_cs_)
              {var _cu_=_bX_?_cs_:_cs_ - 1 | 0;
               _bG_[1] = caml_call3(_bF_[4],_ct_ - 1 | 0,_cu_,_bG_[1]);
               return 0};
           if(1 - caml_call1(_bF_[2],_bG_[1]))
            {var _b0_=caml_call1(_bF_[22],_bG_[1]);
             _bG_[1] = caml_call2(_bF_[7],_b0_[1],_bG_[1])}
           _bH_[1] += -1;
           caml_call2(_bF_[12],_bZ_,_bY_[3]);
           return _bW_;
          case 2:
           var _b2_=_bS_[2],_b3_=_bJ_(_bS_[1]);
           try
            {var _b$_=caml_call2(_bF_[27],_b3_,_bG_[1]);
             if(caml_call1(_bE_,_b2_))
              var _ca_=[0,[2,_b$_,_b2_],0];
             else
              {var
                _cb_=caml_call2(_bF_[26],_b3_,_bG_[1]),
                _cc_=
                 function(_cr_,_cq_)
                  {_bG_[1] = caml_call3(_bF_[4],_cr_,_cq_ - 1 | 0,_bG_[1]);
                   return 0};
               _bG_[1] = caml_call2(_bF_[7],_b3_,_bG_[1]);
               caml_call2(_bF_[12],_cc_,_cb_[3]);
               var _ca_=[0,[1,_b$_],0]}
             return _ca_}
           catch(_cm_)
            {_cm_ = caml_wrap_exception(_cm_);
             if(_cm_ === Stdlib[8])
              {var _b4_=caml_call1(_bE_,_b2_);
               if(_b4_)
                {var _b5_=caml_call2(_bF_[26],_b3_,_bG_[1]);
                 if(0 !== _b5_[2])throw [0,Assert_failure,_I_];
                 var
                  _b6_=
                   function(_cp_,_co_)
                    {_bG_[1] = caml_call3(_bF_[4],_cp_,_co_ + 1 | 0,_bG_[1]);
                     return 0};
                 try
                  {var _b__=caml_call1(_bF_[22],_b5_[1])[2],_b7_=_b__}
                 catch(_cn_)
                  {_cn_ = caml_wrap_exception(_cn_);
                   if(_cn_ !== Stdlib[8])throw _cn_;
                   var _b7_=-1}
                 var _b8_=_b7_ + 1 | 0;
                 _bG_[1] = caml_call3(_bF_[4],_b3_,_b8_,_bG_[1]);
                 caml_call2(_bF_[12],_b6_,_b5_[3]);
                 var _b9_=[0,[0,_b8_,_b2_],0]}
               else
                var _b9_=_b4_;
               return _b9_}
             throw _cm_}
          default:
           var _cd_=_bJ_(_bS_[1]),_ce_=_cd_ + _bS_[2] | 0;
           try
            {var _cf_=caml_call2(_bF_[27],_cd_,_bG_[1]);
             try
              {var _cl_=caml_call2(_bF_[27],_ce_,_bG_[1]),_ci_=_cl_}
             catch(_cx_)
              {_cx_ = caml_wrap_exception(_cx_);
               if(_cx_ !== Stdlib[8])throw _cx_;
               var
                _cg_=caml_call2(_bF_[26],_cd_,_bG_[1])[1],
                _ch_=
                 caml_call1(_bF_[2],_cg_)
                  ?0
                  :caml_call1(_bF_[22],_cg_)[2] + 1 | 0,
                _ci_=_ch_}
             _bL_(_cd_,_ce_,[0,_ci_]);
             var
              _cj_=_ci_ !== _cf_?1:0,
              _ck_=_cj_?[0,[3,_cf_,_ci_ - _cf_ | 0],0]:_cj_;
             return _ck_}
           catch(_cw_)
            {_cw_ = caml_wrap_exception(_cw_);
             if(_cw_ === Stdlib[8]){_bL_(_cd_,_ce_,0);return 0}
             throw _cw_}}}
      function _bN_(_bQ_)
       {if(0 === _bQ_[0])
         {var _bR_=caml_call2(Stdlib_list[17],_bM_,_bQ_[1]);
          return [0,caml_call1(Stdlib_list[13],_bR_)]}
        return [1,_bI_(_bQ_[1])]}
      var _bO_=caml_call1(_o_,_bD_),_bP_=caml_call2(React[1][10],_bN_,_bO_);
      return caml_call2(_k_,_bI_(caml_call1(_n_,_bD_)),_bP_)}
    var _J_=caml_call1(Stdlib_set[1],[0,caml_compare]);
    function _K_(_aW_,_aV_)
     {function _aX_(_bC_,_bB_,_bA_)
       {return caml_call1(_aW_,_bA_)?_bC_:caml_call2(_J_[4],_bB_,_bC_)}
      var _aY_=_J_[1],_aZ_=0;
      function _a0_(_bz_)
       {var _bw_=_aZ_,_bv_=_aY_,_bu_=_bz_;
        for(;;)
         {if(_bu_)
           {var
             _bx_=_bu_[2],
             _by_=_aX_(_bv_,_bw_,_bu_[1]),
             _bw_=_bw_ + 1 | 0,
             _bv_=_by_,
             _bu_=_bx_;
            continue}
          return _bv_}}
      function _a1_(_br_,_bq_,_bp_)
       {function _bs_(_bt_){return _br_ <= _bt_?caml_call2(_bq_,_bt_,1):_bt_}
        return caml_call2(_J_[15],_bs_,_bp_)}
      function _a2_(_a7_,_a6_)
       {if(0 === _a6_[0])
         {var
           _a8_=_a6_[1],
           _a9_=
            function(_a$_,_a__)
             {switch(_a__[0])
               {case 0:
                 var
                  _ba_=_a__[1],
                  _bb_=
                   _a1_(_ba_,function(_bo_,_bn_){return _bo_ + _bn_ | 0},_a$_);
                 return _aX_(_bb_,_ba_,_a__[2]);
                case 1:
                 var _bc_=_a__[1],_bd_=caml_call2(_J_[6],_bc_,_a$_);
                 return _a1_
                         (_bc_,function(_bm_,_bl_){return _bm_ - _bl_ | 0},_bd_);
                case 2:
                 var _be_=_a__[1],_bf_=_a__[2];
                 return _aX_(caml_call2(_J_[6],_be_,_a$_),_be_,_bf_);
                default:
                 var
                  _bg_=_a__[2],
                  _bh_=_a__[1],
                  _bi_=caml_call2(_J_[3],_bg_,_a$_);
                 if(caml_call2(_J_[3],_bh_,_a$_) === _bi_)return _a$_;
                 if(caml_call2(_J_[3],_bh_,_a$_))
                  {var _bj_=caml_call2(_J_[6],_bh_,_a$_);
                   return caml_call2(_J_[4],_bg_,_bj_)}
                 var _bk_=caml_call2(_J_[6],_bg_,_a$_);
                 return caml_call2(_J_[4],_bh_,_bk_)}};
          return caml_call3(Stdlib_list[21],_a9_,_a7_,_a8_)}
        return _a0_(_a6_[1])}
      var
       _a3_=caml_call1(_o_,_aV_),
       _a4_=_a0_(caml_call1(_n_,_aV_)),
       _a5_=caml_call4(React[2][21],0,_a2_,_a4_,_a3_);
      return caml_call3(React[2][11],0,_J_[2],_a5_)}
    var
     _L_=_j_[12],
     _M_=_j_[11],
     _N_=_j_[9],
     _O_=_j_[8],
     _P_=_j_[7],
     _Q_=_j_[4],
     _R_=_j_[2],
     _S_=_j_[1],
     ReactiveData=
      [0,
       [0,
        _S_,
        _R_,
        _k_,
        _Q_,
        _l_,
        _m_,
        _P_,
        _O_,
        _N_,
        _n_,
        _M_,
        _L_,
        _o_,
        _p_,
        _q_,
        _r_,
        _u_,
        _x_,
        _y_,
        _s_,
        _w_,
        _t_,
        _z_,
        _A_,
        _B_,
        _G_,
        _H_,
        _K_],
       function(_ac_)
        {function _U_(_aQ_,_aP_)
          {function _aR_(_aU_,_aT_)
            {if(3404203 <= _aT_[1])return caml_call2(_ac_[7],_aT_[2],_aU_);
             var _aS_=_aT_[2];
             return caml_call3(_ac_[4],_aS_[1],_aS_[2],_aU_)}
           return caml_call3(Stdlib_list[21],_aR_,_aP_,_aQ_)}
         function _V_(_aK_)
          {function _aL_(_aO_)
            {if(3404203 <= _aO_[1])return [0,3404203,_aO_[2]];
             var _aM_=_aO_[2],_aN_=caml_call1(_aK_,_aM_[2]);
             return [0,3254785,[0,_aM_[1],_aN_]]}
           return caml_call1(Stdlib_list[17],_aL_)}
         function _W_(_aJ_,_aI_){return caml_call2(_ac_[33],_aJ_,_aI_)}
         var _X_=_ac_[1];
         function _Y_(_aH_){return caml_call1(_ac_[11],_aH_)}
         var
          _Z_=
           _a_
            ([0,
              _U_,
              _V_,
              _W_,
              _X_,
              _Y_,
              function(_au_,_at_,_as_)
               {function _av_(_aE_,_aD_,_aC_)
                 {if(_aD_)
                   {if(_aC_)
                     {var _aF_=_aC_[1];
                      return caml_call2(_au_,_aD_[1],_aF_)?0:[0,[0,85,_aF_]]}
                    return _T_}
                  var _aG_=_aC_?[0,[0,65,_aC_[1]]]:_aC_;
                  return _aG_}
                var _aw_=caml_call3(_ac_[8],_av_,_at_,_as_);
                function _ax_(_aB_,_aA_,_az_)
                 {return typeof _aA_ === "number"
                          ?[0,[0,3404203,_aB_],_az_]
                          :85 <= _aA_[1]
                            ?[0,[0,3404203,_aB_],[0,[0,3254785,[0,_aB_,_aA_[2]]],_az_]]
                            :[0,[0,3254785,[0,_aB_,_aA_[2]]],_az_]}
                var _ay_=caml_call3(_ac_[13],_ax_,_aw_,0);
                return caml_call1(Stdlib_list[9],_ay_)}]),
          ___=_Z_[3],
          _$_=_Z_[10],
          _aa_=_Z_[13];
         function _ab_(_ae_,_ad_)
          {function _af_(_am_)
            {if(3404203 <= _am_[1])return [0,[0,3404203,_am_[2]],0];
             var
              _an_=_am_[2],
              _ao_=_an_[2],
              _ap_=_an_[1],
              _aq_=caml_call2(_ae_,_ap_,_ao_),
              _ar_=_aq_?[0,[0,3254785,[0,_ap_,_ao_]],0]:_aq_;
             return _ar_}
           function _ag_(_ak_)
            {if(0 === _ak_[0])
              {var _al_=caml_call2(Stdlib_list[17],_af_,_ak_[1]);
               return [0,caml_call1(Stdlib_list[13],_al_)]}
             return [1,caml_call2(_ac_[16],_ae_,_ak_[1])]}
           var
            _ah_=caml_call1(_aa_,_ad_),
            _ai_=caml_call2(React[1][10],_ag_,_ah_),
            _aj_=caml_call1(_$_,_ad_);
           return caml_call2(___,caml_call2(_ac_[16],_ae_,_aj_),_ai_)}
         return [0,
                 _Z_[1],
                 _Z_[2],
                 ___,
                 _Z_[4],
                 _Z_[5],
                 _Z_[6],
                 _Z_[7],
                 _Z_[8],
                 _Z_[9],
                 _$_,
                 _Z_[11],
                 _Z_[12],
                 _aa_,
                 _ab_]},
       _a_];
    runtime.caml_register_global(23,ReactiveData,"ReactiveData");
    return}
  (function(){return this}()));


//# 1 "../../.js/js_of_ocaml-tyxml/js_of_ocaml_tyxml.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_register_global=runtime.caml_register_global,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_of_video$0=caml_string_of_jsbytes("of_video"),
     cst_of_audio$0=caml_string_of_jsbytes("of_audio"),
     cst_of_iFrame=caml_string_of_jsbytes("of_iFrame"),
     cst_of_canvas$0=caml_string_of_jsbytes("of_canvas"),
     cst_of_table$0=caml_string_of_jsbytes("of_table"),
     cst_of_tableCaption=caml_string_of_jsbytes("of_tableCaption"),
     cst_of_tableSection=caml_string_of_jsbytes("of_tableSection"),
     cst_of_tableCol=caml_string_of_jsbytes("of_tableCol"),
     cst_of_tableRow=caml_string_of_jsbytes("of_tableRow"),
     cst_of_tableCell=caml_string_of_jsbytes("of_tableCell"),
     cst_of_embed$0=caml_string_of_jsbytes("of_embed"),
     cst_of_script$0=caml_string_of_jsbytes("of_script"),
     cst_of_map$0=caml_string_of_jsbytes("of_map"),
     cst_of_area$0=caml_string_of_jsbytes("of_area"),
     cst_of_param$0=caml_string_of_jsbytes("of_param"),
     cst_of_object$0=caml_string_of_jsbytes("of_object"),
     cst_of_image=caml_string_of_jsbytes("of_image"),
     cst_of_anchor=caml_string_of_jsbytes("of_anchor"),
     cst_of_mod=caml_string_of_jsbytes("of_mod"),
     cst_of_hr$0=caml_string_of_jsbytes("of_hr"),
     cst_of_br$0=caml_string_of_jsbytes("of_br"),
     cst_of_pre$0=caml_string_of_jsbytes("of_pre"),
     cst_of_quote=caml_string_of_jsbytes("of_quote"),
     cst_of_heading$0=caml_string_of_jsbytes("of_heading"),
     cst_of_paragraph=caml_string_of_jsbytes("of_paragraph"),
     cst_of_div$0=caml_string_of_jsbytes("of_div"),
     cst_of_li$0=caml_string_of_jsbytes("of_li"),
     cst_of_dList=caml_string_of_jsbytes("of_dList"),
     cst_of_oList=caml_string_of_jsbytes("of_oList"),
     cst_of_uList=caml_string_of_jsbytes("of_uList"),
     cst_of_legend$0=caml_string_of_jsbytes("of_legend"),
     cst_of_fieldSet=caml_string_of_jsbytes("of_fieldSet"),
     cst_of_label$0=caml_string_of_jsbytes("of_label"),
     cst_of_button$0=caml_string_of_jsbytes("of_button"),
     cst_of_textArea=caml_string_of_jsbytes("of_textArea"),
     cst_of_input$0=caml_string_of_jsbytes("of_input"),
     cst_of_select$0=caml_string_of_jsbytes("of_select"),
     cst_of_option$0=caml_string_of_jsbytes("of_option"),
     cst_of_optGroup=caml_string_of_jsbytes("of_optGroup"),
     cst_of_form$0=caml_string_of_jsbytes("of_form"),
     cst_of_body$0=caml_string_of_jsbytes("of_body"),
     cst_of_style$0=caml_string_of_jsbytes("of_style"),
     cst_of_base$0=caml_string_of_jsbytes("of_base"),
     cst_of_meta$0=caml_string_of_jsbytes("of_meta"),
     cst_of_title$0=caml_string_of_jsbytes("of_title"),
     cst_of_link$0=caml_string_of_jsbytes("of_link"),
     cst_of_head$0=caml_string_of_jsbytes("of_head"),
     cst_of_html$0=caml_string_of_jsbytes("of_html"),
     cst_of_element$0=caml_string_of_jsbytes("of_element"),
     cst_of_wbr=caml_string_of_jsbytes("of_wbr"),
     cst_of_var=caml_string_of_jsbytes("of_var"),
     cst_of_u=caml_string_of_jsbytes("of_u"),
     cst_of_time=caml_string_of_jsbytes("of_time"),
     cst_of_th=caml_string_of_jsbytes("of_th"),
     cst_of_sup=caml_string_of_jsbytes("of_sup"),
     cst_of_summary=caml_string_of_jsbytes("of_summary"),
     cst_of_sub=caml_string_of_jsbytes("of_sub"),
     cst_of_strong=caml_string_of_jsbytes("of_strong"),
     cst_of_span=caml_string_of_jsbytes("of_span"),
     cst_of_source=caml_string_of_jsbytes("of_source"),
     cst_of_small=caml_string_of_jsbytes("of_small"),
     cst_of_section=caml_string_of_jsbytes("of_section"),
     cst_of_samp=caml_string_of_jsbytes("of_samp"),
     cst_of_ruby=caml_string_of_jsbytes("of_ruby"),
     cst_of_rt=caml_string_of_jsbytes("of_rt"),
     cst_of_rp=caml_string_of_jsbytes("of_rp"),
     cst_of_q=caml_string_of_jsbytes("of_q"),
     cst_of_progress=caml_string_of_jsbytes("of_progress"),
     cst_of_output=caml_string_of_jsbytes("of_output"),
     cst_of_noscript=caml_string_of_jsbytes("of_noscript"),
     cst_of_nav=caml_string_of_jsbytes("of_nav"),
     cst_of_meter=caml_string_of_jsbytes("of_meter"),
     cst_of_menu=caml_string_of_jsbytes("of_menu"),
     cst_of_mark=caml_string_of_jsbytes("of_mark"),
     cst_of_main=caml_string_of_jsbytes("of_main"),
     cst_of_keygen=caml_string_of_jsbytes("of_keygen"),
     cst_of_kbd=caml_string_of_jsbytes("of_kbd"),
     cst_of_i=caml_string_of_jsbytes("of_i"),
     cst_of_hgroup=caml_string_of_jsbytes("of_hgroup"),
     cst_of_header=caml_string_of_jsbytes("of_header"),
     cst_of_footer=caml_string_of_jsbytes("of_footer"),
     cst_of_figure=caml_string_of_jsbytes("of_figure"),
     cst_of_figcaption=caml_string_of_jsbytes("of_figcaption"),
     cst_of_embed=caml_string_of_jsbytes("of_embed"),
     cst_of_em=caml_string_of_jsbytes("of_em"),
     cst_of_dt=caml_string_of_jsbytes("of_dt"),
     cst_of_dfn=caml_string_of_jsbytes("of_dfn"),
     cst_of_details=caml_string_of_jsbytes("of_details"),
     cst_of_dd=caml_string_of_jsbytes("of_dd"),
     cst_of_datalist=caml_string_of_jsbytes("of_datalist"),
     cst_of_command=caml_string_of_jsbytes("of_command"),
     cst_of_colgroup=caml_string_of_jsbytes("of_colgroup"),
     cst_of_code=caml_string_of_jsbytes("of_code"),
     cst_of_cite=caml_string_of_jsbytes("of_cite"),
     cst_of_bdo=caml_string_of_jsbytes("of_bdo"),
     cst_of_b=caml_string_of_jsbytes("of_b"),
     cst_of_aside=caml_string_of_jsbytes("of_aside"),
     cst_of_article=caml_string_of_jsbytes("of_article"),
     cst_of_address=caml_string_of_jsbytes("of_address"),
     cst_of_abbr=caml_string_of_jsbytes("of_abbr"),
     cst_of_h6=caml_string_of_jsbytes("of_h6"),
     cst_of_h5=caml_string_of_jsbytes("of_h5"),
     cst_of_h4=caml_string_of_jsbytes("of_h4"),
     cst_of_h3=caml_string_of_jsbytes("of_h3"),
     cst_of_h2=caml_string_of_jsbytes("of_h2"),
     cst_of_h1=caml_string_of_jsbytes("of_h1"),
     cst_of_video=caml_string_of_jsbytes("of_video"),
     cst_of_audio=caml_string_of_jsbytes("of_audio"),
     cst_of_iframe=caml_string_of_jsbytes("of_iframe"),
     cst_of_canvas=caml_string_of_jsbytes("of_canvas"),
     cst_of_table=caml_string_of_jsbytes("of_table"),
     cst_of_caption=caml_string_of_jsbytes("of_caption"),
     cst_of_tbody=caml_string_of_jsbytes("of_tbody"),
     cst_of_thead=caml_string_of_jsbytes("of_thead"),
     cst_of_tfoot=caml_string_of_jsbytes("of_tfoot"),
     cst_of_col=caml_string_of_jsbytes("of_col"),
     cst_of_tr=caml_string_of_jsbytes("of_tr"),
     cst_of_td=caml_string_of_jsbytes("of_td"),
     cst_of_script=caml_string_of_jsbytes("of_script"),
     cst_of_map=caml_string_of_jsbytes("of_map"),
     cst_of_area=caml_string_of_jsbytes("of_area"),
     cst_of_param=caml_string_of_jsbytes("of_param"),
     cst_of_object=caml_string_of_jsbytes("of_object"),
     cst_of_img=caml_string_of_jsbytes("of_img"),
     cst_of_a=caml_string_of_jsbytes("of_a"),
     cst_of_del=caml_string_of_jsbytes("of_del"),
     cst_of_ins=caml_string_of_jsbytes("of_ins"),
     cst_of_hr=caml_string_of_jsbytes("of_hr"),
     cst_of_br=caml_string_of_jsbytes("of_br"),
     cst_of_pre=caml_string_of_jsbytes("of_pre"),
     cst_of_blockquote=caml_string_of_jsbytes("of_blockquote"),
     cst_of_heading=caml_string_of_jsbytes("of_heading"),
     cst_of_p=caml_string_of_jsbytes("of_p"),
     cst_of_div=caml_string_of_jsbytes("of_div"),
     cst_of_li=caml_string_of_jsbytes("of_li"),
     cst_of_dl=caml_string_of_jsbytes("of_dl"),
     cst_of_ol=caml_string_of_jsbytes("of_ol"),
     cst_of_ul=caml_string_of_jsbytes("of_ul"),
     cst_of_legend=caml_string_of_jsbytes("of_legend"),
     cst_of_fieldset=caml_string_of_jsbytes("of_fieldset"),
     cst_of_label=caml_string_of_jsbytes("of_label"),
     cst_of_button=caml_string_of_jsbytes("of_button"),
     cst_of_textarea=caml_string_of_jsbytes("of_textarea"),
     cst_of_input=caml_string_of_jsbytes("of_input"),
     cst_of_select=caml_string_of_jsbytes("of_select"),
     cst_of_option=caml_string_of_jsbytes("of_option"),
     cst_of_optgroup=caml_string_of_jsbytes("of_optgroup"),
     cst_of_form=caml_string_of_jsbytes("of_form"),
     cst_of_body=caml_string_of_jsbytes("of_body"),
     cst_of_style=caml_string_of_jsbytes("of_style"),
     cst_of_base=caml_string_of_jsbytes("of_base"),
     cst_of_meta=caml_string_of_jsbytes("of_meta"),
     cst_of_title=caml_string_of_jsbytes("of_title"),
     cst_of_link=caml_string_of_jsbytes("of_link"),
     cst_of_head=caml_string_of_jsbytes("of_head"),
     cst_of_html=caml_string_of_jsbytes("of_html"),
     cst_of_pcdata=caml_string_of_jsbytes("of_pcdata"),
     cst_of_node=caml_string_of_jsbytes("of_node"),
     cst_of_element=caml_string_of_jsbytes("of_element"),
     cst$7=caml_string_of_jsbytes(" "),
     cst$6=caml_string_of_jsbytes(","),
     cst$5=caml_string_of_jsbytes(" "),
     cst_filter_attrib_not_implemen=
      caml_string_of_jsbytes
       ("filter_attrib not implemented for event handler"),
     cst_style=caml_string_of_jsbytes("style"),
     cst_style$0=caml_string_of_jsbytes("style"),
     cst$2=caml_string_of_jsbytes(""),
     cst_amp=caml_string_of_jsbytes("amp"),
     cst_apos=caml_string_of_jsbytes("apos"),
     cst_gt=caml_string_of_jsbytes("gt"),
     cst_lt=caml_string_of_jsbytes("lt"),
     cst_quot=caml_string_of_jsbytes("quot"),
     cst$3=caml_string_of_jsbytes(";"),
     cst$4=caml_string_of_jsbytes("&"),
     cst$1=caml_string_of_jsbytes(" "),
     cst$0=caml_string_of_jsbytes(","),
     cst=caml_string_of_jsbytes(" "),
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_char=global_data.Stdlib__char,
     Js_of_ocaml_Dom_svg=global_data.Js_of_ocaml__Dom_svg,
     Js_of_ocaml_Dom_html=global_data.Js_of_ocaml__Dom_html,
     React=global_data.React,
     Stdlib=global_data.Stdlib,
     Js_of_ocaml_Js=global_data.Js_of_ocaml__Js,
     ReactiveData=global_data.ReactiveData,
     Stdlib_list=global_data.Stdlib__list,
     Js_of_ocaml_Dom=global_data.Js_of_ocaml__Dom,
     Assert_failure=global_data.Assert_failure,
     Stdlib_printf=global_data.Stdlib__printf,
     Xml_wrap=global_data.Xml_wrap,
     Svg_f=global_data.Svg_f,
     Html_f=global_data.Html_f,
     Js_of_ocaml_tyxml=[0];
    caml_register_global(245,Js_of_ocaml_tyxml,"Js_of_ocaml_tyxml__");
    var
     Poly=[0],
     _d_=[0,caml_string_of_jsbytes("lib/tyxml/tyxml_js.ml"),327,8],
     _e_=[0,caml_string_of_jsbytes("lib/tyxml/tyxml_js.ml"),333,15],
     _f_=[0,caml_string_of_jsbytes("lib/tyxml/tyxml_js.ml"),341,17],
     _c_=[0,caml_string_of_jsbytes("lib/tyxml/tyxml_js.ml"),314,4],
     _a_=
      [0,
       [11,caml_string_of_jsbytes("Invalid entity "),[3,0,0]],
       caml_string_of_jsbytes("Invalid entity %S")];
    function symbol(x,y){return x < y?1:0}
    function symbol$0(x,y){return x <= y?1:0}
    function symbol$1(x,y){return x !== y?1:0}
    function symbol$2(x,y){return x === y?1:0}
    function symbol$3(x,y){return y < x?1:0}
    function symbol$4(x,y){return y <= x?1:0}
    var compare=runtime.caml_int_compare;
    function equal(x,y){return x === y?1:0}
    function max(x,y){return y <= x?x:y}
    function min(x,y){return x <= y?x:y}
    var
     Int_replace_polymorphic_compar=
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
     make=Stdlib_string[1],
     init=Stdlib_string[2],
     copy=Stdlib_string[3],
     sub=Stdlib_string[4],
     fill=Stdlib_string[5],
     blit=Stdlib_string[6],
     concat=Stdlib_string[7],
     iter=Stdlib_string[8],
     iteri=Stdlib_string[9],
     map=Stdlib_string[10],
     mapi=Stdlib_string[11],
     trim=Stdlib_string[12],
     escaped=Stdlib_string[13],
     index=Stdlib_string[14],
     index_opt=Stdlib_string[15],
     rindex=Stdlib_string[16],
     rindex_opt=Stdlib_string[17],
     index_from=Stdlib_string[18],
     index_from_opt=Stdlib_string[19],
     rindex_from=Stdlib_string[20],
     rindex_from_opt=Stdlib_string[21],
     contains=Stdlib_string[22],
     contains_from=Stdlib_string[23],
     rcontains_from=Stdlib_string[24],
     uppercase=Stdlib_string[25],
     lowercase=Stdlib_string[26],
     capitalize=Stdlib_string[27],
     uncapitalize=Stdlib_string[28],
     uppercase_ascii=Stdlib_string[29],
     lowercase_ascii=Stdlib_string[30],
     capitalize_ascii=Stdlib_string[31],
     uncapitalize_ascii=Stdlib_string[32],
     compare$0=Stdlib_string[33],
     split_on_char=Stdlib_string[35],
     to_seq=Stdlib_string[36],
     to_seqi=Stdlib_string[37],
     of_seq=Stdlib_string[38],
     equal$0=runtime.caml_string_equal,
     String=
      [0,
       make,
       init,
       copy,
       sub,
       fill,
       blit,
       concat,
       iter,
       iteri,
       map,
       mapi,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$0,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       equal$0],
     chr=Stdlib_char[1],
     escaped$0=Stdlib_char[2],
     lowercase$0=Stdlib_char[3],
     uppercase$0=Stdlib_char[4],
     lowercase_ascii$0=Stdlib_char[5],
     uppercase_ascii$0=Stdlib_char[6],
     compare$1=Stdlib_char[7];
    function equal$1(x,y){return x === y?1:0}
    var
     Char=
      [0,
       chr,
       escaped$0,
       lowercase$0,
       uppercase$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$1,
       equal$1],
     symbol$5=Int_replace_polymorphic_compar[1],
     symbol$6=Int_replace_polymorphic_compar[2],
     symbol$7=Int_replace_polymorphic_compar[3],
     symbol$8=Int_replace_polymorphic_compar[4],
     symbol$9=Int_replace_polymorphic_compar[5],
     symbol$10=Int_replace_polymorphic_compar[6],
     compare$2=Int_replace_polymorphic_compar[7],
     equal$2=Int_replace_polymorphic_compar[8],
     max$0=Int_replace_polymorphic_compar[9],
     min$0=Int_replace_polymorphic_compar[10],
     Js_of_ocaml_tyxml_Import=
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       compare$2,
       equal$2,
       max$0,
       min$0];
    caml_register_global
     (248,Js_of_ocaml_tyxml_Import,"Js_of_ocaml_tyxml__Import");
    var Js_of_ocaml_tyxml_Tyxml_cast_s=[0];
    caml_register_global
     (249,Js_of_ocaml_tyxml_Tyxml_cast_s,"Js_of_ocaml_tyxml__Tyxml_cast_sigs");
    function MakeTo(C)
     {function rebuild_node(param,x){return caml_call1(C[1],x)}
      function of_element(elt){return rebuild_node(cst_of_element,elt)}
      function of_node(elt){return rebuild_node(cst_of_node,elt)}
      function of_pcdata(elt){return rebuild_node(cst_of_pcdata,elt)}
      function of_html(elt){return rebuild_node(cst_of_html,elt)}
      function of_head(elt){return rebuild_node(cst_of_head,elt)}
      function of_link(elt){return rebuild_node(cst_of_link,elt)}
      function of_title(elt){return rebuild_node(cst_of_title,elt)}
      function of_meta(elt){return rebuild_node(cst_of_meta,elt)}
      function of_base(elt){return rebuild_node(cst_of_base,elt)}
      function of_style(elt){return rebuild_node(cst_of_style,elt)}
      function of_body(elt){return rebuild_node(cst_of_body,elt)}
      function of_form(elt){return rebuild_node(cst_of_form,elt)}
      function of_optgroup(elt){return rebuild_node(cst_of_optgroup,elt)}
      function of_option(elt){return rebuild_node(cst_of_option,elt)}
      function of_select(elt){return rebuild_node(cst_of_select,elt)}
      function of_input(elt){return rebuild_node(cst_of_input,elt)}
      function of_textarea(elt){return rebuild_node(cst_of_textarea,elt)}
      function of_button(elt){return rebuild_node(cst_of_button,elt)}
      function of_label(elt){return rebuild_node(cst_of_label,elt)}
      function of_fieldset(elt){return rebuild_node(cst_of_fieldset,elt)}
      function of_legend(elt){return rebuild_node(cst_of_legend,elt)}
      function of_ul(elt){return rebuild_node(cst_of_ul,elt)}
      function of_ol(elt){return rebuild_node(cst_of_ol,elt)}
      function of_dl(elt){return rebuild_node(cst_of_dl,elt)}
      function of_li(elt){return rebuild_node(cst_of_li,elt)}
      function of_div(elt){return rebuild_node(cst_of_div,elt)}
      function of_p(elt){return rebuild_node(cst_of_p,elt)}
      function of_heading(elt){return rebuild_node(cst_of_heading,elt)}
      function of_blockquote(elt){return rebuild_node(cst_of_blockquote,elt)}
      function of_pre(elt){return rebuild_node(cst_of_pre,elt)}
      function of_br(elt){return rebuild_node(cst_of_br,elt)}
      function of_hr(elt){return rebuild_node(cst_of_hr,elt)}
      function of_ins(elt){return rebuild_node(cst_of_ins,elt)}
      function of_del(elt){return rebuild_node(cst_of_del,elt)}
      function of_a(elt){return rebuild_node(cst_of_a,elt)}
      function of_img(elt){return rebuild_node(cst_of_img,elt)}
      function of_object(elt){return rebuild_node(cst_of_object,elt)}
      function of_param(elt){return rebuild_node(cst_of_param,elt)}
      function of_area(elt){return rebuild_node(cst_of_area,elt)}
      function of_map(elt){return rebuild_node(cst_of_map,elt)}
      function of_script(elt){return rebuild_node(cst_of_script,elt)}
      function of_td(elt){return rebuild_node(cst_of_td,elt)}
      function of_tr(elt){return rebuild_node(cst_of_tr,elt)}
      function of_col(elt){return rebuild_node(cst_of_col,elt)}
      function of_tfoot(elt){return rebuild_node(cst_of_tfoot,elt)}
      function of_thead(elt){return rebuild_node(cst_of_thead,elt)}
      function of_tbody(elt){return rebuild_node(cst_of_tbody,elt)}
      function of_caption(elt){return rebuild_node(cst_of_caption,elt)}
      function of_table(elt){return rebuild_node(cst_of_table,elt)}
      function of_canvas(elt){return rebuild_node(cst_of_canvas,elt)}
      function of_iframe(elt){return rebuild_node(cst_of_iframe,elt)}
      function of_audio(elt){return rebuild_node(cst_of_audio,elt)}
      function of_video(elt){return rebuild_node(cst_of_video,elt)}
      function of_h1(elt){return rebuild_node(cst_of_h1,elt)}
      function of_h2(elt){return rebuild_node(cst_of_h2,elt)}
      function of_h3(elt){return rebuild_node(cst_of_h3,elt)}
      function of_h4(elt){return rebuild_node(cst_of_h4,elt)}
      function of_h5(elt){return rebuild_node(cst_of_h5,elt)}
      function of_h6(elt){return rebuild_node(cst_of_h6,elt)}
      function of_abbr(elt){return rebuild_node(cst_of_abbr,elt)}
      function of_address(elt){return rebuild_node(cst_of_address,elt)}
      function of_article(elt){return rebuild_node(cst_of_article,elt)}
      function of_aside(elt){return rebuild_node(cst_of_aside,elt)}
      function of_b(elt){return rebuild_node(cst_of_b,elt)}
      function of_bdo(elt){return rebuild_node(cst_of_bdo,elt)}
      function of_cite(elt){return rebuild_node(cst_of_cite,elt)}
      function of_code(elt){return rebuild_node(cst_of_code,elt)}
      function of_colgroup(elt){return rebuild_node(cst_of_colgroup,elt)}
      function of_command(elt){return rebuild_node(cst_of_command,elt)}
      function of_datalist(elt){return rebuild_node(cst_of_datalist,elt)}
      function of_dd(elt){return rebuild_node(cst_of_dd,elt)}
      function of_details(elt){return rebuild_node(cst_of_details,elt)}
      function of_dfn(elt){return rebuild_node(cst_of_dfn,elt)}
      function of_dt(elt){return rebuild_node(cst_of_dt,elt)}
      function of_em(elt){return rebuild_node(cst_of_em,elt)}
      function of_embed(elt){return rebuild_node(cst_of_embed,elt)}
      function of_figcaption(elt){return rebuild_node(cst_of_figcaption,elt)}
      function of_figure(elt){return rebuild_node(cst_of_figure,elt)}
      function of_footer(elt){return rebuild_node(cst_of_footer,elt)}
      function of_header(elt){return rebuild_node(cst_of_header,elt)}
      function of_hgroup(elt){return rebuild_node(cst_of_hgroup,elt)}
      function of_i(elt){return rebuild_node(cst_of_i,elt)}
      function of_kbd(elt){return rebuild_node(cst_of_kbd,elt)}
      function of_keygen(elt){return rebuild_node(cst_of_keygen,elt)}
      function of_main(elt){return rebuild_node(cst_of_main,elt)}
      function of_mark(elt){return rebuild_node(cst_of_mark,elt)}
      function of_menu(elt){return rebuild_node(cst_of_menu,elt)}
      function of_meter(elt){return rebuild_node(cst_of_meter,elt)}
      function of_nav(elt){return rebuild_node(cst_of_nav,elt)}
      function of_noscript(elt){return rebuild_node(cst_of_noscript,elt)}
      function of_output(elt){return rebuild_node(cst_of_output,elt)}
      function of_progress(elt){return rebuild_node(cst_of_progress,elt)}
      function of_q(elt){return rebuild_node(cst_of_q,elt)}
      function of_rp(elt){return rebuild_node(cst_of_rp,elt)}
      function of_rt(elt){return rebuild_node(cst_of_rt,elt)}
      function of_ruby(elt){return rebuild_node(cst_of_ruby,elt)}
      function of_samp(elt){return rebuild_node(cst_of_samp,elt)}
      function of_section(elt){return rebuild_node(cst_of_section,elt)}
      function of_small(elt){return rebuild_node(cst_of_small,elt)}
      function of_source(elt){return rebuild_node(cst_of_source,elt)}
      function of_span(elt){return rebuild_node(cst_of_span,elt)}
      function of_strong(elt){return rebuild_node(cst_of_strong,elt)}
      function of_sub(elt){return rebuild_node(cst_of_sub,elt)}
      function of_summary(elt){return rebuild_node(cst_of_summary,elt)}
      function of_sup(elt){return rebuild_node(cst_of_sup,elt)}
      function of_th(elt){return rebuild_node(cst_of_th,elt)}
      function of_time(elt){return rebuild_node(cst_of_time,elt)}
      function of_u(elt){return rebuild_node(cst_of_u,elt)}
      function of_var(elt){return rebuild_node(cst_of_var,elt)}
      function of_wbr(elt){return rebuild_node(cst_of_wbr,elt)}
      return [0,
              of_element,
              of_node,
              of_pcdata,
              of_html,
              of_head,
              of_link,
              of_title,
              of_meta,
              of_base,
              of_style,
              of_body,
              of_form,
              of_optgroup,
              of_option,
              of_select,
              of_input,
              of_textarea,
              of_button,
              of_label,
              of_fieldset,
              of_legend,
              of_ul,
              of_ol,
              of_dl,
              of_li,
              of_div,
              of_p,
              of_heading,
              of_blockquote,
              of_pre,
              of_br,
              of_hr,
              of_del,
              of_ins,
              of_a,
              of_img,
              of_object,
              of_param,
              of_area,
              of_map,
              of_script,
              of_td,
              of_tr,
              of_col,
              of_tfoot,
              of_thead,
              of_tbody,
              of_caption,
              of_table,
              of_canvas,
              of_iframe,
              of_audio,
              of_video,
              of_h1,
              of_h2,
              of_h3,
              of_h4,
              of_h5,
              of_h6,
              of_abbr,
              of_address,
              of_article,
              of_aside,
              of_b,
              of_bdo,
              of_cite,
              of_code,
              of_colgroup,
              of_command,
              of_datalist,
              of_dd,
              of_details,
              of_dfn,
              of_dt,
              of_em,
              of_embed,
              of_figcaption,
              of_figure,
              of_footer,
              of_header,
              of_hgroup,
              of_i,
              of_kbd,
              of_keygen,
              of_main,
              of_mark,
              of_menu,
              of_meter,
              of_nav,
              of_noscript,
              of_output,
              of_progress,
              of_q,
              of_rp,
              of_rt,
              of_ruby,
              of_samp,
              of_section,
              of_small,
              of_source,
              of_span,
              of_strong,
              of_sub,
              of_summary,
              of_sup,
              of_th,
              of_time,
              of_u,
              of_var,
              of_wbr]}
    function MakeOf(C)
     {function rebuild_node(param,x){return caml_call1(C[1],x)}
      function of_element(elt){return rebuild_node(cst_of_element$0,elt)}
      function of_html(elt){return rebuild_node(cst_of_html$0,elt)}
      function of_head(elt){return rebuild_node(cst_of_head$0,elt)}
      function of_link(elt){return rebuild_node(cst_of_link$0,elt)}
      function of_title(elt){return rebuild_node(cst_of_title$0,elt)}
      function of_meta(elt){return rebuild_node(cst_of_meta$0,elt)}
      function of_base(elt){return rebuild_node(cst_of_base$0,elt)}
      function of_style(elt){return rebuild_node(cst_of_style$0,elt)}
      function of_body(elt){return rebuild_node(cst_of_body$0,elt)}
      function of_form(elt){return rebuild_node(cst_of_form$0,elt)}
      function of_optGroup(elt){return rebuild_node(cst_of_optGroup,elt)}
      function of_option(elt){return rebuild_node(cst_of_option$0,elt)}
      function of_select(elt){return rebuild_node(cst_of_select$0,elt)}
      function of_input(elt){return rebuild_node(cst_of_input$0,elt)}
      function of_textArea(elt){return rebuild_node(cst_of_textArea,elt)}
      function of_button(elt){return rebuild_node(cst_of_button$0,elt)}
      function of_label(elt){return rebuild_node(cst_of_label$0,elt)}
      function of_fieldSet(elt){return rebuild_node(cst_of_fieldSet,elt)}
      function of_legend(elt){return rebuild_node(cst_of_legend$0,elt)}
      function of_uList(elt){return rebuild_node(cst_of_uList,elt)}
      function of_oList(elt){return rebuild_node(cst_of_oList,elt)}
      function of_dList(elt){return rebuild_node(cst_of_dList,elt)}
      function of_li(elt){return rebuild_node(cst_of_li$0,elt)}
      function of_div(elt){return rebuild_node(cst_of_div$0,elt)}
      function of_paragraph(elt){return rebuild_node(cst_of_paragraph,elt)}
      function of_heading(elt){return rebuild_node(cst_of_heading$0,elt)}
      function of_quote(elt){return rebuild_node(cst_of_quote,elt)}
      function of_pre(elt){return rebuild_node(cst_of_pre$0,elt)}
      function of_br(elt){return rebuild_node(cst_of_br$0,elt)}
      function of_hr(elt){return rebuild_node(cst_of_hr$0,elt)}
      function of_mod(elt){return rebuild_node(cst_of_mod,elt)}
      function of_anchor(elt){return rebuild_node(cst_of_anchor,elt)}
      function of_image(elt){return rebuild_node(cst_of_image,elt)}
      function of_object(elt){return rebuild_node(cst_of_object$0,elt)}
      function of_param(elt){return rebuild_node(cst_of_param$0,elt)}
      function of_area(elt){return rebuild_node(cst_of_area$0,elt)}
      function of_map(elt){return rebuild_node(cst_of_map$0,elt)}
      function of_script(elt){return rebuild_node(cst_of_script$0,elt)}
      function of_embed(elt){return rebuild_node(cst_of_embed$0,elt)}
      function of_tableCell(elt){return rebuild_node(cst_of_tableCell,elt)}
      function of_tableRow(elt){return rebuild_node(cst_of_tableRow,elt)}
      function of_tableCol(elt){return rebuild_node(cst_of_tableCol,elt)}
      function of_tableSection(elt)
       {return rebuild_node(cst_of_tableSection,elt)}
      function of_tableCaption(elt)
       {return rebuild_node(cst_of_tableCaption,elt)}
      function of_table(elt){return rebuild_node(cst_of_table$0,elt)}
      function of_canvas(elt){return rebuild_node(cst_of_canvas$0,elt)}
      function of_iFrame(elt){return rebuild_node(cst_of_iFrame,elt)}
      function of_audio(elt){return rebuild_node(cst_of_audio$0,elt)}
      function of_video(elt){return rebuild_node(cst_of_video$0,elt)}
      return [0,
              of_element,
              of_html,
              of_head,
              of_link,
              of_title,
              of_meta,
              of_base,
              of_style,
              of_body,
              of_form,
              of_optGroup,
              of_option,
              of_select,
              of_input,
              of_textArea,
              of_button,
              of_label,
              of_fieldSet,
              of_legend,
              of_uList,
              of_oList,
              of_dList,
              of_li,
              of_div,
              of_paragraph,
              of_heading,
              of_quote,
              of_pre,
              of_br,
              of_hr,
              of_mod,
              of_anchor,
              of_image,
              of_object,
              of_param,
              of_area,
              of_map,
              of_script,
              of_embed,
              of_tableCell,
              of_tableRow,
              of_tableCol,
              of_tableSection,
              of_tableCaption,
              of_table,
              of_canvas,
              of_iFrame,
              of_audio,
              of_video]}
    var Js_of_ocaml_tyxml_Tyxml_cast=[0,MakeTo,MakeOf];
    caml_register_global
     (250,Js_of_ocaml_tyxml_Tyxml_cast,"Js_of_ocaml_tyxml__Tyxml_cast");
    function uri_of_string(s){return s}
    function string_of_uri(s){return s}
    function attr(name,v){return [0,name,[4,caml_call1(React[2][1],[0,v])]]}
    function float_attrib(name,value){return attr(name,value.toString())}
    function int_attrib(name,value){return attr(name,value.toString())}
    function string_attrib(name,value)
     {return attr(name,caml_jsstring_of_string(value))}
    function space_sep_attrib(name,values)
     {return attr
              (name,caml_jsstring_of_string(caml_call2(String[7],cst,values)))}
    function comma_sep_attrib(name,values)
     {return attr
              (name,
               caml_jsstring_of_string(caml_call2(String[7],cst$0,values)))}
    function event_handler_attrib(name,value){return [0,name,[0,value]]}
    function mouse_event_handler_attrib(name,value){return [0,name,[1,value]]}
    function keyboard_event_handler_attrib(name,value)
     {return [0,name,[2,value]]}
    function touch_event_handler_attrib(name,value){return [0,name,[3,value]]}
    function uri_attrib(name,value)
     {return attr(name,caml_jsstring_of_string(value))}
    function uris_attrib(name,values)
     {return attr
              (name,
               caml_jsstring_of_string(caml_call2(String[7],cst$1,values)))}
    function empty(param)
     {return Js_of_ocaml_Dom_html[2].createDocumentFragment()}
    function comment(c)
     {return Js_of_ocaml_Dom_html[2].createComment(caml_jsstring_of_string(c))}
    function pcdata(s)
     {return Js_of_ocaml_Dom_html[2].createTextNode
              (caml_jsstring_of_string(s))}
    function encodedpcdata(s)
     {return Js_of_ocaml_Dom_html[2].createTextNode
              (caml_jsstring_of_string(s))}
    function string_fold(s,pos,init,f)
     {var r=[0,init],_P_=caml_ml_string_length(s) - 1 | 0;
      if(! (_P_ < pos))
       {var i=pos;
        for(;;)
         {var c=caml_string_get(s,i);
          r[1] = caml_call2(f,r[1],c);
          var _Q_=i + 1 | 0;
          if(_P_ !== i){var i=_Q_;continue}
          break}}
      return r[1]}
    function invalid_entity(e)
     {var _O_=caml_call2(Stdlib_printf[4],_a_,e);
      return caml_call1(Stdlib[2],_O_)}
    function parse_int(pos,base,e)
     {return string_fold
              (e,
               pos,
               0,
               function(acc,x)
                {var switch$0=0;
                 if(65 <= x)
                  if(97 <= x)
                   if(103 <= x)
                    switch$0 = 1;
                   else
                    var match=[0,(x - 97 | 0) + 10 | 0];
                  else
                   if(71 <= x)
                    switch$0 = 1;
                   else
                    var match=[0,(x - 65 | 0) + 10 | 0];
                 else
                  {var switcher=x - 48 | 0;
                   if(9 < switcher >>> 0)
                    switch$0 = 1;
                   else
                    var match=[0,x - 48 | 0]}
                 if(switch$0)var match=0;
                 if(match)
                  {var d=match[1];
                   if(caml_call2(symbol$5,d,base))
                    return runtime.caml_mul(acc,base) + d | 0}
                 return invalid_entity(e)})}
    function entity(e)
     {var len=caml_ml_string_length(e),switch$0=0;
      if(caml_call2(symbol$10,len,1))
       {var _I_=caml_string_get(e,0);
        if(caml_call2(Char[8],_I_,35))
         {var switch$1=0;
          if(caml_call2(symbol$10,len,2))
           {var _J_=caml_string_get(e,1),switch$2=0;
            if(! caml_call2(Char[8],_J_,120))
             {var _K_=caml_string_get(e,1);
              if(! caml_call2(Char[8],_K_,88))switch$2 = 1}
            if(! switch$2){var i=parse_int(2,16,e);switch$1 = 1}}
          if(! switch$1)var i=parse_int(1,10,e);
          var str=Js_of_ocaml_Js[9].fromCharCode(i)}
        else
         switch$0 = 1}
      else
       switch$0 = 1;
      if(switch$0)
       if
        (string_fold
          (e,
           0,
           1,
           function(acc,x)
            {if(acc)
              {var _N_=x - 48 | 0,switch$0=0;
               if(42 < _N_ >>> 0)
                {if(! (25 < (_N_ - 49 | 0) >>> 0))switch$0 = 1}
               else
                if(6 < (_N_ - 10 | 0) >>> 0)switch$0 = 1;
               return switch$0?1:0}
             return acc}))
        if(caml_string_notequal(e,cst$2))
         if(caml_string_notequal(e,cst_amp))
          if(caml_string_notequal(e,cst_apos))
           if(caml_string_notequal(e,cst_gt))
            if(caml_string_notequal(e,cst_lt))
             if(caml_string_notequal(e,cst_quot))
              var
               _L_=caml_call2(Stdlib[28],e,cst$3),
               _M_=caml_jsstring_of_string(caml_call2(Stdlib[28],cst$4,_L_)),
               str=caml_call1(Js_of_ocaml_Dom_html[122],_M_);
             else
              var str='"';
            else
             var str="<";
           else
            var str=">";
          else
           var str="'";
         else
          var str="&";
        else
         var str=invalid_entity(e);
       else
        var str=invalid_entity(e);
      return Js_of_ocaml_Dom_html[2].createTextNode(str)}
    function get_prop(node,name)
     {return caml_call1(Js_of_ocaml_Js[6][5],node[name])?[0,name]:0}
    function iter_prop_protected(node,name,f)
     {var match=get_prop(node,name);
      if(match)
       {var n=match[1];
        try {var _G_=caml_call1(f,n);return _G_}catch(_H_){return 0}}
      return 0}
    function attach_attribs(node,l)
     {function _E_(param)
       {var att=param[2],n=param[1],n$0=caml_jsstring_of_string(n);
        switch(att[0])
         {case 0:
           var h=att[1];
           return node[n$0] = function(ev){return ! ! caml_call1(h,ev)};
          case 1:
           var h$0=att[1];
           return node[n$0] = function(ev){return ! ! caml_call1(h$0,ev)};
          case 2:
           var h$1=att[1];
           return node[n$0] = function(ev){return ! ! caml_call1(h$1,ev)};
          case 3:
           var h$2=att[1];
           return node[n$0] = function(ev){return ! ! caml_call1(h$2,ev)};
          default:
           var
            a=att[1],
            _F_=
             function(param)
              {if(param)
                {var v=param[1];
                 node.setAttribute(n$0,v);
                 return caml_string_notequal(n,cst_style)
                         ?iter_prop_protected
                           (node,n$0,function(name){return node[name] = v})
                         :node.style.cssText = v}
               node.removeAttribute(n$0);
               return caml_string_notequal(n,cst_style$0)
                       ?iter_prop_protected
                         (node,
                          n$0,
                          function(name){return node[name] = Js_of_ocaml_Js[1]})
                       :node.style.cssText = ""};
           caml_call3(React[2][11],0,_F_,a);
           return 0}}
      return caml_call2(Stdlib_list[15],_E_,l)}
    function leaf(opt,name)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var
       e=
        Js_of_ocaml_Dom_html[2].createElement(caml_jsstring_of_string(name));
      attach_attribs(e,a);
      return e}
    function node(opt,name,children)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var
       e=
        Js_of_ocaml_Dom_html[2].createElement(caml_jsstring_of_string(name));
      attach_attribs(e,a);
      function _D_(c){e.appendChild(c);return 0}
      caml_call2(Stdlib_list[15],_D_,children);
      return e}
    function cdata(s){return pcdata(s)}
    function cdata_script(s){return cdata(s)}
    function cdata_style(s){return cdata(s)}
    function leaf$0(opt,name)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var
       e=
        Js_of_ocaml_Dom_html[2].createElementNS
         (Js_of_ocaml_Dom_svg[1],caml_jsstring_of_string(name));
      attach_attribs(e,a);
      return e}
    function node$0(opt,name,children)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var
       e=
        Js_of_ocaml_Dom_html[2].createElementNS
         (Js_of_ocaml_Dom_svg[1],caml_jsstring_of_string(name));
      attach_attribs(e,a);
      function _C_(c){e.appendChild(c);return 0}
      caml_call2(Stdlib_list[15],_C_,children);
      return e}
    var
     Svg=
      caml_call1
       (Svg_f[1],
        [0,
         Xml_wrap[1],
         string_of_uri,
         uri_of_string,
         float_attrib,
         int_attrib,
         string_attrib,
         space_sep_attrib,
         comma_sep_attrib,
         event_handler_attrib,
         mouse_event_handler_attrib,
         keyboard_event_handler_attrib,
         touch_event_handler_attrib,
         uri_attrib,
         uris_attrib,
         empty,
         comment,
         pcdata,
         encodedpcdata,
         entity,
         leaf$0,
         node$0,
         cdata,
         cdata_script,
         cdata_style]),
     _b_=
      [0,
       Svg[2],
       Svg[3],
       Svg[4],
       Svg[5],
       Svg[6],
       Svg[7],
       Svg[8],
       Svg[9],
       Svg[10],
       Svg[11],
       Svg[12],
       Svg[13],
       Svg[14],
       Svg[15],
       Svg[16],
       Svg[17],
       Svg[18],
       Svg[19],
       Svg[20],
       Svg[21],
       Svg[22],
       Svg[23],
       Svg[24],
       Svg[25],
       Svg[26],
       Svg[27],
       Svg[28],
       Svg[29],
       Svg[30],
       Svg[31],
       Svg[32],
       Svg[33],
       Svg[34],
       Svg[35],
       Svg[36],
       Svg[37],
       Svg[38],
       Svg[39],
       Svg[40],
       Svg[41],
       Svg[42],
       Svg[43],
       Svg[44],
       Svg[45],
       Svg[46],
       Svg[47],
       Svg[48],
       Svg[49],
       Svg[50],
       Svg[51],
       Svg[52],
       Svg[53],
       Svg[54],
       Svg[55],
       Svg[56],
       Svg[57],
       Svg[58],
       Svg[59],
       Svg[60],
       Svg[61],
       Svg[62],
       Svg[63],
       Svg[64],
       Svg[65],
       Svg[66],
       Svg[67],
       Svg[68],
       Svg[69],
       Svg[70],
       Svg[71],
       Svg[72],
       Svg[73],
       Svg[74],
       Svg[75],
       Svg[76],
       Svg[77],
       Svg[78],
       Svg[79],
       Svg[80],
       Svg[81],
       Svg[82],
       Svg[83],
       Svg[84],
       Svg[85],
       Svg[86],
       Svg[87],
       Svg[88],
       Svg[89],
       Svg[90],
       Svg[91],
       Svg[92],
       Svg[93],
       Svg[94],
       Svg[95],
       Svg[96],
       Svg[97],
       Svg[98],
       Svg[99],
       Svg[100],
       Svg[101],
       Svg[102],
       Svg[103],
       Svg[104],
       Svg[105],
       Svg[106],
       Svg[107],
       Svg[108],
       Svg[109],
       Svg[110],
       Svg[111],
       Svg[112],
       Svg[113],
       Svg[114],
       Svg[115],
       Svg[116],
       Svg[117],
       Svg[118],
       Svg[119],
       Svg[120],
       Svg[121],
       Svg[122],
       Svg[123],
       Svg[124],
       Svg[125],
       Svg[126],
       Svg[127],
       Svg[128],
       Svg[129],
       Svg[130],
       Svg[131],
       Svg[132],
       Svg[133],
       Svg[134],
       Svg[135],
       Svg[136],
       Svg[137],
       Svg[138],
       Svg[139],
       Svg[140],
       Svg[141],
       Svg[142],
       Svg[143],
       Svg[144],
       Svg[145],
       Svg[146],
       Svg[147],
       Svg[148],
       Svg[149],
       Svg[150],
       Svg[151],
       Svg[152],
       Svg[153],
       Svg[154],
       Svg[155],
       Svg[156],
       Svg[157],
       Svg[158],
       Svg[159],
       Svg[160],
       Svg[161],
       Svg[162],
       Svg[163],
       Svg[164],
       Svg[165],
       Svg[166],
       Svg[167],
       Svg[168],
       Svg[169],
       Svg[170],
       Svg[171],
       Svg[172],
       Svg[173],
       Svg[174],
       Svg[175],
       Svg[176],
       Svg[177],
       Svg[178],
       Svg[179],
       Svg[180],
       Svg[181],
       Svg[182],
       Svg[183],
       Svg[184],
       Svg[185],
       Svg[186],
       Svg[187],
       Svg[188],
       Svg[189],
       Svg[190],
       Svg[191],
       Svg[192],
       Svg[193],
       Svg[194],
       Svg[195],
       Svg[196],
       Svg[197],
       Svg[198],
       Svg[199],
       Svg[200],
       Svg[201],
       Svg[202],
       Svg[203],
       Svg[204],
       Svg[205],
       Svg[206],
       Svg[207],
       Svg[208],
       Svg[209],
       Svg[210],
       Svg[211],
       Svg[212],
       Svg[213],
       Svg[214],
       Svg[215],
       Svg[216],
       Svg[217],
       Svg[218],
       Svg[219],
       Svg[220],
       Svg[221],
       Svg[222],
       Svg[223],
       Svg[224],
       Svg[225],
       Svg[226],
       Svg[227],
       Svg[228],
       Svg[229],
       Svg[230],
       Svg[231],
       Svg[232],
       Svg[233],
       Svg[234],
       Svg[235],
       Svg[236],
       Svg[237],
       Svg[238],
       Svg[239],
       Svg[240],
       Svg[241],
       Svg[242],
       Svg[243],
       Svg[244],
       Svg[245],
       Svg[246],
       Svg[247],
       Svg[248],
       Svg[249],
       Svg[250],
       Svg[251],
       Svg[252],
       Svg[253],
       Svg[254],
       Svg[255],
       Svg[256],
       Svg[257],
       Svg[258],
       Svg[259],
       Svg[260],
       Svg[261],
       Svg[262],
       Svg[263],
       Svg[264],
       Svg[265],
       Svg[266],
       Svg[267],
       Svg[268],
       Svg[269],
       Svg[270],
       Svg[271],
       Svg[272],
       Svg[273],
       Svg[274],
       Svg[275],
       Svg[276],
       Svg[277],
       Svg[278],
       Svg[279],
       Svg[280],
       Svg[281],
       Svg[282],
       Svg[283],
       Svg[284],
       Svg[285],
       Svg[286],
       Svg[287],
       Svg[288],
       Svg[289],
       Svg[290],
       Svg[291],
       Svg[292],
       Svg[293],
       Svg[294],
       Svg[295],
       Svg[296],
       Svg[297],
       Svg[298],
       Svg[299],
       Svg[300],
       Svg[301],
       Svg[302],
       Svg[303],
       Svg[304],
       Svg[305],
       Svg[306],
       Svg[307],
       Svg[308],
       Svg[309],
       Svg[310],
       Svg[311],
       Svg[312],
       Svg[313],
       Svg[314],
       Svg[315],
       Svg[316],
       Svg[317],
       Svg[318],
       Svg[319],
       Svg[320],
       Svg[321],
       Svg[322],
       Svg[323],
       Svg[324],
       Svg[325],
       Svg[326],
       Svg[327],
       Svg[328],
       Svg[329],
       Svg[330]],
     Html=
      caml_call1
       (caml_call1
         (Html_f[1],
          [0,
           Xml_wrap[1],
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style]),
        _b_),
     elt=Html[337],
     To_dom=MakeTo([0,elt]),
     elt$0=Html[335],
     Of_dom=MakeOf([0,elt$0]);
    function add_to(opt,node,content)
     {if(opt)var sth=opt[1],keep=sth;else var keep=1;
      if(1 - keep)
       {var l=node.childNodes,_w_=l.length - 1 | 0,_v_=0;
        if(! (_w_ < 0))
         {var i=_v_;
          for(;;)
           {var _x_=function(x){node.removeChild(x);return 0},_y_=l.item(i);
            caml_call2(Js_of_ocaml_Js[5][6],_y_,_x_);
            var _z_=i + 1 | 0;
            if(_w_ !== i){var i=_z_;continue}
            break}}}
      function _A_(x)
       {var _B_=caml_call1(To_dom[1],x);
        return caml_call2(Js_of_ocaml_Dom[5],node,_B_)}
      return caml_call2(Stdlib_list[15],_A_,content)}
    function id(keep,id,content)
     {var node=caml_call1(Js_of_ocaml_Dom_html[6],id);
      return add_to(keep,node,content)}
    function body(keep,content)
     {return add_to(keep,Js_of_ocaml_Dom_html[2].body,content)}
    function head(keep,content)
     {return add_to(keep,Js_of_ocaml_Dom_html[2].head,content)}
    function html(head,body)
     {if(head)
       {var h=head[1],_t_=caml_call1(To_dom[5],h);
        Js_of_ocaml_Dom_html[2].head = _t_}
      var _u_=caml_call1(To_dom[11],body);
      Js_of_ocaml_Dom_html[2].body = _u_;
      return 0}
    var return$0=React[2][1];
    function fmap(f){return caml_call2(React[2][11],0,f)}
    function nil(param){return ReactiveData[1][1]}
    var singleton=ReactiveData[1][24];
    function cons(x,xs)
     {var _s_=caml_call1(singleton,x);
      return caml_call2(ReactiveData[1][25],_s_,xs)}
    function map$0(f){return caml_call1(ReactiveData[1][9],f)}
    function append(x,y){return caml_call2(ReactiveData[1][25],x,y)}
    function insertAt(dom,i,x)
     {var nodes=dom.childNodes;
      if(caml_call2(symbol$6,i,nodes.length))
       return caml_call2(symbol$8,i,nodes.length)
               ?(dom.appendChild(x),0)
               :(dom.insertBefore(x,nodes.item(i)),0);
      throw [0,Assert_failure,_c_]}
    function removeChildren(dom)
     {for(;;)
       {var match=caml_call1(Js_of_ocaml_Js[5][10],dom.lastChild);
        if(match){var c=match[1];dom.removeChild(c);continue}
        return 0}}
    function update_children(dom,nodes)
     {removeChildren(dom);
      var _j_=0;
      function _k_(param,msg)
       {if(0 === msg[0])
         {var
           p=msg[1],
           _l_=
            function(p)
             {switch(p[0])
               {case 0:
                 var
                  x=p[2],
                  i=p[1],
                  i$0=
                   caml_call2(symbol$5,i,0)
                    ?(dom.childNodes.length + 1 | 0) + i | 0
                    :i;
                 return insertAt(dom,i$0,x);
                case 1:
                 var
                  i$1=p[1],
                  i$2=
                   caml_call2(symbol$5,i$1,0)
                    ?dom.childNodes.length + i$1 | 0
                    :i$1,
                  nodes=dom.childNodes;
                 if
                  (caml_call2(symbol$10,i$2,0)
                   &&
                   caml_call2(symbol$5,i$2,nodes.length))
                  {var
                    _n_=function(n){return caml_call2(Js_of_ocaml_Dom[4],dom,n)},
                    _o_=nodes.item(i$2);
                   return caml_call2(Js_of_ocaml_Js[5][6],_o_,_n_)}
                 throw [0,Assert_failure,_d_];
                case 2:
                 var
                  x$0=p[2],
                  i$3=p[1],
                  i$4=
                   caml_call2(symbol$5,i$3,0)
                    ?dom.childNodes.length + i$3 | 0
                    :i$3,
                  _p_=dom.childNodes.item(i$4),
                  match=caml_call1(Js_of_ocaml_Js[5][10],_p_);
                 if(match)
                  {var old=match[1];dom.replaceChild(x$0,old);return 0}
                 throw [0,Assert_failure,_e_];
                default:
                 var
                  move=p[2],
                  i$5=p[1],
                  i$6=
                   caml_call2(symbol$5,i$5,0)
                    ?dom.childNodes.length + i$5 | 0
                    :i$5;
                 if(caml_call2(symbol$8,move,0))return 0;
                 var
                  _q_=dom.childNodes.item(i$6),
                  match$0=caml_call1(Js_of_ocaml_Js[5][10],_q_);
                 if(match$0)
                  {var
                    i$7=match$0[1],
                    _r_=caml_call2(symbol$9,move,0)?move + 1 | 0:move;
                   return insertAt(dom,i$6 + _r_ | 0,i$7)}
                 throw [0,Assert_failure,_f_]}};
          return caml_call2(Stdlib_list[15],_l_,p)}
        var l=msg[1];
        removeChildren(dom);
        function _m_(l){dom.appendChild(l);return 0}
        return caml_call2(Stdlib_list[15],_m_,l)}
      caml_call3(ReactiveData[1][11],_k_,nodes,_j_);
      return 0}
    function filter_attrib(param,on)
     {var a=param[2],name=param[1];
      if(4 === a[0])
       {var a$0=a[1],_i_=function(on,a){return on?a:0};
        return [0,name,[4,caml_call4(React[2][27],0,_i_,on,a$0)]]}
      throw [0,Stdlib[6],cst_filter_attrib_not_implemen]}
    function attr$0(name,f,s)
     {var a=caml_call1(fmap(f),s);return [0,name,[4,a]]}
    function float_attrib$0(name,s)
     {return attr$0(name,function(f){return [0,f.toString()]},s)}
    function int_attrib$0(name,s)
     {return attr$0(name,function(f){return [0,f.toString()]},s)}
    function string_attrib$0(name,s)
     {return attr$0(name,function(f){return [0,caml_jsstring_of_string(f)]},s)}
    function space_sep_attrib$0(name,s)
     {return attr$0
              (name,
               function(f)
                {return [0,
                         caml_jsstring_of_string(caml_call2(String[7],cst$5,f))]},
               s)}
    function comma_sep_attrib$0(name,s)
     {return attr$0
              (name,
               function(f)
                {return [0,
                         caml_jsstring_of_string(caml_call2(String[7],cst$6,f))]},
               s)}
    function event_handler_attrib$0(name,s)
     {return event_handler_attrib(name,s)}
    function mouse_event_handler_attrib$0(name,s)
     {return mouse_event_handler_attrib(name,s)}
    function keyboard_event_handler_attrib$0(name,s)
     {return keyboard_event_handler_attrib(name,s)}
    function touch_event_handler_attrib$0(name,s)
     {return touch_event_handler_attrib(name,s)}
    function uri_attrib$0(name,s)
     {return attr$0(name,function(f){return [0,caml_jsstring_of_string(f)]},s)}
    function uris_attrib$0(name,s)
     {return attr$0
              (name,
               function(f)
                {return [0,
                         caml_jsstring_of_string(caml_call2(String[7],cst$7,f))]},
               s)}
    function pcdata$0(s)
     {var e=Js_of_ocaml_Dom_html[2].createTextNode("");
      function _h_(s){return e.data = caml_jsstring_of_string(s)}
      caml_call3(React[2][11],0,_h_,s);
      return e}
    function encodedpcdata$0(s){return pcdata$0(s)}
    function entity$0(s){return entity(s)}
    function node$1(opt,name,l)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var
       e=
        Js_of_ocaml_Dom_html[2].createElement(caml_jsstring_of_string(name));
      attach_attribs(e,a);
      update_children(e,l);
      return e}
    function node$2(opt,name,l)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var
       e=
        Js_of_ocaml_Dom_html[2].createElementNS
         (Js_of_ocaml_Dom_svg[1],caml_jsstring_of_string(name));
      attach_attribs(e,a);
      update_children(e,l);
      return e}
    var
     Svg$0=
      caml_call1
       (Svg_f[1],
        [0,
         [0,return$0,fmap,nil,singleton,cons,append,map$0],
         string_of_uri,
         uri_of_string,
         float_attrib$0,
         int_attrib$0,
         string_attrib$0,
         space_sep_attrib$0,
         comma_sep_attrib$0,
         event_handler_attrib$0,
         mouse_event_handler_attrib$0,
         keyboard_event_handler_attrib$0,
         touch_event_handler_attrib$0,
         uri_attrib$0,
         uris_attrib$0,
         empty,
         comment,
         pcdata$0,
         encodedpcdata$0,
         entity$0,
         leaf$0,
         node$2,
         cdata,
         cdata_script,
         cdata_style]),
     _g_=
      [0,
       Svg$0[2],
       Svg$0[3],
       Svg$0[4],
       Svg$0[5],
       Svg$0[6],
       Svg$0[7],
       Svg$0[8],
       Svg$0[9],
       Svg$0[10],
       Svg$0[11],
       Svg$0[12],
       Svg$0[13],
       Svg$0[14],
       Svg$0[15],
       Svg$0[16],
       Svg$0[17],
       Svg$0[18],
       Svg$0[19],
       Svg$0[20],
       Svg$0[21],
       Svg$0[22],
       Svg$0[23],
       Svg$0[24],
       Svg$0[25],
       Svg$0[26],
       Svg$0[27],
       Svg$0[28],
       Svg$0[29],
       Svg$0[30],
       Svg$0[31],
       Svg$0[32],
       Svg$0[33],
       Svg$0[34],
       Svg$0[35],
       Svg$0[36],
       Svg$0[37],
       Svg$0[38],
       Svg$0[39],
       Svg$0[40],
       Svg$0[41],
       Svg$0[42],
       Svg$0[43],
       Svg$0[44],
       Svg$0[45],
       Svg$0[46],
       Svg$0[47],
       Svg$0[48],
       Svg$0[49],
       Svg$0[50],
       Svg$0[51],
       Svg$0[52],
       Svg$0[53],
       Svg$0[54],
       Svg$0[55],
       Svg$0[56],
       Svg$0[57],
       Svg$0[58],
       Svg$0[59],
       Svg$0[60],
       Svg$0[61],
       Svg$0[62],
       Svg$0[63],
       Svg$0[64],
       Svg$0[65],
       Svg$0[66],
       Svg$0[67],
       Svg$0[68],
       Svg$0[69],
       Svg$0[70],
       Svg$0[71],
       Svg$0[72],
       Svg$0[73],
       Svg$0[74],
       Svg$0[75],
       Svg$0[76],
       Svg$0[77],
       Svg$0[78],
       Svg$0[79],
       Svg$0[80],
       Svg$0[81],
       Svg$0[82],
       Svg$0[83],
       Svg$0[84],
       Svg$0[85],
       Svg$0[86],
       Svg$0[87],
       Svg$0[88],
       Svg$0[89],
       Svg$0[90],
       Svg$0[91],
       Svg$0[92],
       Svg$0[93],
       Svg$0[94],
       Svg$0[95],
       Svg$0[96],
       Svg$0[97],
       Svg$0[98],
       Svg$0[99],
       Svg$0[100],
       Svg$0[101],
       Svg$0[102],
       Svg$0[103],
       Svg$0[104],
       Svg$0[105],
       Svg$0[106],
       Svg$0[107],
       Svg$0[108],
       Svg$0[109],
       Svg$0[110],
       Svg$0[111],
       Svg$0[112],
       Svg$0[113],
       Svg$0[114],
       Svg$0[115],
       Svg$0[116],
       Svg$0[117],
       Svg$0[118],
       Svg$0[119],
       Svg$0[120],
       Svg$0[121],
       Svg$0[122],
       Svg$0[123],
       Svg$0[124],
       Svg$0[125],
       Svg$0[126],
       Svg$0[127],
       Svg$0[128],
       Svg$0[129],
       Svg$0[130],
       Svg$0[131],
       Svg$0[132],
       Svg$0[133],
       Svg$0[134],
       Svg$0[135],
       Svg$0[136],
       Svg$0[137],
       Svg$0[138],
       Svg$0[139],
       Svg$0[140],
       Svg$0[141],
       Svg$0[142],
       Svg$0[143],
       Svg$0[144],
       Svg$0[145],
       Svg$0[146],
       Svg$0[147],
       Svg$0[148],
       Svg$0[149],
       Svg$0[150],
       Svg$0[151],
       Svg$0[152],
       Svg$0[153],
       Svg$0[154],
       Svg$0[155],
       Svg$0[156],
       Svg$0[157],
       Svg$0[158],
       Svg$0[159],
       Svg$0[160],
       Svg$0[161],
       Svg$0[162],
       Svg$0[163],
       Svg$0[164],
       Svg$0[165],
       Svg$0[166],
       Svg$0[167],
       Svg$0[168],
       Svg$0[169],
       Svg$0[170],
       Svg$0[171],
       Svg$0[172],
       Svg$0[173],
       Svg$0[174],
       Svg$0[175],
       Svg$0[176],
       Svg$0[177],
       Svg$0[178],
       Svg$0[179],
       Svg$0[180],
       Svg$0[181],
       Svg$0[182],
       Svg$0[183],
       Svg$0[184],
       Svg$0[185],
       Svg$0[186],
       Svg$0[187],
       Svg$0[188],
       Svg$0[189],
       Svg$0[190],
       Svg$0[191],
       Svg$0[192],
       Svg$0[193],
       Svg$0[194],
       Svg$0[195],
       Svg$0[196],
       Svg$0[197],
       Svg$0[198],
       Svg$0[199],
       Svg$0[200],
       Svg$0[201],
       Svg$0[202],
       Svg$0[203],
       Svg$0[204],
       Svg$0[205],
       Svg$0[206],
       Svg$0[207],
       Svg$0[208],
       Svg$0[209],
       Svg$0[210],
       Svg$0[211],
       Svg$0[212],
       Svg$0[213],
       Svg$0[214],
       Svg$0[215],
       Svg$0[216],
       Svg$0[217],
       Svg$0[218],
       Svg$0[219],
       Svg$0[220],
       Svg$0[221],
       Svg$0[222],
       Svg$0[223],
       Svg$0[224],
       Svg$0[225],
       Svg$0[226],
       Svg$0[227],
       Svg$0[228],
       Svg$0[229],
       Svg$0[230],
       Svg$0[231],
       Svg$0[232],
       Svg$0[233],
       Svg$0[234],
       Svg$0[235],
       Svg$0[236],
       Svg$0[237],
       Svg$0[238],
       Svg$0[239],
       Svg$0[240],
       Svg$0[241],
       Svg$0[242],
       Svg$0[243],
       Svg$0[244],
       Svg$0[245],
       Svg$0[246],
       Svg$0[247],
       Svg$0[248],
       Svg$0[249],
       Svg$0[250],
       Svg$0[251],
       Svg$0[252],
       Svg$0[253],
       Svg$0[254],
       Svg$0[255],
       Svg$0[256],
       Svg$0[257],
       Svg$0[258],
       Svg$0[259],
       Svg$0[260],
       Svg$0[261],
       Svg$0[262],
       Svg$0[263],
       Svg$0[264],
       Svg$0[265],
       Svg$0[266],
       Svg$0[267],
       Svg$0[268],
       Svg$0[269],
       Svg$0[270],
       Svg$0[271],
       Svg$0[272],
       Svg$0[273],
       Svg$0[274],
       Svg$0[275],
       Svg$0[276],
       Svg$0[277],
       Svg$0[278],
       Svg$0[279],
       Svg$0[280],
       Svg$0[281],
       Svg$0[282],
       Svg$0[283],
       Svg$0[284],
       Svg$0[285],
       Svg$0[286],
       Svg$0[287],
       Svg$0[288],
       Svg$0[289],
       Svg$0[290],
       Svg$0[291],
       Svg$0[292],
       Svg$0[293],
       Svg$0[294],
       Svg$0[295],
       Svg$0[296],
       Svg$0[297],
       Svg$0[298],
       Svg$0[299],
       Svg$0[300],
       Svg$0[301],
       Svg$0[302],
       Svg$0[303],
       Svg$0[304],
       Svg$0[305],
       Svg$0[306],
       Svg$0[307],
       Svg$0[308],
       Svg$0[309],
       Svg$0[310],
       Svg$0[311],
       Svg$0[312],
       Svg$0[313],
       Svg$0[314],
       Svg$0[315],
       Svg$0[316],
       Svg$0[317],
       Svg$0[318],
       Svg$0[319],
       Svg$0[320],
       Svg$0[321],
       Svg$0[322],
       Svg$0[323],
       Svg$0[324],
       Svg$0[325],
       Svg$0[326],
       Svg$0[327],
       Svg$0[328],
       Svg$0[329],
       Svg$0[330]],
     Html$0=
      caml_call1
       (caml_call1
         (Html_f[1],
          [0,
           [0,return$0,fmap,nil,singleton,cons,append,map$0],
           string_of_uri,
           uri_of_string,
           float_attrib$0,
           int_attrib$0,
           string_attrib$0,
           space_sep_attrib$0,
           comma_sep_attrib$0,
           event_handler_attrib$0,
           mouse_event_handler_attrib$0,
           keyboard_event_handler_attrib$0,
           touch_event_handler_attrib$0,
           uri_attrib$0,
           uris_attrib$0,
           empty,
           comment,
           pcdata$0,
           encodedpcdata$0,
           entity$0,
           leaf,
           node$1,
           cdata,
           cdata_script,
           cdata_style]),
        _g_),
     Js_of_ocaml_tyxml_Tyxml_js=
      [0,
       [0,
        Xml_wrap[1],
        string_of_uri,
        uri_of_string,
        float_attrib,
        int_attrib,
        string_attrib,
        space_sep_attrib,
        comma_sep_attrib,
        event_handler_attrib,
        mouse_event_handler_attrib,
        keyboard_event_handler_attrib,
        touch_event_handler_attrib,
        uri_attrib,
        uris_attrib,
        empty,
        comment,
        pcdata,
        encodedpcdata,
        entity,
        leaf,
        node,
        cdata,
        cdata_script,
        cdata_style],
       Svg,
       Html,
       Html,
       [0,html,body,head,id],
       [0,return$0,fmap,nil,singleton,cons,append,map$0],
       [0,update_children],
       [0,
        [0,
         [0,return$0,fmap,nil,singleton,cons,append,map$0],
         string_of_uri,
         uri_of_string,
         float_attrib$0,
         int_attrib$0,
         string_attrib$0,
         space_sep_attrib$0,
         comma_sep_attrib$0,
         event_handler_attrib$0,
         mouse_event_handler_attrib$0,
         keyboard_event_handler_attrib$0,
         touch_event_handler_attrib$0,
         uri_attrib$0,
         uris_attrib$0,
         empty,
         comment,
         pcdata$0,
         encodedpcdata$0,
         entity$0,
         leaf,
         node$1,
         cdata,
         cdata_script,
         cdata_style],
        Svg$0,
        Html$0,
        filter_attrib,
        Html$0],
       To_dom,
       Of_dom];
    caml_register_global
     (264,Js_of_ocaml_tyxml_Tyxml_js,"Js_of_ocaml_tyxml__Tyxml_js");
    var Js_of_ocaml_tyxml$0=[0];
    caml_register_global(265,Js_of_ocaml_tyxml$0,"Js_of_ocaml_tyxml");
    return}
  (function(){return this}()));


//# 1 "../../.js/base64/base64.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_bytes_set16=runtime.caml_bytes_set16,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_register_global=runtime.caml_register_global,
     caml_string_get16=runtime.caml_string_get16,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_unsafe_get=runtime.caml_string_unsafe_get,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Length_of_alphabet_must_be=
      caml_string_of_jsbytes("Length of alphabet must be 64"),
     cst_Alphabet_can_not_contain_p=
      caml_string_of_jsbytes("Alphabet can not contain padding character"),
     cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ=
      caml_string_of_jsbytes
       ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),
     cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ$0=
      caml_string_of_jsbytes
       ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),
     cst_Base64_Out_of_bounds=caml_string_of_jsbytes("Base64.Out_of_bounds"),
     cst_Base64_Too_much_input=caml_string_of_jsbytes("Base64.Too_much_input"),
     Stdlib=global_data.Stdlib,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_bytes=global_data.Stdlib__bytes,
     Assert_failure=global_data.Assert_failure,
     Stdlib_format=global_data.Stdlib__format,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_char=global_data.Stdlib__char,
     Stdlib_sys=global_data.Stdlib__sys,
     Base64=[0];
    caml_register_global(12,Base64,"Base64__");
    var Base64_Unsafe=[0];
    caml_register_global(13,Base64_Unsafe,"Base64__Unsafe");
    var
     _e_=
      [0,
       [11,caml_string_of_jsbytes("Invalid bounds"),0],
       caml_string_of_jsbytes("Invalid bounds")],
     _f_=
      [0,
       [11,caml_string_of_jsbytes("Wrong padding"),0],
       caml_string_of_jsbytes("Wrong padding")],
     _g_=
      [0,
       [11,caml_string_of_jsbytes("Malformed input"),0],
       caml_string_of_jsbytes("Malformed input")],
     _h_=
      [0,
       [11,caml_string_of_jsbytes("Too much input"),0],
       caml_string_of_jsbytes("Too much input")],
     _c_=[0,caml_string_of_jsbytes("src/base64.ml"),135,15],
     _b_=
      [0,
       [11,caml_string_of_jsbytes("Invalid bounds"),0],
       caml_string_of_jsbytes("Invalid bounds")];
    function symbol(x,y)
     {if(y < 1)throw Stdlib[13];
      return 0 < x?1 + runtime.caml_div(x - 1 | 0,y) | 0:0}
    function unsafe_set_uint8(t,off,v)
     {runtime.caml_bytes_unsafe_set(t,off,caml_call1(Stdlib_char[1],v));
      return 0}
    function make_alphabet(alphabet)
     {if(64 !== caml_ml_string_length(alphabet))
       caml_call1(Stdlib[1],cst_Length_of_alphabet_must_be);
      if(caml_call2(Stdlib_string[22],alphabet,61))
       caml_call1(Stdlib[1],cst_Alphabet_can_not_contain_p);
      function _z_(i){return runtime.caml_string_get(alphabet,i)}
      var
       emap=caml_call2(Stdlib_array[2],caml_ml_string_length(alphabet),_z_),
       dmap=runtime.caml_make_vect(256,-1);
      function _A_(idx,chr)
       {runtime.caml_check_bound(dmap,chr)[1 + chr] = idx;return 0}
      caml_call2(Stdlib_string[9],_A_,alphabet);
      return [0,emap,dmap]}
    function length_alphabet(param){var emap=param[1];return emap.length - 1}
    function alphabet(param){var emap=param[1];return emap}
    var
     default_alphabet=make_alphabet(cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ),
     uri_safe_alphabet=make_alphabet(cst_ABCDEFGHIJKLMNOPQRSTUVWXYZ$0),
     unsafe_set_be_uint16=
      Stdlib_sys[11]
       ?caml_bytes_set16
       :function(t,off,v)
         {return caml_bytes_set16(t,off,runtime.caml_bswap16(v))},
     Out_of_bounds=[248,cst_Base64_Out_of_bounds,caml_fresh_oo_id(0)],
     Too_much_input=[248,cst_Base64_Too_much_input,caml_fresh_oo_id(0)];
    function get_uint8(t,off)
     {var _x_=off < 0?1:0,_y_=_x_ || (caml_ml_string_length(t) <= off?1:0);
      if(_y_)throw Out_of_bounds;
      return caml_string_unsafe_get(t,off)}
    var padding=61;
    function error_msgf(fmt)
     {function _w_(err){return [1,[0,3854881,err]]}
      return caml_call2(Stdlib_format[133],_w_,fmt)}
    function _a_(pad,param,opt,len,input)
     {var emap=param[1];
      if(opt)var sth=opt[1],off=sth;else var off=0;
      if(len)
       var len$0=len[1],len$1=len$0;
      else
       var len$1=caml_ml_string_length(input) - off | 0;
      if
       (0
        <=
        len$1
        &&
        0
        <=
        off
        &&
        !
        ((caml_ml_string_length(input) - len$1 | 0) < off))
       {var
         n=symbol(len$1,3) * 4 | 0,
         res=caml_create_bytes(n),
         emap$0=function(i){return emap[1 + i]},
         emit=
          function(b1,b2,b3,i)
           {var _u_=emap$0((b1 << 4 | b2 >>> 4 | 0) & 63);
            unsafe_set_be_uint16(res,i,emap$0((b1 >>> 2 | 0) & 63) << 8 | _u_);
            var _v_=emap$0(b3 & 63);
            return unsafe_set_be_uint16
                    (res,
                     i + 2 | 0,
                     emap$0((b2 << 2 | b3 >>> 6 | 0) & 63) << 8 | _v_)},
         j=0,
         i=0;
        for(;;)
         {if(i !== len$1)
           if(i === (len$1 - 1 | 0))
            emit(caml_string_unsafe_get(input,off + i | 0),0,0,j);
           else
            {if(i !== (len$1 - 2 | 0))
              {emit
                (caml_string_unsafe_get(input,off + i | 0),
                 caml_string_unsafe_get(input,(off + i | 0) + 1 | 0),
                 caml_string_unsafe_get(input,(off + i | 0) + 2 | 0),
                 j);
               var i$0=i + 3 | 0,j$0=j + 4 | 0,j=j$0,i=i$0;
               continue}
             emit
              (caml_string_unsafe_get(input,off + i | 0),
               caml_string_unsafe_get(input,(off + i | 0) + 1 | 0),
               0,
               j)}
          var i$3=(3 - (len$1 % 3 | 0) | 0) % 3 | 0;
          if(pad)
           {var i$1=i$3;
            for(;;)
             {if(0 === i$1)
               return [0,[0,caml_call1(Stdlib_bytes[42],res),0,n]];
              unsafe_set_uint8(res,n - i$1 | 0,padding);
              var i$2=i$1 - 1 | 0,i$1=i$2;
              continue}}
          return [0,[0,caml_call1(Stdlib_bytes[42],res),0,n - i$3 | 0]]}}
      return error_msgf(_b_)}
    function encode(opt,_t_,off,len,input)
     {if(opt)var sth=opt[1],pad=sth;else var pad=1;
      if(_t_)
       var sth$0=_t_[1],alphabet=sth$0;
      else
       var alphabet=default_alphabet;
      var err=_a_(pad,alphabet,off,len,input);
      if(0 === err[0])
       {var match=err[1],len$0=match[3],off$0=match[2],res=match[1];
        return [0,caml_call3(Stdlib_string[4],res,off$0,len$0)]}
      return err}
    function encode_string(pad,alphabet,input)
     {var match=encode(pad,alphabet,0,0,input);
      if(0 === match[0]){var res=match[1];return res}
      throw [0,Assert_failure,_c_]}
    function encode_sub(opt,_s_,off,len,input)
     {if(opt)var sth=opt[1],pad=sth;else var pad=1;
      if(_s_)
       var sth$0=_s_[1],alphabet=sth$0;
      else
       var alphabet=default_alphabet;
      return _a_(pad,alphabet,off,len,input)}
    function encode_exn(pad,alphabet,off,len,input)
     {var match=encode(pad,alphabet,off,len,input);
      if(0 === match[0]){var v=match[1];return v}
      var match$0=match[1],err=match$0[2];
      return caml_call1(Stdlib[1],err)}
    function _d_(opt,param,_i_,len,input)
     {var dmap=param[2];
      if(opt)var sth=opt[1],pad=sth;else var pad=1;
      if(_i_)var sth$0=_i_[1],off=sth$0;else var off=0;
      if(len)
       var len$0=len[1],len$1=len$0;
      else
       var len$1=caml_ml_string_length(input) - off | 0;
      if
       (0
        <=
        len$1
        &&
        0
        <=
        off
        &&
        !
        ((caml_ml_string_length(input) - len$1 | 0) < off))
       {var
         n=symbol(len$1,4) * 4 | 0,
         n$0=symbol(n,4) * 3 | 0,
         t=caml_create_bytes(n$0),
         get_uint8_or_padding=
          pad
           ?function(t,i)
             {if(len$1 <= i)throw Out_of_bounds;
              return get_uint8(t,off + i | 0)}
           :function(t,i)
             {try
               {var _q_=i < len$1?get_uint8(t,off + i | 0):padding;return _q_}
              catch(_r_)
               {_r_ = caml_wrap_exception(_r_);
                if(_r_ === Out_of_bounds)return padding;
                throw _r_}},
         emit=
          function(a,b,c,d,j)
           {var x=a << 18 | b << 12 | c << 6 | d,v=x >>> 8 | 0,switch$0=0;
            if(0 <= j && ! (caml_ml_bytes_length(t) < (j + 1 | 0)))
             {var switch$1=0;
              if(0 <= j && ! (caml_ml_bytes_length(t) < (j + 2 | 0)))
               {unsafe_set_be_uint16(t,j,v);switch$1 = 1}
              if(! switch$1)unsafe_set_uint8(t,j,v >>> 8 | 0)}
            else
             switch$0 = 1;
            var v$0=x & 255,off=j + 2 | 0;
            if(0 <= off && ! (caml_ml_bytes_length(t) <= off))
             return unsafe_set_uint8(t,off,v$0);
            return 0},
         dmap$0=
          function(i){var x=dmap[1 + i];if(x === -1)throw Stdlib[8];return x},
         only_padding=
          function(pad,idx)
           {var pad$0=[0,pad + 3 | 0],idx$0=[0,idx];
            for(;;)
             {if((idx$0[1] + 4 | 0) < len$1)
               {var
                 _o_=15677 !== caml_string_get16(input,off + idx$0[1] | 0)?1:0,
                 _p_=
                  _o_
                  ||
                  (15677
                    !==
                    caml_string_get16(input,(off + idx$0[1] | 0) + 2 | 0)
                    ?1
                    :0);
                if(_p_)throw Stdlib[8];
                idx$0[1] = idx$0[1] + 4 | 0;
                pad$0[1] = pad$0[1] + 3 | 0;
                continue}
              for(;;)
               {if(idx$0[1] < len$1)
                 {if(caml_string_unsafe_get(input,off + idx$0[1] | 0) !== 61)
                   throw Stdlib[8];
                  idx$0[1]++;
                  continue}
                return pad$0[1]}}};
        try
         {var j=0,i=0;
          for(;;)
           {if(i === n)
             var pad$5=0;
            else
             {var x=get_uint8_or_padding(input,i + 3 | 0);
              try
               {var pad$4=0,_m_=dmap$0(x),d=_m_,pad$0=pad$4}
              catch(exn$0)
               {exn$0 = caml_wrap_exception(exn$0);
                var switch$0=0;
                if(exn$0 === Stdlib[8] && x === 61)
                 var d=0,pad$0=1;
                else
                 switch$0 = 1;
                if(switch$0)throw exn$0;
                var exn=exn$0}
              var x$0=get_uint8_or_padding(input,i + 2 | 0);
              try
               {var _l_=dmap$0(x$0),c=_l_,pad$1=pad$0}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                var switch$1=0;
                if(exn === Stdlib[8] && x$0 === 61 && 1 === pad$0)
                 {var c=0,pad$1=2;switch$1 = 1}
                if(! switch$1)throw exn;
                var exn$0=exn}
              var x$1=get_uint8_or_padding(input,i + 1 | 0);
              try
               {var _k_=dmap$0(x$1),b=_k_,pad$2=pad$1}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                var switch$2=0;
                if(exn === Stdlib[8] && x$1 === 61 && 2 === pad$1)
                 {var b=0,pad$2=3;switch$2 = 1}
                if(! switch$2)throw exn;
                var exn$1=exn}
              var x$2=get_uint8_or_padding(input,i);
              try
               {var _j_=dmap$0(x$2),a=_j_,pad$3=pad$2}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                var switch$3=0;
                if(exn === Stdlib[8] && x$2 === 61 && 3 === pad$2)
                 {var a=0,pad$3=4;switch$3 = 1}
                if(! switch$3)throw exn;
                var exn$2=exn}
              emit(a,b,c,d,j);
              if((i + 4 | 0) === n)
               var pad$5=0 === pad$3?0:4 === pad$3?3:pad$3;
              else
               {if(0 === pad$3)
                 {var i$0=i + 4 | 0,j$0=j + 3 | 0,j=j$0,i=i$0;continue}
                if(4 === pad$3)
                 var pad$5=only_padding(3,i + 4 | 0);
                else
                 {if(1 === pad)throw Too_much_input;
                  var pad$5=only_padding(pad$3,i + 4 | 0)}}}
            break}}
        catch(_n_)
         {_n_ = caml_wrap_exception(_n_);
          if(_n_ === Out_of_bounds)return error_msgf(_f_);
          if(_n_ === Stdlib[8])return error_msgf(_g_);
          if(_n_ === Too_much_input)return error_msgf(_h_);
          throw _n_}
        return 0 === pad$5
                ?[0,[0,caml_call1(Stdlib_bytes[42],t),0,n$0]]
                :[0,[0,caml_call1(Stdlib_bytes[42],t),0,n$0 - pad$5 | 0]]}
      return error_msgf(_e_)}
    function decode(pad,opt,off,len,input)
     {if(opt)var sth=opt[1],alphabet=sth;else var alphabet=default_alphabet;
      var err=_d_(pad,alphabet,off,len,input);
      if(0 === err[0])
       {var match=err[1],len$0=match[3],off$0=match[2],res=match[1];
        return [0,caml_call3(Stdlib_string[4],res,off$0,len$0)]}
      return err}
    function decode_sub(pad,opt,off,len,input)
     {if(opt)var sth=opt[1],alphabet=sth;else var alphabet=default_alphabet;
      return _d_(pad,alphabet,off,len,input)}
    function decode_exn(pad,alphabet,off,len,input)
     {var match=decode(pad,alphabet,off,len,input);
      if(0 === match[0]){var res=match[1];return res}
      var match$0=match[1],err=match$0[2];
      return caml_call1(Stdlib[1],err)}
    var
     Base64$0=
      [0,
       default_alphabet,
       uri_safe_alphabet,
       make_alphabet,
       length_alphabet,
       alphabet,
       decode_exn,
       decode_sub,
       decode,
       encode,
       encode_string,
       encode_sub,
       encode_exn];
    caml_register_global(22,Base64$0,"Base64");
    return}
  (function(){return this}()));


//# 1 ".app.eobjs/byte/dune__exe__App.cmo.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$0=caml_string_of_jsbytes(""),
     liesInput=caml_string_of_jsbytes("liesInput"),
     lieCodeInput=caml_string_of_jsbytes("lieCodeInput"),
     truthsInput=caml_string_of_jsbytes("truthsInput"),
     cst=caml_string_of_jsbytes(""),
     cst_Lie_code_to_send_click_to_=
      caml_string_of_jsbytes("Lie code to send: (click to select all)"),
     cst_Encode=caml_string_of_jsbytes("Encode"),
     cst$1=caml_string_of_jsbytes(""),
     cst_Lie_s_to_send_newline_sepa=
      caml_string_of_jsbytes("Lie(s) to send, newline-separated:"),
     cst_Would_I_Lie_to_You=caml_string_of_jsbytes("Would I Lie to You?"),
     cst$2=caml_string_of_jsbytes(""),
     cst_Truth_s_about_yourself_new=
      caml_string_of_jsbytes("Truth(s) about yourself, newline-separated:"),
     cst_Lie_code_you_received=
      caml_string_of_jsbytes("Lie code you received:"),
     cst_Would_I_Lie_to_You$0=caml_string_of_jsbytes("Would I Lie to You?"),
     cst_app=caml_string_of_jsbytes("app"),
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib=global_data.Stdlib,
     Stdlib_random=global_data.Stdlib__random,
     Js_of_ocaml_Dom_html=global_data.Js_of_ocaml__Dom_html,
     Js_of_ocaml_Js=global_data.Js_of_ocaml__Js,
     Base64=global_data.Base64,
     React=global_data.React,
     Js_of_ocaml_tyxml_Tyxml_js=global_data.Js_of_ocaml_tyxml__Tyxml_js,
     Js_of_ocaml_Dom=global_data.Js_of_ocaml__Dom,
     Ids=[0,liesInput,lieCodeInput,truthsInput],
     _f_=[0,1,caml_string_of_jsbytes("")],
     _j_=
      [0,
       caml_string_of_jsbytes("user-select-all"),
       [0,
        caml_string_of_jsbytes("bg-light"),
        [0,
         caml_string_of_jsbytes("rounded"),
         [0,
          caml_string_of_jsbytes("p-3"),
          [0,caml_string_of_jsbytes("overflow-auto"),0]]]]],
     _r_=
      [0,
       caml_string_of_jsbytes("btn"),
       [0,caml_string_of_jsbytes("btn-primary"),0]],
     _u_=[0,caml_string_of_jsbytes("input-group-append"),0],
     _z_=[0,caml_string_of_jsbytes("form-control"),0],
     _D_=[0,caml_string_of_jsbytes("input-group"),0],
     _J_=[0,caml_string_of_jsbytes("my-3"),0],
     _U_=
      [0,
       caml_string_of_jsbytes("btn"),
       [0,caml_string_of_jsbytes("btn-primary"),0]],
     _X_=
      [0,
       caml_string_of_jsbytes("m-3"),
       [0,caml_string_of_jsbytes("text-center"),0]],
     _aa_=[0,caml_string_of_jsbytes("form-control"),0],
     _ah_=[0,caml_string_of_jsbytes("form-control"),0],
     _ao_=[0,caml_string_of_jsbytes("my-3"),0],
     _at_=[0,caml_string_of_jsbytes("text-center"),0],
     _aw_=[0,caml_string_of_jsbytes("col-md-8"),0],
     _a_=Base64[10],
     _b_=[0,Base64[2]];
    function encode(_aP_){return caml_call2(_a_,_aP_,_b_)}
    var _c_=Base64[6],_d_=[0,Base64[2]];
    function decode(_aO_){return caml_call2(_c_,_aO_,_d_)}
    var
     match=caml_call2(React[2][2],0,cst),
     set_text_to_encode=match[2],
     text_to_encode_s=match[1];
    function _e_(eta){return caml_call1(encode(0),eta)}
    var
     encoded_text_s=caml_call3(React[2][11],0,_e_,text_to_encode_s),
     match$0=caml_call2(React[2][2],0,_f_),
     _g_=match$0[2],
     _h_=match$0[1];
    function value_of_input(id)
     {var
       _aL_=caml_call1(Js_of_ocaml_Dom_html[4],id),
       input_opt=caml_call1(Js_of_ocaml_Dom_html[117][33],_aL_);
      function _aM_(input){return caml_string_of_jsstring(input.value)}
      var value_opt=caml_call2(Js_of_ocaml_Js[5][3],input_opt,_aM_);
      function _aN_(param){return cst$0}
      return caml_call2(Js_of_ocaml_Js[5][8],value_opt,_aN_)}
    function value_of_textarea(id)
     {var
       _aI_=caml_call1(Js_of_ocaml_Dom_html[4],id),
       input_opt=caml_call1(Js_of_ocaml_Dom_html[117][55],_aI_);
      function _aJ_(input){return caml_string_of_jsstring(input.value)}
      var value_opt=caml_call2(Js_of_ocaml_Js[5][3],input_opt,_aJ_);
      function _aK_(param){return caml_call1(Stdlib[2],id)}
      return caml_call2(Js_of_ocaml_Js[5][8],value_opt,_aK_)}
    function encode_text_handler(param)
     {caml_call2(set_text_to_encode,0,value_of_textarea(Ids[1]));return 0}
    function wilty_handler(param)
     {var
       eta=value_of_input(Ids[2]),
       _aA_=caml_call3(decode(0),0,0,eta),
       lies=caml_call2(Stdlib_string[35],10,_aA_),
       _aB_=value_of_textarea(Ids[3]),
       truths=caml_call2(Stdlib_string[35],10,_aB_);
      function _aC_(t){return [0,1,t]}
      var _aD_=caml_call2(Stdlib_list[17],_aC_,truths);
      function _aE_(l){return [0,0,l]}
      var
       _aF_=caml_call2(Stdlib_list[17],_aE_,lies),
       lies_and_truths=caml_call2(Stdlib[37],_aF_,_aD_),
       _aG_=caml_call1(Stdlib_list[1],lies_and_truths),
       _aH_=caml_call1(Stdlib_random[5],_aG_);
      caml_call2(_g_,0,caml_call2(Stdlib_list[7],lies_and_truths,_aH_));
      return 0}
    var
     _i_=
      [0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[8][3][218],encoded_text_s),0],
     _k_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_j_),0]],
     _l_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][243],_k_,_i_),0],
     _m_=
      [0,
       caml_call1
        (Js_of_ocaml_tyxml_Tyxml_js[3][218],cst_Lie_code_to_send_click_to_),
       0],
     _n_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][243],0,_m_),_l_],
     _o_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][218],cst_Encode),0],
     _p_=
      [0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][62],encode_text_handler),0],
     _q_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][183],242538002),_p_],
     _s_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_r_),_q_]],
     _t_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][305],_s_,_o_),0],
     _v_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_u_),0]],
     _w_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][243],_v_,_t_),0],
     _x_=caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][218],cst$1),
     _y_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][172],3),0],
     _A_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_z_),_y_],
     _B_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][7],Ids[1]),_A_]],
     _C_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][310],_B_,_x_),_w_],
     _E_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_D_),0]],
     _F_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][243],_E_,_C_),_n_],
     _G_=
      [0,
       caml_call1
        (Js_of_ocaml_tyxml_Tyxml_js[3][218],cst_Lie_s_to_send_newline_sepa),
       0],
     _H_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][162],Ids[1]),0]],
     _I_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][303],_H_,_G_),_F_],
     _K_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_J_),0]],
     send_lies_app=caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][243],_K_,_I_),
     _L_=0,
     _M_=0;
    function _N_(_az_){return _az_[2]}
    var
     _O_=caml_call3(React[2][11],0,_N_,_h_),
     _P_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[8][3][218],_O_),_M_],
     _Q_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][243],0,_P_),_L_],
     _R_=
      [0,
       caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][218],cst_Would_I_Lie_to_You),
       0],
     _S_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][62],wilty_handler),0],
     _T_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][183],242538002),_S_],
     _V_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_U_),_T_]],
     _W_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][305],_V_,_R_),0],
     _Y_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_X_),0]],
     _Z_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][243],_Y_,_W_),_Q_],
     ___=caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][218],cst$2),
     _$_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][172],3),0],
     _ab_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_aa_),_$_],
     _ac_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][7],Ids[3]),_ab_]],
     _ad_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][310],_ac_,___),_Z_],
     _ae_=
      [0,
       caml_call1
        (Js_of_ocaml_tyxml_Tyxml_js[3][218],cst_Truth_s_about_yourself_new),
       0],
     _af_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][162],Ids[3]),0]],
     _ag_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][303],_af_,_ae_),_ad_],
     _ai_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_ah_),0],
     _aj_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][7],Ids[2]),_ai_]],
     _ak_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][304],_aj_,0),_ag_],
     _al_=
      [0,
       caml_call1
        (Js_of_ocaml_tyxml_Tyxml_js[3][218],cst_Lie_code_you_received),
       0],
     _am_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][162],Ids[2]),0]],
     _an_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][303],_am_,_al_),_ak_],
     _ap_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_ao_),0]],
     wilty_app=caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][243],_ap_,_an_),
     _aq_=
      [0,
       send_lies_app,
       [0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][252],0,0),[0,wilty_app,0]]],
     _ar_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][300],0,_aq_),0],
     _as_=
      [0,
       caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][218],cst_Would_I_Lie_to_You$0),
       0],
     _au_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_at_),0]],
     _av_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][229],_au_,_as_),_ar_],
     _ax_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_aw_),0]],
     app=caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][243],_ax_,_av_);
    caml_call1(Stdlib_random[3],0);
    var
     app_container=caml_call1(Js_of_ocaml_Dom_html[4],cst_app),
     _ay_=caml_call1(Js_of_ocaml_tyxml_Tyxml_js[9][1],app);
    caml_call2(Js_of_ocaml_Dom[5],app_container,_ay_);
    var
     Dune_exe_App=
      [0,
       Ids,
       encode,
       decode,
       text_to_encode_s,
       set_text_to_encode,
       encoded_text_s,
       _h_,
       _g_,
       value_of_input,
       value_of_textarea,
       encode_text_handler,
       wilty_handler,
       send_lies_app,
       wilty_app,
       app];
    runtime.caml_register_global(41,Dune_exe_App,"Dune__exe__App");
    return}
  (function(){return this}()));


//# sourceMappingURL=data:application/json;base64,